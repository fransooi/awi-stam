/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/host/webFrontEnd/dialogs.css":
/*!******************************************!*\
  !*** ./src/host/webFrontEnd/dialogs.css ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/host/webFrontEnd/diskDialog.css":
/*!*********************************************!*\
  !*** ./src/host/webFrontEnd/diskDialog.css ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/host/webFrontEnd/joystickDialog.css":
/*!*************************************************!*\
  !*** ./src/host/webFrontEnd/joystickDialog.css ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/host/webFrontEnd/keyMapDialog.css":
/*!***********************************************!*\
  !*** ./src/host/webFrontEnd/keyMapDialog.css ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/host/webFrontEnd/loaderDialog.css":
/*!***********************************************!*\
  !*** ./src/host/webFrontEnd/loaderDialog.css ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/host/webFrontEnd/scopes.css":
/*!*****************************************!*\
  !*** ./src/host/webFrontEnd/scopes.css ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/host/webFrontEnd/snapshots.css":
/*!********************************************!*\
  !*** ./src/host/webFrontEnd/snapshots.css ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/host/webFrontEnd/trays.css":
/*!****************************************!*\
  !*** ./src/host/webFrontEnd/trays.css ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/debug.js":
/*!**********************!*\
  !*** ./src/debug.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $xx: () => (/* binding */ $xx),
/* harmony export */   $xxxx: () => (/* binding */ $xxxx),
/* harmony export */   petsciiToChar: () => (/* binding */ petsciiToChar),
/* harmony export */   unimplementedWarning: () => (/* binding */ unimplementedWarning),
/* harmony export */   vetAddress: () => (/* binding */ vetAddress),
/* harmony export */   xx: () => (/* binding */ xx),
/* harmony export */   xxxx: () => (/* binding */ xxxx)
/* harmony export */ });
// TODO: this belongs in tools

const petsciiToChar = (
  /* 0x00 */ "����������������" + /* 0x10 */ "����������������" +
  /* 0x20 */" !\"#$%&'()*+,-./" + /* 0x30 */ "0123456789:;<=>?" +
  /* 0x40 */ "@abcdefghijklmno" + /* 0x50 */ "pqrstuvwxyz[£]↑←" +
  /* 0x60 */ "—ABCDEFGHIJKLMNO" + /* 0x70 */ "PQRSTUVWXYZ┼▒│▒▒" +
  /* 0x80 */ "����������������" + /* 0x90 */ "����������������" +
  /* 0xa0 */ " ▌▄▔▁▎▒▕▒▒▕├▗└┐▂" + /* 0xb0 */ "┌┴┬┤▎▍▕▔▔▃✓▖▝┘▘▚" +
  /* 0xc0 */ "─ABCDEFGHIJKLMNO" + /* 0xd0 */ "PQRSTUVWXYZ┼▒│▒▒" +
  /* 0xe0 */ " ▌▄▔▁▎▒▕▒▒▕├▗└┐▂" + /* 0xf0 */ "┌┴┬┤▎▍▕▔▔▃✓▖▝┘▘▒"
);

function toHexStr(val, digits=2) {
  return val.toString(16).padStart(digits, "0");
}

const xx   = val => toHexStr(val, 2);
const xxxx = val => toHexStr(val, 4);

const $xx   = val => `\$${xx(val)}`;
const $xxxx = val => `\$${xxxx(val)}`;

function vetAddress(addr) {
  if (
    (addr !== addr) // is NaN?
    || (typeof addr !== "number")
    || (addr !== Math.floor(addr))
    || (addr < 0)
    || (addr > 0xffff)
  ) {
    throw new Error(`Invalid bus address: ${addr}`);
  }
}

const encounteredWarnings = new Set();

function unimplementedWarning(problem, details) {

  // Remove this to show warnings when the target software tries exercising
  // unimplemented hardware functionality, but you'll see lots of false
  // positives.
  return;

  if (encounteredWarnings.has(problem)) return;
  
  console.warn("Unimplemented:", problem);
  if (details) console.log(details);

  encounteredWarnings.add(problem);
}


/***/ }),

/***/ "./src/host/audio-OscillatorNode.js":
/*!******************************************!*\
  !*** ./src/host/audio-OscillatorNode.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attach: () => (/* binding */ attach)
/* harmony export */ });
/*
   SID output using the Web Audio API. Specifically, an output path built upon
   a network of OscillatorNode nodes. Maybe someday there'd be an alternative
   audio-AudioWorklet too, so to avoid confusion between the two, this file
   isn't called audio-WebAudio.
*/

const state = {
  regs: new Uint8Array(32),
  suspended: true,
};

// Square waves are as loud as it gets. Dial it down...
const MASTER_MULTIPLIER = 0.2;

// Divide hibyte/lobyte frequency by MASTER_TUNING to get Hz.
// TODO: this isn't accurate. Tables exist which could give a better number,
// eg. https://codebase64.org/doku.php?id=base:pal_frequency_table
//     https://codebase64.org/doku.php?id=base:ntsc_frequency_table
//
// Note that it's different for PAL vs NTSC
const MASTER_TUNING = 16.9;

// create web audio API context
const audioCtx = new (globalThis.AudioContext || globalThis.webkitAudioContext)();

// If the browser won't allow audio context creation immediately we'll continue
// regardless and hope that userDidInteract gets called to unblock it. If that
// doesn't happen, the emulator will slow dramatically the more the audio API
// is used.
state.suspended = (audioCtx.state === "suspended");

if (state.suspended) {
  // Listen out for events that could allow resumption (though most likely
  // it'll be the drag-and-drop that unblocks us).
  window.addEventListener(
    "load",
    () => {
      document.addEventListener("click",   userDidInteract);
      document.addEventListener("keydown", userDidInteract);
    }
  );

  // Resumption may be asynchronous, so start an interval poller that watches
  // out for it and tears down the listeners.
  const poller = setInterval(
    () => {
      if (audioCtx.state === "running") {
        state.suspended = false;
        console.log("AudioContext resumed");

        // Tear down the listeners that are trying to update `suspended`. We'll
        // still get events from drag-and-drop, but they're completely harmless.
        clearInterval(poller);
        document.removeEventListener("click",   userDidInteract);
        document.removeEventListener("keydown", userDidInteract);
      }
    },
    250
  );
}

// uiGain is the ultimate chain in the link, connecting the emulated network
// to the browser.
const uiGain = audioCtx.createGain();
uiGain.gain.value = 1;
uiGain.connect(audioCtx.destination);

// 'master' in the context of 'within the C64'
const masterGain = audioCtx.createGain();
masterGain.gain.value = 0;
masterGain.connect(uiGain);

let voices = [];

// The thresholder curve is a response table that maps input (-1, 1) to output
// (-1, 1). The WaveShaperNode API linearly interpolates between points in the
// table that the domain maps to, so we need a table with enough entries that
// that's unlikely to matter much. 256 will do.
const nThresholderCurvePoints = 256;
const thresholderCurve = new Float32Array(nThresholderCurvePoints);
for (let n = 0; n < nThresholderCurvePoints; n++) {
  thresholderCurve[n] = (n < (nThresholderCurvePoints / 2)) ? -1 : 1;
}

// Static noise data
const noiseBufferSize = 2 * audioCtx.sampleRate;
const noiseBuffer = audioCtx.createBuffer(1, noiseBufferSize, audioCtx.sampleRate);
const noiseData = noiseBuffer.getChannelData(0);

// Or, better, use the actual SID noise pattern. See:
// https://codebase64.org/doku.php?id=base:noise_waveform
for (let i = 0; i < noiseBufferSize; i++) {
  noiseData[i] = (Math.random() * 2) - 1;
}

// At time of writing, macOS Safari (v13.0.3) doesn't support
// ConstantSourceNode, so we'll monkey patch a stub in its place.
// Alternatively, we could use a buffer node with constant output, but I'm
// hoping Apple will eventually implement it.
if (globalThis.ConstantSourceNode === undefined) {
  console.warn("Your browser doesn't support ConstantSourceNode. Pulse width modulation disabled.");
  globalThis.ConstantSourceNode = function () {
    this.start   = () => {};
    this.connect = () => {};
    this.offset  = {};
  };
}

// Set up voices
[0, 1, 2].forEach(
  voice => {

    const oscillator  = audioCtx.createOscillator();
    const whiteNoise  = audioCtx.createBufferSource();
    const voiceGain   = audioCtx.createGain();
    const waveGain    = audioCtx.createGain();
    const noiseGain   = audioCtx.createGain();
    const thresholder = audioCtx.createWaveShaper();

    // voiceGain: sets a voice volume (for the ADSR envelope), flowing in to
    // the master gain.
    voiceGain.gain.value = 0;
    voiceGain.connect(masterGain);

    // thresholder: to implement rectangle waves. Its inputs are a triangle
    // wave (from waveGain) and a variable DC offset (from dcSource).
    // It sums them and thresholds the output to (-1, 1).
    thresholder.curve = thresholderCurve;
    thresholder.connect(waveGain);

    // dcSource: set by the pulse width registers, to influence the thresholder.
    const dcSource = new ConstantSourceNode(audioCtx);
    dcSource.start();
    dcSource.connect(thresholder);

    // oscillator: the wave generator that will be used for triangle, sawtooth,
    // and rectangle waveforms.
    oscillator.type = "triangle";
    oscillator.frequency.value = 440;  // hertz
    oscillator.connect(waveGain);
    oscillator.start();

    // whiteNoise: the generator that will be used for the noise waveform.
    whiteNoise.buffer = noiseBuffer;
    whiteNoise.loop = true;
    whiteNoise.connect(noiseGain);
    whiteNoise.start(0);

    // noiseGain: sits between the whiteNoise generator and voiceGain to
    // determine whether or not noise will go out on the voice (all or
    // nothing).
    noiseGain.gain.value = 0;
    noiseGain.connect(voiceGain);

    // waveGain: sits between either the thresholder or the oscillator
    // (depending on whether we're playing a rectangle wave vs. sawtooth or
    // triangle), and determines whether or not sound from that source will
    // go out on the voice (all or nothing).
    waveGain.gain.value = 0;
    waveGain.connect(voiceGain);


    voices[voice] = {
      oscillator,
      voiceGain,
      noiseGain,
      waveGain,
      whiteNoise,
      dcSource,
      thresholder
    };
  }
)

function setMasterVolume(byte) {
  // byte is the raw write byte; needs disentangling
  masterGain.gain.value = ((byte & 0xf) / 15) * MASTER_MULTIPLIER;
}

function setVoiceFrequency(voice) {

  const lo = state.regs[(voice * 7) + 0];
  const hi = state.regs[(voice * 7) + 1];

  const word = (hi << 8) | lo;
  const freq = word / MASTER_TUNING;

  // voices[voice].oscillator.frequency.setValueAtTime(freq, audioCtx.currentTime);
  voices[voice].oscillator.frequency.value = freq;
  voices[voice].whiteNoise.playbackRate.value = freq / 2000;
}

function setVoicePulseWidth(voice) {

  // Pulse width is a 12-bit number, split between a lowbyte and highbyte.
  const lo = (state.regs[(voice * 7) + 2]) & 0xff;
  const hi = (state.regs[(voice * 7) + 3]) & 0x0f;

  const width = (hi << 8) | lo;

  // Map (000, fff) width value to a (-1, 1) DC offset
  const dcOffset = ((width / 0xfff) * 2) - 1; 

  voices[voice].dcSource.offset.value = dcOffset;
}

function setControlRegister(voice, byte) {

  // TODO: this relies on reset configuring it to the lastControlRegister value
  // but I haven't made it do that yet.
  if ((byte & 0xf0) !== voices[voice].lastControlRegister) {

    // Theoretically, no two waveforms should be on at the same time. But
    // Wizball does that in voices 1 and 2 (triangle and rectangle) late into
    // song 3, and it's clear from real hardware (at least on a 6581) that
    // rectangle wins out.
    if (byte & 0x80) {
      // Noise
      voices[voice]. waveGain.gain.value = 0;
      voices[voice].noiseGain.gain.value = 1;
    }

    else if (byte & 0x40) {
      // Rectangle (pulse)
      // (Yes implemented as a triangle wave. It gets added to an offset, then
      // thresholded, to end up as the pulse wave requested.)
      voices[voice].oscillator.type = "triangle";
      voices[voice]. waveGain.gain.value = 1;
      voices[voice].noiseGain.gain.value = 0;
      voices[voice].oscillator.disconnect();
      voices[voice].oscillator.connect(voices[voice].thresholder);
    }

    else if (byte & 0x20) {
      // Sawtooth
      voices[voice].oscillator.type = "sawtooth";
      voices[voice]. waveGain.gain.value = 1;
      voices[voice].noiseGain.gain.value = 0;
      voices[voice].oscillator.disconnect();
      voices[voice].oscillator.connect(voices[voice].waveGain);
    }

    else if (byte & 0x10) {
      // Triangle
      voices[voice].oscillator.type = "triangle";
      voices[voice]. waveGain.gain.value = 1;
      voices[voice].noiseGain.gain.value = 0;
      voices[voice].oscillator.disconnect();
      voices[voice].oscillator.connect(voices[voice].waveGain);
    }
  }

  // TODO: add this to docs
  voices[voice].lastControlRegister = byte;
}

function setVoiceVolume(voice, volume) {
  voices[voice].voiceGain.gain.value = volume;
}

function onRegWrite(reg, byte) {

  state.regs[reg] = byte;

  switch (reg) {

    case 0x00:    // $d400: voice 1 frequency (low-byte)
    case 0x01:    // $d401: voice 1 frequency (high-byte)
      return setVoiceFrequency(0);

    case 0x02:    // $d402: voice 1 pulse width (low-byte)
    case 0x03:    // $d403: voice 1 pulse width (high-byte)
      return setVoicePulseWidth(0);

    case 0x04:    // $d404: voice 1 control register
      return setControlRegister(0, byte);


    case 0x07:    // $d407: voice 2 frequency (low-byte)
    case 0x08:    // $d408: voice 2 frequency (high-byte)
      return setVoiceFrequency(1);

    case 0x09:    // $d409: voice 2 pulse width (low-byte)
    case 0x0a:    // $d40a: voice 2 pulse width (high-byte)
      return setVoicePulseWidth(1);

    case 0x0b:    // $d40b: voice 2 control register
      return setControlRegister(1, byte);


    case 0x0e:    // $d40e: voice 3 frequency (low-byte)
    case 0x0f:    // $d40f: voice 3 frequency (high-byte)
      return setVoiceFrequency(2);

    case 0x10:    // $d410: voice 3 pulse width (low-byte)
    case 0x11:    // $d411: voice 3 pulse width (high-byte)
      return setVoicePulseWidth(2);

    case 0x12:    // $d412: voice 3 control register
      return setControlRegister(2, byte);


    case 0x18:    // $d418: master volume and filter modes
      return setMasterVolume(byte);
  }
}

function reset() {
  // TODO!
}

function attach(nascentC64) {
  nascentC64.audio = {
    // Control
    reset,
    // Interface-specific handlers
    setVoiceVolume,
    onRegWrite,
    userDidInteract,
    setUiGain,
  };

  // https://stackoverflow.com/questions/7944460/detect-safari-browser
  const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);

  if (isSafari) {
    // Effects reported below relate to macOS Safari v13.0.3, current at time
    // of writing. Also, it'll run really slowly if the JavaScript console's
    // open.
    const useStub = confirm(
      "It looks like you're running Safari. Safari's sound implementation " +
      "introduces weird slides, and isn't comptible with our pulse width " +
      "modulator. Disable audio?"
    );

    if (useStub) {
      nascentC64.audio.setVoiceVolume  = () => {};
      nascentC64.audio.onRegWrite      = () => {};
      nascentC64.audio.userDidInteract = () => {};
    }
  }
}

function userDidInteract() {
  // If the audioContext was created in a suspended state (see
  // https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio
  // ), let's try to resume it now that we've observed a user interaction.
  if (state.suspended) audioCtx.resume();

  // If successful, audioCtx.state may not change immediately. (My observation:
  // Firefox 75 does; Chrome 81 does not.)
  // Thus, just to track whether the audio's actually on at any given time (not
  // that the frontend currently reports it), we have an interval poller that 
  // checks and updates the `suspended` variable.

  // Also, note that this resumption may not be successful. A keydown event of
  // a modifier or escape key, for example, would trigger this function, but is
  // insufficient for the browser's anti-nuisance policy to allow the audio
  // resumption.
}

function setUiGain(value) {
  uiGain.gain.value = value; 
}


/***/ }),

/***/ "./src/host/buttonNameToMatrixPos.js":
/*!*******************************************!*\
  !*** ./src/host/buttonNameToMatrixPos.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buttonNameToMatrixPos: () => (/* binding */ buttonNameToMatrixPos)
/* harmony export */ });
/*
   Column-row combinations for the C64's physical keys
  
   Example: Commodore key is [7, 5], meaning that if, when writing to CIA1
   port A ($dc00), I set the keyboard scan to column 7 (by writing bit 7, so
   0b10000000), I'd expect to see the status of the Commodore key in bit 5 when
   reading CIA1 port B.
  
   Note that the Restore key doesn't have a position in this table: it's wired
   directly to the NMI line and has no position in the matrix. There's no
   separate entry for Shift Lock either.
 */

const buttonNameToMatrixPos = {
  RunStop:      [ 7, 7 ],
  Q:            [ 7, 6 ],
  Commodore:    [ 7, 5 ],   // unmapped in natural
  Space:        [ 7, 4 ],
  Num2:         [ 7, 3 ],
  Ctrl:         [ 7, 2 ],
  LeftArrow:    [ 7, 1 ],   // the key that draws a '←', not cursor-left
  Num1:         [ 7, 0 ],

  Slash:        [ 6, 7 ],
  UpArrow:      [ 6, 6 ],   // the key that draws a '↑', not cursor-up
  Equal:        [ 6, 5 ],
  RightShift:   [ 6, 4 ],   // unmapped in natural
  ClrHome:      [ 6, 3 ],
  Semicolon:    [ 6, 2 ],
  Asterisk:     [ 6, 1 ],
  Pound:        [ 6, 0 ],

  Comma:        [ 5, 7 ],
  At:           [ 5, 6 ],
  Colon:        [ 5, 5 ],
  Period:       [ 5, 4 ],
  Minus:        [ 5, 3 ],
  L:            [ 5, 2 ],
  P:            [ 5, 1 ],
  Plus:         [ 5, 0 ],

  N:            [ 4, 7 ],
  O:            [ 4, 6 ],
  K:            [ 4, 5 ],
  M:            [ 4, 4 ],
  Num0:         [ 4, 3 ],
  J:            [ 4, 2 ],
  I:            [ 4, 1 ],
  Num9:         [ 4, 0 ],

  V:            [ 3, 7 ],
  U:            [ 3, 6 ],
  H:            [ 3, 5 ],
  B:            [ 3, 4 ],
  Num8:         [ 3, 3 ],
  G:            [ 3, 2 ],
  Y:            [ 3, 1 ],
  Num7:         [ 3, 0 ],

  X:            [ 2, 7 ],
  T:            [ 2, 6 ],
  F:            [ 2, 5 ],
  C:            [ 2, 4 ],
  Num6:         [ 2, 3 ],
  D:            [ 2, 2 ],
  R:            [ 2, 1 ],
  Num5:         [ 2, 0 ],

  LeftShift:    [ 1, 7 ],
  E:            [ 1, 6 ],
  S:            [ 1, 5 ],
  Z:            [ 1, 4 ],
  Num4:         [ 1, 3 ],
  A:            [ 1, 2 ],
  W:            [ 1, 1 ],
  Num3:         [ 1, 0 ],

  CursorDown:   [ 0, 7 ],
  F5:           [ 0, 6 ],
  F3:           [ 0, 5 ],
  F1:           [ 0, 4 ],
  F7:           [ 0, 3 ],
  CursorRight:  [ 0, 2 ],
  Return:       [ 0, 1 ],
  InstDel:      [ 0, 0 ],
};


/***/ }),

/***/ "./src/host/dragAndDrop.js":
/*!*********************************!*\
  !*** ./src/host/dragAndDrop.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attach: () => (/* binding */ attach)
/* harmony export */ });
/* harmony import */ var _ingest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ingest.js */ "./src/host/ingest.js");


// bound by attach
let c64;

function attach(nascentC64) {
  c64 = nascentC64;

  window.addEventListener(
    "load",
    () => {
      document.addEventListener(
        "dragover",
        (event) => {
          // This looks like it isn't doing anything, but without it, drag-and-drop
          // doesn't work.
          event.preventDefault();
        }
      );

      document.addEventListener(
        "drop",
        (event) => {
          event.preventDefault();
          onDrop(event);

          // For the web audio API, the drop event is one of the interactions
          // whose occurrence permits the AudioContext to be resumed. Moreover,
          // it's likely to be the only such interaction before the user would
          // expect to hear sound.
          if (c64.audio.userDidInteract) c64.audio.userDidInteract();
        }
      );
    }
  );
}

function onDrop(event) {
  const [file, extraFile] = event.dataTransfer.files;

  if (extraFile) {
    err("Drop only one file at once");
    return;
  }

  if (!file) {
    tryLoadFromInternallyDraggedSnapshot(event);
    return;
  }

  const reader = new FileReader();
  reader.onload = (event) => {
    (0,_ingest_js__WEBPACK_IMPORTED_MODULE_0__.ingest)(c64, file.name, new Uint8Array(reader.result));
  };

  reader.readAsArrayBuffer(file);
}

function err(str) {
  if (c64.hooks.reportError) c64.hooks.reportError(str);
  else alert(str);
}

function tryLoadFromInternallyDraggedSnapshot(event) {
  // The event.file was falsy, meaning quite possibly that the user dragged a
  // snapshot link from the <a> to the main window. The code below is a super
  // awkward attempt at loading in that circumstance. At time of writing, it
  // works in Chrome, Firefox, and Safari, but I don't trust it very far.
  //
  // I believe there's a drag-and-drop interface which would allow for DOM
  // nodes to be dragged to your desktop in a way that creates files there. If
  // so, it'd be good to support that; and the below would likely adopt
  // accordingly.

  for (let item of event.dataTransfer.items) {
    if (item.type !== "text/plain") continue;

    item.getAsString(
      async (url) => {

        // expect a URL like `blob:http://localhost:8080/(some guid)`
        if (!/^blob\:/.test(url)) return;

        const json = await (await fetch(url)).json();

        (0,_ingest_js__WEBPACK_IMPORTED_MODULE_0__.ingest)(
          c64,
          "snapshot.json",
          // 🤮
          new Uint8Array(
            Array
              .from(JSON.stringify(json))
              .map(str => str.charCodeAt(0))
          )
        );
      }
    );

    break;
  }
}


/***/ }),

/***/ "./src/host/ingest-d64.js":
/*!********************************!*\
  !*** ./src/host/ingest-d64.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ingest_d64: () => (/* binding */ ingest_d64)
/* harmony export */ });
/* harmony import */ var _tools_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tools/parser */ "./src/tools/parser.js");
/* harmony import */ var _tools_loadPrg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tools/loadPrg */ "./src/tools/loadPrg.js");
/* harmony import */ var _tools_romLocations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tools/romLocations */ "./src/tools/romLocations.js");


 


// Format reference:
// †1 http://unusedino.de/ec64/technical/formats/d64.html

const parseDirSector = (0,_tools_parser__WEBPACK_IMPORTED_MODULE_0__.makeParser)((_) => {

  const entry = (_) => ({
    nextTrack:     _.byte(),
    nextSector:    _.byte(),
    type:          _.byte(),
    track:         _.byte(),
    sector:        _.byte(),
    name:          _.string(16),
    sideSecTrack:  _.byte(),
    sideSecSector: _.byte(),
    relLength:     _.byte(),
    _:             _.skip(6),
    blocks:        _.word_le(),
  });

  return new Array(8)
    .fill()
    .map(() => entry(_))
  ;
});

const parseFileSector = (0,_tools_parser__WEBPACK_IMPORTED_MODULE_0__.makeParser)((_) => ({
  nextTrack:  _.byte(),
  nextSector: _.byte(),
  bytes:      _.remainder(),
}));


async function ingest_d64(c64, bytes) {

  if (!c64.hooks.onD64Ingest) {
    throw new Error("Can’t show .d64 directories with this frontend");
  }

  const dir = loadDir(bytes);

  // d64 ingestor hook: give it a directory; it'll present a dialog for picking
  // which PRG to load, and return a promise which resolves to an entry from
  // the directory. That entry contains a track/sector, which defined the start
  // of the PRG.
  //
  // (TODO: right now, if you close the dialog, the promise just sits
  // unresolved forever. Better if it resolved to, or threw, null)
  const { track, sector } = await c64.hooks.onD64Ingest(dir);

  // Follow the track/sector links to pull in all the bytes
  const prg = loadFile(bytes, track, sector);

  // ...then boot it in the usual way.
  c64.runloop.reset();
  await c64.runloop.untilPc(_tools_romLocations__WEBPACK_IMPORTED_MODULE_2__.AWAIT_KEYBOARD_PC);
  (0,_tools_loadPrg__WEBPACK_IMPORTED_MODULE_1__.loadPrg)(c64, prg);
  c64.runloop.type("RUN\r");
  c64.runloop.run();
}

function calcAbsSector(track, sector) {
  // Note: by convention, `track` is one-indexed; `sector` is zero-indexed.
  // We could do a sanity check that sector isn't too big a number for that
  // track.
  if ((track < 1) || (track > 40)) {
    throw new Error("Track out of range: " + track);
  }

  // Convert `sector` from being track-relative to absolute
  while (--track) {
    if      (track >= 31) sector += 17;
    else if (track >= 25) sector += 18;
    else if (track >= 18) sector += 19;
    else                  sector += 21;
  }

  return sector;
}

function loadAbsSector(d64, absSector) {
  const d64Offset = absSector * 256;
  return d64.slice(d64Offset, d64Offset + 256);
}

function getLoadTrackSectorWithRecurCheck(d64) {
  // Returns a function that will return a sector's bytes, given a track/sector
  // location, and will throw if the same absolute sector is requested twice.
  const seenAbsSectors = new Set();  

  return (track, sector) => {
    const absSector = calcAbsSector(track, sector);

    if (seenAbsSectors.has(absSector)) {
      throw new Error("Chain of disk sector links contains a loop");
    }

    seenAbsSectors.add(absSector);
    return loadAbsSector(d64, absSector);
  }
}

function loadDir(d64) {

  // Directory listing starts at 18/1 (even if 18/0 points elsewhere)
  let track = 18;
  let sector = 1;

  let entries = [];
  const loadTrackSector = getLoadTrackSectorWithRecurCheck(d64);

  while (track) {

    const newEntries = parseDirSector(
      loadTrackSector(track, sector)
    );

    entries = [
      ...entries,
      ...newEntries,
    ];

    track  = newEntries[0].nextTrack;
    sector = newEntries[0].nextSector;
  }

  return entries
    .map(
      (entry) => {
        const { type, ...ret } = entry;

        ret.type = [
          "DEL",
          "SEQ",
          "PRG",
          "USR",
          "REL",
        ][entry.type & 0b111];

        ret.locked = Boolean(entry.type & (1 << 6));
        ret.closed = Boolean(entry.type & (1 << 7));

        return ret;
      }
    )
    .filter(
      // I think this is right? DEL's don't show up in the "$"?
      ({ type }) => (type !== "DEL")
    )
  ;
}

function loadFile(d64, track, sector) {
  let ret = [];
  const loadTrackSector = getLoadTrackSectorWithRecurCheck(d64);

  while (track) {

    const sec = parseFileSector(
      loadTrackSector(track, sector)
    );

    if (!sec.nextTrack) {
      // If the nextTrack value is zero, then nextSector reveals how much of
      // this sector contains file data. †1 implies that if nextSector has a
      // value of 4, then, bearing in mind that the next link's track/sector
      // values are in bytes 0 and 1 respectively, the file data would be in
      // bytes 2, 3, and 4.
      // Thus a '4' would mean a slice parameter of '5' wrt. the raw sector's
      // data, hence a slice parameter of '3' wrt. the parsed `bytes` array
      // from that sector. Hence, in general, slice until `sector` minus one.

      ret = [...ret, ...sec.bytes.slice(0, sec.nextSector - 1)];
    }
    else {
      ret = [...ret, ...sec.bytes];
    }

    track  = sec.nextTrack;
    sector = sec.nextSector;
  }

  return ret;
}


/***/ }),

/***/ "./src/host/ingest-json.js":
/*!*********************************!*\
  !*** ./src/host/ingest-json.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ingest_json: () => (/* binding */ ingest_json)
/* harmony export */ });
// The only file type that can be brought in from JSON is a snapshot.

async function ingest_json(c64, bytes) {
  // Convert the incoming byte array to a string
  let json = "";

  for (let i of bytes) {
    json += String.fromCharCode(i);
  }

  // Once the original snapshot was serialized, it was saved out in a JSON
  // format, meaning yet another layer of the onion. Unpeel that last one
  // to get the original serialiazation (which is in JSON, and encodes yet
  // more JSON in its subsections)
  const snapshot = JSON.parse(json);

  c64.runloop.stop();                // just out of caution
  c64.runloop.reset();               // just out of caution
  c64.runloop.deserialize(snapshot);
  c64.runloop.run();
}


/***/ }),

/***/ "./src/host/ingest-prg.js":
/*!********************************!*\
  !*** ./src/host/ingest-prg.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ingest_prg: () => (/* binding */ ingest_prg)
/* harmony export */ });
/* harmony import */ var _tools_loadPrg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tools/loadPrg */ "./src/tools/loadPrg.js");
/* harmony import */ var _tools_romLocations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tools/romLocations */ "./src/tools/romLocations.js");

 


async function ingest_prg(c64, bytes) {
  c64.runloop.reset();
  await c64.runloop.untilPc(_tools_romLocations__WEBPACK_IMPORTED_MODULE_1__.AWAIT_KEYBOARD_PC);

  (0,_tools_loadPrg__WEBPACK_IMPORTED_MODULE_0__.loadPrg)(c64, bytes);

  c64.runloop.type("RUN\r");
  c64.runloop.run();
}


/***/ }),

/***/ "./src/host/ingest-sid.js":
/*!********************************!*\
  !*** ./src/host/ingest-sid.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ingest_sid: () => (/* binding */ ingest_sid)
/* harmony export */ });
/* harmony import */ var _tools_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tools/parser */ "./src/tools/parser.js");
/* harmony import */ var _tools_assembler_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tools/assembler.js */ "./src/tools/assembler.js");
/* harmony import */ var _tools_c64FontCodePoints__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tools/c64FontCodePoints */ "./src/tools/c64FontCodePoints.js");
/* harmony import */ var _tools_romLocations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tools/romLocations */ "./src/tools/romLocations.js");
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../debug */ "./src/debug.js");



 



// Format references:
// - https://gist.github.com/cbmeeks/2b107f0a8d36fc461ebb056e94b2f4d6
// - http://unusedino.de/ec64/technical/formats/sidplay.html
//
// (Beware: neither signal very well whether the numbers they quote are
// decimal or hex.)

const parseHeader = (0,_tools_parser__WEBPACK_IMPORTED_MODULE_0__.makeParser)((_) => ({
  magicID:     _.string(4),
  version:     _.word_be(),
  dataOffset:  _.word_be(),
  loadAddress: _.word_be(),
  initAddress: _.word_be(),
  playAddress: _.word_be(),
  songs:       _.word_be(),
  startSong:   _.word_be(),
  speed:       _.long_be(),
  name:        _.string(32),
  author:      _.string(32),
  released:    _.string(32),
}));

async function ingest_sid(c64, bytes) {
  let header;
  
  try {
    header = parseHeader(bytes);
  }
  catch (e) {
    console.error("Unexpected early end of file");
  }

  validate(header);

  let { loadAddress, dataOffset } = header;

  if (loadAddress === 0) {
    // means the load address is at the start of the data secion, like a
    // .prg file
    loadAddress = (
      bytes[dataOffset++] | 
      bytes[dataOffset++] << 8
    );
  }

  const fileData = bytes.slice(dataOffset);

  // It's only 130 bytes or so. Seems a safe place to stash it, no?
  // Just need to careful that it doesn't run into the PAL/NTSC flag at $02a6
  // as SIDs can rely on that.
  const playerOrg = 0x0200;
  // (Postscript: most of Richard Joesph's songs won't play at all with the
  // player org'ed there. Org it somewhere else and they'll play a litte better
  // but still not right. Haven't looked into why.)

  // PSID file is 1-indexed, code expects 0-indexed
  let startSong = (header.startSong - 1) & 0xff;

  playSong(
    c64,
    fileData,
    playerOrg,
    loadAddress,
    header
  );
}

function validate(header) {
  if (header.magicID !== "PSID") {
    throw new Error("Only PSID .sid files can be played.");
  }
}

function showHeader(c64, header, loadAddress, playerAddress, playerLength, loadLength) {

  const stringToScreen = (row, col, string) => {
    string = string.toLowerCase();
    for (let i = 0; i < string.length; i++) {
      c64.wires.cpuWrite(
        0x400 + col + (40 * row) + i, 
        (0,_tools_c64FontCodePoints__WEBPACK_IMPORTED_MODULE_2__.charToC64FontCodePoint)(string[i], true)
      );
      c64.wires.cpuWrite(
        0xd800 + col + (40 * row) + i, 
        15
      );
    }
  };

  stringToScreen( 6, 4, header.name);
  stringToScreen( 7, 4, header.author);
  stringToScreen( 8, 4, header.released);
  stringToScreen(10, 4, `load: ${(0,_debug__WEBPACK_IMPORTED_MODULE_4__.$xxxx)(loadAddress)}-${(0,_debug__WEBPACK_IMPORTED_MODULE_4__.$xxxx)(loadAddress + loadLength)}`);
  stringToScreen(11, 4, `init: ${(0,_debug__WEBPACK_IMPORTED_MODULE_4__.$xxxx)(header.initAddress)}`);
  stringToScreen(12, 4, `play: ${(0,_debug__WEBPACK_IMPORTED_MODULE_4__.$xxxx)(header.playAddress)}`);
  stringToScreen(14, 4, `# songs: ${header.songs} (start ${header.startSong})`);
  stringToScreen(16, 4, `player at ${(0,_debug__WEBPACK_IMPORTED_MODULE_4__.$xxxx)(playerAddress)}-${(0,_debug__WEBPACK_IMPORTED_MODULE_4__.$xxxx)(playerAddress + playerLength)}`);
  stringToScreen(20, 2, `joystick #2 left/right for prev/next`);
}

async function playSong(
  c64,
  fileData,
  playerOrg,
  fileOrg,
  header
) {

  c64.runloop.reset();
  await c64.runloop.untilPc(_tools_romLocations__WEBPACK_IMPORTED_MODULE_3__.READY_PC);

  const { initAddress, playAddress, songs, startSong } = header;

  // Right now the player just uses raster time to cue the PSID's tick routine
  // so we're stuck with 50Hz playback, which a lot of PSID's aren't using.
  // We should use a CIA to fix that.

  const playerData = (0,_tools_assembler_js__WEBPACK_IMPORTED_MODULE_1__.assemble)(
    playerOrg,
    ({
      NOP, LDA, LDX, LDY, STA, STX, STY, CLC, CLD, CLI, CLV, SEC, SED, SEI, 
      TAX, TAY, TSX, TXA, TXS, TYA, CMP, CPX, CPY, BCS, BCC, BEQ, BNE, BMI,
      BPL, BVS, BVC, BIT, JSR, RTS, RTI, BRK, JMP, INC, DEC, DEX, DEY, INX,
      INY, ADC, SBC, AND, EOR, ORA, ASL, ROL, LSR, ROR, PHA, PHP, PLA, PLP,
      _
    }) => {

        // We've come in from Basic, so stop everything
        LDA.imm (0); 
        STA.abs (0xdc0e);           // stop CIA1 timer A
        STA.abs (0xdc0f);           // stop CIA1 timer B
        STA.abs (0xdd0e);           // stop CIA2 timer A
        STA.abs (0xdd0f);           // stop CIA2 timer B

        LDA.zpg (1);                // read processor port
        AND.imm (0xf8);             // clear bottom 3 bits
        ORA.imm (0x05);             // 0b101 = I/O mapped, otherwise max RAM
        STA.zpg (1);                // store processor port

        LDA.imm (startSong - 1);    // header's startSong is 1-indexed
        JMP.abs ("startSong");      // play it and enter loop

      _`main`;
        LDA.abs (0xd012);           // read raster line (bits 0-7)
        CMP.imm (0x40);             // there's no line 0x140, so if bits 0-7
        BNE.rel ("main");           // say 0x40, we're at 0x040. Loop until then.

        LDA.imm (15);
        STA.abs (0xd020);           // light border for the duration of the play routing
        JSR.abs (playAddress);      // call player's tick routine
        LDA.imm (14);
        STA.abs (0xd020);           // bring the border back

        LDX.abs (0xdc00);           // read joystick port 2
        TXA.imp ();
        AND.imm (0b1000);           // right?
        BEQ.rel ("nextSong");
        TXA.imp ();
        AND.imm (0b100);            // left?
        BEQ.rel ("prevSong");

      _`tail`;
        LDA.abs (0xd012);           // no changes to the song. just be sure we're
        CMP.imm (0x40);             // not still on that same 0x040 scanline...
        BEQ.rel ("tail");
        BNE.rel ("main");           // we're not. So now loop until we are.

      _`prevSong`;
        DEC.abs ("song");
        DEC.abs ("song");           // because it falls through...

      _`nextSong`;
        INC.abs ("song");

      _`untilReleased`;
        LDA.abs (0xdc00);           // wait until the joystick's let go of
        CMP.imm (0x7f);             // to prevent a double-advance
        BNE.rel ("untilReleased");

        LDA.abs ("song");           // now let's clamp the song number
        BPL.rel ("clamp");          // if positive, go check it's not too high
        LDA.imm (0);                // was negative so clamp to zero
        BEQ.rel ("startSong");      // play

      _`clamp`;
        CMP.imm (songs);            // already at the last song?
        BNE.rel ("startSong");      // no? kick it
        CLC.imp ();                 // (seriously, why is there no DEC.acc?)
        ADC.imm (0xff);             // decrement back to the last

      _`startSong`;
        STA.abs ("song");           // store post-inc/dec song num

        LDX.imm (0b1000);         
        STX.abs (0xd404);           // stop voice 1
        STX.abs (0xd40b);           // stop voice 2
        STX.abs (0xd412);           // stop voice 3

        LDX.imm (0);
        STX.abs (0xd417);           // reset filters
        STX.abs (0xd418);           // volume 0, reset more filters

        JSR.abs (initAddress);      // call player's init routine for song in acc
        JMP.abs ("main");           // re-run main loop

      _`song`;
        _.bytes(0);                 // current song (init'ed by startSong)
    }
  );

  showHeader(c64, header, fileOrg, playerOrg, playerData.length, fileData.length);

  const { cpuWrite } = c64.wires;

  fileData.forEach(
    (byte, index) => cpuWrite(fileOrg + index, byte)
  );

  playerData.forEach(
    (byte, index) => cpuWrite(playerOrg + index, byte)
  );

  c64.cpu.getState().pc = playerOrg;
  c64.runloop.run();
}


/***/ }),

/***/ "./src/host/ingest-t64.js":
/*!********************************!*\
  !*** ./src/host/ingest-t64.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ingest_t64: () => (/* binding */ ingest_t64)
/* harmony export */ });
/* harmony import */ var _tools_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tools/parser */ "./src/tools/parser.js");
/* harmony import */ var _tools_loadPrg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tools/loadPrg */ "./src/tools/loadPrg.js");
/* harmony import */ var _tools_romLocations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tools/romLocations */ "./src/tools/romLocations.js");


 


// Format references:
//    http://unusedino.de/ec64/technical/formats/t64.html
//    https://vice-emu.sourceforge.io/vice_16.html

const parseHeader = (0,_tools_parser__WEBPACK_IMPORTED_MODULE_0__.makeParser)((_) => ({
  desc:        _.string(32),
  version:     _.word_le(),
  entries:     _.word_le(),
  usedEntries: _.word_le(),
  _:           _.skip(2),
  userDesc:    _.string(24),

  // The below should have its own separate structure, as theoretically
  // there's a sequence of multiple instances of it
  entryType:   _.byte(),
  fileType:    _.byte(),
  startAddr:   _.word_le(),
  endAddr:     _.word_le(),
  _:           _.skip(2),
  start:       _.long_le(),
  _:           _.skip(4),
  filename:    _.string(16),
}));

async function ingest_t64(c64, bytes) {
  let header;
  
  try {
    header = parseHeader(bytes);
  }
  catch (e) {
    console.error("Unexpect early end to file");
  }

  validate(header);

  const prg = [
    header.startAddr & 0xff,
    header.startAddr >> 8,
    ...bytes.slice(header.start)
  ];

  c64.runloop.reset();
  await c64.runloop.untilPc(_tools_romLocations__WEBPACK_IMPORTED_MODULE_2__.AWAIT_KEYBOARD_PC);

  (0,_tools_loadPrg__WEBPACK_IMPORTED_MODULE_1__.loadPrg)(c64, prg);

  c64.runloop.type("RUN\r");
  c64.runloop.run();
}

function validate(header) {
  // General policy is that we'll waive as much as we possibly can with
  // warnings, and only error if we absolutely can't load the file

  const warn = console.warn;

  if (header.usedEntries !== 1) {
    // I've seen an otherwise working .t64 report zero used entries, so waive
    // what you'd think would be a breaking case.
    warn(`.t64 file has ${header.usedEntries} used entries. One was expected.`);
  }

  if (header.startAddr !== 0x0801) {
    warn(".t64 file start address isn't $0801");
  }

  // We ignore the end addr

  if (header.entryType !== 1) {
    warn(`.t64 error: only entry type 1 supported (got ${header.entryType})`);
  }

  // Should try warn if the file size doesn't match what we'd expect from the
  // header, though this happens commonly for files that otherwise work.
}


/***/ }),

/***/ "./src/host/ingest-tap.js":
/*!********************************!*\
  !*** ./src/host/ingest-tap.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ingest_tap: () => (/* binding */ ingest_tap)
/* harmony export */ });
/* harmony import */ var _tools_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tools/parser */ "./src/tools/parser.js");
/* harmony import */ var _tools_romLocations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tools/romLocations */ "./src/tools/romLocations.js");

 


// Format references:
//    http://wav-prg.sourceforge.net/tape.html
//    http://unusedino.de/ec64/technical/formats/tap.html

const parseTap = (0,_tools_parser__WEBPACK_IMPORTED_MODULE_0__.makeParser)((_) => ({
  header:   _.string(20),
  contents: _.remainder(),
}));

async function ingest_tap(c64, bytes) {

  const struct = parseTap(bytes);

  validate(struct);

  c64.runloop.reset();
  await c64.runloop.untilPc(_tools_romLocations__WEBPACK_IMPORTED_MODULE_1__.AWAIT_KEYBOARD_PC);

  c64.tape.setImage(bytes.slice(20));

  c64.runloop.type("LOAD\r");
  c64.runloop.run();
  c64.tape.pressPlay();
}

function validate(struct) {
  // In my experience, headers are always
  //    "C64-TAPE-RAW"
  // or "C64-TAPE-RAW\u0001"

  if (struct.header.indexOf("C64-TAPE-RAW") !== 0) {
    console.warn(
      "Expected to find 'C64-TAPE-RAW' in header, but got:",
      struct.header
    );
  }
}


/***/ }),

/***/ "./src/host/ingest.js":
/*!****************************!*\
  !*** ./src/host/ingest.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ingest: () => (/* binding */ ingest)
/* harmony export */ });
/* harmony import */ var _ingest_prg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ingest-prg */ "./src/host/ingest-prg.js");
/* harmony import */ var _ingest_t64__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ingest-t64 */ "./src/host/ingest-t64.js");
/* harmony import */ var _ingest_d64__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ingest-d64 */ "./src/host/ingest-d64.js");
/* harmony import */ var _ingest_sid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ingest-sid */ "./src/host/ingest-sid.js");
/* harmony import */ var _ingest_tap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ingest-tap */ "./src/host/ingest-tap.js");
/* harmony import */ var _ingest_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ingest-json */ "./src/host/ingest-json.js");







const ingestors = [
  [/\.prg$/i , _ingest_prg__WEBPACK_IMPORTED_MODULE_0__.ingest_prg  ],
  [/\.t64$/i , _ingest_t64__WEBPACK_IMPORTED_MODULE_1__.ingest_t64  ],
  [/\.d64$/i , _ingest_d64__WEBPACK_IMPORTED_MODULE_2__.ingest_d64  ],
  [/\.sid$/i , _ingest_sid__WEBPACK_IMPORTED_MODULE_3__.ingest_sid  ],
  [/\.tap$/i , _ingest_tap__WEBPACK_IMPORTED_MODULE_4__.ingest_tap  ],
  [/\.json$/i, _ingest_json__WEBPACK_IMPORTED_MODULE_5__.ingest_json ],
];

async function ingest(c64, filename, bytes) {
  try {

    for (let [regex, fn] of ingestors) {
      if (regex.test(filename)) {
        await fn(c64, bytes);

        if (c64.hooks.setTitle) {
          c64.hooks.setTitle(filename);
        }

        return;
      }
    }

    throw new Error("Can’t guess file format from name, or format is unsupported.");
  }
  catch (e) {
    const { message } = e;
    console.error(e);
    if (c64.hooks.reportError) c64.hooks.reportError(message);
    else alert(message);
  }
}


/***/ }),

/***/ "./src/host/joystick-KeyboardEvent.js":
/*!********************************************!*\
  !*** ./src/host/joystick-KeyboardEvent.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attach: () => (/* binding */ attach)
/* harmony export */ });
// bound by attach
let c64;

// Populated by cias
let setJoystick1 = () => {};
let setJoystick2 = () => {};

// Called during initialization to tell the keyboard event handler how to send
// key matrices to CIA1.
function setSetJoystick1(fn) { setJoystick1 = fn; }
function setSetJoystick2(fn) { setJoystick2 = fn; }


const JOSTICK_UP    = 0x01;
const JOSTICK_DOWN  = 0x02;
const JOSTICK_LEFT  = 0x04;
const JOSTICK_RIGHT = 0x08;
const JOSTICK_FIRE  = 0x10;

let buttonsDown = new Set();

function eventToJoystickButton(event) {
  switch (event.key) {
    case "Shift":      return JOSTICK_FIRE;
    case "ArrowUp":    return JOSTICK_UP;
    case "ArrowDown":  return JOSTICK_DOWN;
    case "ArrowLeft":  return JOSTICK_LEFT;
    case "ArrowRight": return JOSTICK_RIGHT;
  }
}

function tellCia() {
  let byte = 0;

  for (let val of buttonsDown.values()) {
    byte |= val;
  }

  // values float high; the buttons pull them low
  if (c64.joystick.toControlPort1) setJoystick1((~byte) & 0xff);
  if (c64.joystick.toControlPort2) setJoystick2((~byte) & 0xff);
}

globalThis.addEventListener(
  "keydown",
  event => {
    const setKey = eventToJoystickButton(event);
    if (!setKey) return;

    buttonsDown.add(setKey);
    tellCia();
  }
);

globalThis.addEventListener(
  "keyup",
  event => {
    const setKey = eventToJoystickButton(event);
    if (!setKey) return;

    buttonsDown.delete(setKey);
    tellCia();
  }
);

globalThis.addEventListener(
  "blur",
  event => {
    buttonsDown.clear();
    tellCia();
  }
);

function attach(nascentC64) {

  c64 = nascentC64;
  // TODO: this should be where we set up the event listeners

  nascentC64.joystick = {
    setSetJoystick1,
    setSetJoystick2,
    toControlPort1: false,
    toControlPort2: true,
  };
}


/***/ }),

/***/ "./src/host/keyboard-KeyboardEvent.js":
/*!********************************************!*\
  !*** ./src/host/keyboard-KeyboardEvent.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attach: () => (/* binding */ attach),
/* harmony export */   setSetKeyMatrix: () => (/* binding */ setSetKeyMatrix)
/* harmony export */ });
/* harmony import */ var _keyboard_natural__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./keyboard-natural */ "./src/host/keyboard-natural.js");
/* harmony import */ var _keyboard_direct__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keyboard-direct */ "./src/host/keyboard-direct.js");
/* harmony import */ var _buttonNameToMatrixPos__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./buttonNameToMatrixPos */ "./src/host/buttonNameToMatrixPos.js");






// Bound by attach
let c64;

// Populated by setSetKeyMatrix;
let setKeyMatrix = () => {};

/*
   keyStack: an event stack that chronicles which C64 keyboard buttons (let's
   call them 'buttons' and those of host machine's, 'keys') got held down when.

   Example: if you were to hold down your Shift key, then your 8 key, keyStack
   would be:

      [
        { code: "Digit8", buttonCodes: [...] },
        { code: "ShiftLeft", buttonCodes: [...] }
      ]

   ...where buttonCodes is an array of names of C64 buttons (see
   buttonNameToMatrixPos) that corresponded to the keyboard event, and varies
   depending on the keyboard mapper used.

   The 'natural' keyboard mapping, for example, would have identified that the
   event that had the `code` of Digit8 was an asterisk press (in the case of a
   US keyboard); thus would record ["Asterisk"] in buttonCodes, whereas the
   'direct' keyboard mapping would record it as ["Num8"].

   When new keys are pressed, they're pushed/moved to the front of the stack.
   Released keys are removed from the stack.

   It's important to note that the `code` of the stack entries is the `code`
   field of a DOM keyboard event, and, in spite of the names of its values,
   represents the position of a key, not the symbol it represents. We use this
   position information for identifying, in the keyup, which stack entry was
   generated by the original keydown. Had we used `event.key` instead, keys
   would jam in cases like:

          (hold-shift, hold-R, release-shift, release-R)

   ...where the events we'll receive would have a keydown for "R", but a keyup
   for "r", and we'd be stuck with the "R" on the keyStack.
*/

let keyStack = [
  // {
  //   code
  //   buttonNames
  // }
];

function getEventToButtonNames() {
  return (
    c64.keyboard.naturalMapping
    ? _keyboard_natural__WEBPACK_IMPORTED_MODULE_0__.eventToButtonNames
    : _keyboard_direct__WEBPACK_IMPORTED_MODULE_1__.eventToButtonNames
  );
}

function getKeyStackToButtonNames() {
  return (
    c64.keyboard.naturalMapping
    ? _keyboard_natural__WEBPACK_IMPORTED_MODULE_0__.keyStackToButtonNames
    : _keyboard_direct__WEBPACK_IMPORTED_MODULE_1__.keyStackToButtonNames
  );
}


function attach(nascentC64) {
  c64 = nascentC64;

  c64.keyboard = {
    setSetKeyMatrix,
    cursorsToKeys: true,
    naturalMapping: true,
  };

  globalThis.addEventListener("keydown", onKeyDown);
  globalThis.addEventListener("keyup",   onKeyUp);
  globalThis.addEventListener("blur",    onBlur);
}

// Called during initialization to tell the keyboard event handler how to send
// key matrices to CIA1.
function setSetKeyMatrix(_setKeyMatrix) {
  setKeyMatrix = _setKeyMatrix;
}

function buttonNamesToKeyMatrix(buttonNames) {
  const keyMatrix = [0, 0, 0, 0, 0, 0, 0, 0];

  for (let buttonName of buttonNames) {
    const [column, row] = _buttonNameToMatrixPos__WEBPACK_IMPORTED_MODULE_2__.buttonNameToMatrixPos[buttonName];
    keyMatrix[column] |= (1 << row);
  }

  setKeyMatrix(keyMatrix);
}


function onKeyDown(event) {
  // Any keypress with the Meta key (cmd/ctrl/...) down isn't for us.
  if (event.metaKey) return;

  // Shift/Cursors may be disabled for keyboards so that they can go to the
  // joysticks only (otherwise games like Buggy Boy get stuck)
  if (!c64.keyboard.cursorsToKeys) {
    if (event.key === "Shift")      return;
    if (event.key === "ArrowUp")    return;
    if (event.key === "ArrowDown")  return;
    if (event.key === "ArrowLeft")  return;
    if (event.key === "ArrowRight") return;
  }

  // Map the event to a list of C64 buttons that the keypress corresponds to
  // (if any)
  const buttonNames = getEventToButtonNames()(event);
  if (!buttonNames) return;

  // For debug
  if (globalThis.inhibitKeyboard) return;

  // Associate the position-centric event.code with the names of the buttons it
  // translates to
  keyStack = [
    {
      code: event.code,
      buttonNames
    },
    ...keyStack.filter(
      ({ code }) => (code !== event.code)
    )
  ];

  // Make available to CIA1
  buttonNamesToKeyMatrix(
    getKeyStackToButtonNames()(keyStack)
  );

  event.preventDefault();
}

function onKeyUp(event) {
  const buttonNames = getEventToButtonNames()(event);
  if (!buttonNames) return;

  keyStack = keyStack.filter(
    ({ code }) => (code !== event.code)
  );

  buttonNamesToKeyMatrix(
    getKeyStackToButtonNames()(keyStack)
  );

  event.preventDefault();
}

function onBlur(event) {
  // All bets are off when we lose focus. So assume all keys got released.
  keyStack = [];
  buttonNamesToKeyMatrix([]);
}


/***/ }),

/***/ "./src/host/keyboard-direct.js":
/*!*************************************!*\
  !*** ./src/host/keyboard-direct.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   eventToButtonNames: () => (/* binding */ eventToButtonNames),
/* harmony export */   keyStackToButtonNames: () => (/* binding */ keyStackToButtonNames)
/* harmony export */ });
/*
   "Direct" keyboard mapping: translates what key you press on your keyboard to
   the C64 key in a roughly-corresponding position (see images at
   https://www.c64-wiki.com/wiki/Keyboard). Notable exceptions are:
  
     * RUN STOP is moved to Escape.
     * ← and ↑ are moved to cursor-left and cursor-up. Those two were unused
       as the C64 requires you to use shift+cursor-right and shift+cursor-up
       for them anyways.
       (Like, seriously, £, @, ← and ↑ got their own buttons, but cursor-up and
       cursor-left had to share?!)
     * = is moved to the backslash above Enter (on a US keyboard)
     * £ is moved to the backtick to the left of 1 (on a US keyboard)
     * CLR HOME is moved to F8, and, if your keyboard features it, Home. If
       you have a numeric keypad with a Clear key (like the Mac extended
       keyboard), it will effect a left-shift and CLR HOME.
     * RESTORE is presently unmapped, mostly because it's connected to the NMI
       line rather than the keyboard matrix. Still, it would be nice to get it
       in someday, not that we have an obvious physical space for it.

   Reference: see
     https://hacks.mozilla.org/2017/03/internationalize-your-keyboard-controls/
  
   Note that, unlike event.key, and unlike what the names of its values would
   suggest, event.code tells you the physical location of the key that was
   pressed. So an event.code of "KeyQ" means you'd hit the "Q" of a QWERTY
   keyboard *or* the "A" of a French AZERTY keyboard. A "KeyY" means you'd hit
   the Y of a QWERTY keyboard, or the Z of a German QWERTZ keyboard.
*/

const eventCodeToButtonNames = {

  // Top row, left-to-right
  "ArrowLeft":      ["LeftArrow"],    // Not where you might expect
  "Digit1":         ["Num1"],
  "Digit2":         ["Num2"],
  "Digit3":         ["Num3"],
  "Digit4":         ["Num4"],
  "Digit5":         ["Num5"],
  "Digit6":         ["Num6"],
  "Digit7":         ["Num7"],
  "Digit8":         ["Num8"],
  "Digit9":         ["Num9"],
  "Digit0":         ["Num0"],
  "Minus":          ["Plus"],
  "Equal":          ["Minus"],
  "Backquote":      ["Pound"],        // Not where you might expect
  "F8":             ["ClrHome"],      // Not where you might expect
  "Backspace":      ["InstDel"],

  // Second row, left-to-right
  "Tab":            ["Ctrl"],
  "KeyQ":           ["Q"],
  "KeyW":           ["W"],
  "KeyE":           ["E"],
  "KeyR":           ["R"],
  "KeyT":           ["T"],
  "KeyY":           ["Y"],
  "KeyU":           ["U"],
  "KeyI":           ["I"],
  "KeyO":           ["O"],
  "KeyP":           ["P"],
  "BracketLeft":    ["At"],
  "BracketRight":   ["Asterisk"],
  "ArrowUp":        ["UpArrow"],      // Not where you might expect

  // Third row, left-to-right
  "Escape":         ["RunStop"],
  "KeyA":           ["A"],
  "KeyS":           ["S"],
  "KeyD":           ["D"],
  "KeyF":           ["F"],
  "KeyG":           ["G"],
  "KeyH":           ["H"],
  "KeyJ":           ["J"],
  "KeyK":           ["K"],
  "KeyL":           ["L"],
  "Semicolon":      ["Colon"],
  "Quote":          ["Semicolon"],
  "Backslash":      ["Equal"],        // Not where you might expect
  "Enter":          ["Return"],

  // Fourth row, left-to-right
  "AltLeft":        ["Commodore"],
  "ShiftLeft":      ["LeftShift"],
  "KeyZ":           ["Z"],
  "KeyX":           ["X"],
  "KeyC":           ["C"],
  "KeyV":           ["V"],
  "KeyB":           ["B"],
  "KeyN":           ["N"],
  "KeyM":           ["M"],
  "Comma":          ["Comma"],
  "Period":         ["Period"],
  "Slash":          ["Slash"],
  "ShiftRight":     ["RightShift"],
  "ArrowDown":      ["CursorDown"],
  "ArrowRight":     ["CursorRight"],

  // Fifth row, left-to-right
  "Space":          ["Space"],

  // Function keys
  "F1":             ["F1"],
  "F3":             ["F3"],
  "F5":             ["F5"],
  "F7":             ["F7"],

  // Above that's a 1:1 mapping of everything. Now let's map some extra keys,
  // if your keyboard has them, to something vaguely intuitive:
  "Home":           ["ClrHome"],
  "Clear":          ["Home", "LeftShift"],
  "Delete":         ["InstDel"],
  "Numpad0":        ["Num0"],
  "Numpad1":        ["Num1"],
  "Numpad2":        ["Num2"],
  "Numpad3":        ["Num3"],
  "Numpad4":        ["Num4"],
  "Numpad5":        ["Num5"],
  "Numpad6":        ["Num6"],
  "Numpad7":        ["Num7"],
  "Numpad8":        ["Num8"],
  "Numpad9":        ["Num9"],
  "NumpadEqual":    ["Equal"],
  "NumpadDivide":   ["Slash"],
  "NumpadMultiply": ["Asterisk"],
  "NumpadSubtract": ["Minus"],
  "NumpadAdd":      ["Plus"],
  "NumpadEnter":    ["Return"],
  "F2":             ["F1", "LeftShift"],
  "F4":             ["F3", "LeftShift"],
  "F6":             ["F5", "LeftShift"],
  "F8":             ["F7", "LeftShift"],
}

function eventToButtonNames(event) {
  return eventCodeToButtonNames[event.code];
}

function keyStackToButtonNames(keyStack) {
  // For the direct keyboard handler, we're stacking all the pressed keys on
  // top of each other.
  const buttons = new Set();

  keyStack.forEach(
    ({ buttonNames }) => (
      buttonNames.forEach(
        buttonName => buttons.add(buttonName)
      )
    )
  );

  return Array.from(buttons);
}


/***/ }),

/***/ "./src/host/keyboard-natural.js":
/*!**************************************!*\
  !*** ./src/host/keyboard-natural.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   eventToButtonNames: () => (/* binding */ eventToButtonNames),
/* harmony export */   keyStackToButtonNames: () => (/* binding */ keyStackToButtonNames)
/* harmony export */ });
/*
   "Natural" keyboard mapping: tries to map what was written on your key to a
   combination of C64 physical keys. Convenient for typing, but makes many C64
   keys, or key combinations, inaccessible.

   There is a problem with this approach: pressing repeated asterisks (if
   that's Shift-8 on your keyboard) alternates between telling the virtual
   machine that only SHIFT is pressed, and only the * key is pressed. If that
   transition happens in the middle of the keyboard matrix scan, it can look
   like both are pressed, resulting in a shifted-* key getting typed (a PETSCII
   horizontal line character). It's not as difficult to achieve as you might
   think.

   Arguably we shouldn't be sending shift-on-its-own to the virtual machine.
*/

const eventKeyToButtonNames = {
  "a":          ["A"],
  "b":          ["B"],
  "c":          ["C"],
  "d":          ["D"],
  "e":          ["E"],
  "f":          ["F"],
  "g":          ["G"],
  "h":          ["H"],
  "i":          ["I"],
  "j":          ["J"],
  "k":          ["K"],
  "l":          ["L"],
  "m":          ["M"],
  "n":          ["N"],
  "o":          ["O"],
  "p":          ["P"],
  "q":          ["Q"],
  "r":          ["R"],
  "s":          ["S"],
  "t":          ["T"],
  "u":          ["U"],
  "v":          ["V"],
  "w":          ["W"],
  "x":          ["X"],
  "y":          ["Y"],
  "z":          ["Z"],

  "A":          ["A", "LeftShift"],
  "B":          ["B", "LeftShift"],
  "C":          ["C", "LeftShift"],
  "D":          ["D", "LeftShift"],
  "E":          ["E", "LeftShift"],
  "F":          ["F", "LeftShift"],
  "G":          ["G", "LeftShift"],
  "H":          ["H", "LeftShift"],
  "I":          ["I", "LeftShift"],
  "J":          ["J", "LeftShift"],
  "K":          ["K", "LeftShift"],
  "L":          ["L", "LeftShift"],
  "M":          ["M", "LeftShift"],
  "N":          ["N", "LeftShift"],
  "O":          ["O", "LeftShift"],
  "P":          ["P", "LeftShift"],
  "Q":          ["Q", "LeftShift"],
  "R":          ["R", "LeftShift"],
  "S":          ["S", "LeftShift"],
  "T":          ["T", "LeftShift"],
  "U":          ["U", "LeftShift"],
  "V":          ["V", "LeftShift"],
  "W":          ["W", "LeftShift"],
  "X":          ["X", "LeftShift"],
  "Y":          ["Y", "LeftShift"],
  "Z":          ["Z", "LeftShift"],

  "0":          ["Num0"],
  "1":          ["Num1"],
  "2":          ["Num2"],
  "3":          ["Num3"],
  "4":          ["Num4"],
  "5":          ["Num5"],
  "6":          ["Num6"],
  "7":          ["Num7"],
  "8":          ["Num8"],
  "9":          ["Num9"],

  "!":          ["Num1", "LeftShift"],
  '"':          ["Num2", "LeftShift"],
  "#":          ["Num3", "LeftShift"],
  "$":          ["Num4", "LeftShift"],
  "%":          ["Num5", "LeftShift"],
  "&":          ["Num6", "LeftShift"],
  "'":          ["Num7", "LeftShift"],
  "(":          ["Num8", "LeftShift"],
  ")":          ["Num9", "LeftShift"],

  " ":          ["Space"],
  "Backspace":  ["InstDel"],
  "Enter":      ["Return"],
  "Escape":     ["RunStop"],

  "+":          ["Plus"],
  "-":          ["Minus"],
  "=":          ["Equal"],
  "@":          ["At"],
  "£":          ["Pound"],
  "*":          ["Asterisk"],
  ",":          ["Comma"],
  ".":          ["Period"],
  "/":          ["Slash"],
  "?":          ["Slash", "LeftShift"],
  ":":          ["Colon"],
  ";":          ["Semicolon"],
  "[":          ["Colon", "LeftShift"],
  "]":          ["Semicolon", "LeftShift"],

  "Shift":      ["LeftShift"],
  "Home":       ["ClrHome"],
  "ArrowLeft":  ["CursorRight", "LeftShift"],
  "ArrowRight": ["CursorRight"],
  "ArrowUp":    ["CursorDown", "LeftShift"],
  "ArrowDown":  ["CursorDown"],

  "F1":         ["F1"],
  "F2":         ["F1", "LeftShift"],
  "F3":         ["F3"],
  "F4":         ["F3", "LeftShift"],
  "F5":         ["F5"],
  "F6":         ["F5", "LeftShift"],
  "F7":         ["F7"],
  "F8":         ["F7", "LeftShift"],

  // We're not going to translate all of our Unicode translations (see
  // videoAsAnsi.js) back to PETSCII, but we'll make an exception for π, since
  // Basic understands it as a token.
  "π":          ["UpArrow", "LeftShift"],

  // Not literal; provided for convenience
  "`":          ["LeftArrow"],
  "~":          ["UpArrow"],
  "\\":         ["ClrHome"],
  "|":          ["ClrHome", "LeftShift"],
  "^":          ["Commodore", "LeftShift"],
  "_":          ["RunStop", "LeftShift"],
  "{":          ["Ctrl", "Num9"],
  "}":          ["Ctrl", "Num0"],
};

function eventToButtonNames(event) {
  return eventKeyToButtonNames[event.key];
}

function keyStackToButtonNames(keyStack) {
  // For the natural keyboard handler, only the buttons for the most recent key
  // event are held. Thus, if you type an asterisk by Shift-8 (eg. on a US
  // keyboard), the result will be just the single key, ["Asterisk"], not
  // the combination ["Asterisk, LeftShift"], which corresponds to a PETSCII
  // horizontal line character.
  if (!keyStack.length) return [];
  return keyStack[0].buttonNames;
}


/***/ }),

/***/ "./src/host/video-canvas.js":
/*!**********************************!*\
  !*** ./src/host/video-canvas.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attach: () => (/* binding */ attach),
/* harmony export */   setHasScope: () => (/* binding */ setHasScope),
/* harmony export */   setHasSnapshots: () => (/* binding */ setHasSnapshots),
/* harmony export */   setHasTrays: () => (/* binding */ setHasTrays)
/* harmony export */ });
// References:
// †1 http://www.zimmers.net/cbmpics/cbm/c64/vic-ii.txt

// A PAL frame (†1) is 312 lines of 504 pixels each. (8 pixels/cycle, 63 cycles
// per line). The emulated Vic will call our setPixel for each of those 157,248
// virtual pixels, many of which are in the hblank or vblank, and it's up to
// this interface to discard those.
//
// According to that same source, there are 284 visible lines of 403 visible
// pixels each. I'm coercing those numbers a little to get the dimentions
// below, and they'll likely change when the Vic emulation gets more cycle-
// accurate.


// Constants that may be variable in future
// x and y position (as arguments to setPixel) for first visible pixels
let first_x = 95;
let first_y = 10;

let canvas_w = 402;
let canvas_h = 282;

const SCOPE_WIDTH = 274;
const TRAY_HEIGHT = 70;     // TODO: unless the window is narrow
const SNAPSHOTS_WIDTH = 150;

let canvas;
let context;
let imageData;
let bitmap;
let showingTrays     = false;
let showingScope     = false;
let showingSnapshots = false;

function attach(nascentC64) {
  nascentC64.video = {
    // Control
    reset,
    // Interface-specific handlers
    setPixel,
    blit,
  };

  createCanvas();
}

function reset() {
  clearCanvas();
}

function createCanvas() {
  canvas = document.getElementById("canvas");
  canvas.setAttribute("width",  canvas_w);
  canvas.setAttribute("height", canvas_h);

  context = canvas.getContext("2d");
  imageData = context.getImageData(0, 0, canvas_w, canvas_h);
  bitmap = imageData.data;  
  clearCanvas();

  positionCanvas();
  window.addEventListener("resize", onResize);
}

function setHasScope(hasScope) {
  showingScope = hasScope;
  positionCanvas();
}

function setHasTrays(hasTrays) {
  showingTrays = hasTrays;
  positionCanvas();
}

function setHasSnapshots(hasSnapshots) {
  showingSnapshots = hasSnapshots;
  positionCanvas();
}

function onResize() {
  // Don't allow the canvas size transition to happen when the window resizes,
  // or it'll be a slow gloopy mess.
  requestAnimationFrame(
    () => {
      canvas.classList.add("no-transition");
      requestAnimationFrame(
        () => {
          positionCanvas();
          requestAnimationFrame(
            () => {
              canvas.classList.remove("no-transition");
            }
          );            
        }
      );
    }
  );
}

function positionCanvas() {
  const { innerWidth, innerHeight } = window;

  // First assess the extents of the potential area into which the canvas could
  // be positioned.

  // availWidth/Height, min/maxUsableX/Y: areas of the window not occupied by
  // the trays/rails.
  let availWidth  = innerWidth;
  let availHeight = innerHeight;
  let minUsableX  = 0;
  let maxUsableX  = innerWidth;
  let minUsableY  = 0;
  let maxUsableY  = innerHeight;

  if (showingScope) {
    availWidth -= SCOPE_WIDTH;
    maxUsableX -= SCOPE_WIDTH;
  }
  
  if (showingTrays) {
    availHeight -= 2 * TRAY_HEIGHT;
    minUsableY += TRAY_HEIGHT;
    maxUsableY -= TRAY_HEIGHT;
  }

  if (showingSnapshots) {
    availWidth -= SNAPSHOTS_WIDTH;
    minUsableX += SNAPSHOTS_WIDTH;
  }

  // Now consider its width and height: fill the available width or height
  // depending on which constrains us first.

  const srcRatio = canvas_w / canvas_h;
  let w, h;

  if ((availWidth / availHeight) > srcRatio) {
    // canvas has a wider ratio so bound it by height
    h = availHeight;
    w = availHeight * srcRatio;
  }
  else {
    // canvas has a taller ratio so bound it by width
    h = availWidth / srcRatio;
    w = availWidth;
  }

  // Finally consider centering. We'll first try centering within the original
  // window rather than within the whittled down-space. If we'd hit a rail in
  // doing so, nudge it until it's only just touching that rail.

  let idealX = (innerWidth - w) / 2;
  let x;

  if (idealX < minUsableX) x = minUsableX;
  else if ((idealX + w) >= maxUsableX) x = maxUsableX - w;
  else x = idealX;

  // Vertical centering's easy: either both trays are showing, or neither are.
  // And they'd both the same height, so the calculation can ignore them.

  let y = minUsableY;
  y += (availHeight - h) / 2;

  canvas.setAttribute(
    "style",
    `width: ${Math.round(w)}px;` +
    `height: ${Math.round(h)}px;` +
    `left: ${Math.round(x)}px;` +
    `top: ${Math.round(y)}px;`
  );
}

function clearCanvas() {
  let index = 0;

  for (let y = 0; y < canvas_h; y++) {
    for (let x = 0; x < canvas_w; x++) {
      bitmap[index++] = 0;
      bitmap[index++] = 0;
      bitmap[index++] = 0; 
      bitmap[index++] = 255;
    }
  }

  blit();
}

function setPixel(x, y, r, g, b) {
  x -= first_x;
  y -= first_y;

  if ((x < 0) || (x >= canvas_w)) return;
  if ((y < 0) || (y >= canvas_h)) return;

  let index = (((y * canvas_w) + x) * 4);

  // Relies on the alpha values having already been set by clearCanvas
  bitmap[index++] = r;
  bitmap[index++] = g;
  bitmap[index  ] = b;
}

function blit() {
  context.putImageData(imageData, 0, 0); 
}


/***/ }),

/***/ "./src/host/webFrontEnd/collisionScope.js":
/*!************************************************!*\
  !*** ./src/host/webFrontEnd/collisionScope.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   collision: () => (/* binding */ collision)
/* harmony export */ });
// bound by attach
let c64;

const allOffState = {
  ignoreSprSpr: false,
  ignoreSprBg:  false,
  dontVis:      false,
};

const desiredState = { ...allOffState };

const checkboxes = [
  { domId: "noSprSprColButton", desiredStateKey: "ignoreSprSpr" },
  { domId: "noSprBgColButton",  desiredStateKey: "ignoreSprBg"  },
  { domId: "noVisColButton",    desiredStateKey: "dontVis"      },
];

function attach(nascentC64) {
  c64 = nascentC64;

  for (let { domId, desiredStateKey } of checkboxes) {
    attachEventHandler(domId, desiredStateKey);
  }
}

function applyState(state) {
  c64.vic.setScope(state.dontVis ? null : "scopeCollision");
  c64.vic.setIgnoreSprBgCol (state.ignoreSprBg);
  c64.vic.setIgnoreSprSprCol(state.ignoreSprSpr);
}

function setCheckboxesFromState(state) {
  for (let { domId, desiredStateKey } of checkboxes) {
    const { classList } = document.getElementById(domId);
    classList.remove("selected");
    if (state[desiredStateKey]) classList.add("selected");
  }
}

function attachEventHandler(domId, desiredStateKey) {
  document
    .getElementById(domId)
    .addEventListener(
      "click",
      (event) => {
        desiredState[desiredStateKey] = !desiredState[desiredStateKey];
        setCheckboxesFromState(desiredState);
        applyState(desiredState);
      }
    )
  ;
}

const collision = {
  domId:   "collisionScope",
  onEnter: () => applyState(desiredState),
  onExit:  () => applyState({ ...allOffState, dontVis: true }),
  attach,
};


/***/ }),

/***/ "./src/host/webFrontEnd/demos/first_prg.js":
/*!*************************************************!*\
  !*** ./src/host/webFrontEnd/demos/first_prg.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _tools_base64__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../tools/base64 */ "./src/tools/base64.js");


// Thank you Jason
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_tools_base64__WEBPACK_IMPORTED_MODULE_0__.base64Decode)(""));


/***/ }),

/***/ "./src/host/webFrontEnd/demos/hoverbovver_prg.js":
/*!*******************************************************!*\
  !*** ./src/host/webFrontEnd/demos/hoverbovver_prg.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _tools_base64__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../tools/base64 */ "./src/tools/base64.js");


/*
http://www.llamasoftarchive.org/oldsite/llamasoft/readme.txt
(as at 2020-05-15, 20:40 PDT)

LLAMASOFT GAMES FOR EMULATOR USE
======================================

These game images may be distributed free of charge to anyone
who wants to use them on emulators.  Please feel free
to carry them on emulator sites or whatever.  Llamasoft
feels that software old enough to be running on emulators
is not going to be exactly generating a huge amount of
revenue, and as such the images are considered by Llamasoft
to be in the public domain, and there will be *no* legal
hassles if your site carries the images.

Enjoy!

\
(:-) - Y a K  1/12/96
/ 
*/

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_tools_base64__WEBPACK_IMPORTED_MODULE_0__.base64Decode)(""));


/***/ }),

/***/ "./src/host/webFrontEnd/dialogs.js":
/*!*****************************************!*\
  !*** ./src/host/webFrontEnd/dialogs.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Dialog: () => (/* binding */ Dialog),
/* harmony export */   closeAllDialogs: () => (/* binding */ closeAllDialogs),
/* harmony export */   initDialogs: () => (/* binding */ initDialogs),
/* harmony export */   showErrorDialog: () => (/* binding */ showErrorDialog)
/* harmony export */ });
/* harmony import */ var _dialogs_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dialogs.css */ "./src/host/webFrontEnd/dialogs.css");


let openDialogs;
let menuEl;
let errorDialog;

class Dialog {

  constructor(id) {
    // this.state can be: "closed", "opening", "open", "closing"
    this.state = "closed";
    this.el = document.getElementById(id);
    this.el.addEventListener("transitionend", this.transitionDidEnd.bind(this));

    for (let closeButton of this.el.getElementsByClassName("close")) {
      closeButton.addEventListener(
        "click",
        this.close.bind(this)        
      );
    }
  }

  open() {

    openDialogs.add(this);
    reconsiderBlanket();

    // Maybe it matters what state we were in before?
    this.state = "opening";

    // On the first frame, make it display...
    requestAnimationFrame(
      () => {
        this.el.className = "dialog transparent";
        // ...only then, once it's up, can we start the transition
        requestAnimationFrame(
          () => {
            this.el.className = "dialog open";
          }
        );
      }
    );

    // Band-aid: without this, clicking on buttons to open the dialogs too
    // quickly can result in them opening with everything highighted.
    globalThis.getSelection().empty();
  }

  close() {
    // (Assuming it wasn't already closed)
    this.state = "closing";
    this.el.className = "dialog transparent";
  }

  transitionDidEnd() {
    switch (this.state) {
      case "closing":
        this.state = "closed";
        this.el.className = "dialog undisplayed";
        openDialogs.delete(this);
        reconsiderBlanket();
        break;
      case "opening":
        this.state = "open";
        break;
    }
  }
}

function reconsiderBlanket() {
  // TODO: ugh
  if (openDialogs.size) {
    menuEl.setAttribute(
      "style",
      `display: block;`
    );
  }
  else {
    menuEl.setAttribute(
      "style",
      `display: none;`
    );
  }
}

function showErrorDialog(text) {
  // This exposes the weakness of not having a dynamic dialog manager, which
  // creates and destroys the DOM elements on-demand. It's luck that multiple
  // dialogs don't occur at the same time, and we don't handle the case well
  // when they do. Hence the errorDialog is at the end of the pre-baked HTML.
  document
    .getElementById("errorDialog-text")
    .innerText = text;

  errorDialog.open();
}

function initDialogs() {

  openDialogs = new Set();
  menuEl = document.getElementById("menu");

  document
    .getElementById("blanket")
    .addEventListener(
      "click",
      () => {
        Array.from(openDialogs).forEach(
          dialog => dialog.close()
        );
      }
    )
  ;

  errorDialog = new Dialog("errorDialog");
}

function closeAllDialogs() {
  for (let dialog of openDialogs) {
    // Doesn't mutate the list we're iterating over
    dialog.close();
  }
}


/***/ }),

/***/ "./src/host/webFrontEnd/diskDialog.js":
/*!********************************************!*\
  !*** ./src/host/webFrontEnd/diskDialog.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initDiskDialog: () => (/* binding */ initDiskDialog)
/* harmony export */ });
/* harmony import */ var _dialogs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dialogs */ "./src/host/webFrontEnd/dialogs.js");
/* harmony import */ var _target_rom_character__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../target/rom/character */ "./src/target/rom/character.js");
/* harmony import */ var _tools_c64FontCodePoints__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../tools/c64FontCodePoints */ "./src/tools/c64FontCodePoints.js");
/* harmony import */ var _diskDialog_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./diskDialog.css */ "./src/host/webFrontEnd/diskDialog.css");





let c64;
let dialog;

function initDiskDialog(nascentC64) {
  c64 = nascentC64;

  c64.hooks.onD64Ingest = showDiskDialog;
  dialog = new _dialogs__WEBPACK_IMPORTED_MODULE_0__.Dialog("diskDialog");
}

function petsciiStringToCanvas(petsciiSeq) {

  const canvas = document.createElement("canvas");
  canvas.width  = 8 * petsciiSeq.length;
  canvas.height = 8;

  const context = canvas.getContext("2d");

  canvas.style.width  = `${Math.round(canvas.width  * 1.0)}px`;
  canvas.style.height = `${Math.round(canvas.height * 1.0)}px`;
  canvas.style.imageRendering = "pixelated";
  
  const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
  const bitmap = imageData.data;  

  Array.from(petsciiSeq).forEach(
    (char, index) => {

      let codepoint = (0,_tools_c64FontCodePoints__WEBPACK_IMPORTED_MODULE_2__.petsciiToFontCodePoint)(char.charCodeAt(0));

      for (let y = 0; y < 8; y++) {

        const fontOffset = (codepoint * 8) + y;
        let seq = _target_rom_character__WEBPACK_IMPORTED_MODULE_1__["default"][fontOffset];

        for (let x = 0; x < 8; x++) {
          let canvasOffset = ((y * canvas.width) + (index * 8) + x) * 4;

          if (seq & 0b10000000) {
            bitmap[canvasOffset + 0] = 0xff;
            bitmap[canvasOffset + 1] = 0xff;
            bitmap[canvasOffset + 2] = 0xff;
            bitmap[canvasOffset + 3] = 255;
          }

          seq <<= 1;
        }
      }
    }
  );

  context.putImageData(imageData, 0, 0);
  return canvas;
}

function showDiskDialog(dir) {

  let resolveWithDirEntry;

  const promise = new Promise(
    (resolve) => {
      resolveWithDirEntry = resolve;
    }
  );

  const container = document.getElementById("diskDialog-dirEntries");

  // Empty whatever might have been there before
  while (container.firstChild) {
    container.removeChild(container.lastChild);
  }

  for (let entry of dir) {
    const { name, blocks, type } = entry;
    
    const canvas = petsciiStringToCanvas(
      `${String(blocks).padEnd(5)}${`"${name}"`.padEnd(20)}${type}`
    );

    const button = document.createElement("button");
    button.appendChild(canvas);

    if (type === "PRG") {
      button.addEventListener(
        "click",
        () => {
          (0,_dialogs__WEBPACK_IMPORTED_MODULE_0__.closeAllDialogs)();
          resolveWithDirEntry(entry);
        }
      );
    }
    else {
      button.setAttribute("disabled", "disabled");
    }

    container.appendChild(button);
  }

  dialog.open();
  return promise;
}


/***/ }),

/***/ "./src/host/webFrontEnd/index.js":
/*!***************************************!*\
  !*** ./src/host/webFrontEnd/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attach: () => (/* binding */ attach)
/* harmony export */ });
/* harmony import */ var _dialogs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dialogs */ "./src/host/webFrontEnd/dialogs.js");
/* harmony import */ var _trays__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./trays */ "./src/host/webFrontEnd/trays.js");
/* harmony import */ var _scopes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scopes */ "./src/host/webFrontEnd/scopes.js");
/* harmony import */ var _joystickDialog__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./joystickDialog */ "./src/host/webFrontEnd/joystickDialog.js");
/* harmony import */ var _keyMapDialog__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./keyMapDialog */ "./src/host/webFrontEnd/keyMapDialog.js");
/* harmony import */ var _loaderDialog__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./loaderDialog */ "./src/host/webFrontEnd/loaderDialog.js");
/* harmony import */ var _diskDialog__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./diskDialog */ "./src/host/webFrontEnd/diskDialog.js");
/*
   This web front end maintains a whole UI through direct DOM manipulation.
   That's a bad idea. One initial goal of the emulator was to have no external
   dependencies, but then the front end grew, and now it's long past the point
   that it should just be rewritten in React or other framework. So... expect
   this folder to look very different in future.
*/










// A development aid. Don't commit with this turned on.
const pauseOnMenus = false;

function attach(nascentC64) {
  const c64 = nascentC64;

  // Attach click handlers for backgroup elements to open the upper tray
  for (let el of document.getElementsByClassName("_isBackground")) {
    el.addEventListener(
      "click",
      (event) => {
        if (event.target !== el) {
          // This paradigm feels wrong
          return;
        }

        const showing = (0,_trays__WEBPACK_IMPORTED_MODULE_1__.toggleTrays)();

        if (pauseOnMenus) {
          // This is a hack, and will conflict with settings you
          // make to the runloop and mute within the menu.
          if (showing) {
            c64.runloop.stop();
            c64.audio.setUiGain(0);
          }
          else {
            c64.runloop.run();
            c64.audio.setUiGain(1);
          }
        }
      }
    );
  }

  // Wire-up all the other UI elements (existing HTML) to code
  (0,_dialogs__WEBPACK_IMPORTED_MODULE_0__.initDialogs)();
  (0,_trays__WEBPACK_IMPORTED_MODULE_1__.initTrays)(c64);
  (0,_joystickDialog__WEBPACK_IMPORTED_MODULE_3__.initJoystickDialog)(c64);
  (0,_keyMapDialog__WEBPACK_IMPORTED_MODULE_4__.initKeyMapDialog)(c64);
  (0,_loaderDialog__WEBPACK_IMPORTED_MODULE_5__.initLoaderDialog)(c64);
  (0,_diskDialog__WEBPACK_IMPORTED_MODULE_6__.initDiskDialog)(c64);
  (0,_scopes__WEBPACK_IMPORTED_MODULE_2__.initScopes)(c64);

  c64.hooks.reportError = _dialogs__WEBPACK_IMPORTED_MODULE_0__.showErrorDialog;
  c64.hooks.setTitle = setTitle;
}

const initialTitle = document.title;

function setTitle(str) {
  // TODO: we should do this for ANSI mode too,
  // And get it into the snapshot name; at least so that clicking on the
  // snapshot will restore the window title.
  document.title = str.length ? `${str} (${initialTitle})` : initialTitle;
}


/***/ }),

/***/ "./src/host/webFrontEnd/joystickDialog.js":
/*!************************************************!*\
  !*** ./src/host/webFrontEnd/joystickDialog.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initJoystickDialog: () => (/* binding */ initJoystickDialog)
/* harmony export */ });
/* harmony import */ var _joystickDialog_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./joystickDialog.css */ "./src/host/webFrontEnd/joystickDialog.css");


let c64;
let state;

const crsrsBindings = [
  ["crsrs_key", "cursorsToKeys"],
  ["crsrs_cp1", "cursorsToCp1"],
  ["crsrs_cp2", "cursorsToCp2"],
];

function initJoystickDialog(nascentC64) {
  c64 = nascentC64;

  state = {
    // These maybe belong in some settings struct on c64
    cursorsToKeys: true,
    cursorsToCp1: false,
    cursorsToCp2: true,
  };

  for (let [id, stateKey] of crsrsBindings) {
    const el = document.getElementById(id);
    el.addEventListener(
      "click",
      () => {
        state[stateKey] = !state[stateKey];
        updateCursorElements();

        c64.keyboard.cursorsToKeys  = state.cursorsToKeys;
        c64.joystick.toControlPort1 = state.cursorsToCp1;
        c64.joystick.toControlPort2 = state.cursorsToCp2;

        event.stopImmediatePropagation();
      }
    );
  }

  updateCursorElements();
}

function updateCursorElements() {
  for (let [id, stateKey] of crsrsBindings) {
    const { classList } = document.getElementById(id);

    if (state[stateKey]) classList.add   ("selected");
    else                 classList.remove("selected");
  }
}


/***/ }),

/***/ "./src/host/webFrontEnd/keyMapDialog.js":
/*!**********************************************!*\
  !*** ./src/host/webFrontEnd/keyMapDialog.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initKeyMapDialog: () => (/* binding */ initKeyMapDialog)
/* harmony export */ });
/* harmony import */ var _keyMapDialog_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./keyMapDialog.css */ "./src/host/webFrontEnd/keyMapDialog.css");


let c64;

// Should get/set this from/to a cookie in future
let naturalMapping = true;

function initKeyMapDialog(nascentC64) {
  c64 = nascentC64;

  document.getElementById("map_natural").addEventListener(
    "click",
    () => {
      naturalMapping = true;
      c64.keyboard.naturalMapping = true;
      updateMappingElements();
    }
  );

  document.getElementById("map_direct").addEventListener(
    "click",
    () => {
      naturalMapping = false;
      c64.keyboard.naturalMapping = false;
      updateMappingElements();
    }
  );

  updateMappingElements();
}

function updateMappingElements() {
  setSelectedness("map_natural", naturalMapping);
  setSelectedness("map_direct", !naturalMapping);
}

function setSelectedness(id, selected) {
  const { classList } = document.getElementById(id);
  if (selected) classList.add   ("selected");
  else          classList.remove("selected");
}


/***/ }),

/***/ "./src/host/webFrontEnd/loaderDialog.js":
/*!**********************************************!*\
  !*** ./src/host/webFrontEnd/loaderDialog.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initLoaderDialog: () => (/* binding */ initLoaderDialog)
/* harmony export */ });
/* harmony import */ var _demos_hoverbovver_prg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./demos/hoverbovver_prg */ "./src/host/webFrontEnd/demos/hoverbovver_prg.js");
/* harmony import */ var _demos_first_prg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./demos/first_prg */ "./src/host/webFrontEnd/demos/first_prg.js");
/* harmony import */ var _dialogs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dialogs */ "./src/host/webFrontEnd/dialogs.js");
/* harmony import */ var _ingest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ingest */ "./src/host/ingest.js");
/* harmony import */ var _loaderDialog_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./loaderDialog.css */ "./src/host/webFrontEnd/loaderDialog.css");







let c64;

function initLoaderDialog(nascentC64) {
  c64 = nascentC64;

  document
    .getElementById("hoverBovverButton")
    .addEventListener(
      "click",
      // TODO: reassign joystick to port 1 automatically
      () => launch("Hover Bovver.prg", _demos_hoverbovver_prg__WEBPACK_IMPORTED_MODULE_0__["default"])
    )
  ;

  document
    .getElementById("firstButton")
    .addEventListener(
      "click",
      () => launch("First.prg", _demos_first_prg__WEBPACK_IMPORTED_MODULE_1__["default"])
    )
  ;
}

function launch(filename, bytes) {
  (0,_ingest__WEBPACK_IMPORTED_MODULE_3__.ingest)(c64, filename, bytes);
  (0,_dialogs__WEBPACK_IMPORTED_MODULE_2__.closeAllDialogs)();
}


/***/ }),

/***/ "./src/host/webFrontEnd/lowerTray.js":
/*!*******************************************!*\
  !*** ./src/host/webFrontEnd/lowerTray.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initLowerTray: () => (/* binding */ initLowerTray),
/* harmony export */   updateFpsMessage: () => (/* binding */ updateFpsMessage)
/* harmony export */ });
/* harmony import */ var _dialogs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dialogs */ "./src/host/webFrontEnd/dialogs.js");
/* harmony import */ var _scopes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scopes */ "./src/host/webFrontEnd/scopes.js");
/* harmony import */ var _snapshot__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./snapshot */ "./src/host/webFrontEnd/snapshot.js");




let c64;

function initLowerTray(nascentC64) {
  c64 = nascentC64;

  for (let [buttonId, dialogId] of [
    ["joystickButton", "cursorKeysDialog"],
    ["keymapButton",   "keymapDialog"],
    ["loadButton",     "loadDialog"],
    ["aboutButton",    "aboutDialog"],
  ]) {
    const dialog = new _dialogs__WEBPACK_IMPORTED_MODULE_0__.Dialog(dialogId);

    handlerForEventForId(
      buttonId, 
      "click",
      () => dialog.open()
    );
  }

  handlerForEventForId(
    "pauseButton", 
    "click",
    () => c64.runloop.stop()
  );

  handlerForEventForId(
    "playButton", 
    "click",
    () => c64.runloop.run()
  );

  handlerForEventForId(
    "recordButton", 
    "click",
    () => (0,_snapshot__WEBPACK_IMPORTED_MODULE_2__.takeSnapshot)(c64)
  );

  handlerForEventForId(
    "muteButton", 
    "click",
    () => mute()
  );

  handlerForEventForId(
    "unmuteButton", 
    "click",
    () => unmute()
  );

  handlerForEventForId(
    "scopeButton", 
    "click",
    () => (0,_scopes__WEBPACK_IMPORTED_MODULE_1__.toggleScopes)()
  );

  // TODO: we're choosing an initial state here, but what we should do is start
  // with it muted, and change it to unmuted when the audio API resumes itself
  // after the first interaction.
  document.getElementById("unmuteButton").classList.add("hidden");

  // TODO: This is a bad pattern, the tray taking the hook for itself. Other
  // components are quite likely to want access to the start/stop one. Ideally
  // have an EventTarget object in the frontend root, to which these
  // components should call an addEventListener.

  c64.hooks.didStart = () => {
    document.getElementById("pauseButton").classList.remove("hidden");
    document.getElementById("playButton") .classList.add   ("hidden");
    updateFpsMessage("...Hz");
  };

  c64.hooks.didStop = () => {
    document.getElementById("pauseButton").classList.add   ("hidden");
    document.getElementById("playButton") .classList.remove("hidden");
    updateFpsMessage("");
  };

  nascentC64.hooks.updateFps = (fps) => {
    updateFpsMessage(`${fps}Hz`);
  };
}

function updateFpsMessage(message) {
  document.getElementById("fps").innerText = message;
}

function handlerForEventForId(id, eventName, fn) {
  document
    .getElementById(id)
    .addEventListener(eventName, fn)
  ;
}

function mute() {
  document.getElementById("muteButton")  .classList.add   ("hidden");
  document.getElementById("unmuteButton").classList.remove("hidden");
  c64.audio.setUiGain(0);
}

function unmute() {
  document.getElementById("muteButton")  .classList.remove("hidden");
  document.getElementById("unmuteButton").classList.add   ("hidden");
  c64.audio.setUiGain(1);
}


/***/ }),

/***/ "./src/host/webFrontEnd/ramAccessScope.js":
/*!************************************************!*\
  !*** ./src/host/webFrontEnd/ramAccessScope.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ramAccess: () => (/* binding */ ramAccess)
/* harmony export */ });
// bound by attach
let c64;

let canvas;
let context;
let imageData;
let bitmap;

function attach(nascentC64) {
  c64 = nascentC64;

  canvas    = document.getElementById("ramAccessCanvas");
  context   = canvas.getContext("2d");
  imageData = context.getImageData(0, 0, 256, 256);
  bitmap    = imageData.data;  
}

function onEnter() {
  clearCanvas();
  blitCanvas();

  c64.hooks.onRamRead = (addr) => {
    // +1 = green
    bitmap[(addr * 4) + 1] = 255;
  };

  c64.hooks.onRamWrite = (addr) => {
    // +0 = red
    bitmap[(addr * 4) + 0] = 255;
  };

  c64.hooks.onVicRead = (addr) => {
    // +2 = blue
    bitmap[(addr * 4) + 2] = 255;
  };

  c64.hooks.onFrameEnd = () => {
    blitCanvas();
    clearCanvas();
  };
}

function onExit() {
  c64.hooks.onRamRead  = undefined;
  c64.hooks.onRamWrite = undefined;
  c64.hooks.onVicRead  = undefined;
  c64.hooks.onFrameEnd = undefined;
}

function blitCanvas() {
  context.putImageData(imageData, 0, 0);
}

function clearCanvas() {
  let index = 0;

  for (let y = 0; y < 256; y++) {
    for (let x = 0; x < 256; x++) {
      bitmap[index++] = 0;
      bitmap[index++] = 0;
      bitmap[index++] = 0; 
      bitmap[index++] = 255;
    }
  }
}

const ramAccess = {
  domId: "ramAccessScope",
  onEnter,
  onExit,
  attach,
};


/***/ }),

/***/ "./src/host/webFrontEnd/scopes.js":
/*!****************************************!*\
  !*** ./src/host/webFrontEnd/scopes.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initScopes: () => (/* binding */ initScopes),
/* harmony export */   toggleScopes: () => (/* binding */ toggleScopes)
/* harmony export */ });
/* harmony import */ var _video_canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../video-canvas */ "./src/host/video-canvas.js");
/* harmony import */ var _collisionScope__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./collisionScope */ "./src/host/webFrontEnd/collisionScope.js");
/* harmony import */ var _ramAccessScope__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ramAccessScope */ "./src/host/webFrontEnd/ramAccessScope.js");
/* harmony import */ var _scopes_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scopes.css */ "./src/host/webFrontEnd/scopes.css");





let c64;
let isShowing = false;
// `selectedScope`: selected, but not necessarily active
let selectedScope = "sprites";

const scopes = {
  // Keys should match the <option> tag's `value`.
  sprites: {
    domId:       "spriteScope",
    onEnter:     () => c64.vic.setScope("scopeSprites"),
    onExit:      () => c64.vic.setScope(null),
  },
  background: {
    domId:       "backgroundScope",
    onEnter:     () => c64.vic.setScope("scopeBackground"),
    onExit:      () => c64.vic.setScope(null),
  },
  collision: _collisionScope__WEBPACK_IMPORTED_MODULE_1__.collision,
  colorRam: {
    onEnter:     () => c64.vic.setScope("scopeColorRam"),
    onExit:      () => c64.vic.setScope(null),
  },
  ramAccess: _ramAccessScope__WEBPACK_IMPORTED_MODULE_2__.ramAccess,
};

function initScopes(nascentC64) {
  c64 = nascentC64;

  const selectEl = document.getElementById("scopeSelect");

  selectEl
    .addEventListener(
      "change",
      (event) => {
        stopScope();
        hideScope();
        selectedScope = selectEl.value;
        showScope();
        startScope();
      }
    )
  ;

  for (const [,{ attach, domId }] of Object.entries(scopes)) {
    if (domId) {
      document
        .getElementById(domId)
        .classList
        .add("hidden")
      ;
    }
    if (attach) attach(nascentC64);
  }
}

function toggleScopes() {
  isShowing = !isShowing;

  // Tell the layout manager the side panel's moving
  (0,_video_canvas__WEBPACK_IMPORTED_MODULE_0__.setHasScope)(isShowing);

  // Open or close the side panel, and start/stop the selected scope
  const scopeRail        = document.getElementById("scopeRail");
  const scopeRailBlanket = document.getElementById("scopeRail-blanket");

  if (isShowing) {
    scopeRail.classList.remove("hidden");
    scopeRailBlanket.classList.add("hidden");
    startScope();
  }
  else {
    scopeRail.classList.add("hidden");
    scopeRailBlanket.classList.remove("hidden");
    stopScope();
  }
}

function startScope() {
  const { domId, onEnter } = scopes[selectedScope];
  if (domId) {
    document
      .getElementById(domId)
      .classList
      .remove("hidden")
    ;
  }
  onEnter();
}

function stopScope() {
  const { onExit } = scopes[selectedScope];
  onExit();
}

function hideScope() {
  const { domId } = scopes[selectedScope];
  if (domId) {
    document
      .getElementById(domId)
      .classList
      .add("hidden")
    ;
  }
}

function showScope() {
  const { domId } = scopes[selectedScope];
  if (domId) {
    document
      .getElementById(domId)
      .classList
      .remove("hidden")
    ;
  }
}


/***/ }),

/***/ "./src/host/webFrontEnd/snapshot.js":
/*!******************************************!*\
  !*** ./src/host/webFrontEnd/snapshot.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   takeSnapshot: () => (/* binding */ takeSnapshot)
/* harmony export */ });
/* harmony import */ var _video_canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../video-canvas */ "./src/host/video-canvas.js");
/* harmony import */ var _snapshots_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./snapshots.css */ "./src/host/webFrontEnd/snapshots.css");



let numSnapshotsShowing = 0;
let lastSnapshotNum = 0;

let maskCanvas;

function createSnapshotCanvas() {

  // Would prob. be better to ask video-canvas for its element instead
  const mainCanvas = document.getElementById("canvas");

  // Create the 1701-monitor-bezel mask canvas if we haven't already
  if (!maskCanvas) {
    maskCanvas = document.createElement("canvas");

    maskCanvas.width  = mainCanvas.width;
    maskCanvas.height = mainCanvas.height;

    const context = maskCanvas.getContext("2d");

    // Fill color is irrelevant; we're just relying on alpha channel
    context.fill(
      new Path2D(
        "M386.79,141s.1,29.89-1,59.26c-1,26.65-3.3,52.86-4.21,56.07-2.22,7.8-3.75,17.87-18.83,20.46-8.38,1.44-34.53,2.84-62.95,3.65C253.8,281.75,201,282,201,282s-52.8-.25-98.76-1.56c-28.42-.81-54.57-2.21-62.95-3.65-15.08-2.59-16.61-12.66-18.83-20.46-.91-3.21-3.17-29.42-4.21-56.07-1.14-29.37-1-59.26-1-59.26s-.1-29.89,1-59.26c1-26.65,3.3-52.86,4.21-56.07,2.22-7.8,3.75-17.87,18.83-20.46,8.38-1.44,34.53-2.84,63-3.65C148.2.25,201,0,201,0s52.8.25,98.76,1.56c28.42.81,54.57,2.21,62.95,3.65,15.08,2.59,16.61,12.66,18.83,20.46.91,3.21,3.17,29.42,4.21,56.07C386.89,111.11,386.79,141,386.79,141Z"
      )
    );
  }

  const canvas = document.createElement("canvas");

  canvas.width  = mainCanvas.width;
  canvas.height = mainCanvas.height;

  const context = canvas.getContext("2d");

  context.drawImage(maskCanvas, 0, 0);
  context.globalCompositeOperation = "source-in";
  context.drawImage(mainCanvas, 0, 0);

  return canvas;
}


function takeSnapshot(c64) {

  let alive = true;

  // TODO: inappropriate name now
  const bubble = document.createElement("div");

  const innerFrame = document.createElement("div");
  bubble.append(innerFrame);
  innerFrame.classList.add("innerFrame");

  const { classList } = bubble;

  classList.add("snapshot");
  classList.add("collapsed");

  requestAnimationFrame(
    () => {
      requestAnimationFrame(
        () => {
          classList.remove("collapsed");
        }
      );
    }
  );


  const close = document.createElement("button");
  close.setAttribute("class", "close");

  close.addEventListener(
    "click",
    (event) => {
      event.stopImmediatePropagation();
      if (alive) {
        onClose(classList);
        alive = false;
      }
    }
  );

  innerFrame.append(close);

  const button =  document.createElement("button");

  const canvas = createSnapshotCanvas();

  document
    .getElementById("snapshotsRail")
    .prepend(bubble)
  ;

  const serial = c64.runloop.serialize();
  const blob = new Blob(
    Array.from(
      // `serial` is serialized, but we'll JSON encode it for testing in source
      // for now. We won't need that later.
      JSON.stringify(serial)
    ),
    { type: "application/json" }
  );

  const link = document.createElement("a");
  link.innerText = `${++lastSnapshotNum}.json`;
  link.href = URL.createObjectURL(blob);

  link.addEventListener(
    "click",
    (event) => {
      event.preventDefault();
      event.stopImmediatePropagation();
      onClickSnapshot(c64, serial)
    }
  );

  canvas.addEventListener(
    "click",
    () => onClickSnapshot(c64, serial)
  );

  bubble.addEventListener(
    "transitionend",
    (event) => {
      onTransitionEnd(event, bubble, alive);
    }
  );

  button.append(canvas);

  innerFrame.append(button);
  innerFrame.append(link);

  numSnapshotsShowing++;
  reconsiderSnapshotRail();
}

function onClickSnapshot(c64, serial) {
  c64.runloop.stop();
  c64.runloop.reset();
  c64.runloop.deserialize(serial);
  c64.runloop.run(); 
}

function reconsiderSnapshotRail() {
  // Unlike the scopeRail, the snapshots rail doesn't need a blanket. The only
  // we for it to be hidden is if all the snapshots have been deleted; hence we
  // don't need to worry about clicking on one that wasn't there.

  const shouldShow = numSnapshotsShowing > 0;
  (0,_video_canvas__WEBPACK_IMPORTED_MODULE_0__.setHasSnapshots)(shouldShow);

  const { classList } = document.getElementById("snapshotsRail");

  if (shouldShow) classList.remove("hidden");
  else            classList.add   ("hidden");
}

function onTransitionEnd(event, bubble, alive) {
  if (event.target !== bubble) return;

  if (!alive) {
    console.log("onTransitionEnd");
    bubble.remove();
  }
}

function onClose(classList) {
  requestAnimationFrame(
    () => {
      requestAnimationFrame(
        () => {
          classList.add("collapsed");
        }
      );
    }
  );

  // transitionend handler will remove the bubble from the DOM, but for the
  // purposes of showing/hiding the rail, we'll consider it to have gone
  // already.
  numSnapshotsShowing--;
  reconsiderSnapshotRail();
}


/***/ }),

/***/ "./src/host/webFrontEnd/trays.js":
/*!***************************************!*\
  !*** ./src/host/webFrontEnd/trays.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initTrays: () => (/* binding */ initTrays),
/* harmony export */   toggleTrays: () => (/* binding */ toggleTrays)
/* harmony export */ });
/* harmony import */ var _upperTray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./upperTray */ "./src/host/webFrontEnd/upperTray.js");
/* harmony import */ var _lowerTray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lowerTray */ "./src/host/webFrontEnd/lowerTray.js");
/* harmony import */ var _video_canvas__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../video-canvas */ "./src/host/video-canvas.js");
/* harmony import */ var _trays_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./trays.css */ "./src/host/webFrontEnd/trays.css");





let isShowing = false;

function toggleTrays() {
  isShowing = !isShowing;

  const upperTray = document.getElementById("upperTray");
  const upperTrayBlanket = upperTray.getElementsByClassName("tray-blanket")[0];

  const trayClassList    = upperTray       .classList;
  const blanketClassList = upperTrayBlanket.classList;

  if (isShowing) {
    trayClassList.remove("hidden");
    blanketClassList.add("hidden");
  }
  else {
    trayClassList.add("hidden");
    blanketClassList.remove("hidden");
  }

  // As above, so below
  const lowerTray = document.getElementById("lowerTray");
  const lowerTrayBlanket = lowerTray.getElementsByClassName("tray-blanket")[0];

  lowerTray.classList = trayClassList;
  lowerTrayBlanket.classList = blanketClassList;

  (0,_video_canvas__WEBPACK_IMPORTED_MODULE_2__.setHasTrays)(isShowing);
  return isShowing;
}

function initTrays(nascentC64) {
  (0,_upperTray__WEBPACK_IMPORTED_MODULE_0__.initUpperTray)(nascentC64);
  (0,_lowerTray__WEBPACK_IMPORTED_MODULE_1__.initLowerTray)(nascentC64);
}


/***/ }),

/***/ "./src/host/webFrontEnd/upperTray.js":
/*!*******************************************!*\
  !*** ./src/host/webFrontEnd/upperTray.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initUpperTray: () => (/* binding */ initUpperTray)
/* harmony export */ });
let c64;
let serial = null;
let countdownInterval = null;

function initUpperTray(nascentC64) {
  c64 = nascentC64;

  handlerForEventForId(
    "resetButton", 
    "click",
    () => undoableReset()
  );

  handlerForEventForId(
    "undoResetButton", 
    "click",
    () => {
      if (serial) {
        c64.runloop.deserialize(serial);
        c64.runloop.run();
        removeUndoResetButton();
      }
    }
  );
}

function handlerForEventForId(id, eventName, fn) {
  document
    .getElementById(id)
    .addEventListener(eventName, fn)
  ;
}

function undoableReset() {
  serial = c64.runloop.serialize();
  c64.runloop.reset();
  c64.runloop.run();

  removeUndoResetButton();
  addUndoResetButton();
}

function removeUndoResetButton() {

  const [ resetButton, undoResetButton, label ] = [
    "resetButton",
    "undoResetButton",
    "undoResetButton-label"
  ].map((id) => document.getElementById(id));

  resetButton.classList.remove("hidden");
  undoResetButton.classList.add("hidden");
  label.innerText = "";

  if (countdownInterval) {
    clearInterval(countdownInterval);
    countdownInterval = null;
  }
}

function addUndoResetButton() {

  const [
    resetButton,
    undoResetButton,
    label
  ] = [
    "resetButton",
    "undoResetButton",
    "undoResetButton-label"
  ].map((id) => document.getElementById(id));

  resetButton.classList.add("hidden");
  undoResetButton.classList.remove("hidden");

  const updateLabelCountdown = () => {
    label.innerText = `Undo (${countdown})`;
  };
  
  let countdown = 6;
  updateLabelCountdown();

  if (countdownInterval) clearInterval(countdownInterval);

  countdownInterval = setInterval(
    () => {
      if (--countdown === 0) {
        removeUndoResetButton();
        serial = null;
      }
      else updateLabelCountdown();
    },
    1000
  );
}


/***/ }),

/***/ "./src/monitor.js":
/*!************************!*\
  !*** ./src/monitor.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attach: () => (/* binding */ attach)
/* harmony export */ });
/* harmony import */ var _tools_disasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tools/disasm */ "./src/tools/disasm.js");
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug */ "./src/debug.js");



// Bound by attach
let c64;
let runloop;
let cli;        // TODO: ugly

function attach(nascentC64) {
  c64 = nascentC64;
  runloop = c64.runloop;
  installCli();
}

function help() {
  console.log("Monitor commands:");
  console.log("-----------------");
  cli.forEach(i => i.help.forEach(j => console.log(j)));
  console.log("---");
}

function installCli() {
  cli = [
    {
      name: "h",
      help: [
        "h()       - help",
      ],
      fn: help
    },
    {
      name: "b",
      help: [
        "b()       - stop"
      ],
      fn: runloop.stop,
    },
    {
      name: "c",
      help: [
        "c()       - continue execution           c(0xfce2)         - execute from $fce2",
      ],
      fn: (from) => {
        if (from !== undefined) c64.cpu.getState().pc = from;
        runloop.run();
      }
    },
    {
      name: "s",
      help: [
        "s()       - single-step instruction      s(5)              - step 5 instructions",

      ],
      fn: (...args) => void singleStep(...args) // don't return the promise
    },
      {
      name: "u",
      help: [
        "u(0xe3a0) - run until PC = $e3a0         u(0xe3a0, true)   - same, as fast as possible",
      ],
      fn: untilPc
    },
    {
      name: "w",
      help: [
        "w(0x400, 0xff) - write $ff to $0400",
      ],
      fn: (addr, byte) => c64.wires.cpuWrite(addr, byte)
    },
    {
      name: "x",
      help: [
        "x(0x0400) - show hex from $400           x(0x0400, 0x1000) - show from $0400 to $1000",
      ],
      fn: (from, to) => {
        busDump(from, Math.min(to === undefined ? from + 0x7f : to), 0xffff);
      }
    },
      {
      name: "d",
      help: [
        "d(0x6000) - disassemble from $6000       d(r().pc)         - disassemble from PC",
      ],
      fn: (from, to=0x20 + from) => console.log((0,_tools_disasm__WEBPACK_IMPORTED_MODULE_0__.disasm)(c64.wires.cpuRead, from, to))
    },
    {
      name: "r",
      help: [
        "r()       - show registers               r().a=0xab        - set the acc to $ab",
      ],
      fn: () => {
        try {
          c64.cpu.showState();
        }
        catch (r) {}
        return c64.cpu.getState();
      }
    },
    {
      name: "y",
      help: [
        "y(370000) - run until cycle 370000",
      ],
      fn: untilCycle
    },
    {
      name: "f",
      help: [
        "f(5)      - run at 5 frames/second",
      ],
      fn: fps => runloop.run({ fps })
    },
    {
      name: "z",
      help: [
        "z()       - reset",
      ],
      fn: () => {
        runloop.reset();
        runloop.run();
      }
    },
  ];

  cli.forEach(
    i => {
      globalThis[i.name] = i.fn;
    }
  );

  help();

  // Strictly for the user to use, through the JavaScript console
  globalThis.c64 = c64;
}


async function singleStep(steps = 1) {
  while (steps--) {
    const initialPc = c64.cpu.getState().pc;
    await runloop.run({
      tick: () => c64.cpu.getState().pc !== initialPc
    });
    c64.cpu.showState();
  }
}

async function untilPc(pc, fast) {
  if (pc === undefined) {
    console.error("Missing argument: PC address");
    return;
  }

  await runloop.untilPc(pc, fast);
  c64.cpu.showState();
}

function untilCycle(cycle) {
  const runloopState = runloop.getState();
  runloop.run({
    tick: () => runloopState.cycle >= cycle,
    fps: Infinity,
  });
}

function busDump(from, to) {
  const { cpuRead } = c64.wires;
  const displayFrom = Math.floor(from / 16) * 16;
  const displayTo   = Math.floor(  to / 16) * 16;

  for (let addr = displayFrom; addr <= displayTo; addr += 16) {

    let line = "";
    let raw = "";

    for (let i = 0; i < 16; i++) {

      const a = addr + i;
      let hex = "  ";
      let char = " ";

      if ((a >= from) && (a <= to)) {
        const byte = cpuRead(a);
        hex = (0,_debug__WEBPACK_IMPORTED_MODULE_1__.xx)(byte);
        char = _debug__WEBPACK_IMPORTED_MODULE_1__.petsciiToChar[byte];
      }

      line += ` ${hex}`;
      if (i === 7) line += " ";

      raw += char;
    }

    console.log(`${(0,_debug__WEBPACK_IMPORTED_MODULE_1__.$xxxx)(addr)}: ${line}   ${raw}`);
  }
}


/***/ }),

/***/ "./src/target/bringup.js":
/*!*******************************!*\
  !*** ./src/target/bringup.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bringup: () => (/* binding */ bringup)
/* harmony export */ });
/* harmony import */ var _runloop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./runloop */ "./src/target/runloop.js");
/*
   bringup: a bootstrapping sequencer for initializing the virtual machine.
  
   The C64 is a system of mutually dependent components. We have to be careful,
   in structuring the emulator sources, that we don't introduce cyclic
   dependencies between modules, and when initializing a component, we have to
   guarantee that it doesn't try interacting with another component that hasn't
   itself yet initialized.
  
   This module orchestrates this bringup. Supply it with a structure of
   components representing the whole machine, and it'll get it started.
*/



function bringup({
  host:   { audio, video, keyboard, joystick },
  target: { wires, ram, vic, sid, cpu, cias, tape, basic, kernal, character },
  attachments
}) {

  const c64 = {
    // 'hooks' is a way for the target machine to trigger a host-side action,
    // for example, updating the FPS count on the UI, if there is one.
    // Target shouldn't assume any particular hook is present, but the presence
    // of the `hooks` object is at least guaranteed.
    hooks: {},
  };

  // First the ROMs, which, being just data, are truly at the end of the chain.
  c64.rom = {
    basic,
    kernal,
    character,
  };

  // ...followed by the RAM, which likewise won't be calling anyone else
  ram(c64);

  // wires has to go next. The one guarantee that other modules have while
  // initializing is that its functions and state structure are present.
  // (But must not be called until after initialization.)
  wires(c64);

  // Host interfaces have to attach next (in any order).
  // The target devices can assume, when they attach, that the functions and
  // objects for the interfaces are final.
  audio(c64);
  video(c64);
  joystick(c64);
  keyboard(c64);

  // Now all the devices (in any order).
  // Each should add a structure to the c64 for their
  // state and accessors, and the device should be in a valid reset state, but
  // must not call other devices in resetting, since there's no guarantee that
  // other devices are yet attached.
  //
  // For example, CIA2, when assigning a default value for its Vic bank, must
  // not then call wires to announce the change in memory mapping. Rather, we
  // have to co-ordinate our reset states such that the devices' default values
  // happen to be consistent with each other.
  vic(c64);
  sid(c64);
  cias(c64);
  cpu(c64);
  tape(c64);

  // By this point we're done, and no longer have to be careful about order of
  // execution.
  (0,_runloop__WEBPACK_IMPORTED_MODULE_0__.attach)(c64);

  // Add any additional attachments for this configuration
  for (let attachment of attachments) attachment(c64);

  return c64;
}


/***/ }),

/***/ "./src/target/cias.js":
/*!****************************!*\
  !*** ./src/target/cias.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attach: () => (/* binding */ attach)
/* harmony export */ });
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../debug */ "./src/debug.js");
/* harmony import */ var _tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tools/serializerSupport */ "./src/tools/serializerSupport.js");
/*
   cias: emulates both of the 6526 complex interface adaptors

   As well as emulating the CIAs themselves, this module provides interfacing
   for the devices that would be attached to them. For example, when it sees
   that a new value will be emitted on CIA2 port A, it will instruct the Vic
   bank-mapper (in wires) that the Vic bank just changed. 

   The code below represents a failed attempt at making the CIA emulation
   cycle-accurate. Its nextTickFn attempts to model what the Lorenz tests
   expect to see happen at various cycles after events, but its model
   misunderstands what's really going on, and can't be adjusted to pass the
   tests.

   For an accurate model, see Lorenz's own, at:
      https://ist.uwaterloo.ca/~schepers/MJK/cia6526.html

   Some additional caveats:

   - https://en.wikipedia.org/wiki/MOS_Technology_CIA

      "Due to a bug in many 6526s (see also errata below), the alarm IRQ would
      not always occur when the seconds component of the alarm time is exactly
      zero. The workaround is to set the alarm's tenths value to 0.1 seconds.

      In addition to the aforementioned alarm clock interrupt bug, many CIAs
      exhibited a defect in which the part would fail to generate a timer B 
      hardware interrupt if the interrupt control register (ICR) was read one
      or two clock cycles before the time when the interrupt should have
      actually occurred. This defect, as well as logic errors in the Commodore
      provided (8 bit) operating system, caused frequent pseudo-RS-232 errors
      in the Commodore 64 and Commodore 128 computers when running at higher 
      baud rates."

   - https://codebase64.org/doku.php?id=base:detecting_6526_vs_6526a_cia_chips

      "This sets off a single-shot NMI to interrupt immediately before an INC
      statement. The older 6526 triggers one cycle later, so it will run the
      INC while the newer one won't.
*/

// TODO: I really need to rename irq_status and irq_control to be something
// like 'int_status', etc. as it might be NMI that they relate to.




// Bound by attach
let c64;
let setCia1Irq;
let setCia2Nmi;
let setVicBank;

const CLOCK_SPEED = 985248;                 // cycles/second (PAL 50Hz)
const todOffset   = 10 * 60 * CLOCK_SPEED;  // 10 minutes in cycles

let state = {};

const defaultTimerRegs = {
  value_lo:       0,
  value_hi:       0,
  startValue_lo:  0,
  startValue_hi:  0,
  control:        0,
  status:         0,
  nextTickFn:     tick_timer_stopped,
};

const defaultPortRegs = {
  value:          0,
  direction:      0,
};

const makeDefaultCiaRegs = (is1) => ({
  is1,
  port_a:         { ...defaultPortRegs },
  port_b:         { ...defaultPortRegs },
  shift:          0,
  irq_status:     0,
  irq_control:    0,
  tod_10ths:      0,
  tod_seconds:    0,
  tod_minutes:    0,
  tod_hours:      0,
  timer_a:        { isA: true,  ...defaultTimerRegs },
  timer_b:        { isA: false, ...defaultTimerRegs },
});


function attach(nascentC64) {
  c64 = nascentC64;

  setCia1Irq = c64.wires.setCia1Irq;
  setCia2Nmi = c64.wires.setCia2Nmi;
  setVicBank = c64.wires.setVicBank;

  c64.keyboard.setSetKeyMatrix(
    (keyMatrix) => {
      state.keyMatrix = keyMatrix;
    }
  );

  c64.joystick.setSetJoystick1((value) => { state.joystick1 = value; });
  c64.joystick.setSetJoystick2((value) => { state.joystick2 = value; });

  c64.cias = {
    // Control
    tick,
    reset,
    serialize,
    deserialize,
    // MMIO
    read_dc00_dcff,
    read_dd00_ddff,
    write_dc00_dcff,
    write_dd00_ddff,
    // Other wires
    raiseTapeInterrupt,
  };

  reset();
}

function reset() {
  state = {
    cia1: makeDefaultCiaRegs(true),
    cia2: makeDefaultCiaRegs(false),

    // joystick1/joystick2 represent what the respective port values would be
    // in isolation (if joystick port 1 wasn't shared with the keyboard). Lines
    // float high.
    joystick1: 0xff,
    joystick2: 0xff,

    // keyMatrix: what values should appear on CIA1 port B for each of the
    // eight bits that might be selected on its port A write, *except that*
    // - they appear inverted here (they'll be flipped back on read), and 
    // - the joystick port 1 contribution is stripped out.
    keyMatrix: [0, 0, 0, 0, 0, 0, 0, 0],
  };
}

function numberToBcd(num) {
  // Converts 59 -> 0x59, rounding down if num is floating-point.
  return parseInt(Math.floor(num), 16);
}

function underflow(timer, cia) {
  // Timer reloads from the latch, regardless of whether this was one-shot or
  // continuous.
  timer.value_lo = timer.startValue_lo;
  timer.value_hi = timer.startValue_hi;

  // Delay the actioning of this until the next cycle.
  timer.nextTickFn = tick_timer_postUnderflow_0;
}

/*
  #1 #2  DD06 sequence 1/2/3 (4)
  ---------------------------------
  00 01  keep   keep   count  count     tick_timer_startup_0     -> tick_timer_running
  00 10  keep   load   keep   keep      tick_timer_stoppedLoad_0 -> tick_timer_stopped
  00 11  keep   load   keep   count     tick_timer_startup_0     -> tick_timer_running
  01 11  count  load   keep   count     tick_timer_runningLoad_0 -> tick_timer_running
  01 10  count  load   keep   keep      tick_timer_shutdown_0    -> tick_timer_stopped
  01 00  count  count  keep   keep      tick_timer_shutdown_0    -> tick_timer_stopped
*/

function tick_timer_startup_0(timer, cia) {
  // First cycle is always a continuation
  timer.nextTickFn = tick_timer_startup_1;
}

function tick_timer_startup_1(timer, cia) {
  if (timer.control & 0x10) {
    load(timer);
    timer.nextTickFn = tick_timer_startup_2;
  }
  else timer.nextTickFn = tick_timer_running;
}

function tick_timer_startup_2(timer, cia) {
  // We did a load, and that stalls the count for a cycle
  timer.nextTickFn = tick_timer_running;
}

function tick_timer_shutdown_0(timer, cia) {
  // First cycle is always a continuation
  // decrement(timer, cia);
  // timer.nextTickFn = tick_timer_shutdown_1;

  // short-circuit what I thought it was doing; it doesn't look like it needs two cycles to stop
  tick_timer_shutdown_1(timer, cia);  
}

function tick_timer_shutdown_1(timer, cia) {
  if (timer.control & 0x10) {
    load(timer);
  }
  else decrement(timer, cia);
  timer.nextTickFn = tick_timer_stopped;
}

function tick_timer_stoppedLoad_0(timer, cia) {
  // First cycle is always a continuation
  timer.nextTickFn = tick_timer_stoppedLoad_1;
}

function tick_timer_stoppedLoad_1(timer, cia) {
  load(timer);
  timer.nextTickFn = tick_timer_stopped;
}

function tick_timer_runningLoad_0(timer, cia) {
  // First cycle is always a continuation
  decrement(timer, cia);
  timer.nextTickFn = tick_timer_runningLoad_1;
}

function tick_timer_runningLoad_1(timer, cia) {
  load(timer);
  timer.nextTickFn = tick_timer_runningLoad_2;
}

function tick_timer_runningLoad_2(timer, cia) {
  // We did a load, and that stalls the count for a cycle
  timer.nextTickFn = tick_timer_running;
}

function tick_timer_runningNonLoad_0(timer, cia) {
  // Starting while already started seems to cause a one-cycle pause
  timer.nextTickFn = tick_timer_running;
}


function tick_timer_running(timer, cia) {
  decrement(timer, cia);
}

function tick_timer_stopped(timer, cia) {
}

function tick_timer_postUnderflow_0(timer, cia) {

  if (timer.isA) {
    // Mark Timer A interrupt as having happened
    cia.irq_status |= 0b01;

    // Is Timer B configured to count when we underflow? (and not in
    // conjunction with the CNT pin)
    if ((cia.timer_b.control & 0b01100000) === 0b01000000) {
      decrement(cia.timer_b, cia);
    }
  }
  else {
    // Mark Timer B interrupt as having happened
    cia.irq_status |= 0b10;
  }

  reconsiderInterrupt(cia);

  // bit 3: 1 = timer stops on underflow
  if (timer.control & 0b1000) {
    timer.nextTickFn = tick_timer_postUnderflow_1;
  }
  else {
    // Timer restarts on underflow (but we still fire the interrupt)
    // In this case, we have a one-cycle delay before restarting the count,
    // presumably to compensate for the timer reloading instead of showing
    // a zero count.
    timer.nextTickFn = tick_timer_running;
  }

  // CIA1TAB test shows there's a one-cycle delay here
  // timer.nextTickFn = tick_timer_running;
}

function tick_timer_postUnderflow_1(timer, cia) {
  // We're on the one-shot flow here. Finally mark the timer as having stopped.
  timer.control &= 0xfe;
  timer.nextTickFn = tick_timer_stopped;
}



function load(timer) {
  timer.value_lo = timer.startValue_lo;
  timer.value_hi = timer.startValue_hi;
}


function decrement(timer, cia) {
  timer.value_lo--;

  // The 'underflow' interrupt, timer stop and reload happen if the timer
  // reaches zero, not if it actually underflows.
  if (!timer.value_lo && !timer.value_hi) {
    underflow(timer, cia);
    return;
  }

  if (timer.value_lo < 0) {
    timer.value_lo = 0xff;
    timer.value_hi = --timer.value_hi & 0xff;
  }
}

function reconsiderInterrupt(cia) {
  if (cia.irq_status & cia.irq_control) {
    if (cia.is1) setCia1Irq(true);
    else         setCia2Nmi(true);
  }

  // Otherwise... don't setCiaXXxx(false): nothing can un-set the interrupt
  // state except for reading the interrupt control/status register, handled by
  // the read logic

  // "Once the interrupt flip-flop has been set, changing the condition in the
  // IMR has no effect. Only reading the ICR will clear it."
  // - Lorenz (https://ist.uwaterloo.ca/~schepers/MJK/cia6526.html)
}

function tick_cia(cia) {

  // Set bit 7 of the irq_status
  const int_state = Boolean(cia.irq_status & cia.irq_control);
  cia.irq_status = (cia.irq_status & 0x7f) | (int_state ? 0x80 : 0);
  // maybe this is where we actually pull the interrupt line low

  cia.timer_a.nextTickFn(cia.timer_a, cia);
  cia.timer_b.nextTickFn(cia.timer_b, cia);
}

function tick() {
  tick_cia(state.cia1, setCia1Irq);
  tick_cia(state.cia2, setCia2Nmi);
}

function read(cia, reg) {

  switch (reg) {

    // cases 0x0 and 0x1: picked up by the read handlers specific to that CIA,
    // but this defines default behavior if they do nothing.

    case 0x0:     // $dc02 / $dd02: port A value
      // TODO: honor port direction
      return cia.port_a.value;

    case 0x1:     // $dc02 / $dd02: port A value
      // TODO: honor port direction
      return cia.port_b.value;

    case 0x2:     // $dc02 / $dd02: port A data direction
      // TODO: honor port direction
      return cia.port_a.direction;

    case 0x3:     // $dc03 / $dd03: port B data direction
      // TODO: honor port direction
      return cia.port_b.direction;

    case 0x4:     // $dc04 / $dd04: timer A value, low byte
      return cia.timer_a.value_lo;

    case 0x5:     // $dc05 / $dd05: timer A value, high byte
      return cia.timer_a.value_hi;

    case 0x6:     // $dc06 / $dd06: timer B value, low byte
      return cia.timer_b.value_lo;

    case 0x7:     // $dc07 / $dd07: timer B value, high byte
      return cia.timer_b.value_hi;

    case 0x8:     // $dc08 / $dd08: time of day, tenths
      {
        let t = (c64.runloop.getState().cycle + todOffset) / CLOCK_SPEED;
        t *= 10;  // tenths
        t %= 10;  // ...and just the tenths
        return numberToBcd(t);
      }

    case 0x9:     // $dc09 / $dd09: time of day, seconds
      {
        let t = (c64.runloop.getState().cycle + todOffset) / CLOCK_SPEED;
        t %= 60;  // ...and just the seconds
        return numberToBcd(t);
      }

    case 0xa:     // $dc0a / $dd0a: time of day, minutes
      {
        let t = (c64.runloop.getState().cycle + todOffset) / CLOCK_SPEED;
        t /= 60;  // minutes
        t %= 60;  // ...and just the minutes
        return numberToBcd(t);
      }

    case 0xb:     // $dc0b / $dd0b: time of day, hours
      {
        let t = (c64.runloop.getState().cycle + todOffset) / CLOCK_SPEED;
        t /= 60;  // minutes
        t /= 60;  // hours
        t %= 24;  // ...and just the hours

        // Result must be 12 hour, with MSB being the meridiem
        let ret = numberToBcd(t % 12);
        ret |= (t > 12) ? 0x80 : 0;
        return ret;
      }

    case 0xc:     // $dc0c / $dd0c: serial shift
      // TODO: Serial shifter not implemented
      (0,_debug__WEBPACK_IMPORTED_MODULE_0__.unimplementedWarning)("serial shifter read");
      return 0;

    case 0xd:     // $dc0d / $dd0d: interrupt status/control
      {
        // Reading the interrupt status clears it
        const ret = cia.irq_status;
        cia.irq_status = 0;

        if (cia.is1) setCia1Irq(false);
        else         setCia2Nmi(false);

        return ret;
      }

    // This is kludgey. The load doesn't get stored permanently; I am
    // storing it (the cycle sequence needs it remembered), so I'm just zeroing
    // it out on read. Do not like.

    case 0xe:     // $dc0e / $dd0e: timer A control
      return cia.timer_a.control & 0b11101111;

    case 0xf:     // $dc0f / $dd0f: timer B control
      return cia.timer_b.control & 0b11101111;
  }
}

function write_timerControl(timer, byte) {

  /*
    #1 #2  DD06 sequence 1/2/3 (4)
    ---------------------------------
    00 01  keep   keep   count  count     tick_timer_startup_0     -> tick_timer_running
    00 10  keep   load   keep   keep      tick_timer_stoppedLoad_0 -> tick_timer_stopped
    00 11  keep   load   keep   count     tick_timer_startup_0     -> tick_timer_running
    01 11  count  load   keep   count     tick_timer_runningLoad_0 -> tick_timer_running
    01 10  count  load   keep   keep      tick_timer_shutdown_0    -> tick_timer_stopped
    01 00  count  count  keep   keep      tick_timer_shutdown_0    -> tick_timer_stopped
  */

  // If we're not counting cycles CPU cycles...
  if (byte & 0b01100000) {
    // Maybe, like the cycle counter, it has a cycle for this to get noticed.
    // I haven't looked.
    timer.nextTickFn = tick_timer_stopped;

    // (There's an edge case here about if it was running but not counting cycles)
  }
  // We are counting cycles CPU cycles...
  else {

    // If timer was running...
    if (timer.control & 1) {
      // ...and we're keeping it running...
      if (byte & 1) {
        // ...but we're doing a load
        if (byte & 0x10) {
          timer.nextTickFn = tick_timer_runningLoad_0;
        }
        // ...or not doing a load
        else {
          timer.nextTickFn = tick_timer_runningNonLoad_0;
        }
      }
      // ...and we're stopping it...
      else {
        timer.nextTickFn = tick_timer_shutdown_0;
      }
    }
    // If timer was stopped...
    else {
      // ...but we're starting it...
      if (byte & 1) {
        timer.nextTickFn = tick_timer_startup_0;
      }
      // ...and we're keeping it stopped...
      else {
        // ...but we're doing a load
        if (byte & 0x10) {
          timer.nextTickFn = tick_timer_stoppedLoad_0;
        }
      }
    }
  }

  // TODO: we're not doing anything about bits 1 or 2, on setting bits of the
  // port when an underflow/overflow occurs. (How does an overflow even happen?
  // When used for the serial shift register?)
  // And as for the other bits... non-CPU-clock source, shift register
  // direction, 50/60Hz clock select... we don't do any of that.

  if (byte & 1) (0,_debug__WEBPACK_IMPORTED_MODULE_0__.unimplementedWarning)("indicate timer underflow on port B");

  timer.control = byte;
}

function write_timerLow(timer, byte) {
  timer.startValue_lo = byte;

}

function write_timerHigh(timer, byte) {
  timer.startValue_hi = byte;

  // Load the timer value immediately if the timer's not running
  if (!(timer.control & 1)) {
    load(timer);
  }
}

function raiseTapeInterrupt() {
  state.cia1.irq_status |= 0x10;
  reconsiderInterrupt(state.cia1);
}

function write(cia, reg, byte) {
  switch (reg) {

    case 0x0:
      // TODO: honor port direction
      cia.port_a.value = byte;
      break;

    case 0x1:
      // TODO: honor port direction
      cia.port_b.value = byte;
      break;

    case 0x2:     // $dc02 / $dd02: port A data direction
      cia.port_a.direction = byte;
      break;

    case 0x3:     // $dc03 / $dd03: port B data direction
      cia.port_b.direction = byte;
      break;

    case 0x4:     // $dc04 / $dd04: timer A value, low byte
      write_timerLow(cia.timer_a, byte);
      break;

    case 0x5:     // $dc05 / $dd05: timer A value, high byte
      write_timerHigh(cia.timer_a, byte);
      break;

    case 0x6:     // $dc06 / $dd06: timer B value, low byte
      write_timerLow(cia.timer_b, byte);
      break;

    case 0x7:     // $dc07 / $dd07: timer B value, high byte
      write_timerHigh(cia.timer_b, byte);
      break;

    case 0x8:     // $dc08 / $dd08: time of day
      (0,_debug__WEBPACK_IMPORTED_MODULE_0__.unimplementedWarning)("time of day clock write");
      break;

    case 0x9:     // $dc09 / $dd09: time of day
      (0,_debug__WEBPACK_IMPORTED_MODULE_0__.unimplementedWarning)("time of day clock write");
      break;

    case 0xa:     // $dc0a / $dd0a: time of day
      (0,_debug__WEBPACK_IMPORTED_MODULE_0__.unimplementedWarning)("time of day clock write");
      break;

    case 0xb:     // $dc0b / $dd0b: time of day
      (0,_debug__WEBPACK_IMPORTED_MODULE_0__.unimplementedWarning)("time of day clock write");
      break;

    case 0xc:     // $dc0c / $dd0c: serial shift
      (0,_debug__WEBPACK_IMPORTED_MODULE_0__.unimplementedWarning)("serial shifter write");
      break;

    case 0xd:     // $dc0d / $dd0d: interrupt control

      if (byte & 0x80) {
        // byte is specifying which bits of the control register to set
        cia.irq_control |= (byte & 0x7f);
      }
      else {
        // byte is specifying which bits of the control register to clear
        cia.irq_control &= ~byte;
      }

      reconsiderInterrupt(cia);
      break;

    case 0xe:     // $dc0e / $dd0e: timer A control
      write_timerControl(cia.timer_a, byte);
      break;

    case 0xf:     // $dc0f / $dd0f: timer B control
      write_timerControl(cia.timer_b, byte);
      break;
  }
}

function read_dc00_dcff(addr) {
  
  // CIA1 regs are from $dc00-$dc0f, with degenerate copies through $dcff
  const reg = addr & 0xf;

  switch (reg) {
    case 0x0:     // $dc00: joystick 2

      // The docs I read say that bits 0-4 are the joystick switches but don't
      // mention the others. In practice, bit 7 is tied low, and 6 and 5 are
      // high. Some games (Commando, Bomb Jack...) depend on this by testing
      // for the value $6f to wait for the fire button.

      return state.joystick2 & 0b01111111;

    case 0x1:     // $dc01: keyboard and joystick 1
      {
        // everything's inverted, unhelpfully

        const column = (~state.cia1.port_a.value) & 0xff;
        // const column = (~state.regs_1[0]) & 0xff;

        let ret = 0;

        for (let c = 0; c < 8; c++) {
          if (column & (1 << c)) ret |= state.keyMatrix[c];
        }

        // return (~ret) & 0xff;
        return (~(ret | ~state.joystick1)) & 0xff;
      }
  }

  return read(state.cia1, reg);
}

function read_dd00_ddff(addr) {

  // CIA2 regs are from $dd00-$dd0f, with degenerate copies through $ddff
  const reg = addr & 0xf;

  switch (reg) {
    case 0x0:     // $dd00: serial bus
      // TODO
      // Deliberately fall through
      break;

    case 0x1:     // $dd01: RS232
      // TODO
      // Deliberately fall through
      break;      
  }

  return read(state.cia2, reg);
}

function write_dc00_dcff(addr, byte) {

  // CIA1 regs are from $dc00-$dc0f, with degenerate copies through $dcff
  const reg = addr & 0xf;

  // CIA1-specific configuration
  switch (reg) {
    case 0x0:     // $dc00: keyboard column
    case 0x1:     // $cd01: RS232
      // deliberately fall through
      break;
  }

  // CIA-general functionality
  return write(state.cia1, reg, byte, setCia1Irq);
}

function write_dd00_ddff(addr, byte) {

  // CIA2 regs are from $dd00-$dd0f, with degenerate copies through $ddff
  const reg = addr & 0xf;

  // CIA2-specific configuration
  switch (reg) {
    case 0x0:     // $dd00: VIC bank select, serial bus

      // The 'bank number' that we're setting is the bitwise inverse of the
      // that's being written here; presumably because lines are tied high,
      // so setting the bit means pulling it low. It's just a matter of
      // convention, but to stay consistent with the documentation's
      // concept of the VIC bank number, we'll translate here.
      setVicBank(3 - (byte & 0b11));

      // TODO: and there's other bits here for the serial bus
      state.cia2.port_a.value = byte;
      // deliberately fall through
      break;

    case 0x1:     // $dd01: user port
      // TODO
      // deliberately fall through
      break;

    // direction
    case 0x2:
      // debugger;
      break;
    case 0x3:
      // debugger;
      break;
  }

  // CIA-general functionality
  return write(state.cia2, reg, byte, setCia2Nmi);
}

function serialize() {
  const obj = {
    ...state,
    cia1: {
      ...state.cia1,
      timer_a: {
        ...state.cia1.timer_a,
        nextTickFn: (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__.functionToReference)(state.cia1.timer_a.nextTickFn),
      },
      timer_b: {
      ...state.cia1.timer_b,
        nextTickFn: (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__.functionToReference)(state.cia1.timer_b.nextTickFn),
      },
    },
    cia2: {
      ...state.cia2,
      timer_a: {
        ...state.cia2.timer_a,
        nextTickFn: (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__.functionToReference)(state.cia2.timer_a.nextTickFn),
      },
      timer_b: {
      ...state.cia2.timer_b,
        nextTickFn: (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__.functionToReference)(state.cia2.timer_b.nextTickFn),
      },
    }
  };

  return JSON.stringify(obj);
}

function deserialize(json) {
  state = JSON.parse(json);

  state.cia1.timer_a.nextTickFn = (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__.referenceToFunction)(state.cia1.timer_a.nextTickFn);
  state.cia1.timer_b.nextTickFn = (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__.referenceToFunction)(state.cia1.timer_b.nextTickFn);
  state.cia2.timer_a.nextTickFn = (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__.referenceToFunction)(state.cia2.timer_a.nextTickFn);
  state.cia2.timer_b.nextTickFn = (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__.referenceToFunction)(state.cia2.timer_b.nextTickFn);
}

(0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__.addToSerializerRegistry)({
  tick_timer_startup_0,
  tick_timer_startup_1,
  tick_timer_startup_2,
  tick_timer_shutdown_0,
  tick_timer_shutdown_1,
  tick_timer_stoppedLoad_0,
  tick_timer_stoppedLoad_1,
  tick_timer_runningLoad_0,
  tick_timer_runningLoad_1,
  tick_timer_runningLoad_2,
  tick_timer_runningNonLoad_0,
  tick_timer_running,
  tick_timer_stopped,
  tick_timer_postUnderflow_0,
  tick_timer_postUnderflow_1,
});


/***/ }),

/***/ "./src/target/cpu.js":
/*!***************************!*\
  !*** ./src/target/cpu.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attach: () => (/* binding */ attach)
/* harmony export */ });
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../debug */ "./src/debug.js");
/* harmony import */ var _tools_disasm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tools/disasm */ "./src/tools/disasm.js");
/* harmony import */ var _tools_serializerSupport__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tools/serializerSupport */ "./src/tools/serializerSupport.js");
/*
   cpu: emulates the 6510 microprocessor, including quasi-ops

   References:

   †1: http://www.zimmers.net/anonftp/pub/cbm/documents/chipdata/64doc
   †2: Long discussion on interrupts and branches:
       http://forum.6502.org/viewtopic.php?f=4&t=1634
   †3: http://archive.6502.org/books/mcs6500_family_hardware_manual.pdf
   †4: http://www.zimmers.net/anonftp/pub/cbm/documents/chipdata/6502-NMOS.extra.opcodes

   TODOs:

     - allow bus takeover by VIC (RDY pin)
     - at least make a note of PC when an opcode starts (SYNC pin), for
       debugging
*/





let state;

// Bound by attach
let c64;
let cpuRead;
let cpuWrite;
let getIrq;
let getNmi;

function attach(nascentC64) {
  c64 = nascentC64;

  cpuRead  = c64.wires.cpuRead;
  cpuWrite = c64.wires.cpuWrite;
  getIrq   = c64.wires.getIrq;
  getNmi   = c64.wires.getNmi;

  reset();

  c64.cpu = {
    // Control
    tick,
    reset,
    serialize,
    deserialize,
    // Debug
    getState,
    showState,
  };
}

function reset() {
  state = {
    a:  0,  // accumulator
    x:  0,  // X register
    y:  0,  // Y register
    s:  0,  // stack pointer
    pc: 0,  // program counter
    n:  0,  // status register (P) negative flag (bit 7)
    v:  0,  // status register (P) overflow flag (bit 6)
    d:  0,  // status register (P) decimal mode (bit 3)
    i:  1,  // status register (P) interrupt disable (bit 2)
    z:  0,  // status register (P) zero flag (bit 1)
    c:  0,  // status register (P) carry flag (bit 0)

    ir: 0,       // instruction register
    opFn: null,  // operation handler, called from the addressing mode

    lastNmi: false, // was NMI low last time we looked?

    adl: 0,      // temporary low address byte from fetch
    adh: 0,      // temporary high address byte from fetch
    tmp: 0,      // a working variable for read-mod-write insns

    pendingInt: 3,  // (0 = nothing , 1 = IRQ, 2 = NMI, 3 = RESET)

    // Two parallel state machines to achieve the pipelining
    fdTick: null,              // fetch/decode
    amTick: am_interrupt_T2,   // addressing mode
  };
}

function getState() {
  return state;
}

// (TODO: maybe use a Map for these. Would it actually be faster?)
const  opFn_forOpcode = {}; // eg. 0x49 -> logic_eor
const am_T1_forOpcode = {}; // eg. 0x49 -> am_ieomd_imm_T1

[
  // Single-byte operations (implicit)
  [ 0xea, op_NOP_void_void, am_singleByte_imp_T1 ],
  [ 0x18, op_CLC_void_void, am_singleByte_imp_T1 ],
  [ 0xd8, op_CLD_void_void, am_singleByte_imp_T1 ],
  [ 0x58, op_CLI_void_void, am_singleByte_imp_T1 ],
  [ 0xb8, op_CLV_void_void, am_singleByte_imp_T1 ],
  [ 0x38, op_SEC_void_void, am_singleByte_imp_T1 ],
  [ 0xf8, op_SED_void_void, am_singleByte_imp_T1 ],
  [ 0x78, op_SEI_void_void, am_singleByte_imp_T1 ],
  [ 0xaa, op_TAX_void_void, am_singleByte_imp_T1 ],
  [ 0xa8, op_TAY_void_void, am_singleByte_imp_T1 ],
  [ 0x8a, op_TXA_void_void, am_singleByte_imp_T1 ],
  [ 0x98, op_TYA_void_void, am_singleByte_imp_T1 ],
  [ 0xba, op_TSX_void_void, am_singleByte_imp_T1 ],
  [ 0x9a, op_TXS_void_void, am_singleByte_imp_T1 ],
  [ 0xca, op_DEX_void_void, am_singleByte_imp_T1 ],
  [ 0x88, op_DEY_void_void, am_singleByte_imp_T1 ],
  [ 0xe8, op_INX_void_void, am_singleByte_imp_T1 ],
  [ 0xc8, op_INY_void_void, am_singleByte_imp_T1 ],
  [ 0x1a, op_NOP_void_void, am_singleByte_imp_T1 ],   // Quasi-op
  [ 0x3a, op_NOP_void_void, am_singleByte_imp_T1 ],   // Quasi-op
  [ 0x5a, op_NOP_void_void, am_singleByte_imp_T1 ],   // Quasi-op
  [ 0x7a, op_NOP_void_void, am_singleByte_imp_T1 ],   // Quasi-op
  [ 0xda, op_NOP_void_void, am_singleByte_imp_T1 ],   // Quasi-op
  [ 0xfa, op_NOP_void_void, am_singleByte_imp_T1 ],   // Quasi-op

  // Single-byte operations (accumulator)
  [ 0x0a, op_ASL_arg_ret,   am_singleByte_acc_T1 ],
  [ 0x4a, op_LSR_arg_ret,   am_singleByte_acc_T1 ],
  [ 0x2a, op_ROL_arg_ret,   am_singleByte_acc_T1 ],
  [ 0x6a, op_ROR_arg_ret,   am_singleByte_acc_T1 ],

  // Internal execution on memory data (immediate)
  [ 0x29, op_AND_tmp_void,  am_ieomd_imm_T1 ],
  [ 0x49, op_EOR_tmp_void,  am_ieomd_imm_T1 ],
  [ 0x09, op_ORA_tmp_void,  am_ieomd_imm_T1 ],
  [ 0xc9, op_CMP_tmp_void,  am_ieomd_imm_T1 ],
  [ 0xe0, op_CPX_tmp_void,  am_ieomd_imm_T1 ],
  [ 0xc0, op_CPY_tmp_void,  am_ieomd_imm_T1 ],
  [ 0xa9, op_LDA_tmp_void,  am_ieomd_imm_T1 ],
  [ 0xa2, op_LDX_tmp_void,  am_ieomd_imm_T1 ],
  [ 0xa0, op_LDY_tmp_void,  am_ieomd_imm_T1 ],
  [ 0x69, op_ADC_tmp_void,  am_ieomd_imm_T1 ],
  [ 0xe9, op_SBC_tmp_void,  am_ieomd_imm_T1 ],
  [ 0x80, op_NOP_void_void, am_ieomd_imm_T1 ],        // Quasi-op
  [ 0x82, op_NOP_void_void, am_ieomd_imm_T1 ],        // Quasi-op
  [ 0x89, op_NOP_void_void, am_ieomd_imm_T1 ],        // Quasi-op
  [ 0xc2, op_NOP_void_void, am_ieomd_imm_T1 ],        // Quasi-op
  [ 0xe2, op_NOP_void_void, am_ieomd_imm_T1 ],        // Quasi-op
  [ 0xeb, op_SBC_tmp_void,  am_ieomd_imm_T1 ],        // Quasi-op
  [ 0x0b, op_ANC_tmp_void,  am_ieomd_imm_T1 ],        // Quasi-op
  [ 0x2b, op_ANC_tmp_void,  am_ieomd_imm_T1 ],        // Quasi-op
  [ 0x4b, op_ALR_tmp_void,  am_ieomd_imm_T1 ],        // Quasi-op
  [ 0x6b, op_ARR_tmp_void,  am_ieomd_imm_T1 ],        // Quasi-op
  [ 0x8b, op_ANE_tmp_void,  am_ieomd_imm_T1 ],        // Quasi-op
  [ 0xab, op_LXA_tmp_void,  am_ieomd_imm_T1 ],        // Quasi-op
  [ 0xcb, op_SBX_tmp_void,  am_ieomd_imm_T1 ],        // Quasi-op

  // Internal execution on memory data (zero page)
  [ 0x25, op_AND_tmp_void,  am_ieomd_zp_T1 ],
  [ 0x24, op_BIT_tmp_void,  am_ieomd_zp_T1 ],
  [ 0x45, op_EOR_tmp_void,  am_ieomd_zp_T1 ],
  [ 0x05, op_ORA_tmp_void,  am_ieomd_zp_T1 ],
  [ 0xc5, op_CMP_tmp_void,  am_ieomd_zp_T1 ],
  [ 0xe4, op_CPX_tmp_void,  am_ieomd_zp_T1 ],
  [ 0xc4, op_CPY_tmp_void,  am_ieomd_zp_T1 ],
  [ 0xa5, op_LDA_tmp_void,  am_ieomd_zp_T1 ],
  [ 0xa6, op_LDX_tmp_void,  am_ieomd_zp_T1 ],
  [ 0xa4, op_LDY_tmp_void,  am_ieomd_zp_T1 ],
  [ 0x65, op_ADC_tmp_void,  am_ieomd_zp_T1 ],
  [ 0xe5, op_SBC_tmp_void,  am_ieomd_zp_T1 ],
  [ 0x04, op_NOP_void_void, am_ieomd_zp_T1 ],         // Quasi-op
  [ 0x44, op_NOP_void_void, am_ieomd_zp_T1 ],         // Quasi-op
  [ 0x64, op_NOP_void_void, am_ieomd_zp_T1 ],         // Quasi-op
  [ 0xa7, op_LAX_tmp_void,  am_ieomd_zp_T1 ],         // Quasi-op

  // Internal execution on memory data (absolute)
  [ 0x2d, op_AND_tmp_void,  am_ieomd_abs_T1 ],
  [ 0x2c, op_BIT_tmp_void,  am_ieomd_abs_T1 ],
  [ 0x4d, op_EOR_tmp_void,  am_ieomd_abs_T1 ],
  [ 0x0d, op_ORA_tmp_void,  am_ieomd_abs_T1 ],
  [ 0xcd, op_CMP_tmp_void,  am_ieomd_abs_T1 ],
  [ 0xec, op_CPX_tmp_void,  am_ieomd_abs_T1 ],
  [ 0xcc, op_CPY_tmp_void,  am_ieomd_abs_T1 ],
  [ 0xad, op_LDA_tmp_void,  am_ieomd_abs_T1 ],
  [ 0xae, op_LDX_tmp_void,  am_ieomd_abs_T1 ],
  [ 0xac, op_LDY_tmp_void,  am_ieomd_abs_T1 ],
  [ 0x6d, op_ADC_tmp_void,  am_ieomd_abs_T1 ],
  [ 0xed, op_SBC_tmp_void,  am_ieomd_abs_T1 ],
  [ 0xaf, op_LAX_tmp_void,  am_ieomd_abs_T1 ],        // Quasi-op

  // Internal execution on memory data (indirect,X)
  [ 0x21, op_AND_tmp_void,  am_ieomd_inx_T1 ],
  [ 0x41, op_EOR_tmp_void,  am_ieomd_inx_T1 ],
  [ 0x01, op_ORA_tmp_void,  am_ieomd_inx_T1 ],
  [ 0xc1, op_CMP_tmp_void,  am_ieomd_inx_T1 ],
  [ 0xa1, op_LDA_tmp_void,  am_ieomd_inx_T1 ],
  [ 0x61, op_ADC_tmp_void,  am_ieomd_inx_T1 ],
  [ 0xe1, op_SBC_tmp_void,  am_ieomd_inx_T1 ],
  [ 0xa3, op_LAX_tmp_void,  am_ieomd_inx_T1 ],        // Quasi-op

  // Internal execution on memory data (absolute,X)
  [ 0x3d, op_AND_tmp_void,  am_ieomd_abx_T1 ],
  [ 0x5d, op_EOR_tmp_void,  am_ieomd_abx_T1 ],
  [ 0x1d, op_ORA_tmp_void,  am_ieomd_abx_T1 ],
  [ 0xdd, op_CMP_tmp_void,  am_ieomd_abx_T1 ],
  [ 0xbd, op_LDA_tmp_void,  am_ieomd_abx_T1 ],
  [ 0xbc, op_LDY_tmp_void,  am_ieomd_abx_T1 ],
  [ 0x7d, op_ADC_tmp_void,  am_ieomd_abx_T1 ],
  [ 0xfd, op_SBC_tmp_void,  am_ieomd_abx_T1 ],
  [ 0x0c, op_NOP_void_void, am_ieomd_abx_T1 ],        // Quasi-op
  [ 0x1c, op_NOP_void_void, am_ieomd_abx_T1 ],        // Quasi-op
  [ 0x3c, op_NOP_void_void, am_ieomd_abx_T1 ],        // Quasi-op
  [ 0x5c, op_NOP_void_void, am_ieomd_abx_T1 ],        // Quasi-op
  [ 0x7c, op_NOP_void_void, am_ieomd_abx_T1 ],        // Quasi-op
  [ 0xdc, op_NOP_void_void, am_ieomd_abx_T1 ],        // Quasi-op
  [ 0xfc, op_NOP_void_void, am_ieomd_abx_T1 ],        // Quasi-op

  // Internal execution on memory data (absolute,Y)
  [ 0x39, op_AND_tmp_void,  am_ieomd_aby_T1 ],
  [ 0x59, op_EOR_tmp_void,  am_ieomd_aby_T1 ],
  [ 0x19, op_ORA_tmp_void,  am_ieomd_aby_T1 ],
  [ 0xd9, op_CMP_tmp_void,  am_ieomd_aby_T1 ],
  [ 0xb9, op_LDA_tmp_void,  am_ieomd_aby_T1 ],
  [ 0xbe, op_LDX_tmp_void,  am_ieomd_aby_T1 ],
  [ 0x79, op_ADC_tmp_void,  am_ieomd_aby_T1 ],
  [ 0xf9, op_SBC_tmp_void,  am_ieomd_aby_T1 ],
  [ 0xbf, op_LAX_tmp_void,  am_ieomd_aby_T1 ],        // Quasi-op
  [ 0xbb, op_LAS_tmp_void,  am_ieomd_aby_T1 ],        // Quasi-op

  // Internal execution on memory data (zero page,X)
  [ 0x35, op_AND_tmp_void,  am_ieomd_zpx_T1 ],
  [ 0x55, op_EOR_tmp_void,  am_ieomd_zpx_T1 ],
  [ 0x15, op_ORA_tmp_void,  am_ieomd_zpx_T1 ],
  [ 0xd5, op_CMP_tmp_void,  am_ieomd_zpx_T1 ],
  [ 0xb5, op_LDA_tmp_void,  am_ieomd_zpx_T1 ],
  [ 0xb4, op_LDY_tmp_void,  am_ieomd_zpx_T1 ],
  [ 0x75, op_ADC_tmp_void,  am_ieomd_zpx_T1 ],
  [ 0xf5, op_SBC_tmp_void,  am_ieomd_zpx_T1 ],

  // Internal execution on memory data (zero page,Y)
  [ 0xb6, op_LDX_tmp_void,  am_ieomd_zpy_T1 ],
  [ 0xb7, op_LAX_tmp_void,  am_ieomd_zpy_T1 ],        // Quasi-op

  // Internal execution on memory data (indirect,Y)
  [ 0x31, op_AND_tmp_void,  am_ieomd_iny_T1 ],
  [ 0x51, op_EOR_tmp_void,  am_ieomd_iny_T1 ],
  [ 0x11, op_ORA_tmp_void,  am_ieomd_iny_T1 ],
  [ 0xd1, op_CMP_tmp_void,  am_ieomd_iny_T1 ],
  [ 0xb1, op_LDA_tmp_void,  am_ieomd_iny_T1 ],
  [ 0x71, op_ADC_tmp_void,  am_ieomd_iny_T1 ],
  [ 0xf1, op_SBC_tmp_void,  am_ieomd_iny_T1 ],
  [ 0xb3, op_LAX_tmp_void,  am_ieomd_iny_T1 ],        // Quasi-op

  // Store operations (zero page)
  [ 0x85, op_STA_void_ret,  am_store_zp_T1 ],
  [ 0x86, op_STX_void_ret,  am_store_zp_T1 ],
  [ 0x84, op_STY_void_ret,  am_store_zp_T1 ],
  [ 0x87, op_AXS_void_ret,  am_store_zp_T1 ],         // Quasi-op

  // Store operations (absolute)
  [ 0x8d, op_STA_void_ret,  am_store_abs_T1 ],
  [ 0x8e, op_STX_void_ret,  am_store_abs_T1 ],
  [ 0x8c, op_STY_void_ret,  am_store_abs_T1 ],
  [ 0x8f, op_AXS_void_ret,  am_store_abs_T1 ],        // Quasi-op

  // Store operations (indirect,X)
  [ 0x81, op_STA_void_ret,  am_store_inx_T1 ],
  [ 0x83, op_AXS_void_ret,  am_store_inx_T1 ],        // Quasi-op

  // Store operations (absolute,X)
  [ 0x9d, op_STA_void_ret,  am_store_abx_T1 ],
  [ 0x9c, op_SHY_void_ret,  am_store_abx_T1 ],        // Quasi-op

  // Store operations (absolute,Y)
  [ 0x99, op_STA_void_ret,  am_store_aby_T1 ],
  [ 0x9f, op_SHA_void_ret,  am_store_aby_T1 ],        // Quasi-op
  [ 0x9b, op_SHS_void_ret,  am_store_aby_T1 ],        // Quasi-op
  [ 0x9e, op_SHX_void_ret,  am_store_aby_T1 ],        // Quasi-op

  // Store operations (zero page,X)
  [ 0x95, op_STA_void_ret,  am_store_zpx_T1 ],
  [ 0x94, op_STY_void_ret,  am_store_zpx_T1 ],

  // Store operations (zero page,Y)
  [ 0x96, op_STX_void_ret,  am_store_zpy_T1 ],
  [ 0x97, op_AXS_void_ret,  am_store_zpy_T1 ],        // Quasi-op

  // Store operations (indirect,Y)
  [ 0x91, op_STA_void_ret,  am_store_iny_T1 ],
  [ 0x93, op_SHA_void_ret,  am_store_iny_T1 ],        // Quasi-op

  // Read-modify-write operations (zero page)
  [ 0x06, op_ASL_arg_ret,   am_rmw_zp_T1 ],
  [ 0x46, op_LSR_arg_ret,   am_rmw_zp_T1 ],
  [ 0x26, op_ROL_arg_ret,   am_rmw_zp_T1 ],
  [ 0x66, op_ROR_arg_ret,   am_rmw_zp_T1 ],
  [ 0xe6, op_INC_arg_ret,   am_rmw_zp_T1 ],
  [ 0xc6, op_DEC_arg_ret,   am_rmw_zp_T1 ],
  [ 0x47, op_LSE_arg_ret,   am_rmw_zp_T1 ],           // Quasi-op
  [ 0xc7, op_DCM_arg_ret,   am_rmw_zp_T1 ],           // Quasi-op
  [ 0x07, op_ASO_arg_ret,   am_rmw_zp_T1 ],           // Quasi-op
  [ 0x27, op_RLA_arg_ret,   am_rmw_zp_T1 ],           // Quasi-op
  [ 0x67, op_RRA_arg_ret,   am_rmw_zp_T1 ],           // Quasi-op
  [ 0xe7, op_INS_arg_ret,   am_rmw_zp_T1 ],           // Quasi-op

  // Read-modify-write operations (absolute)
  [ 0x0e, op_ASL_arg_ret,   am_rmw_abs_T1 ],
  [ 0x2e, op_ROL_arg_ret,   am_rmw_abs_T1 ],
  [ 0x6e, op_ROR_arg_ret,   am_rmw_abs_T1 ],
  [ 0x4e, op_LSR_arg_ret,   am_rmw_abs_T1 ],
  [ 0xee, op_INC_arg_ret,   am_rmw_abs_T1 ],
  [ 0xce, op_DEC_arg_ret,   am_rmw_abs_T1 ],
  [ 0x4f, op_LSE_arg_ret,   am_rmw_abs_T1 ],          // Quasi-op
  [ 0xcf, op_DCM_arg_ret,   am_rmw_abs_T1 ],          // Quasi-op
  [ 0x0f, op_ASO_arg_ret,   am_rmw_abs_T1 ],          // Quasi-op
  [ 0x2f, op_RLA_arg_ret,   am_rmw_abs_T1 ],          // Quasi-op
  [ 0x6f, op_RRA_arg_ret,   am_rmw_abs_T1 ],          // Quasi-op
  [ 0xef, op_INS_arg_ret,   am_rmw_abs_T1 ],          // Quasi-op

  // Read-modify-write operations (zero page,X)
  [ 0x16, op_ASL_arg_ret,   am_rmw_zpx_T1 ],
  [ 0x36, op_ROL_arg_ret,   am_rmw_zpx_T1 ],
  [ 0x76, op_ROR_arg_ret,   am_rmw_zpx_T1 ],
  [ 0x56, op_LSR_arg_ret,   am_rmw_zpx_T1 ],
  [ 0xf6, op_INC_arg_ret,   am_rmw_zpx_T1 ],
  [ 0xd6, op_DEC_arg_ret,   am_rmw_zpx_T1 ],
  [ 0x14, op_NOP_arg_ret,   am_rmw_zpx_T1 ],          // Quasi-op
  [ 0x34, op_NOP_arg_ret,   am_rmw_zpx_T1 ],          // Quasi-op
  [ 0x54, op_NOP_arg_ret,   am_rmw_zpx_T1 ],          // Quasi-op
  [ 0x74, op_NOP_arg_ret,   am_rmw_zpx_T1 ],          // Quasi-op
  [ 0xd4, op_NOP_arg_ret,   am_rmw_zpx_T1 ],          // Quasi-op
  [ 0xf4, op_NOP_arg_ret,   am_rmw_zpx_T1 ],          // Quasi-op
  [ 0x57, op_LSE_arg_ret,   am_rmw_zpx_T1 ],          // Quasi-op
  [ 0xd7, op_DCM_arg_ret,   am_rmw_zpx_T1 ],          // Quasi-op
  [ 0x17, op_ASO_arg_ret,   am_rmw_zpx_T1 ],          // Quasi-op
  [ 0x37, op_RLA_arg_ret,   am_rmw_zpx_T1 ],          // Quasi-op
  [ 0x77, op_RRA_arg_ret,   am_rmw_zpx_T1 ],          // Quasi-op
  [ 0xf7, op_INS_arg_ret,   am_rmw_zpx_T1 ],          // Quasi-op

  // Read-modify-write operations (absolute,X)
  [ 0x1e, op_ASL_arg_ret,   am_rmw_abx_T1 ],
  [ 0x3e, op_ROL_arg_ret,   am_rmw_abx_T1 ],
  [ 0x7e, op_ROR_arg_ret,   am_rmw_abx_T1 ],
  [ 0x5e, op_LSR_arg_ret,   am_rmw_abx_T1 ],
  [ 0xfe, op_INC_arg_ret,   am_rmw_abx_T1 ],
  [ 0xde, op_DEC_arg_ret,   am_rmw_abx_T1 ],
  [ 0x5f, op_LSE_arg_ret,   am_rmw_abx_T1 ],          // Quasi-op
  [ 0xdf, op_DCM_arg_ret,   am_rmw_abx_T1 ],          // Quasi-op
  [ 0x1f, op_ASO_arg_ret,   am_rmw_abx_T1 ],          // Quasi-op
  [ 0x3f, op_RLA_arg_ret,   am_rmw_abx_T1 ],          // Quasi-op
  [ 0x3f, op_RLA_arg_ret,   am_rmw_abx_T1 ],          // Quasi-op
  [ 0x7f, op_RRA_arg_ret,   am_rmw_abx_T1 ],          // Quasi-op
  [ 0xff, op_INS_arg_ret,   am_rmw_abx_T1 ],          // Quasi-op

  // Read-modify-write operations (absolute,Y)
  [ 0x5b, op_LSE_arg_ret,   am_rmw_aby_T1 ],          // Quasi-op
  [ 0xdb, op_DCM_arg_ret,   am_rmw_aby_T1 ],          // Quasi-op
  [ 0x1b, op_ASO_arg_ret,   am_rmw_aby_T1 ],          // Quasi-op
  [ 0x3b, op_RLA_arg_ret,   am_rmw_aby_T1 ],          // Quasi-op
  [ 0x7b, op_RRA_arg_ret,   am_rmw_aby_T1 ],          // Quasi-op
  [ 0xfb, op_INS_arg_ret,   am_rmw_aby_T1 ],          // Quasi-op

  // Read-modify-write operations (indirect,X)
  [ 0x43, op_LSE_arg_ret,   am_rmw_inx_T1 ],          // Quasi-op
  [ 0xc3, op_DCM_arg_ret,   am_rmw_inx_T1 ],          // Quasi-op
  [ 0x03, op_ASO_arg_ret,   am_rmw_inx_T1 ],          // Quasi-op
  [ 0x23, op_RLA_arg_ret,   am_rmw_inx_T1 ],          // Quasi-op
  [ 0x63, op_RRA_arg_ret,   am_rmw_inx_T1 ],          // Quasi-op
  [ 0xe3, op_INS_arg_ret,   am_rmw_inx_T1 ],          // Quasi-op

  // Read-modify-write operations (indirect,Y)
  [ 0x53, op_LSE_arg_ret,   am_rmw_iny_T1 ],          // Quasi-op
  [ 0xd3, op_DCM_arg_ret,   am_rmw_iny_T1 ],          // Quasi-op
  [ 0x13, op_ASO_arg_ret,   am_rmw_iny_T1 ],          // Quasi-op
  [ 0x33, op_RLA_arg_ret,   am_rmw_iny_T1 ],          // Quasi-op
  [ 0x73, op_RRA_arg_ret,   am_rmw_iny_T1 ],          // Quasi-op
  [ 0xf3, op_INS_arg_ret,   am_rmw_iny_T1 ],          // Quasi-op

  // Miscellaneous operations (push)
  [ 0x48, op_PHA_void_ret,  am_push_T1 ],
  [ 0x08, op_PHP_void_ret,  am_push_T1 ],

  // Miscellaneous operations (pull)
  [ 0x68, op_PLA_arg_void,  am_pull_T1 ],
  [ 0x28, op_PLP_arg_void,  am_pull_T1 ],

  // Miscellaneous operations (jump to subroutine)
  [ 0x20, op_JSR_void_void, am_jsr_T1 ],

  // Miscellaneous operations (break)
  [ 0x00, op_BRK_void_void, am_interrupt_T1 ],

  // Miscellaneous operations (return from interrupt)
  [ 0x40, op_RTI_void_void, am_rti_T1 ],

  // Jump operation (absolute)
  [ 0x4c, op_JMP_void_void, am_jmp_abs_T1 ],

  // Jump operation (indirect)
  [ 0x6c, op_JMP_void_void, am_jmp_ind_T1 ],

  // Miscellaneous operations (return from subroutine)
  [ 0x60, op_RTS_void_void, am_rts_T1 ],

  // Miscellaneous operations (branch)
  [ 0x90, op_BCC_void_ret,  am_rel_T1 ],
  [ 0xb0, op_BCS_void_ret,  am_rel_T1 ],
  [ 0xf0, op_BEQ_void_ret,  am_rel_T1 ],
  [ 0x30, op_BMI_void_ret,  am_rel_T1 ],
  [ 0xd0, op_BNE_void_ret,  am_rel_T1 ],
  [ 0x10, op_BPL_void_ret,  am_rel_T1 ],
  [ 0x50, op_BVC_void_ret,  am_rel_T1 ],
  [ 0x70, op_BVS_void_ret,  am_rel_T1 ],

  // Irrecoverable failure
  [ 0x02, op_HLT_void_void, am_halt_T1 ],
  [ 0x12, op_HLT_void_void, am_halt_T1 ],
  [ 0x22, op_HLT_void_void, am_halt_T1 ],
  [ 0x32, op_HLT_void_void, am_halt_T1 ],
  [ 0x42, op_HLT_void_void, am_halt_T1 ],
  [ 0x52, op_HLT_void_void, am_halt_T1 ],
  [ 0x62, op_HLT_void_void, am_halt_T1 ],
  [ 0x72, op_HLT_void_void, am_halt_T1 ],
  [ 0x92, op_HLT_void_void, am_halt_T1 ],
  [ 0xb2, op_HLT_void_void, am_halt_T1 ],
  [ 0xd2, op_HLT_void_void, am_halt_T1 ],
  [ 0xf2, op_HLT_void_void, am_halt_T1 ],

].forEach(
  ([ opcode, opFn, t1 ]) => {
    am_T1_forOpcode[opcode] = t1;
     opFn_forOpcode[opcode] = opFn;
  }
);

function fd_fetch_T0() {

  // Bearing in mind that this cycle usually runs concurrently with an am_ 
  // cycle, we have to be very careful which registers we use here.

  state.ir = cpuRead(state.pc);

  // TODO: I gather this doesn't happen here, but on the last Tn of any mode
  pollForInterrupts();

  // Latch the instruction register from zero (BRK) if there are interrupts
  if (state.pendingInt) {
    state.ir = 0;
  }
  else {
    state.pc = ++state.pc & 0xffff;
  }

  state.fdTick = fd_decode_T1;
}

const visitedPcs = new Set();

function fd_decode_T1() {

  // {
  //   state.pc--;
  //   if (!visitedPcs.has(state.pc)) {
  //     visitedPcs.add(state.pc);
  //     showState();
  //   }
  //   state.pc++;
  // }

  const  opFn =  opFn_forOpcode[state.ir];
  const am_T1 = am_T1_forOpcode[state.ir];

  state.tmp = cpuRead(state.pc);

  // Now run the T1 stage for the addressing mode sequence. Usually the
  // CPU tick function would call this at the start of the cycle, but having
  // decoded the opcode, there's still a small bit of time left in this cycle,
  // and the CPU seems to use it to increment the PC if the sequence calls for
  // it. The T1 handler can assign the next amTick tick handler function, as it
  // would for any other stage, but it *must* reassign fdTick, otherwise the
  // CPU will be decoding instructions every cycle.

  state.opFn = opFn;
  am_T1();
}


// ----------------------------------------------------------------------------
// Single byte instructions (implicit)
// (†3: A. 1)

function am_singleByte_imp_T1() {
  state.fdTick = fd_fetch_T0;
  state.amTick = am_singleByte_imp_T2;
}

function am_singleByte_imp_T2() {
  state.opFn();
  state.amTick = null;
}


// ----------------------------------------------------------------------------
// Single byte instructions (accumulator)
// (†3: A. 1)

function am_singleByte_acc_T1() {
  state.fdTick = fd_fetch_T0;
  state.amTick = am_singleByte_acc_T2;
}

function am_singleByte_acc_T2() {
  // The read-modify-write opFn's take a parameter and return a value
  state.a = state.opFn(state.a);
  state.amTick = null;
}


// ----------------------------------------------------------------------------
// Internal execution on memory data: immediate addressing
// (†3: A. 2.1)

function am_ieomd_imm_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.fdTick = fd_fetch_T0;
  state.amTick = am_ieomd_imm_T2;
}

function am_ieomd_imm_T2() {
  state.opFn();
  state.amTick = null;
}


// ----------------------------------------------------------------------------
// Internal execution on memory data: zero page addressing
// (†3: A. 2.2)

function am_ieomd_zp_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_ieomd_zp_T2;
  state.fdTick = null;
}

function am_ieomd_zp_T2() {
  // Decode phase left the operand (zero page address) in state.tmp.
  // opFn expects its operand to be in state.tmp.
  state.tmp    = cpuRead(state.tmp);
  state.amTick = am_ieomd_zp_T3;
  state.fdTick = fd_fetch_T0;
}

function am_ieomd_zp_T3() {
  state.opFn();
  state.amTick = null;
}


// ----------------------------------------------------------------------------
// Internal execution on memory data: absolute addressing
// (†3: A. 2.3)

function am_ieomd_abs_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_ieomd_abs_T2;
  state.fdTick = null;
}

function am_ieomd_abs_T2() {
  // Decode phase left the operand (ADL) in state.tmp.
  // opFn expects its operand to be in state.tmp.
  state.adl    = state.tmp;
  state.adh    = cpuRead(state.pc);
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_ieomd_abs_T3;
}

function am_ieomd_abs_T3() {
  state.tmp    = cpuRead((state.adh << 8) | state.adl);
  state.amTick = am_ieomd_abs_T4;
}

function am_ieomd_abs_T4() {
  state.opFn();
  state.amTick = null;
  state.fdTick = fd_fetch_T0;
}


// ----------------------------------------------------------------------------
// Internal execution on memory data: indirect,X addressing
// (†3: A. 2.4)

function am_ieomd_inx_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_ieomd_inx_T2;
  state.fdTick = null;
}

function am_ieomd_inx_T2() {
  // Decode phase left the operand (zero page address) in state.tmp.
  // opFn expects its operand to be in state.tmp.
  cpuRead(state.tmp);
  state.tmp    = (state.tmp + state.x) & 0xff;
  state.amTick = am_ieomd_inx_T3;
}

function am_ieomd_inx_T3() {
  state.adl    = cpuRead(state.tmp);
  state.tmp    = ++state.tmp & 0xff;
  state.amTick = am_ieomd_inx_T4;
}

function am_ieomd_inx_T4() {
  state.adh    = cpuRead(state.tmp);
  state.amTick = am_ieomd_inx_T5;
}

function am_ieomd_inx_T5() {
  state.tmp    = cpuRead((state.adh << 8) | state.adl);
  state.amTick = am_ieomd_inx_T6;
  state.fdTick = fd_fetch_T0;
}

function am_ieomd_inx_T6() {
  state.opFn();
  state.amTick = null;
}


// ----------------------------------------------------------------------------
// Internal execution on memory data: absolute,X / absolute,Y addressing
// (†3: A. 2.5)

// --------------------------------------------------------
// Absolute,X only

function am_ieomd_abx_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_ieomd_abx_T2;
  state.fdTick = null;
}

function am_ieomd_abx_T2() {
  // Decode phase left the base address low byte in state.tmp.
  // opFn expects its operand to be in state.tmp.
  state.adh    = cpuRead(state.pc);
  state.pc     = ++state.pc & 0xffff;
  state.adl    = (state.tmp + state.x);  // 9 bits hereafter
  state.amTick = am_ieomd_abxy_T3;       // flow into common code
}

// --------------------------------------------------------
// Absolute,Y only

function am_ieomd_aby_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_ieomd_aby_T2;
  state.fdTick = null;
}

function am_ieomd_aby_T2() {
  // Decode phase left the base address low byte in state.tmp.
  // opFn expects its operand to be in state.tmp.
  state.adh    = cpuRead(state.pc);
  state.pc     = ++state.pc & 0xffff;
  state.adl    = (state.tmp + state.y);  // the one difference from am_ieomd_abx_T2
  state.amTick = am_ieomd_abxy_T3;       // flow into common code
}

// --------------------------------------------------------
// Common cycles for both absolute,X and absolute,Y

function am_ieomd_abxy_T3() {
  // Read from the potentially broken address
  state.tmp = cpuRead((state.adh << 8) | (state.adl & 0xff));

  if (state.adl < 0x100) {
    // No address fixup needed; advance to op and next instruction
    state.fdTick = fd_fetch_T0;
    state.amTick = am_ieomd_abxy_T5;
  }

  else {
    // Fix address and, next cycle, refetch
    state.adh    = ++state.adh & 0xff;
    state.adl   &= 0xff;
    state.amTick = am_ieomd_abxy_T4;
  }
}

function am_ieomd_abxy_T4() {
  state.tmp    = cpuRead((state.adh << 8) | state.adl);
  state.fdTick = fd_fetch_T0;
  state.amTick = am_ieomd_abxy_T5;
}

function am_ieomd_abxy_T5() {
  state.opFn();
  state.amTick = null;
}


// ----------------------------------------------------------------------------
// Internal execution on memory data: zero page,X / zero page,Y addressing
// (†3: A. 2.6)

// --------------------------------------------------------
// Zero page,X only

function am_ieomd_zpx_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_ieomd_zpx_T2;
  state.fdTick = null;
}

function am_ieomd_zpx_T2() {
  // Decode phase left the operand (zero page address) in state.tmp.
  // opFn expects its operand to be in state.tmp.
  cpuRead(state.tmp);
  state.adl    = (state.tmp + state.x) & 0xff;
  state.amTick = am_ieomd_zpxy_T3;
}

// --------------------------------------------------------
// Zero page,Y only

function am_ieomd_zpy_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_ieomd_zpy_T2;
  state.fdTick = null;
}

function am_ieomd_zpy_T2() {
  // Decode phase left the operand (zero page address) in state.tmp.
  // opFn expects its operand to be in state.tmp.
  cpuRead(state.tmp);
  state.adl    = (state.tmp + state.y) & 0xff;
  state.amTick = am_ieomd_zpxy_T3;
}

// --------------------------------------------------------
// Common cycles for both zero page,X and zero page,Y

function am_ieomd_zpxy_T3() {
  state.tmp    = cpuRead(state.adl);
  state.fdTick = fd_fetch_T0;
  state.amTick = am_ieomd_zpxy_T4;
}

function am_ieomd_zpxy_T4() {
  state.opFn();
  state.amTick = null;
}


// ----------------------------------------------------------------------------
// Internal execution on memory data: indirect,Y addressing
// (†3: A. 2.7)

function am_ieomd_iny_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_ieomd_iny_T2;
  state.fdTick = null;
}

function am_ieomd_iny_T2() {
  // Decode phase left the operand (zero page address) in state.tmp.
  // opFn expects its operand to be in state.tmp.
  state.adl    = cpuRead(state.tmp);
  state.tmp    = ++state.tmp & 0xff;
  state.amTick = am_ieomd_iny_T3;
}

function am_ieomd_iny_T3() {
  state.adh    = cpuRead(state.tmp);
  state.adl    = state.adl + state.y;  // 9 bits hereafter
  state.amTick = am_ieomd_iny_T4;
}

function am_ieomd_iny_T4() {
  state.tmp = cpuRead((state.adh << 8) | (state.adl & 0xff));

  if (state.adl > 0xff) {
    // Address needs fixing
    state.adh    = ++state.adh & 0xff;
    state.adl    = state.adl & 0xff;   // 8 bits hereafter
    state.amTick = am_ieomd_iny_T5;
  }
  else {
    // Address didn't need fixing. Skip to last stage and fetch next instruction.
    state.amTick = am_ieomd_iny_T6;
    state.fdTick = fd_fetch_T0;
  }
}

function am_ieomd_iny_T5() {
  state.tmp    = cpuRead((state.adh << 8) | state.adl);
  state.amTick = am_ieomd_iny_T6;
  state.fdTick = fd_fetch_T0;
}

function am_ieomd_iny_T6() {
  state.opFn();
  state.amTick = null;
}


// ----------------------------------------------------------------------------
// Store operations: zero page addressing
// (†3: A. 3.1)

function am_store_zp_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_store_zp_T2;
  state.fdTick = null;
}

function am_store_zp_T2() {
  // Decode phase left the operand (zero page address) in state.tmp.
  const adl = state.tmp;

  cpuWrite(adl, state.opFn());

  state.amTick = null;
  state.fdTick = fd_fetch_T0;
}


// ----------------------------------------------------------------------------
// Store operations: absolute addressing
// (†3: A. 3.2)

function am_store_abs_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_store_abs_T2;
  state.fdTick = null;
}

function am_store_abs_T2() {
  // Decode phase left the address low-byte in state.tmp.
  state.adl = state.tmp;
  state.adh = cpuRead(state.pc);
  state.pc  = ++state.pc & 0xffff;

  state.amTick = am_store_abs_T3;
}

function am_store_abs_T3() {
  cpuWrite((state.adh << 8) | state.adl, state.opFn());

  state.amTick = null;
  state.fdTick = fd_fetch_T0;
}


// ----------------------------------------------------------------------------
// Store operations: indirect,X addressing
// (†3: A. 3.3)

function am_store_inx_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_store_inx_T2;
  state.fdTick = null;
}

function am_store_inx_T2() {
  // Decode phase left the zero page address in state.tmp.
  cpuRead(state.tmp);
  
  state.tmp    = (state.tmp + state.x) & 0xff;
  state.amTick = am_store_inx_T3;
}

function am_store_inx_T3() {
  state.adl    = cpuRead(state.tmp);
  state.tmp    = ++state.tmp & 0xff;
  state.amTick = am_store_inx_T4;
}

function am_store_inx_T4() {
  state.adh    = cpuRead(state.tmp);
  state.amTick = am_store_inx_T5;
}

function am_store_inx_T5() {
  cpuWrite((state.adh << 8) | state.adl, state.opFn());

  state.amTick = null;
  state.fdTick = fd_fetch_T0;
}


// ----------------------------------------------------------------------------
// Store operations: absolute,X / absolute,Y addressing
// (†3: A. 3.4)

// --------------------------------------------------------
// Absolute,X only

function am_store_abx_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_store_abx_T2;
  state.fdTick = null;
}

function am_store_abx_T2() {
  // Decode phase left the base address low byte in state.tmp.
  state.adh    = cpuRead(state.pc);
  state.pc     = ++state.pc & 0xffff;
  state.adl    = (state.tmp + state.x);  // 9 bits hereafter
  state.amTick = am_store_abxy_T3;     // flow into common code
}

// --------------------------------------------------------
// Absolute,Y only

function am_store_aby_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_store_aby_T2;
  state.fdTick = null;
}

function am_store_aby_T2() {
  // Decode phase left the base address low byte in state.tmp.
  // opFn expects its operand to be in state.tmp.
  state.adh    = cpuRead(state.pc);
  state.pc     = ++state.pc & 0xffff;
  state.adl    = (state.tmp + state.y);  // the one difference from am_store_abx_T2
  state.amTick = am_store_abxy_T3;       // flow into common code
}

// --------------------------------------------------------
// Common cycles for both absolute,X and absolute,Y

function am_store_abxy_T3() {
  // Dummy read from the potentially broken address
  state.tmp = cpuRead((state.adh << 8) | (state.adl & 0xff));

  if (state.adl > 0xff) {
    // Fix up address
    state.adh    = ++state.adh & 0xff;
    state.adl   &= 0xff;
  }

  // state.adl is 8 bits hereafter
  state.amTick = am_store_abxy_T4;
}

function am_store_abxy_T4() {
  cpuWrite((state.adh << 8) | state.adl, state.opFn());
  state.fdTick = fd_fetch_T0;
  state.amTick = null;
}


// ----------------------------------------------------------------------------
// Store operations: zero page,X / zero page,Y addressing
// (†3: A. 3.5)

// --------------------------------------------------------
// Zero page,X only

function am_store_zpx_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_store_zpx_T2;
  state.fdTick = null;
}

function am_store_zpx_T2() {
  // Decode phase left the operand (zero page address) in state.tmp.
  cpuRead(state.tmp);
  state.adl    = (state.tmp + state.x) & 0xff;
  state.amTick = am_store_zpxy_T3;
}

// --------------------------------------------------------
// Zero page,Y only

function am_store_zpy_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_store_zpy_T2;
  state.fdTick = null;
}

function am_store_zpy_T2() {
  // Decode phase left the operand (zero page address) in state.tmp.
  cpuRead(state.tmp);
  state.adl    = (state.tmp + state.y) & 0xff;
  state.amTick = am_store_zpxy_T3;
}

// --------------------------------------------------------
// Common cycles for both zero page,X and zero page,Y

function am_store_zpxy_T3() {
  cpuWrite(state.adl, state.opFn());

  state.fdTick = fd_fetch_T0;
  state.amTick = null;
}


// ----------------------------------------------------------------------------
// Store operations: indirect,Y addressing
// (†3: A. 3.6)

function am_store_iny_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_store_iny_T2;
  state.fdTick = null;
}

function am_store_iny_T2() {
  // Decode phase left the operand (zero page address) in state.tmp.
  state.adl    = cpuRead(state.tmp);
  state.tmp    = ++state.tmp & 0xff;
  state.amTick = am_store_iny_T3;
}

function am_store_iny_T3() {
  state.adh    = cpuRead(state.tmp);
  state.adl    = state.adl + state.y;  // 9 bits hereafter
  state.amTick = am_store_iny_T4;
}

function am_store_iny_T4() {
  state.tmp    = cpuRead((state.adh << 8) | (state.adl & 0xff));

  if (state.adl > 0xff) {
    // Address needs fixing
    state.adh    = ++state.adh & 0xff;
    state.adl    = state.adl & 0xff;
  }

  // state.adl is 8 bits hereafter
  state.amTick = am_store_iny_T5;
}

function am_store_iny_T5() {
  cpuWrite((state.adh << 8) | state.adl, state.opFn());
  state.amTick = null;
  state.fdTick = fd_fetch_T0;
}


// ----------------------------------------------------------------------------
// Read-modify-write operations: zero page addressing
// (†3: A. 4.1)

function am_rmw_zp_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_rmw_zp_T2;
  state.fdTick = null;
}

function am_rmw_zp_T2() {
  // Decode phase left the operand (zero page address) in state.tmp.
  // opFn takes an argument and returns a value.
  state.adl    = state.tmp;
  state.tmp    = cpuRead(state.adl);
  state.amTick = am_rmw_zp_T3;
}

function am_rmw_zp_T3() {
  // Dummy write of the fetched data back to itself
  cpuWrite(state.adl, state.tmp);

  state.tmp = state.opFn(state.tmp);
  state.amTick = am_rmw_zp_T4;
}

function am_rmw_zp_T4() {
  // Actual write of the processed data
  cpuWrite(state.adl, state.tmp);

  state.amTick = null;
  state.fdTick = fd_fetch_T0;
}


// ----------------------------------------------------------------------------
// Read-modify-write operations: absolute addressing
// (†3: A. 4.2)

function am_rmw_abs_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_rmw_abs_T2;
  state.fdTick = null;
}

function am_rmw_abs_T2() {
  // Decode phase left the operand (ADL) in state.tmp.
  // opFn takes an argument and returns a value.
  state.adl    = state.tmp;
  state.adh    = cpuRead(state.pc);
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_rmw_abs_T3;
}

function am_rmw_abs_T3() {
  state.tmp    = cpuRead((state.adh << 8) | state.adl);
  state.amTick = am_rmw_abs_T4;
}

function am_rmw_abs_T4() {
  // Dummy write of the fetched data back to itself
  cpuWrite((state.adh << 8) | state.adl, state.tmp);

  state.tmp    = state.opFn(state.tmp);
  state.amTick = am_rmw_abs_T5;
}

function am_rmw_abs_T5() {
  // Actual write of the processed data
  cpuWrite((state.adh << 8) | state.adl, state.tmp);

  state.amTick = null;
  state.fdTick = fd_fetch_T0;
}


// ----------------------------------------------------------------------------
// Read-modify-write operations: zero page,X addressing
// (†3: A. 4.3)

function am_rmw_zpx_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_rmw_zpx_T2;
  state.fdTick = null;
}

function am_rmw_zpx_T2() {
  // Decode phase left the operand (zero page address) in state.tmp.
  // opFn takes an argument and returns a value.
  cpuRead(state.tmp);
  state.adl    = (state.tmp + state.x) & 0xff;
  state.amTick = am_rmw_zpx_T3;
}

function am_rmw_zpx_T3() {
  state.tmp    = cpuRead(state.adl);
  state.amTick = am_rmw_zpx_T4;
}

function am_rmw_zpx_T4() {
  // Dummy write of the fetched data back to itself
  cpuWrite(state.adl, state.tmp);
  state.tmp    = state.opFn(state.tmp);
  state.amTick = am_rmw_zpx_T5;
}

function am_rmw_zpx_T5() {
  // Actual write of the processed data
  cpuWrite(state.adl, state.tmp);
  state.amTick = null;
  state.fdTick = fd_fetch_T0;
}


// ----------------------------------------------------------------------------
// Read-modify-write operations: absolute,X / absolute,Y addressing
// (†3: A. 4.4)

// --------------------------------------------------------
// Absolute,X only

function am_rmw_abx_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_rmw_abx_T2;
  state.fdTick = null;
}

function am_rmw_abx_T2() {
  // Decode phase left the base address low byte in state.tmp.
  // opFn takes an argument and returns a value.
  state.adh    = cpuRead(state.pc);
  state.pc     = ++state.pc & 0xffff;
  state.adl    = (state.tmp + state.x);  // 9 bits hereafter
  state.amTick = am_rmw_abxy_T3;
}

// --------------------------------------------------------
// Absolute,Y only (used only by quasi-ops)

function am_rmw_aby_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_rmw_aby_T2;
  state.fdTick = null;
}

function am_rmw_aby_T2() {
  // Decode phase left the base address low byte in state.tmp.
  // opFn takes an argument and returns a value.
  state.adh    = cpuRead(state.pc);
  state.pc     = ++state.pc & 0xffff;
  state.adl    = (state.tmp + state.y);  // 9 bits hereafter
  state.amTick = am_rmw_abxy_T3;
}

// --------------------------------------------------------
// Common cycles for both absolute,X and absolute,Y

function am_rmw_abxy_T3() {
  // Dummy read from the potentially broken address
  state.tmp = cpuRead((state.adh << 8) | (state.adl & 0xff));

  if (state.adl > 0xff) {
    // Fix address
    state.adh  = ++state.adh & 0xff;
    state.adl &= 0xff;
  }

  // state.adl is 8 bits hereafter
  state.amTick = am_rmw_abxy_T4;
}

function am_rmw_abxy_T4() {
  state.tmp    = cpuRead((state.adh << 8) | state.adl);
  state.amTick = am_rmw_abxy_T5;
}

function am_rmw_abxy_T5() {
  // Dummy write of the fetched data back to itself
  cpuWrite((state.adh << 8) | state.adl, state.tmp);

  state.tmp    = state.opFn(state.tmp);
  state.amTick = am_rmw_abxy_T6;
}

function am_rmw_abxy_T6() {
  // Actual write of the processed data
  cpuWrite((state.adh << 8) | state.adl, state.tmp);

  state.amTick = null;
  state.fdTick = fd_fetch_T0;
}


// ----------------------------------------------------------------------------
// Read-modify-write operations: indirect,X addressing
// (Not referenced in †3, as only used by quasi-ops. Cycle sequence is thus
// guesswork, informed only by the IEOMD indirect,X sequence (†3: A. 2.4) and
// knowing that the instructions take 8 cycles (†4).)

function am_rmw_inx_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_rmw_inx_T2;
  state.fdTick = null;
}

function am_rmw_inx_T2() {
  // Decode phase left the operand (zero page address) in state.tmp.
  // opFn expects its operand to be in state.tmp.
  cpuRead(state.tmp);
  state.tmp    = (state.tmp + state.x) & 0xff;
  state.amTick = am_rmw_inx_T3;
}

function am_rmw_inx_T3() {
  state.adl    = cpuRead(state.tmp);
  state.tmp    = ++state.tmp & 0xff;
  state.amTick = am_rmw_inx_T4;
}

function am_rmw_inx_T4() {
  state.adh    = cpuRead(state.tmp);
  state.amTick = am_rmw_inx_T5;
}

function am_rmw_inx_T5() {
  state.tmp    = cpuRead((state.adh << 8) | state.adl);
  state.amTick = am_rmw_inx_T6;
}

function am_rmw_inx_T6() {
  // All the other read-modify-write's do a dummy write after reading, while
  // the ALU's calculating, so this seems a safe bet.
  cpuWrite((state.adh << 8) | state.adl, state.tmp);
  state.tmp    = state.opFn(state.tmp);
  state.amTick = am_rmw_inx_T7;
}

function am_rmw_inx_T7() {
  cpuWrite((state.adh << 8) | state.adl, state.tmp);
  state.amTick = null;
  state.fdTick = fd_fetch_T0;
}


// ----------------------------------------------------------------------------
// Read-modify-write operations: indirect,Y addressing
// (Not referenced in †3, as only used by quasi-ops. Cycle sequence is thus
// guesswork, informed only by the IEOMD indirect,Y sequence (†3: A. 2.7) and
// knowing that the instructions take 8 cycles (†4).)

function am_rmw_iny_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_rmw_iny_T2;
  state.fdTick = null;
}

function am_rmw_iny_T2() {
  // Decode phase left the operand (zero page address) in state.tmp.
  // opFn expects its operand to be in state.tmp.
  state.adl    = cpuRead(state.tmp);
  state.tmp    = ++state.tmp & 0xff;
  state.amTick = am_rmw_iny_T3;
}

function am_rmw_iny_T3() {
  state.adh    = cpuRead(state.tmp);
  state.adl    = state.adl + state.y;  // 9 bits hereafter
  state.amTick = am_rmw_iny_T4;
}

function am_rmw_iny_T4() {
  state.tmp    = cpuRead((state.adh << 8) | (state.adl & 0xff));

  if (state.adl > 0xff) {
    // Address needs fixing
    state.adh    = ++state.adh & 0xff;
    state.adl    = state.adl & 0xff;   // 8 bits hereafter
  }

  // state.adl is 8 bits hereafter
  state.amTick = am_rmw_iny_T5;
}

function am_rmw_iny_T5() {
  state.tmp    = cpuRead((state.adh << 8) | state.adl);
  state.amTick = am_rmw_iny_T6;
}

function am_rmw_iny_T6() {
  // All the other read-modify-write's do a dummy write after reading, while
  // the ALU's calculating, so this seems a safe bet.
  cpuWrite((state.adh << 8) | state.adl, state.tmp);
  state.tmp    = state.opFn(state.tmp);
  state.amTick = am_rmw_iny_T7;
}

function am_rmw_iny_T7() {
  cpuWrite((state.adh << 8) | state.adl, state.tmp);
  state.amTick = null;
  state.fdTick = fd_fetch_T0;
}


// ----------------------------------------------------------------------------
// Miscellaneous operations: push operations
// (†3: A. 5.1)

function am_push_T1() {
  state.amTick = am_push_T2;
  state.fdTick = null;
}

function am_push_T2() {
  // opFn returns the thing to be pushed.
  cpuWrite(0x100 + state.s, state.opFn());
  state.s      = --state.s & 0xff;
  state.amTick = null;
  state.fdTick = fd_fetch_T0;
}


// ----------------------------------------------------------------------------
// Miscellaneous operations: pull operations
// (†3: A. 5.2)

function am_pull_T1() {
  state.amTick = am_pull_T2;
  state.fdTick = null;
}

function am_pull_T2() {
  // opFn assigns its argument to the necessary register
  cpuRead(0x100 + state.s);
  state.s      = ++state.s & 0xff;
  state.amTick = am_pull_T3;
}

function am_pull_T3() {
  state.tmp    = cpuRead(0x100 + state.s);
  state.amTick = am_pull_T4;
  state.fdTick = fd_fetch_T0;
}

function am_pull_T4() {
  state.opFn(state.tmp);
  state.amTick = null;
}


// ----------------------------------------------------------------------------
// Miscellaneous operations: jump to subroutine
// (†3: A. 5.3)

function am_jsr_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_jsr_T2;
  state.fdTick = null;
}

function am_jsr_T2() {
  // Decode phase left the subroutine address's low byte in state.tmp.
  // It's not clear to me why this cycle exists. It does nothing useful.
  cpuRead(0x100 + state.s);
  state.amTick = am_jsr_T3;
}

function am_jsr_T3() {
  cpuWrite(0x100 + state.s, state.pc >> 8);
  state.s      = --state.s & 0xff;
  state.amTick = am_jsr_T4;
}

function am_jsr_T4() {
  cpuWrite(0x100 + state.s, state.pc & 0xff);
  state.s      = --state.s & 0xff;
  state.amTick = am_jsr_T5;
}

function am_jsr_T5() {
  state.adh    = cpuRead(state.pc);
  state.amTick = am_jsr_T6;
}

function am_jsr_T6() {
  state.pc     = (state.adh << 8) | state.tmp;
  state.amTick = null;
  state.fdTick = fd_fetch_T0;
}


// ----------------------------------------------------------------------------
// Miscellaneous operations: break operation (hardware interrupt/BRK)
// (†3: A. 5.4)

function am_interrupt_T1() {

  // Only increment the PC if this is a BRK
  // (Though even still, that's not very useful)
  if (state.pendingInt === 0) {
    state.pc = ++state.pc & 0xffff;
  }

  state.fdTick = null;
  state.amTick = am_interrupt_T2;
}

function am_interrupt_T2() {

  // Push PCH onto stack
  cpuWrite(0x100 + state.s, state.pc >> 8);
  state.s = --state.s & 0xff;

  state.amTick = am_interrupt_T3;
}

function am_interrupt_T3() {

  // Push PCL onto stack
  cpuWrite(0x100 + state.s, state.pc & 0xff);
  state.s = --state.s & 0xff;

  state.amTick = am_interrupt_T4;
}

function am_interrupt_T4() {

  // Push P onto stack
  cpuWrite(0x100 + state.s, statusToP((state.pendingInt === 0) ? 1 : 0));
  state.s = --state.s & 0xff;

  // Now that the status register has been pushed, we can change it
  state.i = 1;

  state.amTick = am_interrupt_T5;
}

function am_interrupt_T5() {

  // Get interrupt vector lowbyte
  let lowbyte;

  if      (state.pendingInt === 0) lowbyte = 0xfffe;  // BRK
  else if (state.pendingInt === 1) lowbyte = 0xfffe;  // IRQ (same vector)
  else if (state.pendingInt === 2) lowbyte = 0xfffa;  // NMI
  else if (state.pendingInt === 3) lowbyte = 0xfffc;  // RESET

  state.pc = cpuRead(lowbyte);

  state.amTick = am_interrupt_T6;
}

function am_interrupt_T6() {

  // Get interrupt vector highbyte
  let highbyte;

  if      (state.pendingInt === 0) highbyte = 0xffff;  // BRK
  else if (state.pendingInt === 1) highbyte = 0xffff;  // IRQ (same vector)
  else if (state.pendingInt === 2) highbyte = 0xfffb;  // NMI
  else if (state.pendingInt === 3) highbyte = 0xfffd;  // RESET

  state.pc |= cpuRead(highbyte) << 8;

  // Clear pendingInt, so the next time we come to this sequence we'll assume
  // it's a BRK unless the interrupt poller wants to tell us otherwise.
  state.pendingInt = 0;

  state.amTick = null;
  state.fdTick = fd_fetch_T0;
}


// ----------------------------------------------------------------------------
// Miscellaneous operations: return from interrupt (RTI)
// (†3: A. 5.5)

function am_rti_T1() {
  state.amTick = am_rti_T2;
  state.fdTick = null;
}

function am_rti_T2() {
  cpuRead(0x100 + state.s);
  state.s      = ++state.s & 0xff;
  state.amTick = am_rti_T3;
}

function am_rti_T3() {
  pToStatus(cpuRead(0x100 + state.s));
  state.s      = ++state.s & 0xff;
  state.amTick = am_rti_T4;
}

function am_rti_T4() {
  state.pc     = cpuRead(0x100 + state.s);
  state.s      = ++state.s & 0xff;
  state.amTick = am_rti_T5;
}

function am_rti_T5() {
  state.pc    |= cpuRead(0x100 + state.s) << 8;
  state.amTick = null;
  state.fdTick = fd_fetch_T0;
}


// ----------------------------------------------------------------------------
// Jump operation: absolute addressing
// (†3: A. 5.6.1)

function am_jmp_abs_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_jmp_abs_T2;
  state.fdTick = null;
}

function am_jmp_abs_T2() {
  // Decode phase left the target address's low byte in state.tmp.
  state.pc     = (cpuRead(state.pc) << 8) | state.tmp;
  state.amTick = null;
  state.fdTick = fd_fetch_T0;
}


// ----------------------------------------------------------------------------
// Jump operation: indirect addressing
// (†3: A. 5.6.2)

function am_jmp_ind_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.amTick = am_jmp_ind_T2;
  state.fdTick = null;
}

function am_jmp_ind_T2() {
  // Decode phase left the pointer address's low byte in state.tmp.
  state.adh    = cpuRead(state.pc);
  state.amTick = am_jmp_ind_T3;
}

function am_jmp_ind_T3() {
  state.pc     = cpuRead((state.adh << 8) | state.tmp);
  state.tmp    = ++state.tmp & 0xff;
  state.amTick = am_jmp_ind_T4;
}

function am_jmp_ind_T4() {
  state.pc    |= cpuRead((state.adh << 8) | state.tmp) << 8;
  state.amTick = null;
  state.fdTick = fd_fetch_T0;
}


// ----------------------------------------------------------------------------
// Miscellaneous operations: return from subroutine (RTS)
// (†3: A. 5.7)

function am_rts_T1() {
  state.amTick = am_rts_T2;
  state.fdTick = null;
}

function am_rts_T2() {
  cpuRead(0x100 + state.s);
  state.s      = ++state.s & 0xff;
  state.amTick = am_rts_T3;
}

function am_rts_T3() {
  state.pc     = cpuRead(0x100 + state.s);
  state.s      = ++state.s & 0xff;
  state.amTick = am_rts_T4;
}

function am_rts_T4() {
  state.pc    |= cpuRead(0x100 + state.s) << 8;
  state.amTick = am_rts_T5;
}

function am_rts_T5() {
  cpuRead(state.pc);
  state.pc     = ++state.pc & 0xffff;
  state.amTick = null;
  state.fdTick = fd_fetch_T0;
}


// ----------------------------------------------------------------------------
// Miscellaneous operations: branch operaion
// (†3: A. 5.8 has to be wrong; see presumed fix in †2)

function am_rel_T1() {
  state.pc     = ++state.pc & 0xffff;
  state.fdTick = null;
  state.amTick = am_rel_T2;
}

function am_rel_T2() {
  // Instruction decode will have left the instruction operand (the branch offset)
  // in state.tmp for us

  // Read next opcode, if that's what it turns out to be
  state.ir = cpuRead(state.pc);

  // This stage would be T2 of a branch instruction, which seems to be (†2)
  // where the relative mode interrupt poll seems to be.
  pollForInterrupts();

  // Evaluate the branch criterion
  if (state.opFn()) {

    // Taking branch
    const offset = state.tmp; // operand, from previous cycle

    // 9-bit ADL, effectively
    state.adl = (state.pc & 0xff) + (offset < 0x80 ? offset : -(256 - offset));

    // Cobble together an un-fixed PC by adding the low bytes without carry
    state.pc = (state.pc & 0xff00) | (state.adl & 0xff);

    state.amTick = am_rel_T3;
    return;
  }
  
  // Branch not taken. Skip straight to the decode stage as we've already
  // performed the instruction fetch.

  // Latch the instruction register from zero (BRK) if there are interrupts
  if (state.pendingInt) {
    state.ir = 0;
  }
  else {
    state.pc = ++state.pc & 0xffff;
  }

  state.amTick = null;
  state.fdTick = fd_decode_T1;
}

function am_rel_T3() {

  // Read next opcode from un-fixed PC, then figure out if it needed fixing
  state.ir = cpuRead(state.pc);

  if (state.adl & 0x100) {  // (state.adl < 0) || (state.adl > 0xff)

    state.pc = (state.adl < 0)
      ? ((state.pc - 0x100) & 0xffff)
      : ((state.pc + 0x100) & 0xffff)
    ;
    
    // End the addressing mode processing and use the regular fetch/decode
    // fetch stage to execute from the next instruction. This would be why,
    // I'm thinking, real hardware honors interrupts an instruction sooner when
    // the PC needed fixup than when it doesn't. (See †2)

    state.amTick = null;
    state.fdTick = fd_fetch_T0;
  }

  else {
    // It didn't need fixing. Since we already have the fetched instruction,
    // advance straight to fd_decode_T1

    // Latch the instruction register from zero (BRK) if there are interrupts
    if (state.pendingInt) {
      state.ir = 0;
    }
    else {
      state.pc = ++state.pc & 0xffff;
    }

    state.amTick = null;
    state.fdTick = fd_decode_T1;
  }
}


// ----------------------------------------------------------------------------
// HLT opcode
// Not documented, since it's a quasi-op mode, and it causes an irrecoverable
// failure, so capturing the nuances of what specifically happens each cycle
// is irrelevant.

function am_halt_T1() {
  // 'unimplemented' doesn't accurately describe this. We need an alternative
  // error reporting hook.
  (0,_debug__WEBPACK_IMPORTED_MODULE_0__.unimplementedWarning)(`HLT opcode at PC=${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.$xxxx)(state.pc)}`);
  state.amTick = null;
  state.fdTick = null;
}


// Opcode operations
//
// These functions are supplied to the addressing mode handler and perform the
// key functionality of the opcode. Different addressing mode handlers have
// different expectations of how they expect their op functions to take inputs
// and give outputs. Hence, to clarify usage, their names take the format:
//
//      op_XXX_in_out
//
// ...where in = void     takes no explicit input (maybe from regs)
//          in = tmp      takes input from state.tmp
//          in = arg      takes input from sole function argument
//
//         out = void     returns nothing (or is implicit, or to regs)
//         out = ret      returns value from function return value


// Flow control operations
// ...don't need to exist: they're never called. They only exist to help
// explain the opcodes of the table where they're used.

function op_BRK_void_void() { }
function op_JSR_void_void() { }
function op_RTI_void_void() { }
function op_JMP_void_void() { }
function op_RTS_void_void() { }
function op_HLT_void_void() { }  // Quasi-op

// Single-byte operations
// ...operate entirely on registers

function op_NOP_void_void() { }
function op_CLC_void_void() { state.c = 0; }
function op_CLD_void_void() { state.d = 0; }
function op_CLI_void_void() { state.i = 0; }
function op_CLV_void_void() { state.v = 0; }

function op_SEC_void_void() { state.c = 1; }
function op_SED_void_void() { state.d = 1; }
function op_SEI_void_void() { state.i = 1; }

function op_TAX_void_void() { state.x = state.a; state.z = state.x ? 0 : 1; state.n = (state.x & 0x80) ? 1 : 0; }
function op_TAY_void_void() { state.y = state.a; state.z = state.y ? 0 : 1; state.n = (state.y & 0x80) ? 1 : 0; }
function op_TXA_void_void() { state.a = state.x; state.z = state.a ? 0 : 1; state.n = (state.a & 0x80) ? 1 : 0; }
function op_TYA_void_void() { state.a = state.y; state.z = state.a ? 0 : 1; state.n = (state.a & 0x80) ? 1 : 0; }
function op_TSX_void_void() { state.x = state.s; state.z = state.x ? 0 : 1; state.n = (state.x & 0x80) ? 1 : 0; }
function op_TXS_void_void() { state.s = state.x;                                                            }

function op_DEX_void_void() { state.x = --state.x & 0xff; state.z = state.x ? 0 : 1; state.n = (state.x & 0x80) ? 1 : 0; }
function op_DEY_void_void() { state.y = --state.y & 0xff; state.z = state.y ? 0 : 1; state.n = (state.y & 0x80) ? 1 : 0; }
function op_INX_void_void() { state.x = ++state.x & 0xff; state.z = state.x ? 0 : 1; state.n = (state.x & 0x80) ? 1 : 0; }
function op_INY_void_void() { state.y = ++state.y & 0xff; state.z = state.y ? 0 : 1; state.n = (state.y & 0x80) ? 1 : 0; }

// Read-modify-write operations
// ...take a parameter and return a new value for it.

function op_ASL_arg_ret(arg) {
  arg <<= 1;
  state.c = (arg & 0x100) ? 1 : 0;
  arg &= 0xff;
  state.z = arg ? 0 : 1;
  state.n = (arg & 0x80) ? 1 : 0;
  return arg;
}

function op_LSR_arg_ret(arg) {
  state.c = arg & 1;
  arg >>= 1;
  state.z = arg ? 0 : 1;
  state.n = 0;
  return arg;
}

function op_ROL_arg_ret(arg) {
  arg <<= 1;
  arg |= state.c;
  state.c = (arg & 0x100) ? 1 : 0;
  arg &= 0xff;
  state.z = arg ? 0 : 1;
  state.n = (arg & 0x80) ? 1 : 0;
  return arg;
}

function op_ROR_arg_ret(arg) {
  const tmp = state.c;
  state.c = arg & 1;
  arg >>= 1;
  arg |= (tmp << 7);
  state.z = arg ? 0 : 1;
  state.n = (arg & 0x80) ? 1 : 0;
  return arg;
}

function op_LSE_arg_ret(arg) {
  // Quasi-op: "LSE" (†4), "SRE" (†1)
  state.tmp = op_LSR_arg_ret(arg);
  op_EOR_tmp_void();
  return state.tmp;
}

function op_DCM_arg_ret(arg) {
  // Quasi-op: "DCM" (†4), "DCP" (†1)
  state.tmp = op_DEC_arg_ret(arg);
  op_CMP_tmp_void();
  return state.tmp;
}

function op_ASO_arg_ret(arg) {
  // Quasi-op: "ASO" (†4), "SLO" (†1)
  state.tmp = op_ASL_arg_ret(arg);
  op_ORA_tmp_void();
  return state.tmp;
}

function op_RLA_arg_ret(arg) {
  // Quasi-op: "RLA" (†4 and †1)
  state.tmp = op_ROL_arg_ret(arg);
  op_AND_tmp_void();
  return state.tmp;
}

function op_RRA_arg_ret(arg) {
  // Quasi-op: "RRA" (†4 and †1)
  state.tmp = op_ROR_arg_ret(arg);
  op_ADC_tmp_void();
  return state.tmp;
}

function op_INS_arg_ret(arg) {
  // Quasi-op: "INS" (†4), "ISB" (†1), and also "ISB" (†4)
  state.tmp = op_INC_arg_ret(arg);
  op_SBC_tmp_void();
  return state.tmp;
}

function op_INC_arg_ret(arg) { arg = ++arg & 0xff; state.z = arg ? 0 : 1; state.n = (arg & 0x80) ? 1 : 0; return arg; }
function op_DEC_arg_ret(arg) { arg = --arg & 0xff; state.z = arg ? 0 : 1; state.n = (arg & 0x80) ? 1 : 0; return arg; }
function op_NOP_arg_ret(arg) { /* Quasi-op */                                                             return arg; }

// Boolean functions
// ...take a parameter and mutate the accumulator with it.

function op_EOR_tmp_void() { state.a ^= state.tmp; state.z = state.a ? 0 : 1;           state.n = (state.a & 0x80) ? 1 : 0; }
function op_ORA_tmp_void() { state.a |= state.tmp; state.z = state.a ? 0 : 1;           state.n = (state.a & 0x80) ? 1 : 0; }
function op_AND_tmp_void() { state.a &= state.tmp; state.z = state.a ? 0 : 1;           state.n = (state.a & 0x80) ? 1 : 0; }
function op_ANC_tmp_void() { state.a &= state.tmp; state.z = state.a ? 0 : 1; state.c = state.n = (state.a & 0x80) ? 1 : 0; }  // Quasi-op

function op_BIT_tmp_void() {
  state.z = (state.a & state.tmp) ? 0 : 1;
  state.n = (state.tmp & 0x80) ? 1 : 0;
  state.v = (state.tmp & 0x40) ? 1 : 0;
}

function op_ANE_tmp_void() {
  // Quasi-op: "XAA" (†4, which is inaccurate), "ANE" (†1)

  // †1 describes how this 0x11 constant can alternatively be 0x10, 0x01,
  // or 0x00 depending on residual charge on the open bus. The 0x11 used here
  // is the value expected by the Lorenz aneb test.
  state.a = ((state.a & 0x11 & state.x) | ( 0xee & state.x)) & state.tmp;
  state.z = state.a ? 0 : 1;
  state.n = (state.a & 0x80) ? 1 : 0;
}

function op_LXA_tmp_void() {
  // Quasi-op: "OAL" (†4), "LXA" (†1)

  // The 0xee here makes me think of the 0xee in ANE and how its 0x11 can be
  // unstable. This quasi-op sounds similarly unstable, so likewise, the
  // behavior here is whatever the Lorenz lxab test expects it to be.
  state.a = state.x = (state.a | 0xee) & state.tmp;
  state.z = state.a ? 0 : 1;
  state.n = (state.a & 0x80) ? 1 : 0;
}

function op_SBX_tmp_void() {
  // Quasi-op: "SAX" (†4), "SBX" (†1)
  const tmp = (state.a & state.x) - state.tmp;

  state.x = tmp & 0xff;
  state.c = (tmp >= 0) ? 1 : 0;
  state.z = state.x ? 0 : 1;
  state.n = (state.x & 0x80) ? 1 : 0;
}

function op_ALR_tmp_void() {
// Quasi-op: "ALR" (†4), "ASR" (†1)
  state.a = op_LSR_arg_ret(state.a & state.tmp);
}

function op_ARR_tmp_void() {
  // Quasi-op: "ARR" (†4 (which is inaccurate) and †1)

  if (state.d) {
    // Translated from †1. I've skipped the annotations because this is really
    // just an arbitrary muddle of accidental logic, of no use to anyone.
    let t = state.a & state.tmp;

    let ah = t >> 4;
    let al = t & 15;

    state.n = state.c;
    state.a = (t >> 1) | (state.c << 7);

    state.z = state.a ? 0 : 1;
    state.v = ((t ^ state.a) & 64) ? 1 : 0;

    if (al + (al & 1) > 5) {
      state.a = (state.a & 0xf0) | ((state.a + 6) & 0xf);
    }

    state.c = ((ah + (ah & 1)) > 5) ? 1 : 0;

    if (state.c) {
      state.a = (state.a + 0x60) & 0xff;
    }
  }
  else {
    state.a = op_ROR_arg_ret(state.a & state.tmp);

    state.c = ((state.a >> 6)                 ) & 1;
    state.v = ((state.a >> 6) ^ (state.a >> 5)) & 1;
  }
}

// Loads
// ...commit a parameter to a register.

function op_LDA_tmp_void() {           state.a = state.tmp; state.z = state.a ? 0 : 1; state.n = (state.a & 0x80) ? 1 : 0; }
function op_LDX_tmp_void() {           state.x = state.tmp; state.z = state.x ? 0 : 1; state.n = (state.x & 0x80) ? 1 : 0; }
function op_LDY_tmp_void() {           state.y = state.tmp; state.z = state.y ? 0 : 1; state.n = (state.y & 0x80) ? 1 : 0; }
function op_LAX_tmp_void() { state.x = state.a = state.tmp; state.z = state.a ? 0 : 1; state.n = (state.a & 0x80) ? 1 : 0; }  // Quasi-op

function op_LAS_tmp_void() {
  // Quasi-op: "LAS" (†4 and †1)
  state.a = state.x = state.s = state.tmp & state.s;
  state.z = state.a ? 0 : 1;
  state.n = (state.a & 0x80) ? 1 : 0;
}

// Stores
// ...supply a value for the addressing mode to commit to memory.

function op_STA_void_ret() { return state.a;                                      }
function op_STX_void_ret() { return state.x;                                      }
function op_STY_void_ret() { return state.y;                                      }
function op_AXS_void_ret() { return state.a & state.x;                            }  // Quasi-op: "AXS" (†4), "SAX" (†1)
function op_SHA_void_ret() { return state.a & state.x & ((state.adh + 1) & 0xff); }  // Quasi-op: "AXA" (†4), "SHA" (†1)
function op_SHX_void_ret() { return           state.x & ((state.adh + 1) & 0xff); }  // Quasi-op: "XAS" (†4), "SHX" (†1)
function op_SHY_void_ret() { return           state.y & ((state.adh + 1) & 0xff); }  // Quasi-op: "SAY" (†4), "SHY" (†1)

function op_SHS_void_ret() {
  // Quasi-op: "TAS" (†4), "SHS" (†1)
  state.s = state.a & state.x;
  return state.s & ((state.adh + 1) & 0xff);
}

// Compares
// ...compare a register to a parameter value.

function op_CMP_tmp_void() { const tmp = state.a - state.tmp; state.c = (tmp >= 0) ? 1 : 0; state.z = tmp ? 0 : 1; state.n = (tmp & 0x80) ? 1 : 0; }
function op_CPX_tmp_void() { const tmp = state.x - state.tmp; state.c = (tmp >= 0) ? 1 : 0; state.z = tmp ? 0 : 1; state.n = (tmp & 0x80) ? 1 : 0; }
function op_CPY_tmp_void() { const tmp = state.y - state.tmp; state.c = (tmp >= 0) ? 1 : 0; state.z = tmp ? 0 : 1; state.n = (tmp & 0x80) ? 1 : 0; }

// Add-subtract
// ...take a parameter and operate on the accumulator.

function op_ADC_tmp_void() { ADC_helper(state.tmp); }
function op_SBC_tmp_void() { SBC_helper(state.tmp); }

// Branches
// ...supply a boolean to inform the addressing mode whether to branch.

function op_BCC_void_ret() { return state.c === 0; }
function op_BCS_void_ret() { return state.c === 1; }
function op_BEQ_void_ret() { return state.z === 1; }
function op_BMI_void_ret() { return state.n === 1; }
function op_BNE_void_ret() { return state.z === 0; }
function op_BPL_void_ret() { return state.n === 0; }
function op_BVC_void_ret() { return state.v === 0; }
function op_BVS_void_ret() { return state.v === 1; }

// Pushes
// ...supply a value for the addressing mode to push on the stack.

function op_PHA_void_ret() { return state.a;      }
function op_PHP_void_ret() { return statusToP(1); }

// Pulls
// ...commit a value that the addressing mode has popped from the stack.

function op_PLA_arg_void(arg) { state.a = arg; state.z = arg ? 0 : 1; state.n = (arg & 0x80) ? 1 : 0; }
function op_PLP_arg_void(arg) { pToStatus(arg);                                                       }





function ADC_helper(src) {
  // TODO: This really wants cleaning up

  if (state.d) {
    
    state.z = ((state.a + src + state.c) & 0xff) ? 0 : 1;
    let al = (state.a & 0xf) + (src & 0xf) + state.c;
    state.c = 0;
    if (al > 9) al = ((al - 10) & 0xf) + 0x10;

    let seahn = (state.a & 0xf0);
    let sebhn = (    src & 0xf0);

    seahn = (seahn >= 0x80) ? (-1 & ~0xff) | (seahn & 0xff) : seahn;
    sebhn = (sebhn >= 0x80) ? (-1 & ~0xff) | (sebhn & 0xff) : sebhn;

    let temp = seahn + sebhn + al;

    state.n = (temp & 128) ? 1 : 0;
    state.v = ((temp < -128) || (temp > 127)) ? 1 : 0;
    state.a = (state.a & 0xf0) + (src & 0xf0) + al;

    if (state.a >= 0xa0) {
      state.a -= 0xa0;
      state.c = 1;
    }

    state.a &= 0xff;
  }
  else {
    const initialAcc = state.a;
    state.a += src;
    state.a += state.c;
    
    state.c = (state.a & 0x100) ? 1 : 0;
    state.a &= 0xff;
    state.z = state.a ? 0 : 1;
    state.n = (state.a & 0x80) ? 1 : 0;
    
    state.v = ~(initialAcc ^ src) & (initialAcc ^ state.a) & 0x80;
    state.v = state.v ? 1 : 0;
  }
}

function SBC_helper(src) {
  if (state.d) {

    // TODO: This also really wants cleaning up

    const ain = state.a;
    const cin = state.c;
    const sin = src;

    // CNVZ flags come from the binary implementation, so...
    // --------------------------------
    src = (~src) & 0xff;
    state.d = 0;
    ADC_helper(src);
    state.d = 1;
    // --------------------------------
    let al = (ain & 0xf) - (sin & 0xf) + cin - 1;
    if (al < 0) al = ((al - 6) & 0xf) - 0x10;
    state.a = (ain & 0xf0) - (sin & 0xf0) + al;
    if (state.a < 0) state.a -= 0x60;
    state.a &= 0xff;
  }
  else {
    src = (~src) & 0xff;
    ADC_helper(src);
  }
}


function statusToP(b) {
  return (
    (state.n ? (1 << 7) : 0)
  | (state.v ? (1 << 6) : 0)
  | (          (1 << 5)    )
  | (      b ? (1 << 4) : 0)
  | (state.d ? (1 << 3) : 0)
  | (state.i ? (1 << 2) : 0)
  | (state.z ? (1 << 1) : 0)
  | (state.c ? (1 << 0) : 0)
  );
}

function pToStatus(byte) {
  state.n = (byte >> 7) & 1;
  state.v = (byte >> 6) & 1;

  state.d = (byte >> 3) & 1;
  state.i = (byte >> 2) & 1;
  state.z = (byte >> 1) & 1;
  state.c = (byte >> 0) & 1;
}

function showState() {
  try {
    console.log(
      `PC=${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.$xxxx)(state.pc)}` +
      ` A=${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.$xx)(state.a)}` +
      ` X=${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.$xx)(state.x)}` +
      ` Y=${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.$xx)(state.y)}` +
      ` SR=${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.$xx)(statusToP(0))}` +
      ` (` +
        ((state.n) ? "N" : "_") +
        ((state.v) ? "V" : "_") +
        (            "-"      ) +
        (            "-"      ) +
        ((state.d) ? "D" : "_") +
        ((state.i) ? "I" : "_") +
        ((state.z) ? "Z" : "_") +
        ((state.c) ? "C" : "_") +
      `)` +
      ` SP=${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.$xxxx)(state.s)}` +
      ` | ` +
      c64.runloop.getState().cycle +
      ` | ` +
      (0,_tools_disasm__WEBPACK_IMPORTED_MODULE_1__.disasm)(cpuRead, state.pc, state.pc + 1)
    );
  }
  catch (e) {
    console.log("Regs are:", state);
    console.log("Error:", e);
    throw new Error("Regs are corrupted");
  }
}

function assertRegs() {
  if (typeof state.a !== "number")      throw new Error("Bad state.a: " + state.a);
  if ((state.a < 0) || (state.a > 255)) throw new Error("Bad state.a: " + state.a);

  if (typeof state.s !== "number")      throw new Error("Bad state.s: " + state.s);
  if ((state.s < 0) || (state.s > 255)) throw new Error("Bad state.s: " + state.s);

  if (typeof state.x !== "number")      throw new Error("Bad state.x: " + state.x);
  if ((state.x < 0) || (state.x > 255)) throw new Error("Bad state.x: " + state.x);

  if (typeof state.y !== "number")      throw new Error("Bad state.y: " + state.y);
  if ((state.y < 0) || (state.y > 255)) throw new Error("Bad state.y: " + state.y);

  if ((state.c !== 0) && (state.c !== 1)) throw new Error("Bad state.c: " + state.c);
  if ((state.v !== 0) && (state.v !== 1)) throw new Error("Bad state.v: " + state.v);
  if ((state.n !== 0) && (state.n !== 1)) throw new Error("Bad state.n: " + state.n);
  if ((state.z !== 0) && (state.z !== 1)) throw new Error("Bad state.z: " + state.z);
  if ((state.d !== 0) && (state.d !== 1)) throw new Error("Bad state.d: " + state.d);
  if ((state.i !== 0) && (state.i !== 1)) throw new Error("Bad state.i: " + state.i);
}

function pollForInterrupts() {

  // Look to see if any interrupts should divert execution. If they should, we
  // record that in the state in a variable which must be looked at whenever
  // an opcode is loaded into the instruction register (because we'd be putting
  // zero there instead)

  const nmi = getNmi();

  // NMI takes precedence over an IRQ, and ignores the I flag. Or so †3 would
  // have you believe. Test Suite 2.15.txt suggests the 6510 _does_ turn on
  // I-disable for the NMI. Try it and see...

  // NMI is edge-triggered, whereas IRQ is level-triggered
  // TODO: forums suggest that NMI edge detection is per-cycle, but this
  // is doing it per poll
  if (nmi !== state.lastNmi) {
    state.lastNmi = nmi;
    if (nmi) {
      // I'm hearing disagreement on whether state.i inhibits NMIs on a 6510.
      // Need to just try it out on real hardware.
      // Frantic Freddie gets stuck unless it's inhibited. But then if
      // allowed through it just gets stuck in gameplay.
      // if (!state.i) {
        state.pendingInt = 2;
        return;
      // }
    }
  }

  const irq = getIrq();

  if (irq) {
    if (!state.i) {
      state.pendingInt = 1;
      return;
    }
  }
}


function tick() {
  // We should probably only do this in dev builds
  assertRegs();

  // Make a copy of the state machine functions so that if one changes another,
  // it won't take effect until the next cycle.
  const { fdTick, amTick } = state;

  if (fdTick) fdTick();
  if (amTick) amTick();
}

function serialize() {
  return JSON.stringify({
    ...state,
    amTick: (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_2__.functionToReference)(state.amTick),
    fdTick: (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_2__.functionToReference)(state.fdTick),
    opFn:   (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_2__.functionToReference)(state.opFn),
  });
}

function deserialize(json) {
  state = JSON.parse(json);

  state.amTick = (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_2__.referenceToFunction)(state.amTick);
  state.fdTick = (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_2__.referenceToFunction)(state.fdTick);
  state.opFn   = (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_2__.referenceToFunction)(state.opFn);
}

(0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_2__.addToSerializerRegistry)({
  fd_fetch_T0,
  fd_decode_T1,
  am_singleByte_imp_T1,
  am_singleByte_imp_T2,
  am_singleByte_acc_T1,
  am_singleByte_acc_T2,
  am_ieomd_imm_T1,
  am_ieomd_imm_T2,
  am_ieomd_zp_T1,
  am_ieomd_zp_T2,
  am_ieomd_zp_T3,
  am_ieomd_abs_T1,
  am_ieomd_abs_T2,
  am_ieomd_abs_T3,
  am_ieomd_abs_T4,
  am_ieomd_inx_T1,
  am_ieomd_inx_T2,
  am_ieomd_inx_T3,
  am_ieomd_inx_T4,
  am_ieomd_inx_T5,
  am_ieomd_inx_T6,
  am_ieomd_abx_T1,
  am_ieomd_abx_T2,
  am_ieomd_aby_T1,
  am_ieomd_aby_T2,
  am_ieomd_abxy_T3,
  am_ieomd_abxy_T4,
  am_ieomd_abxy_T5,
  am_ieomd_zpx_T1,
  am_ieomd_zpx_T2,
  am_ieomd_zpy_T1,
  am_ieomd_zpy_T2,
  am_ieomd_zpxy_T3,
  am_ieomd_zpxy_T4,
  am_ieomd_iny_T1,
  am_ieomd_iny_T2,
  am_ieomd_iny_T3,
  am_ieomd_iny_T4,
  am_ieomd_iny_T5,
  am_ieomd_iny_T6,
  am_store_zp_T1,
  am_store_zp_T2,
  am_store_abs_T1,
  am_store_abs_T2,
  am_store_abs_T3,
  am_store_inx_T1,
  am_store_inx_T2,
  am_store_inx_T3,
  am_store_inx_T4,
  am_store_inx_T5,
  am_store_abx_T1,
  am_store_abx_T2,
  am_store_aby_T1,
  am_store_aby_T2,
  am_store_abxy_T3,
  am_store_abxy_T4,
  am_store_zpx_T1,
  am_store_zpx_T2,
  am_store_zpy_T1,
  am_store_zpy_T2,
  am_store_zpxy_T3,
  am_store_iny_T1,
  am_store_iny_T2,
  am_store_iny_T3,
  am_store_iny_T4,
  am_store_iny_T5,
  am_rmw_zp_T1,
  am_rmw_zp_T2,
  am_rmw_zp_T3,
  am_rmw_zp_T4,
  am_rmw_abs_T1,
  am_rmw_abs_T2,
  am_rmw_abs_T3,
  am_rmw_abs_T4,
  am_rmw_abs_T5,
  am_rmw_zpx_T1,
  am_rmw_zpx_T2,
  am_rmw_zpx_T3,
  am_rmw_zpx_T4,
  am_rmw_zpx_T5,
  am_rmw_abx_T1,
  am_rmw_abx_T2,
  am_rmw_aby_T1,
  am_rmw_aby_T2,
  am_rmw_abxy_T3,
  am_rmw_abxy_T4,
  am_rmw_abxy_T5,
  am_rmw_abxy_T6,
  am_rmw_inx_T1,
  am_rmw_inx_T2,
  am_rmw_inx_T3,
  am_rmw_inx_T4,
  am_rmw_inx_T5,
  am_rmw_inx_T6,
  am_rmw_inx_T7,
  am_rmw_iny_T1,
  am_rmw_iny_T2,
  am_rmw_iny_T3,
  am_rmw_iny_T4,
  am_rmw_iny_T5,
  am_rmw_iny_T6,
  am_rmw_iny_T7,
  am_push_T1,
  am_push_T2,
  am_pull_T1,
  am_pull_T2,
  am_pull_T3,
  am_pull_T4,
  am_jsr_T1,
  am_jsr_T2,
  am_jsr_T3,
  am_jsr_T4,
  am_jsr_T5,
  am_jsr_T6,
  am_interrupt_T1,
  am_interrupt_T2,
  am_interrupt_T3,
  am_interrupt_T4,
  am_interrupt_T5,
  am_interrupt_T6,
  am_rti_T1,
  am_rti_T2,
  am_rti_T3,
  am_rti_T4,
  am_rti_T5,
  am_jmp_abs_T1,
  am_jmp_abs_T2,
  am_jmp_ind_T1,
  am_jmp_ind_T2,
  am_jmp_ind_T3,
  am_jmp_ind_T4,
  am_rts_T1,
  am_rts_T2,
  am_rts_T3,
  am_rts_T4,
  am_rts_T5,
  am_rel_T1,
  am_rel_T2,
  am_rel_T3,
  am_halt_T1,
  op_BRK_void_void,
  op_JSR_void_void,
  op_RTI_void_void,
  op_JMP_void_void,
  op_RTS_void_void,
  op_HLT_void_void,
  op_NOP_void_void,
  op_CLC_void_void,
  op_CLD_void_void,
  op_CLI_void_void,
  op_CLV_void_void,
  op_SEC_void_void,
  op_SED_void_void,
  op_SEI_void_void,
  op_TAX_void_void,
  op_TAY_void_void,
  op_TXA_void_void,
  op_TYA_void_void,
  op_TSX_void_void,
  op_TXS_void_void,
  op_DEX_void_void,
  op_DEY_void_void,
  op_INX_void_void,
  op_INY_void_void,
  op_ASL_arg_ret,
  op_LSR_arg_ret,
  op_ROL_arg_ret,
  op_ROR_arg_ret,
  op_LSE_arg_ret,
  op_DCM_arg_ret,
  op_ASO_arg_ret,
  op_RLA_arg_ret,
  op_RRA_arg_ret,
  op_INS_arg_ret,
  op_INC_arg_ret,
  op_DEC_arg_ret,
  op_NOP_arg_ret,
  op_EOR_tmp_void,
  op_ORA_tmp_void,
  op_AND_tmp_void,
  op_ANC_tmp_void,
  op_BIT_tmp_void,
  op_ANE_tmp_void,
  op_LXA_tmp_void,
  op_SBX_tmp_void,
  op_ALR_tmp_void,
  op_ARR_tmp_void,
  op_LDA_tmp_void,
  op_LDX_tmp_void,
  op_LDY_tmp_void,
  op_LAX_tmp_void,
  op_LAS_tmp_void,
  op_STA_void_ret,
  op_STX_void_ret,
  op_STY_void_ret,
  op_AXS_void_ret,
  op_SHA_void_ret,
  op_SHX_void_ret,
  op_SHY_void_ret,
  op_SHS_void_ret,
  op_CMP_tmp_void,
  op_CPX_tmp_void,
  op_CPY_tmp_void,
  op_ADC_tmp_void,
  op_SBC_tmp_void,
  op_BCC_void_ret,
  op_BCS_void_ret,
  op_BEQ_void_ret,
  op_BMI_void_ret,
  op_BNE_void_ret,
  op_BPL_void_ret,
  op_BVC_void_ret,
  op_BVS_void_ret,
  op_PHA_void_ret,
  op_PHP_void_ret,
  op_PLA_arg_void,
  op_PLP_arg_void,
});


/***/ }),

/***/ "./src/target/ram.js":
/*!***************************!*\
  !*** ./src/target/ram.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attach: () => (/* binding */ attach)
/* harmony export */ });
/* harmony import */ var _tools_base64__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tools/base64 */ "./src/tools/base64.js");
/*
   ram: emulates 64KiB of byte-addressed RAM
*/



// bound by attach
let c64;

const state = new Uint8Array(65536);

function attach(nascentC64) {
  c64 = nascentC64;

  nascentC64.ram = {
    // Control
    reset,
    serialize,
    deserialize,
    // Accessors
    readRam,
    writeRam,
    vicReadRam,
  };

  reset();
}

function reset() {
  // Initialize RAM with 0xdeadbeef. Not to help our own debugging, but to
  // simulate static noise. Some games, like Dominator's tape loader, look for
  // a constant value in memory as a sign that you're trying to hack them, and
  // will crash if they detect one.
  for (let i = 0; i < 65536; i += 4) {
    state[i + 0] = 0xde;
    state[i + 1] = 0xad;
    state[i + 2] = 0xbe;
    state[i + 3] = 0xef;
  }
}

function serialize() {
  return (0,_tools_base64__WEBPACK_IMPORTED_MODULE_0__.base64Encode)(state);
}

function deserialize(base64) {
  const bytes = (0,_tools_base64__WEBPACK_IMPORTED_MODULE_0__.base64Decode)(base64);
  for (let i in bytes) {
    state[i] = bytes[i];
  }
}

function readRam(addr) {
  if (c64.hooks.onRamRead) c64.hooks.onRamRead(addr);
  return state[addr];
}

function vicReadRam(addr) {
  if (c64.hooks.onVicRead) c64.hooks.onVicRead(addr);
  return state[addr];
}

function writeRam(addr, byte) {
  if (c64.hooks.onRamWrite) c64.hooks.onRamWrite(addr, byte);
  state[addr] = byte;
}


/***/ }),

/***/ "./src/target/rom/basic.js":
/*!*********************************!*\
  !*** ./src/target/rom/basic.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _tools_assembler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tools/assembler */ "./src/tools/assembler.js");
/*
   Basic ($a000 – $bfff)

   The source below assembles into a bytestream fully compatible with the C64's
   Basic ROM. It's adapted from Michael Steil's adaptation(†1) of Lee Davison's
   investigation into the original firmware. All comments below are Lee's.

   The labels are informed by Project64's collection of memory maps(†2) and
   those used in Mapping The Commodore 64(†3). Where sources disagree on names/
   locations, I've based my choices on which had the most consensus and which
   best corresponds to the instructions or data to which they relate.

   †1 https://github.com/mist64/c64disasm
   †2 https://github.com/Project-64/reloaded/blob/master/c64/64MAP11.TXT
   †3 https://github.com/Project-64/reloaded/blob/master/c64/mapc64/MAPC6412.TXT

   If you want to substitute your own ROM, just export a byte array instead:
       export default [ 0x.., ... ];

   Unlike the rest of the Viciious project, which was authored from scratch and
   entered into the public domain, the source below is derived from works by
   multiple other authors and I make no representations as to its ownership or
   terms of use.

   Note that the Basic interpreter spills over into the Kernal ROM.
*/



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_tools_assembler__WEBPACK_IMPORTED_MODULE_0__.assemble)(
  0xa000,
  ({
    NOP, LDA, LDX, LDY, STA, STX, STY, CLC, CLD, CLI, CLV, SEC, SED, SEI,
    TAX, TAY, TSX, TXA, TXS, TYA, CMP, CPX, CPY, BCS, BCC, BEQ, BNE, BMI,
    BPL, BVS, BVC, BIT, JSR, RTS, RTI, BRK, JMP, INC, DEC, DEX, DEY, INX,
    INY, ADC, SBC, AND, EOR, ORA, ASL, ROL, LSR, ROR, PHA, PHP, PLA, PLP,
    _
  }) => {
            // External labels (RAM)
            _.label(0x0002, "_0002");
            _.label(0x0003, "adray1+0_0003");
            _.label(0x0004, "adray1+1_0004");
            _.label(0x0007, "charac_0007");
            _.label(0x0008, "endchr_0008");
            _.label(0x0009, "trmpos_0009");
            _.label(0x000b, "count_000b");
            _.label(0x000c, "dimflg_000c");
            _.label(0x000d, "valtyp_000d");
            _.label(0x000e, "intflg_000e");
            _.label(0x000f, "garbfl_000f");
            _.label(0x0010, "subflg_0010");
            _.label(0x0011, "inpflg_0011");
            _.label(0x0012, "tansgn_0012");
            _.label(0x0013, "channl_0013");
            _.label(0x0014, "linnum+0_0014");
            _.label(0x0015, "linnum+1_0015");
            _.label(0x0016, "temppt_0016");
            _.label(0x0017, "lastpt+0_0017");
            _.label(0x0018, "lastpt+1_0018");
            _.label(0x0022, "index+0_0022");
            _.label(0x0023, "index+1_0023");
            _.label(0x0024, "index+2_0024");
            _.label(0x0025, "index+3_0025");
            _.label(0x0026, "resho+0_0026");
            _.label(0x0027, "resho+1_0027");
            _.label(0x0028, "resho+2_0028");
            _.label(0x0029, "resho+3_0029");
            _.label(0x002b, "txttab+0_002b");
            _.label(0x002c, "txttab+1_002c");
            _.label(0x002d, "vartab+0_002d");
            _.label(0x002e, "vartab+1_002e");
            _.label(0x002f, "arytab+0_002f");
            _.label(0x0030, "arytab+1_0030");
            _.label(0x0031, "strend+0_0031");
            _.label(0x0032, "strend+1_0032");
            _.label(0x0033, "fretop+0_0033");
            _.label(0x0034, "fretop+1_0034");
            _.label(0x0035, "frespc+0_0035");
            _.label(0x0036, "frespc+1_0036");
            _.label(0x0037, "memsiz+0_0037");
            _.label(0x0038, "memsiz+1_0038");
            _.label(0x0039, "curlin+0_0039");
            _.label(0x003a, "curlin+1_003a");
            _.label(0x003b, "oldlin+0_003b");
            _.label(0x003c, "oldlin+1_003c");
            _.label(0x003d, "oldtxt+0_003d");
            _.label(0x003e, "oldtxt+1_003e");
            _.label(0x003f, "datlin+0_003f");
            _.label(0x0040, "datlin+1_0040");
            _.label(0x0041, "datptr+0_0041");
            _.label(0x0042, "datptr+1_0042");
            _.label(0x0043, "inpptr+0_0043");
            _.label(0x0044, "inpptr+1_0044");
            _.label(0x0045, "varnam+0_0045");
            _.label(0x0046, "varnam+1_0046");
            _.label(0x0047, "varpnt+0_0047");
            _.label(0x0048, "varpnt+1_0048");
            _.label(0x0049, "forpnt+0_0049");
            _.label(0x004a, "forpnt+1_004a");
            _.label(0x004b, "opptr+0_004b");
            _.label(0x004c, "opptr+1_004c");
            _.label(0x004d, "opmask_004d");
            _.label(0x004e, "defpnt+0_004e");
            _.label(0x004f, "defpnt+1_004f");
            _.label(0x0050, "dscpnt+0_0050");
            _.label(0x0051, "dscpnt+1_0051");
            _.label(0x0053, "four6_0053");
            _.label(0x0054, "jmper+0_0054");
            _.label(0x0055, "jmper+1_0055");
            _.label(0x0056, "jmper+2_0056");
            _.label(0x0058, "tempf1+1_0058");
            _.label(0x0059, "tempf1+2_0059");
            _.label(0x005a, "tempf1+3_005a");
            _.label(0x005b, "tempf1+4_005b");
            _.label(0x005d, "tempf2+1_005d");
            _.label(0x005e, "tempf2+2_005e");
            _.label(0x005f, "tempf2+3_005f");
            _.label(0x0060, "tempf2+4_0060");
            _.label(0x0061, "facexp_0061");
            _.label(0x0062, "facho+0_0062");
            _.label(0x0063, "facho+1_0063");
            _.label(0x0064, "facho+2_0064");
            _.label(0x0065, "facho+3_0065");
            _.label(0x0066, "facsgn_0066");
            _.label(0x0067, "sgnflg_0067");
            _.label(0x0068, "bits_0068");
            _.label(0x0069, "argexp_0069");
            _.label(0x006a, "argho+0_006a");
            _.label(0x006b, "argho+1_006b");
            _.label(0x006c, "argho+2_006c");
            _.label(0x006d, "argho+3_006d");
            _.label(0x006e, "argsgn_006e");
            _.label(0x006f, "arisgn_006f");
            _.label(0x0070, "facov_0070");
            _.label(0x0071, "fbufpt+0_0071");
            _.label(0x0072, "fbufpt+1_0072");
            _.label(0x0073, "chrget+0_0073");
            _.label(0x0079, "chrgot_0079");
            _.label(0x007a, "txtptr+0_007a");
            _.label(0x007b, "txtptr+1_007b");
            _.label(0x0080, "chrget+13_0080");
            _.label(0x00ff, "baszpt_00ff");
            _.label(0x0100, "bad+0_0100");
            _.label(0x0101, "bad+1_0101");
            _.label(0x0102, "bad+2_0102");
            _.label(0x0103, "bad+3_0103");
            _.label(0x0104, "bad+4_0104");
            _.label(0x0109, "bad+9_0109");
            _.label(0x010f, "bad+15_010f");
            _.label(0x0110, "bad+16_0110");
            _.label(0x0111, "bad+17_0111");
            _.label(0x0112, "bad+18_0112");
            _.label(0x01fb, "bstack+188_01fb");
            _.label(0x01fc, "bstack+189_01fc");
            _.label(0x01fd, "bstack+190_01fd");
            _.label(0x01fe, "bstack+191_01fe");
            _.label(0x01ff, "bstack+192_01ff");
            _.label(0x0200, "buf+0_0200");
            _.label(0x0201, "buf+1_0201");
            _.label(0x0300, "ierror+0_0300");
            _.label(0x0302, "imain+0_0302");
            _.label(0x0304, "icrnch+0_0304");
            _.label(0x0306, "iqplop+0_0306");
            _.label(0x0308, "igone+0_0308");
            _.label(0x030a, "ieval+0_030a");
            _.label(0x9fea, "_9fea");
            _.label(0x9feb, "_9feb");

            // External labels (Memory-mapped IO)
            _.label(0x0001, "r6510_0001");

            // External labels (Kernal ROM)
            _.label(0xe000, "(exp_e000");
            _.label(0xe043, "polyx_e043");
            _.label(0xe10c, "bchout_e10c");
            _.label(0xe112, "bchin_e112");
            _.label(0xe118, "bckout_e118");
            _.label(0xe11e, "bckin_e11e");
            _.label(0xe124, "bgetin_e124");
            _.label(0xe386, "_e386");
            _.label(0xff90, "setmsg_ff90");
            _.label(0xffb7, "readst_ffb7");
            _.label(0xffcc, "clrchn_ffcc");
            _.label(0xffdb, "settim_ffdb");
            _.label(0xffde, "rdtim_ffde");
            _.label(0xffe1, "stop_ffe1");
            _.label(0xffe7, "clall_ffe7");
            _.label(0xfff0, "plot_fff0");

// ---------------------------------------------------------- start of the BASIC ROM
/* a000 */ _`restart_a000`;  _.bytes(0x94, 0xe3);          // BASIC cold start entry point
/* a002 */                   _.bytes(0x7b, 0xe3);          // BASIC warm start entry point

                                                           // 'cbmbasic', ROM name, unreferenced
/* a004 */                   _.bytes(0x43, 0x42, 0x4d, 0x42, 0x41, 0x53, 0x49, 0x43);

// ------------------------------------------------------- // action addresses for primary commands
                                                           // these are called by pushing the address onto the stack and doing an RTS so the
                                                           // actual address -1 needs to be pushed
/* a00c */  _`stmdsp_a00c`;  _.bytes(0x30, 0xa8);          // perform END     $80
/* a00e */                   _.bytes(0x41, 0xa7);          // perform FOR     $81
/* a010 */                   _.bytes(0x1d, 0xad);          // perform NEXT    $82
/* a012 */                   _.bytes(0xf7, 0xa8);          // perform DATA    $83
/* a014 */                   _.bytes(0xa4, 0xab);          // perform INPUT#  $84
/* a016 */                   _.bytes(0xbe, 0xab);          // perform INPUT   $85
/* a018 */                   _.bytes(0x80, 0xb0);          // perform DIM     $86
/* a01a */                   _.bytes(0x05, 0xac);          // perform READ    $87
/* a01c */                   _.bytes(0xa4, 0xa9);          // perform LET     $88
/* a01e */                   _.bytes(0x9f, 0xa8);          // perform GOTO    $89
/* a020 */                   _.bytes(0x70, 0xa8);          // perform RUN     $8A
/* a022 */                   _.bytes(0x27, 0xa9);          // perform IF      $8B
/* a024 */                   _.bytes(0x1c, 0xa8);          // perform RESTORE $8C
/* a026 */                   _.bytes(0x82, 0xa8);          // perform GOSUB   $8D
/* a028 */                   _.bytes(0xd1, 0xa8);          // perform RETURN  $8E
/* a02a */                   _.bytes(0x3a, 0xa9);          // perform REM     $8F
/* a02c */                   _.bytes(0x2e, 0xa8);          // perform STOP    $90
/* a02e */                   _.bytes(0x4a, 0xa9);          // perform ON      $91
/* a030 */                   _.bytes(0x2c, 0xb8);          // perform WAIT    $92
/* a032 */                   _.bytes(0x67, 0xe1);          // perform LOAD    $93
/* a034 */                   _.bytes(0x55, 0xe1);          // perform SAVE    $94
/* a036 */                   _.bytes(0x64, 0xe1);          // perform VERIFY  $95
/* a038 */                   _.bytes(0xb2, 0xb3);          // perform DEF     $96
/* a03a */                   _.bytes(0x23, 0xb8);          // perform POKE    $97
/* a03c */                   _.bytes(0x7f, 0xaa);          // perform PRINT#  $98
/* a03e */                   _.bytes(0x9f, 0xaa);          // perform PRINT   $99
/* a040 */                   _.bytes(0x56, 0xa8);          // perform CONT    $9A
/* a042 */                   _.bytes(0x9b, 0xa6);          // perform LIST    $9B
/* a044 */                   _.bytes(0x5d, 0xa6);          // perform CLR     $9C
/* a046 */                   _.bytes(0x85, 0xaa);          // perform CMD     $9D
/* a048 */                   _.bytes(0x29, 0xe1);          // perform SYS     $9E
/* a04a */                   _.bytes(0xbd, 0xe1);          // perform OPEN    $9F
/* a04c */                   _.bytes(0xc6, 0xe1);          // perform CLOSE   $A0
/* a04e */                   _.bytes(0x7a, 0xab);          // perform GET     $A1
/* a050 */                   _.bytes(0x41, 0xa6);          // perform NEW     $A2

// ------------------------------------------------------- // action addresses for functions
/* a052 */  _`fundsp_a052`;  _.bytes(0x39, 0xbc);          // perform SGN     $B4
/* a054 */                   _.bytes(0xcc, 0xbc);          // perform INT     $B5
/* a056 */                   _.bytes(0x58, 0xbc);          // perform ABS     $B6
/* a058 */                   _.bytes(0x10, 0x03);          // perform USR     $B7
/* a05a */                   _.bytes(0x7d, 0xb3);          // perform FRE     $B8
/* a05c */                   _.bytes(0x9e, 0xb3);          // perform POS     $B9
/* a05e */                   _.bytes(0x71, 0xbf);          // perform SQR     $BA
/* a060 */                   _.bytes(0x97, 0xe0);          // perform RND     $BB
/* a062 */                   _.bytes(0xea, 0xb9);          // perform LOG     $BC
/* a064 */                   _.bytes(0xed, 0xbf);          // perform EXP     $BD
/* a066 */                   _.bytes(0x64, 0xe2);          // perform COS     $BE
/* a068 */                   _.bytes(0x6b, 0xe2);          // perform SIN     $BF
/* a06a */                   _.bytes(0xb4, 0xe2);          // perform TAN     $C0
/* a06c */                   _.bytes(0x0e, 0xe3);          // perform ATN     $C1
/* a06e */                   _.bytes(0x0d, 0xb8);          // perform PEEK    $C2
/* a070 */                   _.bytes(0x7c, 0xb7);          // perform LEN     $C3
/* a072 */                   _.bytes(0x65, 0xb4);          // perform STR$    $C4
/* a074 */                   _.bytes(0xad, 0xb7);          // perform VAL     $C5
/* a076 */                   _.bytes(0x8b, 0xb7);          // perform ASC     $C6
/* a078 */                   _.bytes(0xec, 0xb6);          // perform CHR$    $C7
/* a07a */                   _.bytes(0x00, 0xb7);          // perform LEFT$   $C8
/* a07c */                   _.bytes(0x2c, 0xb7);          // perform RIGHT$  $C9
/* a07e */                   _.bytes(0x37, 0xb7);          // perform MID$    $CA

// ------------------------------------------------------- // precedence byte and action addresses for operators
                                                           // like the primary commands these are called by pushing the address onto the stack
                                                           // and doing an RTS, so again the actual address -1 needs to be pushed
/* a080 */   _`optab_a080`;  _.bytes(0x79, 0x69, 0xb8);    // +
/* a083 */                   _.bytes(0x79, 0x52, 0xb8);    // -
/* a086 */                   _.bytes(0x7b, 0x2a, 0xba);    // *
/* a089 */                   _.bytes(0x7b, 0x11, 0xbb);    // /
/* a08c */                   _.bytes(0x7f, 0x7a, 0xbf);    // ^
/* a08f */                   _.bytes(0x50, 0xe8, 0xaf);    // AND
/* a092 */                   _.bytes(0x46, 0xe5, 0xaf);    // OR
/* a095 */                   _.bytes(0x7d, 0xb3, 0xbf);    // >
/* a098 */                   _.bytes(0x5a, 0xd3, 0xae);    // =
/* a09b */                   _.bytes(0x64, 0x15, 0xb0);    // <

// ------------------------------------------------------- // BASIC keywords
                                                           // each word has b7 set in it's last character as an end marker, even
                                                           // the one character keywords such as "<" or "="
                                                           // first are the primary command keywords, only these can start a statement
/* a09e */  _`reslst_a09e`;  _.bytes(0x45, 0x4e);          // end
                                                           // for next
/* a0a0 */                   _.bytes(0xc4, 0x46, 0x4f, 0xd2, 0x4e, 0x45, 0x58, 0xd4);
                                                           // data input#
/* a0a8 */                   _.bytes(0x44, 0x41, 0x54, 0xc1, 0x49, 0x4e, 0x50, 0x55);
                                                           // input dim
/* a0b0 */                   _.bytes(0x54, 0xa3, 0x49, 0x4e, 0x50, 0x55, 0xd4, 0x44);
                                                           // read let
/* a0b8 */                   _.bytes(0x49, 0xcd, 0x52, 0x45, 0x41, 0xc4, 0x4c, 0x45);
                                                           // goto run
/* a0c0 */                   _.bytes(0xd4, 0x47, 0x4f, 0x54, 0xcf, 0x52, 0x55, 0xce);
                                                           // if restore
/* a0c8 */                   _.bytes(0x49, 0xc6, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52);
                                                           // gosub return
/* a0d0 */                   _.bytes(0xc5, 0x47, 0x4f, 0x53, 0x55, 0xc2, 0x52, 0x45);
                                                           // rem stop
/* a0d8 */                   _.bytes(0x54, 0x55, 0x52, 0xce, 0x52, 0x45, 0xcd, 0x53);
                                                           // on wait
/* a0e0 */                   _.bytes(0x54, 0x4f, 0xd0, 0x4f, 0xce, 0x57, 0x41, 0x49);
                                                           // load save
/* a0e8 */                   _.bytes(0xd4, 0x4c, 0x4f, 0x41, 0xc4, 0x53, 0x41, 0x56);
                                                           // verify def
/* a0f0 */                   _.bytes(0xc5, 0x56, 0x45, 0x52, 0x49, 0x46, 0xd9, 0x44);
                                                           // poke print#
/* a0f8 */                   _.bytes(0x45, 0xc6, 0x50, 0x4f, 0x4b, 0xc5, 0x50, 0x52);
                                                           // print
/* a100 */                   _.bytes(0x49, 0x4e, 0x54, 0xa3, 0x50, 0x52, 0x49, 0x4e);
                                                           // cont list
/* a108 */                   _.bytes(0xd4, 0x43, 0x4f, 0x4e, 0xd4, 0x4c, 0x49, 0x53);
                                                           // clr cmd sys
/* a110 */                   _.bytes(0xd4, 0x43, 0x4c, 0xd2, 0x43, 0x4d, 0xc4, 0x53);
                                                           // open close
/* a118 */                   _.bytes(0x59, 0xd3, 0x4f, 0x50, 0x45, 0xce, 0x43, 0x4c);
                                                           // get new
/* a120 */                   _.bytes(0x4f, 0x53, 0xc5, 0x47, 0x45, 0xd4, 0x4e, 0x45);

                                                           // next are the secondary command keywords, these can not start a statement
                                                           // tab( to
/* a128 */                   _.bytes(0xd7, 0x54, 0x41, 0x42, 0xa8, 0x54, 0xcf, 0x46);
                                                           // spc( then
/* a130 */                   _.bytes(0xce, 0x53, 0x50, 0x43, 0xa8, 0x54, 0x48, 0x45);
                                                           // not step
/* a138 */                   _.bytes(0xce, 0x4e, 0x4f, 0xd4, 0x53, 0x54, 0x45, 0xd0);
                                                           // next are the operators
                                                           // + - * / ' and
/* a140 */  _`oplist_a140`;  _.bytes(0xab, 0xad, 0xaa, 0xaf, 0xde, 0x41, 0x4e, 0xc4);
                                                           // or <=>
/* a148 */                   _.bytes(0x4f, 0xd2, 0xbe, 0xbd, 0xbc);
/* a14d */  _`funlst_a14d`;  _.bytes(0x53, 0x47, 0xce);    // sgn

                                                           // and finally the functions
                                                           // int abs usr
/* a150 */                   _.bytes(0x49, 0x4e, 0xd4, 0x41, 0x42, 0xd3, 0x55, 0x53);
                                                           // fre pos sqr
/* a158 */                   _.bytes(0xd2, 0x46, 0x52, 0xc5, 0x50, 0x4f, 0xd3, 0x53);
                                                           // rnd log
/* a160 */                   _.bytes(0x51, 0xd2, 0x52, 0x4e, 0xc4, 0x4c, 0x4f, 0xc7);
                                                           // exp cos sin
/* a168 */                   _.bytes(0x45, 0x58, 0xd0, 0x43, 0x4f, 0xd3, 0x53, 0x49);
                                                           // tan atn peek
/* a170 */                   _.bytes(0xce, 0x54, 0x41, 0xce, 0x41, 0x54, 0xce, 0x50);
                                                           // len str$
/* a178 */                   _.bytes(0x45, 0x45, 0xcb, 0x4c, 0x45, 0xce, 0x53, 0x54);
                                                           // val asc
/* a180 */                   _.bytes(0x52, 0xa4, 0x56, 0x41, 0xcc, 0x41, 0x53, 0xc3);
                                                           // chr$ left$
/* a188 */                   _.bytes(0x43, 0x48, 0x52, 0xa4, 0x4c, 0x45, 0x46, 0x54);
                                                           // right$ mid$
/* a190 */                   _.bytes(0xa4, 0x52, 0x49, 0x47, 0x48, 0x54, 0xa4, 0x4d);

                                                           // lastly is GO, this is an add on so that GO TO, as well as GOTO, will work
                                                           // go
/* a198 */                   _.bytes(0x49, 0x44, 0xa4, 0x47, 0xcf);
/* a19d */                   _.bytes(0x00);                // end marker

// ------------------------------------------------------- // BASIC error messages
/* a19e */  _`errtab_a19e`;  _.bytes(0x54, 0x4f);          // 1 too many files
/* a1a0 */                   _.bytes(0x4f, 0x20, 0x4d, 0x41, 0x4e, 0x59, 0x20, 0x46);
                                                           // 2 file open
/* a1a8 */                   _.bytes(0x49, 0x4c, 0x45, 0xd3, 0x46, 0x49, 0x4c, 0x45);
                                                           // 3 file not open
/* a1b0 */                   _.bytes(0x20, 0x4f, 0x50, 0x45, 0xce, 0x46, 0x49, 0x4c);
/* a1b8 */                   _.bytes(0x45, 0x20, 0x4e, 0x4f, 0x54, 0x20, 0x4f, 0x50);
                                                           // 4 file not found
/* a1c0 */                   _.bytes(0x45, 0xce, 0x46, 0x49, 0x4c, 0x45, 0x20, 0x4e);
                                                           // 5 device not present
/* a1c8 */                   _.bytes(0x4f, 0x54, 0x20, 0x46, 0x4f, 0x55, 0x4e, 0xc4);
/* a1d0 */                   _.bytes(0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x20, 0x4e);
/* a1d8 */                   _.bytes(0x4f, 0x54, 0x20, 0x50, 0x52, 0x45, 0x53, 0x45);
                                                           // 6 not input file
/* a1e0 */                   _.bytes(0x4e, 0xd4, 0x4e, 0x4f, 0x54, 0x20, 0x49, 0x4e);
/* a1e8 */                   _.bytes(0x50, 0x55, 0x54, 0x20, 0x46, 0x49, 0x4c, 0xc5);
                                                           // 7 not output file
/* a1f0 */                   _.bytes(0x4e, 0x4f, 0x54, 0x20, 0x4f, 0x55, 0x54, 0x50);
/* a1f8 */                   _.bytes(0x55, 0x54, 0x20, 0x46, 0x49, 0x4c, 0xc5, 0x4d);
                                                           // 8 missing filename
/* a200 */                   _.bytes(0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x20, 0x46);
/* a208 */                   _.bytes(0x49, 0x4c, 0x45, 0x20, 0x4e, 0x41, 0x4d, 0xc5);
                                                           // 9 illegal device number
/* a210 */                   _.bytes(0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x20);
/* a218 */                   _.bytes(0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x20, 0x4e);
                                                           // 10 next without for
/* a220 */                   _.bytes(0x55, 0x4d, 0x42, 0x45, 0xd2, 0x4e, 0x45, 0x58);
/* a228 */                   _.bytes(0x54, 0x20, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55);
                                                           // 11 syntax
/* a230 */                   _.bytes(0x54, 0x20, 0x46, 0x4f, 0xd2, 0x53, 0x59, 0x4e);
                                                           // 12 return without gosub
/* a238 */                   _.bytes(0x54, 0x41, 0xd8, 0x52, 0x45, 0x54, 0x55, 0x52);
/* a240 */                   _.bytes(0x4e, 0x20, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55);
                                                           // 13 out of data
/* a248 */                   _.bytes(0x54, 0x20, 0x47, 0x4f, 0x53, 0x55, 0xc2, 0x4f);
/* a250 */                   _.bytes(0x55, 0x54, 0x20, 0x4f, 0x46, 0x20, 0x44, 0x41);
                                                           // 14 illegal quantity
/* a258 */                   _.bytes(0x54, 0xc1, 0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41);
/* a260 */                   _.bytes(0x4c, 0x20, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49);
                                                           // 15 overflow
/* a268 */                   _.bytes(0x54, 0xd9, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c);
                                                           // 16 out of memory
/* a270 */                   _.bytes(0x4f, 0xd7, 0x4f, 0x55, 0x54, 0x20, 0x4f, 0x46);
                                                           // 17 undef'd statement
/* a278 */                   _.bytes(0x20, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0xd9, 0x55);
/* a280 */                   _.bytes(0x4e, 0x44, 0x45, 0x46, 0x27, 0x44, 0x20, 0x53);
/* a288 */                   _.bytes(0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0xd4);
                                                           // 18 bad subscript
/* a290 */                   _.bytes(0x42, 0x41, 0x44, 0x20, 0x53, 0x55, 0x42, 0x53);
                                                           // 19 redim'd array
/* a298 */                   _.bytes(0x43, 0x52, 0x49, 0x50, 0xd4, 0x52, 0x45, 0x44);
/* a2a0 */                   _.bytes(0x49, 0x4d, 0x27, 0x44, 0x20, 0x41, 0x52, 0x52);
                                                           // 20 division by zero
/* a2a8 */                   _.bytes(0x41, 0xd9, 0x44, 0x49, 0x56, 0x49, 0x53, 0x49);
/* a2b0 */                   _.bytes(0x4f, 0x4e, 0x20, 0x42, 0x59, 0x20, 0x5a, 0x45);
                                                           // 21 illegal direct
/* a2b8 */                   _.bytes(0x52, 0xcf, 0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41);
/* a2c0 */                   _.bytes(0x4c, 0x20, 0x44, 0x49, 0x52, 0x45, 0x43, 0xd4);
                                                           // 22 type mismatch
/* a2c8 */                   _.bytes(0x54, 0x59, 0x50, 0x45, 0x20, 0x4d, 0x49, 0x53);
                                                           // 23 string too long
/* a2d0 */                   _.bytes(0x4d, 0x41, 0x54, 0x43, 0xc8, 0x53, 0x54, 0x52);
/* a2d8 */                   _.bytes(0x49, 0x4e, 0x47, 0x20, 0x54, 0x4f, 0x4f, 0x20);
                                                           // 24 file data
/* a2e0 */                   _.bytes(0x4c, 0x4f, 0x4e, 0xc7, 0x46, 0x49, 0x4c, 0x45);
                                                           // 25 formula too complex
/* a2e8 */                   _.bytes(0x20, 0x44, 0x41, 0x54, 0xc1, 0x46, 0x4f, 0x52);
/* a2f0 */                   _.bytes(0x4d, 0x55, 0x4c, 0x41, 0x20, 0x54, 0x4f, 0x4f);
/* a2f8 */                   _.bytes(0x20, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0xd8);
                                                           // 26 can't continue
/* a300 */                   _.bytes(0x43, 0x41, 0x4e, 0x27, 0x54, 0x20, 0x43, 0x4f);
                                                           // 27 undef'd function
/* a308 */                   _.bytes(0x4e, 0x54, 0x49, 0x4e, 0x55, 0xc5, 0x55, 0x4e);
/* a310 */                   _.bytes(0x44, 0x45, 0x46, 0x27, 0x44, 0x20, 0x46, 0x55);
                                                           // 28 verify
/* a318 */                   _.bytes(0x4e, 0x43, 0x54, 0x49, 0x4f, 0xce, 0x56, 0x45);
                                                           // 29 load
/* a320 */                   _.bytes(0x52, 0x49, 0x46, 0xd9, 0x4c, 0x4f, 0x41, 0xc4);

// ------------------------------------------------------- // error message pointer table
/* a328 */  _`errptr_a328`;  _.bytes(0x9e, 0xa1, 0xac, 0xa1, 0xb5, 0xa1, 0xc2, 0xa1);
/* a330 */                   _.bytes(0xd0, 0xa1, 0xe2, 0xa1, 0xf0, 0xa1, 0xff, 0xa1);
/* a338 */                   _.bytes(0x10, 0xa2, 0x25, 0xa2, 0x35, 0xa2, 0x3b, 0xa2);
/* a340 */                   _.bytes(0x4f, 0xa2, 0x5a, 0xa2, 0x6a, 0xa2, 0x72, 0xa2);
/* a348 */                   _.bytes(0x7f, 0xa2, 0x90, 0xa2, 0x9d, 0xa2, 0xaa, 0xa2);
/* a350 */                   _.bytes(0xba, 0xa2, 0xc8, 0xa2, 0xd5, 0xa2, 0xe4, 0xa2);
/* a358 */                   _.bytes(0xed, 0xa2, 0x00, 0xa3, 0x0e, 0xa3, 0x1e, 0xa3);
/* a360 */                   _.bytes(0x24, 0xa3, 0x83, 0xa3);

// ------------------------------------------------------- // BASIC messages
                                                           // OK
/* a364 */     _`okk_a364`;  _.bytes(0x0d, 0x4f, 0x4b, 0x0d);
                                                           // ERROR
/* a368 */                   _.bytes(0x00, 0x20, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52);
                                                           // IN
/* a370 */                   _.bytes(0x00, 0x20, 0x49, 0x4e, 0x20, 0x00, 0x0d, 0x0a);
                                                           // READY.
/* a378 */                   _.bytes(0x52, 0x45, 0x41, 0x44, 0x59, 0x2e, 0x0d, 0x0a);
                                                           // BREAK
/* a380 */                   _.bytes(0x00, 0x0d, 0x0a, 0x42, 0x52, 0x45, 0x41, 0x4b);
/* a388 */                   _.bytes(0x00);

// ------------------------------------------------------- // spare byte, not referenced
/* a389 */                   _.bytes(0xa0);                // unused

// ------------------------------------------------------- // search the stack for FOR or GOSUB activity
                                                           // return Zb=1 if FOR variable found
/* a38a */  _`fndfor_a38a`;  TSX.imp ();                   // copy stack pointer
/* a38b */                   INX.imp ();                   // +1 pass return address
/* a38c */                   INX.imp ();                   // +2 pass return address
/* a38d */                   INX.imp ();                   // +3 pass calling routine return address
/* a38e */                   INX.imp ();                   // +4 pass calling routine return address
/* a38f */        _`_a38f`;  LDA.abx ("bad+1_0101");       // get the token byte from the stack
/* a392 */                   CMP.imm (0x81);               // is it the FOR token
/* a394 */                   BNE.rel ("_a3b7");            // if not FOR token just exit
                                                           // it was the FOR token
/* a396 */                   LDA.zpg ("forpnt+1_004a");    // get FOR/NEXT variable pointer high byte
/* a398 */                   BNE.rel ("_a3a4");            // branch if not null
/* a39a */                   LDA.abx ("bad+2_0102");       // get FOR variable pointer low byte
/* a39d */                   STA.zpg ("forpnt+0_0049");    // save FOR/NEXT variable pointer low byte
/* a39f */                   LDA.abx ("bad+3_0103");       // get FOR variable pointer high byte
/* a3a2 */                   STA.zpg ("forpnt+1_004a");    // save FOR/NEXT variable pointer high byte
/* a3a4 */        _`_a3a4`;  CMP.abx ("bad+3_0103");       // compare variable pointer with stacked variable pointer
                                                           // high byte
/* a3a7 */                   BNE.rel ("_a3b0");            // branch if no match
/* a3a9 */                   LDA.zpg ("forpnt+0_0049");    // get FOR/NEXT variable pointer low byte
/* a3ab */                   CMP.abx ("bad+2_0102");       // compare variable pointer with stacked variable pointer
                                                           // low byte
/* a3ae */                   BEQ.rel ("_a3b7");            // exit if match found
/* a3b0 */        _`_a3b0`;  TXA.imp ();                   // copy index
/* a3b1 */                   CLC.imp ();                   // clear carry for add
/* a3b2 */                   ADC.imm (0x12);               // add FOR stack use size
/* a3b4 */                   TAX.imp ();                   // copy back to index
/* a3b5 */                   BNE.rel ("_a38f");            // loop if not at start of stack
/* a3b7 */        _`_a3b7`;  RTS.imp ();

// ------------------------------------------------------- // open up a space in the memory, set the end of arrays
/* a3b8 */    _`bltu_a3b8`;  JSR.abs ("reason_a408");      // check available memory, do out of memory error if no room
/* a3bb */                   STA.zpg ("strend+0_0031");    // set end of arrays low byte
/* a3bd */                   STY.zpg ("strend+1_0032");    // set end of arrays high byte
                                                           // open up a space in the memory, don't set the array end
/* a3bf */        _`_a3bf`;  SEC.imp ();                   // set carry for subtract
/* a3c0 */                   LDA.zpg ("tempf1+3_005a");    // get block end low byte
/* a3c2 */                   SBC.zpg ("tempf2+3_005f");    // subtract block start low byte
/* a3c4 */                   STA.zpg ("index+0_0022");     // save MOD(block length/$100) byte
/* a3c6 */                   TAY.imp ();                   // copy MOD(block length/$100) byte to Y
/* a3c7 */                   LDA.zpg ("tempf1+4_005b");    // get block end high byte
/* a3c9 */                   SBC.zpg ("tempf2+4_0060");    // subtract block start high byte
/* a3cb */                   TAX.imp ();                   // copy block length high byte to X
/* a3cc */                   INX.imp ();                   // +1 to allow for count=0 exit
/* a3cd */                   TYA.imp ();                   // copy block length low byte to A
/* a3ce */                   BEQ.rel ("_a3f3");            // branch if length low byte=0
                                                           // block is (X-1)*256+Y bytes, do the Y bytes first
/* a3d0 */                   LDA.zpg ("tempf1+3_005a");    // get block end low byte
/* a3d2 */                   SEC.imp ();                   // set carry for subtract
/* a3d3 */                   SBC.zpg ("index+0_0022");     // subtract MOD(block length/$100) byte
/* a3d5 */                   STA.zpg ("tempf1+3_005a");    // save corrected old block end low byte
/* a3d7 */                   BCS.rel ("_a3dc");            // branch if no underflow
/* a3d9 */                   DEC.zpg ("tempf1+4_005b");    // else decrement block end high byte
/* a3db */                   SEC.imp ();                   // set carry for subtract
/* a3dc */        _`_a3dc`;  LDA.zpg ("tempf1+1_0058");    // get destination end low byte
/* a3de */                   SBC.zpg ("index+0_0022");     // subtract MOD(block length/$100) byte
/* a3e0 */                   STA.zpg ("tempf1+1_0058");    // save modified new block end low byte
/* a3e2 */                   BCS.rel ("_a3ec");            // branch if no underflow
/* a3e4 */                   DEC.zpg ("tempf1+2_0059");    // else decrement block end high byte
/* a3e6 */                   BCC.rel ("_a3ec");            // branch always
/* a3e8 */        _`_a3e8`;  LDA.iny ("tempf1+3_005a");    // get byte from source
/* a3ea */                   STA.iny ("tempf1+1_0058");    // copy byte to destination
/* a3ec */        _`_a3ec`;  DEY.imp ();                   // decrement index
/* a3ed */                   BNE.rel ("_a3e8");            // loop until Y=0
                                                           // now do Y=0 indexed byte
/* a3ef */                   LDA.iny ("tempf1+3_005a");    // get byte from source
/* a3f1 */                   STA.iny ("tempf1+1_0058");    // save byte to destination
/* a3f3 */        _`_a3f3`;  DEC.zpg ("tempf1+4_005b");    // decrement source pointer high byte
/* a3f5 */                   DEC.zpg ("tempf1+2_0059");    // decrement destination pointer high byte
/* a3f7 */                   DEX.imp ();                   // decrement block count
/* a3f8 */                   BNE.rel ("_a3ec");            // loop until count = $0
/* a3fa */                   RTS.imp ();

// ------------------------------------------------------- // check room on stack for A bytes
                                                           // if stack too deep do out of memory error
/* a3fb */  _`getstk_a3fb`;  ASL.acc ();                   // *2
/* a3fc */                   ADC.imm (0x3e);               // need at least $3E bytes free
/* a3fe */                   BCS.rel ("omerr_a435");       // if overflow go do out of memory error then warm start
/* a400 */                   STA.zpg ("index+0_0022");     // save result in temp byte
/* a402 */                   TSX.imp ();                   // copy stack
/* a403 */                   CPX.zpg ("index+0_0022");     // compare new limit with stack
/* a405 */                   BCC.rel ("omerr_a435");       // if stack < limit do out of memory error then warm start
/* a407 */                   RTS.imp ();

// ------------------------------------------------------- // check available memory, do out of memory error if no room
/* a408 */  _`reason_a408`;  CPY.zpg ("fretop+1_0034");    // compare with bottom of string space high byte
/* a40a */                   BCC.rel ("_a434");            // if less then exit (is ok)
/* a40c */                   BNE.rel ("_a412");            // skip next test if greater (tested <)
                                                           // high byte was =, now do low byte
/* a40e */                   CMP.zpg ("fretop+0_0033");    // compare with bottom of string space low byte
/* a410 */                   BCC.rel ("_a434");            // if less then exit (is ok)
                                                           // address is > string storage ptr (oops!)
/* a412 */        _`_a412`;  PHA.imp ();                   // push address low byte
/* a413 */                   LDX.imm (0x09);               // set index to save $57 to $60 inclusive
/* a415 */                   TYA.imp ();                   // copy address high byte (to push on stack)
                                                           // save misc numeric work area
/* a416 */        _`_a416`;  PHA.imp ();                   // push byte
/* a417 */                   LDA.zpx (0x57);               // get byte from $57 to $60
/* a419 */                   DEX.imp ();                   // decrement index
/* a41a */                   BPL.rel ("_a416");            // loop until all done
/* a41c */                   JSR.abs ("garbag_b526");      // do garbage collection routine
                                                           // restore misc numeric work area
/* a41f */                   LDX.imm (0xf7);               // set index to restore bytes
/* a421 */        _`_a421`;  PLA.imp ();                   // pop byte
/* a422 */                   STA.zpx (0x61);               // save byte to $57 to $60
/* a424 */                   INX.imp ();                   // increment index
/* a425 */                   BMI.rel ("_a421");            // loop while -ve
/* a427 */                   PLA.imp ();                   // pop address high byte
/* a428 */                   TAY.imp ();                   // copy back to Y
/* a429 */                   PLA.imp ();                   // pop address low byte
/* a42a */                   CPY.zpg ("fretop+1_0034");    // compare with bottom of string space high byte
/* a42c */                   BCC.rel ("_a434");            // if less then exit (is ok)
/* a42e */                   BNE.rel ("omerr_a435");       // if greater do out of memory error then warm start
                                                           // high byte was =, now do low byte
/* a430 */                   CMP.zpg ("fretop+0_0033");    // compare with bottom of string space low byte
/* a432 */                   BCS.rel ("omerr_a435");       // if >= do out of memory error then warm start
                                                           // ok exit, carry clear
/* a434 */        _`_a434`;  RTS.imp ();

// ------------------------------------------------------- // do out of memory error then warm start
/* a435 */   _`omerr_a435`;  LDX.imm (0x10);               // error code $10, out of memory error
                                                           // do error #X then warm start
/* a437 */   _`error_a437`;  JMP.ind ("ierror+0_0300");    // do error message

// ------------------------------------------------------- // do error #X then warm start, the error message vector is initialised to point here
/* a43a */                   TXA.imp ();                   // copy error number
/* a43b */                   ASL.acc ();                   // *2
/* a43c */                   TAX.imp ();                   // copy to index
/* a43d */                   LDA.abx (0xa326);             // get error message pointer low byte
/* a440 */                   STA.zpg ("index+0_0022");     // save it
/* a442 */                   LDA.abx (0xa327);             // get error message pointer high byte
/* a445 */                   STA.zpg ("index+1_0023");     // save it
/* a447 */                   JSR.abs ("clrchn_ffcc");      // close input and output channels
/* a44a */                   LDA.imm (0x00);               // clear A
/* a44c */                   STA.zpg ("channl_0013");      // clear current I/O channel, flag default
/* a44e */                   JSR.abs ("crdo_aad7");        // print CR/LF
/* a451 */                   JSR.abs ("_ab45");            // print "?"
/* a454 */                   LDY.imm (0x00);               // clear index
/* a456 */        _`_a456`;  LDA.iny ("index+0_0022");     // get byte from message
/* a458 */                   PHA.imp ();                   // save status
/* a459 */                   AND.imm (0x7f);               // mask 0xxx xxxx, clear b7
/* a45b */                   JSR.abs ("_ab47");            // output character
/* a45e */                   INY.imp ();                   // increment index
/* a45f */                   PLA.imp ();                   // restore status
/* a460 */                   BPL.rel ("_a456");            // loop if character was not end marker
/* a462 */                   JSR.abs ("_a67a");            // flush BASIC stack and clear continue pointer
/* a465 */                   LDA.imm (0x69);               // set " ERROR" pointer low byte
/* a467 */                   LDY.imm (0xa3);               // set " ERROR" pointer high byte

// ------------------------------------------------------- // print string and do warm start, break entry
/* a469 */  _`errfin_a469`;  JSR.abs ("strout_ab1e");      // print null terminated string
/* a46c */                   LDY.zpg ("curlin+1_003a");    // get current line number high byte
/* a46e */                   INY.imp ();                   // increment it
/* a46f */                   BEQ.rel ("ready_a474");       // branch if was in immediate mode
/* a471 */                   JSR.abs ("inprt_bdc2");       // do " IN " line number message

// ------------------------------------------------------- // do warm start
/* a474 */   _`ready_a474`;  LDA.imm (0x76);               // set "READY." pointer low byte
/* a476 */                   LDY.imm (0xa3);               // set "READY." pointer high byte
/* a478 */                   JSR.abs ("strout_ab1e");      // print null terminated string
/* a47b */                   LDA.imm (0x80);               // set for control messages only
/* a47d */                   JSR.abs ("setmsg_ff90");      // control kernal messages
/* a480 */    _`main_a480`;  JMP.ind ("imain+0_0302");     // do BASIC warm start

// ------------------------------------------------------- // BASIC warm start, the warm start vector is initialised to point here
/* a483 */                   JSR.abs ("inlin_a560");       // call for BASIC input
/* a486 */                   STX.zpg ("txtptr+0_007a");    // save BASIC execute pointer low byte
/* a488 */                   STY.zpg ("txtptr+1_007b");    // save BASIC execute pointer high byte
/* a48a */                   JSR.abs ("chrget+0_0073");    // increment and scan memory
/* a48d */                   TAX.imp ();                   // copy byte to set flags
/* a48e */                   BEQ.rel ("main_a480");        // loop if no input
                                                           // got to interpret the input line now ....
/* a490 */                   LDX.imm (0xff);               // current line high byte to -1, indicates immediate mode
/* a492 */                   STX.zpg ("curlin+1_003a");    // set current line number high byte
/* a494 */                   BCC.rel ("main1_a49c");       // if numeric character go handle new BASIC line
                                                           // no line number .. immediate mode
/* a496 */                   JSR.abs ("crunch_a579");      // crunch keywords into BASIC tokens
/* a499 */                   JMP.abs ("_a7e1");            // go scan and interpret code

// ------------------------------------------------------- // handle new BASIC line
/* a49c */   _`main1_a49c`;  JSR.abs ("linget_a96b");      // get fixed-point number into temporary integer
/* a49f */                   JSR.abs ("crunch_a579");      // crunch keywords into BASIC tokens
/* a4a2 */  _`inslin_a4a2`;  STY.zpg ("count_000b");       // save index pointer to end of crunched line
/* a4a4 */                   JSR.abs ("fndlin_a613");      // search BASIC for temporary integer line number
/* a4a7 */                   BCC.rel ("_a4ed");            // if not found skip the line delete
                                                           // line # already exists so delete it
/* a4a9 */                   LDY.imm (0x01);               // set index to next line pointer high byte
/* a4ab */                   LDA.iny ("tempf2+3_005f");    // get next line pointer high byte
/* a4ad */                   STA.zpg ("index+1_0023");     // save it
/* a4af */                   LDA.zpg ("vartab+0_002d");    // get start of variables low byte
/* a4b1 */                   STA.zpg ("index+0_0022");     // save it
/* a4b3 */                   LDA.zpg ("tempf2+4_0060");    // get found line pointer high byte
/* a4b5 */                   STA.zpg ("index+3_0025");     // save it
/* a4b7 */                   LDA.zpg ("tempf2+3_005f");    // get found line pointer low byte
/* a4b9 */                   DEY.imp ();                   // decrement index
/* a4ba */                   SBC.iny ("tempf2+3_005f");    // subtract next line pointer low byte
/* a4bc */                   CLC.imp ();                   // clear carry for add
/* a4bd */                   ADC.zpg ("vartab+0_002d");    // add start of variables low byte
/* a4bf */                   STA.zpg ("vartab+0_002d");    // set start of variables low byte
/* a4c1 */                   STA.zpg ("index+2_0024");     // save destination pointer low byte
/* a4c3 */                   LDA.zpg ("vartab+1_002e");    // get start of variables high byte
/* a4c5 */                   ADC.imm (0xff);               // -1 + carry
/* a4c7 */                   STA.zpg ("vartab+1_002e");    // set start of variables high byte
/* a4c9 */                   SBC.zpg ("tempf2+4_0060");    // subtract found line pointer high byte
/* a4cb */                   TAX.imp ();                   // copy to block count
/* a4cc */                   SEC.imp ();                   // set carry for subtract
/* a4cd */                   LDA.zpg ("tempf2+3_005f");    // get found line pointer low byte
/* a4cf */                   SBC.zpg ("vartab+0_002d");    // subtract start of variables low byte
/* a4d1 */                   TAY.imp ();                   // copy to bytes in first block count
/* a4d2 */                   BCS.rel ("_a4d7");            // branch if no underflow
/* a4d4 */                   INX.imp ();                   // increment block count, correct for = 0 loop exit
/* a4d5 */                   DEC.zpg ("index+3_0025");     // decrement destination high byte
/* a4d7 */        _`_a4d7`;  CLC.imp ();                   // clear carry for add
/* a4d8 */                   ADC.zpg ("index+0_0022");     // add source pointer low byte
/* a4da */                   BCC.rel ("_a4df");            // branch if no overflow
/* a4dc */                   DEC.zpg ("index+1_0023");     // else decrement source pointer high byte
/* a4de */                   CLC.imp ();                   // clear carry
                                                           // close up memory to delete old line
/* a4df */        _`_a4df`;  LDA.iny ("index+0_0022");     // get byte from source
/* a4e1 */                   STA.iny ("index+2_0024");     // copy to destination
/* a4e3 */                   INY.imp ();                   // increment index
/* a4e4 */                   BNE.rel ("_a4df");            // while <> 0 do this block
/* a4e6 */                   INC.zpg ("index+1_0023");     // increment source pointer high byte
/* a4e8 */                   INC.zpg ("index+3_0025");     // increment destination pointer high byte
/* a4ea */                   DEX.imp ();                   // decrement block count
/* a4eb */                   BNE.rel ("_a4df");            // loop until all done
                                                           // got new line in buffer and no existing same #
/* a4ed */        _`_a4ed`;  JSR.abs ("_a659");            // reset execution to start, clear variables, flush stack
                                                           // and return
/* a4f0 */                   JSR.abs ("linkprg_a533");     // rebuild BASIC line chaining
/* a4f3 */                   LDA.abs ("buf+0_0200");       // get first byte from buffer
/* a4f6 */                   BEQ.rel ("main_a480");        // if no line go do BASIC warm start
                                                           // else insert line into memory
/* a4f8 */                   CLC.imp ();                   // clear carry for add
/* a4f9 */                   LDA.zpg ("vartab+0_002d");    // get start of variables low byte
/* a4fb */                   STA.zpg ("tempf1+3_005a");    // save as source end pointer low byte
/* a4fd */                   ADC.zpg ("count_000b");       // add index pointer to end of crunched line
/* a4ff */                   STA.zpg ("tempf1+1_0058");    // save as destination end pointer low byte
/* a501 */                   LDY.zpg ("vartab+1_002e");    // get start of variables high byte
/* a503 */                   STY.zpg ("tempf1+4_005b");    // save as source end pointer high byte
/* a505 */                   BCC.rel ("_a508");            // branch if no carry to high byte
/* a507 */                   INY.imp ();                   // else increment high byte
/* a508 */        _`_a508`;  STY.zpg ("tempf1+2_0059");    // save as destination end pointer high byte
/* a50a */                   JSR.abs ("bltu_a3b8");        // open up space in memory
                                                           // most of what remains to do is copy the crunched line into the space opened up in memory,
                                                           // however, before the crunched line comes the next line pointer and the line number. the
                                                           // line number is retrieved from the temporary integer and stored in memory, this
                                                           // overwrites the bottom two bytes on the stack. next the line is copied and the next line
                                                           // pointer is filled with whatever was in two bytes above the line number in the stack.
                                                           // this is ok because the line pointer gets fixed in the line chain re-build.
/* a50d */                   LDA.zpg ("linnum+0_0014");    // get line number low byte
/* a50f */                   LDY.zpg ("linnum+1_0015");    // get line number high byte
/* a511 */                   STA.abs ("bstack+191_01fe");  // save line number low byte before crunched line
/* a514 */                   STY.abs ("bstack+192_01ff");  // save line number high byte before crunched line
/* a517 */                   LDA.zpg ("strend+0_0031");    // get end of arrays low byte
/* a519 */                   LDY.zpg ("strend+1_0032");    // get end of arrays high byte
/* a51b */                   STA.zpg ("vartab+0_002d");    // set start of variables low byte
/* a51d */                   STY.zpg ("vartab+1_002e");    // set start of variables high byte
/* a51f */                   LDY.zpg ("count_000b");       // get index to end of crunched line
/* a521 */                   DEY.imp ();                   // -1
/* a522 */        _`_a522`;  LDA.aby ("bstack+189_01fc");  // get byte from crunched line
/* a525 */                   STA.iny ("tempf2+3_005f");    // save byte to memory
/* a527 */                   DEY.imp ();                   // decrement index
/* a528 */                   BPL.rel ("_a522");            // loop while more to do
                                                           // reset execution, clear variables, flush stack, rebuild BASIC chain and do warm start
/* a52a */                   JSR.abs ("_a659");            // reset execution to start, clear variables and flush stack
/* a52d */                   JSR.abs ("linkprg_a533");     // rebuild BASIC line chaining
/* a530 */                   JMP.abs ("main_a480");        // go do BASIC warm start

// ------------------------------------------------------- // rebuild BASIC line chaining
/* a533 */ _`linkprg_a533`;  LDA.zpg ("txttab+0_002b");    // get start of memory low byte
/* a535 */                   LDY.zpg ("txttab+1_002c");    // get start of memory high byte
/* a537 */                   STA.zpg ("index+0_0022");     // set line start pointer low byte
/* a539 */                   STY.zpg ("index+1_0023");     // set line start pointer high byte
/* a53b */                   CLC.imp ();                   // clear carry for add
/* a53c */        _`_a53c`;  LDY.imm (0x01);               // set index to pointer to next line high byte
/* a53e */                   LDA.iny ("index+0_0022");     // get pointer to next line high byte
/* a540 */                   BEQ.rel ("_a55f");            // exit if null, [EOT]
/* a542 */                   LDY.imm (0x04);               // point to first code byte of line
                                                           // there is always 1 byte + [EOL] as null entries are deleted
/* a544 */        _`_a544`;  INY.imp ();                   // next code byte
/* a545 */                   LDA.iny ("index+0_0022");     // get byte
/* a547 */                   BNE.rel ("_a544");            // loop if not [EOL]
/* a549 */                   INY.imp ();                   // point to byte past [EOL], start of next line
/* a54a */                   TYA.imp ();                   // copy it
/* a54b */                   ADC.zpg ("index+0_0022");     // add line start pointer low byte
/* a54d */                   TAX.imp ();                   // copy to X
/* a54e */                   LDY.imm (0x00);               // clear index, point to this line's next line pointer
/* a550 */                   STA.iny ("index+0_0022");     // set next line pointer low byte
/* a552 */                   LDA.zpg ("index+1_0023");     // get line start pointer high byte
/* a554 */                   ADC.imm (0x00);               // add any overflow
/* a556 */                   INY.imp ();                   // increment index to high byte
/* a557 */                   STA.iny ("index+0_0022");     // set next line pointer high byte
/* a559 */                   STX.zpg ("index+0_0022");     // set line start pointer low byte
/* a55b */                   STA.zpg ("index+1_0023");     // set line start pointer high byte
/* a55d */                   BCC.rel ("_a53c");            // go do next line, branch always
/* a55f */        _`_a55f`;  RTS.imp ();
                                                           // call for BASIC input
/* a560 */   _`inlin_a560`;  LDX.imm (0x00);               // set channel $00, keyboard
/* a562 */        _`_a562`;  JSR.abs ("bchin_e112");       // input character from channel with error check
/* a565 */                   CMP.imm (0x0d);               // compare with [CR]
/* a567 */                   BEQ.rel ("_a576");            // if [CR] set XY to $200 - 1, print [CR] and exit
                                                           // character was not [CR]
/* a569 */                   STA.abx ("buf+0_0200");       // save character to buffer
/* a56c */                   INX.imp ();                   // increment buffer index
/* a56d */                   CPX.imm (0x59);               // compare with max+1
/* a56f */                   BCC.rel ("_a562");            // branch if < max+1
/* a571 */                   LDX.imm (0x17);               // error $17, string too long error
/* a573 */                   JMP.abs ("error_a437");       // do error #X then warm start
/* a576 */        _`_a576`;  JMP.abs ("_aaca");            // set XY to $200 - 1 and print [CR]

// ------------------------------------------------------- // crunch BASIC tokens vector
/* a579 */  _`crunch_a579`;  JMP.ind ("icrnch+0_0304");    // do crunch BASIC tokens

// ------------------------------------------------------- // crunch BASIC tokens, the crunch BASIC tokens vector is initialised to point here
/* a57c */                   LDX.zpg ("txtptr+0_007a");    // get BASIC execute pointer low byte
/* a57e */                   LDY.imm (0x04);               // set save index
/* a580 */                   STY.zpg ("garbfl_000f");      // clear open quote/DATA flag
/* a582 */        _`_a582`;  LDA.abx ("buf+0_0200");       // get a byte from the input buffer
/* a585 */                   BPL.rel ("_a58e");            // if b7 clear go do crunching
/* a587 */                   CMP.imm (0xff);               // compare with the token for PI, this toke is input
                                                           // directly from the keyboard as the PI character
/* a589 */                   BEQ.rel ("_a5c9");            // if PI save byte then continue crunching
                                                           // this is the bit of code that stops you being able to enter
                                                           // some keywords as just single shifted characters. If this
                                                           // dropped through you would be able to enter GOTO as just
                                                           // [SHIFT]G
/* a58b */                   INX.imp ();                   // increment read index
/* a58c */                   BNE.rel ("_a582");            // loop if more to do, branch always
/* a58e */        _`_a58e`;  CMP.imm (0x20);               // compare with [SPACE]
/* a590 */                   BEQ.rel ("_a5c9");            // if [SPACE] save byte then continue crunching
/* a592 */                   STA.zpg ("endchr_0008");      // save buffer byte as search character
/* a594 */                   CMP.imm (0x22);               // compare with quote character
/* a596 */                   BEQ.rel ("_a5ee");            // if quote go copy quoted string
/* a598 */                   BIT.zpg ("garbfl_000f");      // get open quote/DATA token flag
/* a59a */                   BVS.rel ("_a5c9");            // branch if b6 of Oquote set, was DATA
                                                           // go save byte then continue crunching
/* a59c */                   CMP.imm (0x3f);               // compare with "?" character
/* a59e */                   BNE.rel ("_a5a4");            // if not "?" continue crunching
/* a5a0 */                   LDA.imm (0x99);               // else the keyword token is $99, PRINT
/* a5a2 */                   BNE.rel ("_a5c9");            // go save byte then continue crunching, branch always
/* a5a4 */        _`_a5a4`;  CMP.imm (0x30);               // compare with "0"
/* a5a6 */                   BCC.rel ("_a5ac");            // branch if <, continue crunching
/* a5a8 */                   CMP.imm (0x3c);               // compare with "<"
/* a5aa */                   BCC.rel ("_a5c9");            // if <, 0123456789:; go save byte then continue crunching
                                                           // gets here with next character not numeric, ";" or ":"
/* a5ac */        _`_a5ac`;  STY.zpg ("fbufpt+0_0071");    // copy save index
/* a5ae */                   LDY.imm (0x00);               // clear table pointer
/* a5b0 */                   STY.zpg ("count_000b");       // clear word index
/* a5b2 */                   DEY.imp ();                   // adjust for pre increment loop
/* a5b3 */                   STX.zpg ("txtptr+0_007a");    // save BASIC execute pointer low byte, buffer index
/* a5b5 */                   DEX.imp ();                   // adjust for pre increment loop
/* a5b6 */        _`_a5b6`;  INY.imp ();                   // next table byte
/* a5b7 */                   INX.imp ();                   // next buffer byte
/* a5b8 */        _`_a5b8`;  LDA.abx ("buf+0_0200");       // get byte from input buffer
/* a5bb */                   SEC.imp ();                   // set carry for subtract
/* a5bc */                   SBC.aby ("reslst_a09e");      // subtract table byte
/* a5bf */                   BEQ.rel ("_a5b6");            // go compare next if match
/* a5c1 */                   CMP.imm (0x80);               // was it end marker match ?
/* a5c3 */                   BNE.rel ("_a5f5");            // branch if not, not found keyword
                                                           // actually this works even if the input buffer byte is the
                                                           // end marker, i.e. a shifted character. As you can't enter
                                                           // any keywords as a single shifted character, see above,
                                                           // you can enter keywords in shorthand by shifting any
                                                           // character after the first. so RETURN can be entered as
                                                           // R[SHIFT]E, RE[SHIFT]T, RET[SHIFT]U or RETU[SHIFT]R.
                                                           // RETUR[SHIFT]N however will not work because the [SHIFT]N
                                                           // will match the RETURN end marker so the routine will try
                                                           // to match the next character.
                                                           // else found keyword
/* a5c5 */                   ORA.zpg ("count_000b");       // OR with word index, +$80 in A makes token
/* a5c7 */        _`_a5c7`;  LDY.zpg ("fbufpt+0_0071");    // restore save index
                                                           // save byte then continue crunching
/* a5c9 */        _`_a5c9`;  INX.imp ();                   // increment buffer read index
/* a5ca */                   INY.imp ();                   // increment save index
/* a5cb */                   STA.aby ("bstack+188_01fb");  // save byte to output
/* a5ce */                   LDA.aby ("bstack+188_01fb");  // get byte from output, set flags
/* a5d1 */                   BEQ.rel ("_a609");            // branch if was null [EOL]
                                                           // A holds the token here
/* a5d3 */                   SEC.imp ();                   // set carry for subtract
/* a5d4 */                   SBC.imm (0x3a);               // subtract ":"
/* a5d6 */                   BEQ.rel ("_a5dc");            // branch if it was (is now $00)
                                                           // A now holds token-':'
/* a5d8 */                   CMP.imm (0x49);               // compare with the token for DATA-':'
/* a5da */                   BNE.rel ("_a5de");            // if not DATA go try REM
                                                           // token was : or DATA
/* a5dc */        _`_a5dc`;  STA.zpg ("garbfl_000f");      // save the token-$3A
/* a5de */        _`_a5de`;  SEC.imp ();                   // set carry for subtract
/* a5df */                   SBC.imm (0x55);               // subtract the token for REM-':'
/* a5e1 */                   BNE.rel ("_a582");            // if wasn't REM crunch next bit of line
/* a5e3 */                   STA.zpg ("endchr_0008");      // else was REM so set search for [EOL]
                                                           // loop for "..." etc.
/* a5e5 */        _`_a5e5`;  LDA.abx ("buf+0_0200");       // get byte from input buffer
/* a5e8 */                   BEQ.rel ("_a5c9");            // if null [EOL] save byte then continue crunching
/* a5ea */                   CMP.zpg ("endchr_0008");      // compare with stored character
/* a5ec */                   BEQ.rel ("_a5c9");            // if match save byte then continue crunching
/* a5ee */        _`_a5ee`;  INY.imp ();                   // increment save index
/* a5ef */                   STA.aby ("bstack+188_01fb");  // save byte to output
/* a5f2 */                   INX.imp ();                   // increment buffer index
/* a5f3 */                   BNE.rel ("_a5e5");            // loop while <> 0, should never reach 0
                                                           // not found keyword this go
/* a5f5 */        _`_a5f5`;  LDX.zpg ("txtptr+0_007a");    // restore BASIC execute pointer low byte
/* a5f7 */                   INC.zpg ("count_000b");       // increment word index (next word)
                                                           // now find end of this word in the table
/* a5f9 */        _`_a5f9`;  INY.imp ();                   // increment table index
/* a5fa */                   LDA.aby (0xa09d);             // get table byte
/* a5fd */                   BPL.rel ("_a5f9");            // loop if not end of word yet
/* a5ff */                   LDA.aby ("reslst_a09e");      // get byte from keyword table
/* a602 */                   BNE.rel ("_a5b8");            // go test next word if not zero byte, end of table
                                                           // reached end of table with no match
/* a604 */                   LDA.abx ("buf+0_0200");       // restore byte from input buffer
/* a607 */                   BPL.rel ("_a5c7");            // branch always, all unmatched bytes in the buffer are
                                                           // $00 to $7F, go save byte in output and continue crunching
                                                           // reached [EOL]
/* a609 */        _`_a609`;  STA.aby ("bstack+190_01fd");  // save [EOL]
/* a60c */                   DEC.zpg ("txtptr+1_007b");    // decrement BASIC execute pointer high byte
/* a60e */                   LDA.imm (0xff);               // point to start of buffer-1
/* a610 */                   STA.zpg ("txtptr+0_007a");    // set BASIC execute pointer low byte
/* a612 */                   RTS.imp ();

// ------------------------------------------------------- // search BASIC for temporary integer line number
/* a613 */  _`fndlin_a613`;  LDA.zpg ("txttab+0_002b");    // get start of memory low byte
/* a615 */                   LDX.zpg ("txttab+1_002c");    // get start of memory high byte

// ------------------------------------------------------- // search Basic for temp integer line number from AX
                                                           // returns carry set if found
/* a617 */        _`_a617`;  LDY.imm (0x01);               // set index to next line pointer high byte
/* a619 */                   STA.zpg ("tempf2+3_005f");    // save low byte as current
/* a61b */                   STX.zpg ("tempf2+4_0060");    // save high byte as current
/* a61d */                   LDA.iny ("tempf2+3_005f");    // get next line pointer high byte from address
/* a61f */                   BEQ.rel ("_a640");            // pointer was zero so done, exit
/* a621 */                   INY.imp ();                   // increment index ...
/* a622 */                   INY.imp ();                   // ... to line # high byte
/* a623 */                   LDA.zpg ("linnum+1_0015");    // get temporary integer high byte
/* a625 */                   CMP.iny ("tempf2+3_005f");    // compare with line # high byte
/* a627 */                   BCC.rel ("_a641");            // exit if temp < this line, target line passed
/* a629 */                   BEQ.rel ("_a62e");            // go check low byte if =
/* a62b */                   DEY.imp ();                   // else decrement index
/* a62c */                   BNE.rel ("_a637");            // branch always
/* a62e */        _`_a62e`;  LDA.zpg ("linnum+0_0014");    // get temporary integer low byte
/* a630 */                   DEY.imp ();                   // decrement index to line # low byte
/* a631 */                   CMP.iny ("tempf2+3_005f");    // compare with line # low byte
/* a633 */                   BCC.rel ("_a641");            // exit if temp < this line, target line passed
/* a635 */                   BEQ.rel ("_a641");            // exit if temp = (found line#)
                                                           // not quite there yet
/* a637 */        _`_a637`;  DEY.imp ();                   // decrement index to next line pointer high byte
/* a638 */                   LDA.iny ("tempf2+3_005f");    // get next line pointer high byte
/* a63a */                   TAX.imp ();                   // copy to X
/* a63b */                   DEY.imp ();                   // decrement index to next line pointer low byte
/* a63c */                   LDA.iny ("tempf2+3_005f");    // get next line pointer low byte
/* a63e */                   BCS.rel ("_a617");            // go search for line # in temporary integer
                                                           // from AX, carry always set
/* a640 */        _`_a640`;  CLC.imp ();                   // clear found flag
/* a641 */        _`_a641`;  RTS.imp ();

// ------------------------------------------------------- // perform NEW
/* a642 */  _`scrtch_a642`;  BNE.rel ("_a641");            // exit if following byte to allow syntax error
/* a644 */                   LDA.imm (0x00);               // clear A
/* a646 */                   TAY.imp ();                   // clear index
/* a647 */                   STA.iny ("txttab+0_002b");    // clear pointer to next line low byte
/* a649 */                   INY.imp ();                   // increment index
/* a64a */                   STA.iny ("txttab+0_002b");    // clear pointer to next line high byte, erase program
/* a64c */                   LDA.zpg ("txttab+0_002b");    // get start of memory low byte
/* a64e */                   CLC.imp ();                   // clear carry for add
/* a64f */                   ADC.imm (0x02);               // add null program length
/* a651 */                   STA.zpg ("vartab+0_002d");    // set start of variables low byte
/* a653 */                   LDA.zpg ("txttab+1_002c");    // get start of memory high byte
/* a655 */                   ADC.imm (0x00);               // add carry
/* a657 */                   STA.zpg ("vartab+1_002e");    // set start of variables high byte

// ------------------------------------------------------- // reset execute pointer and do CLR
/* a659 */        _`_a659`;  JSR.abs ("stxpt_a68e");       // set BASIC execute pointer to start of memory - 1
/* a65c */                   LDA.imm (0x00);               // set Zb for CLR entry

// ------------------------------------------------------- // perform CLR
/* a65e */   _`clear_a65e`;  BNE.rel ("_a68d");            // exit if following byte to allow syntax error
/* a660 */        _`_a660`;  JSR.abs ("clall_ffe7");       // close all channels and files
/* a663 */                   LDA.zpg ("memsiz+0_0037");    // get end of memory low byte
/* a665 */                   LDY.zpg ("memsiz+1_0038");    // get end of memory high byte
/* a667 */                   STA.zpg ("fretop+0_0033");    // set bottom of string space low byte, clear strings
/* a669 */                   STY.zpg ("fretop+1_0034");    // set bottom of string space high byte
/* a66b */                   LDA.zpg ("vartab+0_002d");    // get start of variables low byte
/* a66d */                   LDY.zpg ("vartab+1_002e");    // get start of variables high byte
/* a66f */                   STA.zpg ("arytab+0_002f");    // set end of variables low byte, clear variables
/* a671 */                   STY.zpg ("arytab+1_0030");    // set end of variables high byte
/* a673 */                   STA.zpg ("strend+0_0031");    // set end of arrays low byte, clear arrays
/* a675 */                   STY.zpg ("strend+1_0032");    // set end of arrays high byte

// ------------------------------------------------------- // do RESTORE and clear stack
/* a677 */                   JSR.abs ("restor_a81d");      // perform RESTORE

// ------------------------------------------------------- // flush BASIC stack and clear the continue pointer
/* a67a */        _`_a67a`;  LDX.imm (0x19);               // get the descriptor stack start
/* a67c */                   STX.zpg ("temppt_0016");      // set the descriptor stack pointer
/* a67e */                   PLA.imp ();                   // pull the return address low byte
/* a67f */                   TAY.imp ();                   // copy it
/* a680 */                   PLA.imp ();                   // pull the return address high byte
/* a681 */                   LDX.imm (0xfa);               // set the cleared stack pointer
/* a683 */                   TXS.imp ();                   // set the stack
/* a684 */                   PHA.imp ();                   // push the return address high byte
/* a685 */                   TYA.imp ();                   // restore the return address low byte
/* a686 */                   PHA.imp ();                   // push the return address low byte
/* a687 */                   LDA.imm (0x00);               // clear A
/* a689 */                   STA.zpg ("oldtxt+1_003e");    // clear the continue pointer high byte
/* a68b */                   STA.zpg ("subflg_0010");      // clear the subscript/FNX flag
/* a68d */        _`_a68d`;  RTS.imp ();

// ------------------------------------------------------- // set BASIC execute pointer to start of memory - 1
/* a68e */   _`stxpt_a68e`;  CLC.imp ();                   // clear carry for add
/* a68f */                   LDA.zpg ("txttab+0_002b");    // get start of memory low byte
/* a691 */                   ADC.imm (0xff);               // add -1 low byte
/* a693 */                   STA.zpg ("txtptr+0_007a");    // set BASIC execute pointer low byte
/* a695 */                   LDA.zpg ("txttab+1_002c");    // get start of memory high byte
/* a697 */                   ADC.imm (0xff);               // add -1 high byte
/* a699 */                   STA.zpg ("txtptr+1_007b");    // save BASIC execute pointer high byte
/* a69b */                   RTS.imp ();

// ------------------------------------------------------- // perform LIST
/* a69c */    _`list_a69c`;  BCC.rel ("_a6a4");            // branch if next character not token (LIST n...)
/* a69e */                   BEQ.rel ("_a6a4");            // branch if next character [NULL] (LIST)
/* a6a0 */                   CMP.imm (0xab);               // compare with token for -
/* a6a2 */                   BNE.rel ("_a68d");            // exit if not - (LIST -m)
                                                           // LIST [[n][-m]]
                                                           // this bit sets the n , if present, as the start and end
/* a6a4 */        _`_a6a4`;  JSR.abs ("linget_a96b");      // get fixed-point number into temporary integer
/* a6a7 */                   JSR.abs ("fndlin_a613");      // search BASIC for temporary integer line number
/* a6aa */                   JSR.abs ("chrgot_0079");      // scan memory
/* a6ad */                   BEQ.rel ("_a6bb");            // branch if no more chrs
                                                           // this bit checks the - is present
/* a6af */                   CMP.imm (0xab);               // compare with token for -
/* a6b1 */                   BNE.rel ("_a641");            // return if not "-" (will be SN error)
                                                           // LIST [n]-m
                                                           // the - was there so set m as the end value
/* a6b3 */                   JSR.abs ("chrget+0_0073");    // increment and scan memory
/* a6b6 */                   JSR.abs ("linget_a96b");      // get fixed-point number into temporary integer
/* a6b9 */                   BNE.rel ("_a641");            // exit if not ok
/* a6bb */        _`_a6bb`;  PLA.imp ();                   // dump return address low byte, exit via warm start
/* a6bc */                   PLA.imp ();                   // dump return address high byte
/* a6bd */                   LDA.zpg ("linnum+0_0014");    // get temporary integer low byte
/* a6bf */                   ORA.zpg ("linnum+1_0015");    // OR temporary integer high byte
/* a6c1 */                   BNE.rel ("_a6c9");            // branch if start set
/* a6c3 */                   LDA.imm (0xff);               // set for -1
/* a6c5 */                   STA.zpg ("linnum+0_0014");    // set temporary integer low byte
/* a6c7 */                   STA.zpg ("linnum+1_0015");    // set temporary integer high byte
/* a6c9 */        _`_a6c9`;  LDY.imm (0x01);               // set index for line
/* a6cb */                   STY.zpg ("garbfl_000f");      // clear open quote flag
/* a6cd */                   LDA.iny ("tempf2+3_005f");    // get next line pointer high byte
/* a6cf */                   BEQ.rel ("_a714");            // if null all done so exit
/* a6d1 */                   JSR.abs ("stop_a82c");        // do CRTL-C check vector
/* a6d4 */                   JSR.abs ("crdo_aad7");        // print CR/LF
/* a6d7 */                   INY.imp ();                   // increment index for line
/* a6d8 */                   LDA.iny ("tempf2+3_005f");    // get line number low byte
/* a6da */                   TAX.imp ();                   // copy to X
/* a6db */                   INY.imp ();                   // increment index
/* a6dc */                   LDA.iny ("tempf2+3_005f");    // get line number high byte
/* a6de */                   CMP.zpg ("linnum+1_0015");    // compare with temporary integer high byte
/* a6e0 */                   BNE.rel ("_a6e6");            // branch if no high byte match
/* a6e2 */                   CPX.zpg ("linnum+0_0014");    // compare with temporary integer low byte
/* a6e4 */                   BEQ.rel ("_a6e8");            // branch if = last line to do, < will pass next branch
                                                           // else
/* a6e6 */        _`_a6e6`;  BCS.rel ("_a714");            // if greater all done so exit
/* a6e8 */        _`_a6e8`;  STY.zpg ("forpnt+0_0049");    // save index for line
/* a6ea */                   JSR.abs ("linprt_bdcd");      // print XA as unsigned integer
/* a6ed */                   LDA.imm (0x20);               // space is the next character
/* a6ef */        _`_a6ef`;  LDY.zpg ("forpnt+0_0049");    // get index for line
/* a6f1 */                   AND.imm (0x7f);               // mask top out bit of character
/* a6f3 */        _`_a6f3`;  JSR.abs ("_ab47");            // go print the character
/* a6f6 */                   CMP.imm (0x22);               // was it " character
/* a6f8 */                   BNE.rel ("_a700");            // if not skip the quote handle
                                                           // we are either entering or leaving a pair of quotes
/* a6fa */                   LDA.zpg ("garbfl_000f");      // get open quote flag
/* a6fc */                   EOR.imm (0xff);               // toggle it
/* a6fe */                   STA.zpg ("garbfl_000f");      // save it back
/* a700 */        _`_a700`;  INY.imp ();                   // increment index
/* a701 */                   BEQ.rel ("_a714");            // line too long so just bail out and do a warm start
/* a703 */                   LDA.iny ("tempf2+3_005f");    // get next byte
/* a705 */                   BNE.rel ("qplop_a717");       // if not [EOL] (go print character)
                                                           // was [EOL]
/* a707 */                   TAY.imp ();                   // else clear index
/* a708 */                   LDA.iny ("tempf2+3_005f");    // get next line pointer low byte
/* a70a */                   TAX.imp ();                   // copy to X
/* a70b */                   INY.imp ();                   // increment index
/* a70c */                   LDA.iny ("tempf2+3_005f");    // get next line pointer high byte
/* a70e */                   STX.zpg ("tempf2+3_005f");    // set pointer to line low byte
/* a710 */                   STA.zpg ("tempf2+4_0060");    // set pointer to line high byte
/* a712 */                   BNE.rel ("_a6c9");            // go do next line if not [EOT]
                                                           // else ...
/* a714 */        _`_a714`;  JMP.abs ("_e386");            // do warm start
/* a717 */   _`qplop_a717`;  JMP.ind ("iqplop+0_0306");    // do uncrunch BASIC tokens

// ------------------------------------------------------- // uncrunch BASIC tokens, the uncrunch BASIC tokens vector is initialised to point here
/* a71a */                   BPL.rel ("_a6f3");            // just go print it if not token byte
                                                           // else was token byte so uncrunch it
/* a71c */                   CMP.imm (0xff);               // compare with the token for PI. in this case the token
                                                           // is the same as the PI character so it just needs printing
/* a71e */                   BEQ.rel ("_a6f3");            // just print it if so
/* a720 */                   BIT.zpg ("garbfl_000f");      // test the open quote flag
/* a722 */                   BMI.rel ("_a6f3");            // just go print character if open quote set
/* a724 */                   SEC.imp ();                   // else set carry for subtract
/* a725 */                   SBC.imm (0x7f);               // reduce token range to 1 to whatever
/* a727 */                   TAX.imp ();                   // copy token # to X
/* a728 */                   STY.zpg ("forpnt+0_0049");    // save index for line
/* a72a */                   LDY.imm (0xff);               // start from -1, adjust for pre increment
/* a72c */        _`_a72c`;  DEX.imp ();                   // decrement token #
/* a72d */                   BEQ.rel ("_a737");            // if now found go do printing
/* a72f */        _`_a72f`;  INY.imp ();                   // else increment index
/* a730 */                   LDA.aby ("reslst_a09e");      // get byte from keyword table
/* a733 */                   BPL.rel ("_a72f");            // loop until keyword end marker
/* a735 */                   BMI.rel ("_a72c");            // go test if this is required keyword, branch always
                                                           // found keyword, it's the next one
/* a737 */        _`_a737`;  INY.imp ();                   // increment keyword table index
/* a738 */                   LDA.aby ("reslst_a09e");      // get byte from table
/* a73b */                   BMI.rel ("_a6ef");            // go restore index, mask byte and print if
                                                           // byte was end marker
/* a73d */                   JSR.abs ("_ab47");            // else go print the character
/* a740 */                   BNE.rel ("_a737");            // go get next character, branch always

// ------------------------------------------------------- // perform FOR
/* a742 */     _`for_a742`;  LDA.imm (0x80);               // set FNX
/* a744 */                   STA.zpg ("subflg_0010");      // set subscript/FNX flag
/* a746 */                   JSR.abs ("let_a9a5");         // perform LET
/* a749 */                   JSR.abs ("fndfor_a38a");      // search the stack for FOR or GOSUB activity
/* a74c */                   BNE.rel ("_a753");            // branch if FOR, this variable, not found
                                                           // FOR, this variable, was found so first we dump the old one
/* a74e */                   TXA.imp ();                   // copy index
/* a74f */                   ADC.imm (0x0f);               // add FOR structure size-2
/* a751 */                   TAX.imp ();                   // copy to index
/* a752 */                   TXS.imp ();                   // set stack (dump FOR structure (-2 bytes))
/* a753 */        _`_a753`;  PLA.imp ();                   // pull return address
/* a754 */                   PLA.imp ();                   // pull return address
/* a755 */                   LDA.imm (0x09);               // we need 18d bytes !
/* a757 */                   JSR.abs ("getstk_a3fb");      // check room on stack for 2*A bytes
/* a75a */                   JSR.abs ("datan_a906");       // scan for next BASIC statement ([:] or [EOL])
/* a75d */                   CLC.imp ();                   // clear carry for add
/* a75e */                   TYA.imp ();                   // copy index to A
/* a75f */                   ADC.zpg ("txtptr+0_007a");    // add BASIC execute pointer low byte
/* a761 */                   PHA.imp ();                   // push onto stack
/* a762 */                   LDA.zpg ("txtptr+1_007b");    // get BASIC execute pointer high byte
/* a764 */                   ADC.imm (0x00);               // add carry
/* a766 */                   PHA.imp ();                   // push onto stack
/* a767 */                   LDA.zpg ("curlin+1_003a");    // get current line number high byte
/* a769 */                   PHA.imp ();                   // push onto stack
/* a76a */                   LDA.zpg ("curlin+0_0039");    // get current line number low byte
/* a76c */                   PHA.imp ();                   // push onto stack
/* a76d */                   LDA.imm (0xa4);               // set "TO" token
/* a76f */                   JSR.abs ("chkcom_aeff");      // scan for CHR$(A), else do syntax error then warm start
/* a772 */                   JSR.abs ("_ad8d");            // check if source is numeric, else do type mismatch
/* a775 */                   JSR.abs ("frmnum_ad8a");      // evaluate expression and check is numeric, else do
                                                           // type mismatch
/* a778 */                   LDA.zpg ("facsgn_0066");      // get FAC1 sign (b7)
/* a77a */                   ORA.imm (0x7f);               // set all non sign bits
/* a77c */                   AND.zpg ("facho+0_0062");     // and FAC1 mantissa 1
/* a77e */                   STA.zpg ("facho+0_0062");     // save FAC1 mantissa 1
/* a780 */                   LDA.imm (0x8b);               // set return address low byte
/* a782 */                   LDY.imm (0xa7);               // set return address high byte
/* a784 */                   STA.zpg ("index+0_0022");     // save return address low byte
/* a786 */                   STY.zpg ("index+1_0023");     // save return address high byte
/* a788 */                   JMP.abs ("_ae43");            // round FAC1 and put on stack, returns to next instruction
/* a78b */                   LDA.imm (0xbc);               // set 1 pointer low address, default step size
/* a78d */                   LDY.imm (0xb9);               // set 1 pointer high address
/* a78f */                   JSR.abs ("movfm_bba2");       // unpack memory (AY) into FAC1
/* a792 */                   JSR.abs ("chrgot_0079");      // scan memory
/* a795 */                   CMP.imm (0xa9);               // compare with STEP token
/* a797 */                   BNE.rel ("_a79f");            // if not "STEP" continue
                                                           // was step so ....
/* a799 */                   JSR.abs ("chrget+0_0073");    // increment and scan memory
/* a79c */                   JSR.abs ("frmnum_ad8a");      // evaluate expression and check is numeric, else do
                                                           // type mismatch
/* a79f */        _`_a79f`;  JSR.abs ("sign_bc2b");        // get FAC1 sign, return A = $FF -ve, A = $01 +ve
/* a7a2 */                   JSR.abs ("_ae38");            // push sign, round FAC1 and put on stack
/* a7a5 */                   LDA.zpg ("forpnt+1_004a");    // get FOR/NEXT variable pointer high byte
/* a7a7 */                   PHA.imp ();                   // push on stack
/* a7a8 */                   LDA.zpg ("forpnt+0_0049");    // get FOR/NEXT variable pointer low byte
/* a7aa */                   PHA.imp ();                   // push on stack
/* a7ab */                   LDA.imm (0x81);               // get FOR token
/* a7ad */                   PHA.imp ();                   // push on stack

// ------------------------------------------------------- // interpreter inner loop
/* a7ae */  _`newstt_a7ae`;  JSR.abs ("stop_a82c");        // do CRTL-C check vector
/* a7b1 */                   LDA.zpg ("txtptr+0_007a");    // get the BASIC execute pointer low byte
/* a7b3 */                   LDY.zpg ("txtptr+1_007b");    // get the BASIC execute pointer high byte
/* a7b5 */                   CPY.imm (0x02);               // compare the high byte with $02xx
/* a7b7 */                   NOP.imp ();                   // unused byte
/* a7b8 */                   BEQ.rel ("_a7be");            // if immediate mode skip the continue pointer save
/* a7ba */                   STA.zpg ("oldtxt+0_003d");    // save the continue pointer low byte
/* a7bc */                   STY.zpg ("oldtxt+1_003e");    // save the continue pointer high byte
/* a7be */        _`_a7be`;  LDY.imm (0x00);               // clear the index
/* a7c0 */                   LDA.iny ("txtptr+0_007a");    // get a BASIC byte
/* a7c2 */                   BNE.rel ("_a807");            // if not [EOL] go test for ":"
/* a7c4 */   _`ckeol_a7c4`;  LDY.imm (0x02);               // else set the index
/* a7c6 */                   LDA.iny ("txtptr+0_007a");    // get next line pointer high byte
/* a7c8 */                   CLC.imp ();                   // clear carry for no "BREAK" message
/* a7c9 */                   BNE.rel ("_a7ce");            // branch if not end of program
/* a7cb */                   JMP.abs ("_a84b");            // else go to immediate mode,was immediate or [EOT] marker
/* a7ce */        _`_a7ce`;  INY.imp ();                   // increment index
/* a7cf */                   LDA.iny ("txtptr+0_007a");    // get line number low byte
/* a7d1 */                   STA.zpg ("curlin+0_0039");    // save current line number low byte
/* a7d3 */                   INY.imp ();                   // increment index
/* a7d4 */                   LDA.iny ("txtptr+0_007a");    // get line # high byte
/* a7d6 */                   STA.zpg ("curlin+1_003a");    // save current line number high byte
/* a7d8 */                   TYA.imp ();                   // A now = 4
/* a7d9 */                   ADC.zpg ("txtptr+0_007a");    // add BASIC execute pointer low byte, now points to code
/* a7db */                   STA.zpg ("txtptr+0_007a");    // save BASIC execute pointer low byte
/* a7dd */                   BCC.rel ("_a7e1");            // branch if no overflow
/* a7df */                   INC.zpg ("txtptr+1_007b");    // else increment BASIC execute pointer high byte
/* a7e1 */        _`_a7e1`;  JMP.ind ("igone+0_0308");     // do start new BASIC code

// ------------------------------------------------------- // start new BASIC code, the start new BASIC code vector is initialised to point here
/* a7e4 */    _`gone_a7e4`;  JSR.abs ("chrget+0_0073");    // increment and scan memory
/* a7e7 */                   JSR.abs ("gone3_a7ed");       // go interpret BASIC code from BASIC execute pointer
/* a7ea */                   JMP.abs ("newstt_a7ae");      // loop

// ------------------------------------------------------- // go interpret BASIC code from BASIC execute pointer
/* a7ed */   _`gone3_a7ed`;  BEQ.rel ("_a82b");            // if the first byte is null just exit
/* a7ef */        _`_a7ef`;  SBC.imm (0x80);               // normalise the token
/* a7f1 */                   BCC.rel ("_a804");            // if wasn't token go do LET
/* a7f3 */                   CMP.imm (0x23);               // compare with token for TAB(-$80
/* a7f5 */                   BCS.rel ("_a80e");            // branch if >= TAB(
/* a7f7 */                   ASL.acc ();                   // *2 bytes per vector
/* a7f8 */                   TAY.imp ();                   // copy to index
/* a7f9 */                   LDA.aby (0xa00d);             // get vector high byte
/* a7fc */                   PHA.imp ();                   // push on stack
/* a7fd */                   LDA.aby ("stmdsp_a00c");      // get vector low byte
/* a800 */                   PHA.imp ();                   // push on stack
/* a801 */                   JMP.abs ("chrget+0_0073");    // increment and scan memory and return. the return in
                                                           // this case calls the command code, the return from
                                                           // that will eventually return to the interpreter inner
                                                           // loop above
/* a804 */        _`_a804`;  JMP.abs ("let_a9a5");         // perform LET
                                                           // was not [EOL]
/* a807 */        _`_a807`;  CMP.imm (0x3a);               // comapre with ":"
/* a809 */                   BEQ.rel ("_a7e1");            // if ":" go execute new code
                                                           // else ...
/* a80b */        _`_a80b`;  JMP.abs ("synerr_af08");      // do syntax error then warm start
                                                           // token was >= TAB(
/* a80e */        _`_a80e`;  CMP.imm (0x4b);               // compare with the token for GO
/* a810 */                   BNE.rel ("_a80b");            // if not "GO" do syntax error then warm start
                                                           // else was "GO"
/* a812 */                   JSR.abs ("chrget+0_0073");    // increment and scan memory
/* a815 */                   LDA.imm (0xa4);               // set "TO" token
/* a817 */                   JSR.abs ("chkcom_aeff");      // scan for CHR$(A), else do syntax error then warm start
/* a81a */                   JMP.abs ("goto_a8a0");        // perform GOTO

// ------------------------------------------------------- // perform RESTORE
/* a81d */  _`restor_a81d`;  SEC.imp ();                   // set carry for subtract
/* a81e */                   LDA.zpg ("txttab+0_002b");    // get start of memory low byte
/* a820 */                   SBC.imm (0x01);               // -1
/* a822 */                   LDY.zpg ("txttab+1_002c");    // get start of memory high byte
/* a824 */                   BCS.rel ("_a827");            // branch if no rollunder
/* a826 */                   DEY.imp ();                   // else decrement high byte
/* a827 */        _`_a827`;  STA.zpg ("datptr+0_0041");    // set DATA pointer low byte
/* a829 */                   STY.zpg ("datptr+1_0042");    // set DATA pointer high byte
/* a82b */        _`_a82b`;  RTS.imp ();

// ------------------------------------------------------- // do CRTL-C check vector
/* a82c */    _`stop_a82c`;  JSR.abs ("stop_ffe1");        // scan stop key

// ------------------------------------------------------- // perform STOP
/* a82f */                   BCS.rel ("_a832");            // if carry set do BREAK instead of just END

// ------------------------------------------------------- // perform END
/* a831 */     _`end_a831`;  CLC.imp ();                   // clear carry
/* a832 */        _`_a832`;  BNE.rel ("_a870");            // return if wasn't CTRL-C
/* a834 */                   LDA.zpg ("txtptr+0_007a");    // get BASIC execute pointer low byte
/* a836 */                   LDY.zpg ("txtptr+1_007b");    // get BASIC execute pointer high byte
/* a838 */                   LDX.zpg ("curlin+1_003a");    // get current line number high byte
/* a83a */                   INX.imp ();                   // increment it
/* a83b */                   BEQ.rel ("_a849");            // branch if was immediate mode
/* a83d */                   STA.zpg ("oldtxt+0_003d");    // save continue pointer low byte
/* a83f */                   STY.zpg ("oldtxt+1_003e");    // save continue pointer high byte
/* a841 */                   LDA.zpg ("curlin+0_0039");    // get current line number low byte
/* a843 */                   LDY.zpg ("curlin+1_003a");    // get current line number high byte
/* a845 */                   STA.zpg ("oldlin+0_003b");    // save break line number low byte
/* a847 */                   STY.zpg ("oldlin+1_003c");    // save break line number high byte
/* a849 */        _`_a849`;  PLA.imp ();                   // dump return address low byte
/* a84a */                   PLA.imp ();                   // dump return address high byte
/* a84b */        _`_a84b`;  LDA.imm (0x81);               // set [CR][LF]"BREAK" pointer low byte
/* a84d */                   LDY.imm (0xa3);               // set [CR][LF]"BREAK" pointer high byte
/* a84f */                   BCC.rel ("_a854");            // if was program end skip the print string
/* a851 */                   JMP.abs ("errfin_a469");      // print string and do warm start
/* a854 */        _`_a854`;  JMP.abs ("_e386");            // do warm start

// ------------------------------------------------------- // perform CONT
/* a857 */    _`cont_a857`;  BNE.rel ("_a870");            // exit if following byte to allow syntax error
/* a859 */                   LDX.imm (0x1a);               // error code $1A, can't continue error
/* a85b */                   LDY.zpg ("oldtxt+1_003e");    // get continue pointer high byte
/* a85d */                   BNE.rel ("_a862");            // go do continue if we can
/* a85f */                   JMP.abs ("error_a437");       // else do error #X then warm start
                                                           // we can continue so ...
/* a862 */        _`_a862`;  LDA.zpg ("oldtxt+0_003d");    // get continue pointer low byte
/* a864 */                   STA.zpg ("txtptr+0_007a");    // save BASIC execute pointer low byte
/* a866 */                   STY.zpg ("txtptr+1_007b");    // save BASIC execute pointer high byte
/* a868 */                   LDA.zpg ("oldlin+0_003b");    // get break line low byte
/* a86a */                   LDY.zpg ("oldlin+1_003c");    // get break line high byte
/* a86c */                   STA.zpg ("curlin+0_0039");    // set current line number low byte
/* a86e */                   STY.zpg ("curlin+1_003a");    // set current line number high byte
/* a870 */        _`_a870`;  RTS.imp ();

// ------------------------------------------------------- // perform RUN
/* a871 */     _`run_a871`;  PHP.imp ();                   // save status
/* a872 */                   LDA.imm (0x00);               // no control or kernal messages
/* a874 */                   JSR.abs ("setmsg_ff90");      // control kernal messages
/* a877 */                   PLP.imp ();                   // restore status
/* a878 */                   BNE.rel ("_a87d");            // branch if RUN n
/* a87a */                   JMP.abs ("_a659");            // reset execution to start, clear variables, flush stack
                                                           // and return
/* a87d */        _`_a87d`;  JSR.abs ("_a660");            // go do "CLEAR"
/* a880 */                   JMP.abs ("_a897");            // get n and do GOTO n

// ------------------------------------------------------- // perform GOSUB
/* a883 */   _`gosub_a883`;  LDA.imm (0x03);               // need 6 bytes for GOSUB
/* a885 */                   JSR.abs ("getstk_a3fb");      // check room on stack for 2*A bytes
/* a888 */                   LDA.zpg ("txtptr+1_007b");    // get BASIC execute pointer high byte
/* a88a */                   PHA.imp ();                   // save it
/* a88b */                   LDA.zpg ("txtptr+0_007a");    // get BASIC execute pointer low byte
/* a88d */                   PHA.imp ();                   // save it
/* a88e */                   LDA.zpg ("curlin+1_003a");    // get current line number high byte
/* a890 */                   PHA.imp ();                   // save it
/* a891 */                   LDA.zpg ("curlin+0_0039");    // get current line number low byte
/* a893 */                   PHA.imp ();                   // save it
/* a894 */                   LDA.imm (0x8d);               // token for GOSUB
/* a896 */                   PHA.imp ();                   // save it
/* a897 */        _`_a897`;  JSR.abs ("chrgot_0079");      // scan memory
/* a89a */                   JSR.abs ("goto_a8a0");        // perform GOTO
/* a89d */                   JMP.abs ("newstt_a7ae");      // go do interpreter inner loop

// ------------------------------------------------------- // perform GOTO
/* a8a0 */    _`goto_a8a0`;  JSR.abs ("linget_a96b");      // get fixed-point number into temporary integer
/* a8a3 */                   JSR.abs ("_a909");            // scan for next BASIC line
/* a8a6 */                   SEC.imp ();                   // set carry for subtract
/* a8a7 */                   LDA.zpg ("curlin+0_0039");    // get current line number low byte
/* a8a9 */                   SBC.zpg ("linnum+0_0014");    // subtract temporary integer low byte
/* a8ab */                   LDA.zpg ("curlin+1_003a");    // get current line number high byte
/* a8ad */                   SBC.zpg ("linnum+1_0015");    // subtract temporary integer high byte
/* a8af */                   BCS.rel ("_a8bc");            // if current line number >= temporary integer, go search
                                                           // from the start of memory
/* a8b1 */                   TYA.imp ();                   // else copy line index to A
/* a8b2 */                   SEC.imp ();                   // set carry (+1)
/* a8b3 */                   ADC.zpg ("txtptr+0_007a");    // add BASIC execute pointer low byte
/* a8b5 */                   LDX.zpg ("txtptr+1_007b");    // get BASIC execute pointer high byte
/* a8b7 */                   BCC.rel ("_a8c0");            // branch if no overflow to high byte
/* a8b9 */                   INX.imp ();                   // increment high byte
/* a8ba */                   BCS.rel ("_a8c0");            // branch always (can never be carry)

// ------------------------------------------------------- // search for line number in temporary integer from start of memory pointer
/* a8bc */        _`_a8bc`;  LDA.zpg ("txttab+0_002b");    // get start of memory low byte
/* a8be */                   LDX.zpg ("txttab+1_002c");    // get start of memory high byte

// ------------------------------------------------------- // search for line # in temporary integer from (AX)
/* a8c0 */        _`_a8c0`;  JSR.abs ("_a617");            // search Basic for temp integer line number from AX
/* a8c3 */                   BCC.rel ("_a8e3");            // if carry clear go do unsdefined statement error
                                                           // carry all ready set for subtract
/* a8c5 */                   LDA.zpg ("tempf2+3_005f");    // get pointer low byte
/* a8c7 */                   SBC.imm (0x01);               // -1
/* a8c9 */                   STA.zpg ("txtptr+0_007a");    // save BASIC execute pointer low byte
/* a8cb */                   LDA.zpg ("tempf2+4_0060");    // get pointer high byte
/* a8cd */                   SBC.imm (0x00);               // subtract carry
/* a8cf */                   STA.zpg ("txtptr+1_007b");    // save BASIC execute pointer high byte
/* a8d1 */        _`_a8d1`;  RTS.imp ();

// ------------------------------------------------------- // perform RETURN
/* a8d2 */  _`return_a8d2`;  BNE.rel ("_a8d1");            // exit if following token to allow syntax error
/* a8d4 */                   LDA.imm (0xff);               // set byte so no match possible
/* a8d6 */                   STA.zpg ("forpnt+1_004a");    // save FOR/NEXT variable pointer high byte
/* a8d8 */                   JSR.abs ("fndfor_a38a");      // search the stack for FOR or GOSUB activity,
                                                           // get token off stack
/* a8db */                   TXS.imp ();                   // correct the stack
/* a8dc */                   CMP.imm (0x8d);               // compare with GOSUB token
/* a8de */                   BEQ.rel ("_a8eb");            // if matching GOSUB go continue RETURN
/* a8e0 */                   LDX.imm (0x0c);               // else error code $04, return without gosub error
/* a8e2 */                   _.bytes(0x2c);                // makes next line BIT $11A2
/* a8e3 */        _`_a8e3`;  LDX.imm (0x11);               // error code $11, undefined statement error
/* a8e5 */                   JMP.abs ("error_a437");       // do error #X then warm start
/* a8e8 */        _`_a8e8`;  JMP.abs ("synerr_af08");      // do syntax error then warm start
                                                           // was matching GOSUB token
/* a8eb */        _`_a8eb`;  PLA.imp ();                   // dump token byte
/* a8ec */                   PLA.imp ();                   // pull return line low byte
/* a8ed */                   STA.zpg ("curlin+0_0039");    // save current line number low byte
/* a8ef */                   PLA.imp ();                   // pull return line high byte
/* a8f0 */                   STA.zpg ("curlin+1_003a");    // save current line number high byte
/* a8f2 */                   PLA.imp ();                   // pull return address low byte
/* a8f3 */                   STA.zpg ("txtptr+0_007a");    // save BASIC execute pointer low byte
/* a8f5 */                   PLA.imp ();                   // pull return address high byte
/* a8f6 */                   STA.zpg ("txtptr+1_007b");    // save BASIC execute pointer high byte

// ------------------------------------------------------- // perform DATA
/* a8f8 */    _`data_a8f8`;  JSR.abs ("datan_a906");       // scan for next BASIC statement ([:] or [EOL])

// ------------------------------------------------------- // add Y to the BASIC execute pointer
/* a8fb */        _`_a8fb`;  TYA.imp ();                   // copy index to A
/* a8fc */                   CLC.imp ();                   // clear carry for add
/* a8fd */                   ADC.zpg ("txtptr+0_007a");    // add BASIC execute pointer low byte
/* a8ff */                   STA.zpg ("txtptr+0_007a");    // save BASIC execute pointer low byte
/* a901 */                   BCC.rel ("_a905");            // skip increment if no carry
/* a903 */                   INC.zpg ("txtptr+1_007b");    // else increment BASIC execute pointer high byte
/* a905 */        _`_a905`;  RTS.imp ();

// ------------------------------------------------------- // scan for next BASIC statement ([:] or [EOL])
                                                           // returns Y as index to [:] or [EOL]
/* a906 */   _`datan_a906`;  LDX.imm (0x3a);               // set look for character = ":"
/* a908 */                   _.bytes(0x2c);                // makes next line BIT $00A2

// ------------------------------------------------------- // scan for next BASIC line
                                                           // returns Y as index to [EOL]
/* a909 */        _`_a909`;  LDX.imm (0x00);               // set alternate search character = [EOL]
/* a90b */                   STX.zpg ("charac_0007");      // store alternate search character
/* a90d */                   LDY.imm (0x00);               // set search character = [EOL]
/* a90f */                   STY.zpg ("endchr_0008");      // save the search character
/* a911 */        _`_a911`;  LDA.zpg ("endchr_0008");      // get search character
/* a913 */                   LDX.zpg ("charac_0007");      // get alternate search character
/* a915 */                   STA.zpg ("charac_0007");      // make search character = alternate search character
/* a917 */                   STX.zpg ("endchr_0008");      // make alternate search character = search character
/* a919 */        _`_a919`;  LDA.iny ("txtptr+0_007a");    // get BASIC byte
/* a91b */                   BEQ.rel ("_a905");            // exit if null [EOL]
/* a91d */                   CMP.zpg ("endchr_0008");      // compare with search character
/* a91f */                   BEQ.rel ("_a905");            // exit if found
/* a921 */                   INY.imp ();                   // else increment index
/* a922 */                   CMP.imm (0x22);               // compare current character with open quote
/* a924 */                   BNE.rel ("_a919");            // if found go swap search character for alternate search
                                                           // character
/* a926 */                   BEQ.rel ("_a911");            // loop for next character, branch always

// ------------------------------------------------------- // perform IF
/* a928 */      _`if_a928`;  JSR.abs ("frmevl_ad9e");      // evaluate expression
/* a92b */                   JSR.abs ("chrgot_0079");      // scan memory
/* a92e */                   CMP.imm (0x89);               // compare with "GOTO" token
/* a930 */                   BEQ.rel ("_a937");            // if it was  the token for GOTO go do IF ... GOTO
                                                           // wasn't IF ... GOTO so must be IF ... THEN
/* a932 */                   LDA.imm (0xa7);               // set "THEN" token
/* a934 */                   JSR.abs ("chkcom_aeff");      // scan for CHR$(A), else do syntax error then warm start
/* a937 */        _`_a937`;  LDA.zpg ("facexp_0061");      // get FAC1 exponent
/* a939 */                   BNE.rel ("_a940");            // if result was non zero continue execution
                                                           // else REM rest of line

// ------------------------------------------------------- // perform REM
/* a93b */     _`rem_a93b`;  JSR.abs ("_a909");            // scan for next BASIC line
/* a93e */                   BEQ.rel ("_a8fb");            // add Y to the BASIC execute pointer and return, branch
                                                           // always
                                                           // result was non zero so do rest of line
/* a940 */        _`_a940`;  JSR.abs ("chrgot_0079");      // scan memory
/* a943 */                   BCS.rel ("_a948");            // branch if not numeric character, is variable or keyword
/* a945 */                   JMP.abs ("goto_a8a0");        // else perform GOTO n
                                                           // is variable or keyword
/* a948 */        _`_a948`;  JMP.abs ("gone3_a7ed");       // interpret BASIC code from BASIC execute pointer

// ------------------------------------------------------- // perform ON
/* a94b */  _`ongoto_a94b`;  JSR.abs ("_b79e");            // get byte parameter
/* a94e */                   PHA.imp ();                   // push next character
/* a94f */                   CMP.imm (0x8d);               // compare with GOSUB token
/* a951 */                   BEQ.rel ("_a957");            // if GOSUB go see if it should be executed
/* a953 */        _`_a953`;  CMP.imm (0x89);               // compare with GOTO token
/* a955 */                   BNE.rel ("_a8e8");            // if not GOTO do syntax error then warm start
                                                           // next character was GOTO or GOSUB, see if it should be executed
/* a957 */        _`_a957`;  DEC.zpg ("facho+3_0065");     // decrement the byte value
/* a959 */                   BNE.rel ("_a95f");            // if not zero go see if another line number exists
/* a95b */                   PLA.imp ();                   // pull keyword token
/* a95c */                   JMP.abs ("_a7ef");            // go execute it
/* a95f */        _`_a95f`;  JSR.abs ("chrget+0_0073");    // increment and scan memory
/* a962 */                   JSR.abs ("linget_a96b");      // get fixed-point number into temporary integer
                                                           // skip this n
/* a965 */                   CMP.imm (0x2c);               // compare next character with ","
/* a967 */                   BEQ.rel ("_a957");            // loop if ","
/* a969 */                   PLA.imp ();                   // else pull keyword token, ran out of options
/* a96a */        _`_a96a`;  RTS.imp ();

// ------------------------------------------------------- // get fixed-point number into temporary integer
/* a96b */  _`linget_a96b`;  LDX.imm (0x00);               // clear X
/* a96d */                   STX.zpg ("linnum+0_0014");    // clear temporary integer low byte
/* a96f */                   STX.zpg ("linnum+1_0015");    // clear temporary integer high byte
/* a971 */        _`_a971`;  BCS.rel ("_a96a");            // return if carry set, end of scan, character was not 0-9
/* a973 */                   SBC.imm (0x2f);               // subtract $30, $2F+carry, from byte
/* a975 */                   STA.zpg ("charac_0007");      // store #
/* a977 */                   LDA.zpg ("linnum+1_0015");    // get temporary integer high byte
/* a979 */                   STA.zpg ("index+0_0022");     // save it for now
/* a97b */                   CMP.imm (0x19);               // compare with $19
/* a97d */                   BCS.rel ("_a953");            // branch if >= this makes the maximum line number 63999
                                                           // because the next bit does $1900 * $0A = $FA00 = 64000
                                                           // decimal. the branch target is really the SYNTAX error
                                                           // at $A8E8 but that is too far so an intermediate
                                                           // compare and branch to that location is used. the problem
                                                           // with this is that line number that gives a partial result
                                                           // from $8900 to $89FF, 35072x to 35327x, will pass the new
                                                           // target compare and will try to execute the remainder of
                                                           // the ON n GOTO/GOSUB. a solution to this is to copy the
                                                           // byte in A before the branch to X and then branch to
                                                           // $A955 skipping the second compare
/* a97f */                   LDA.zpg ("linnum+0_0014");    // get temporary integer low byte
/* a981 */                   ASL.acc ();                   // *2 low byte
/* a982 */                   ROL.zpg ("index+0_0022");     // *2 high byte
/* a984 */                   ASL.acc ();                   // *2 low byte
/* a985 */                   ROL.zpg ("index+0_0022");     // *2 high byte (*4)
/* a987 */                   ADC.zpg ("linnum+0_0014");    // + low byte (*5)
/* a989 */                   STA.zpg ("linnum+0_0014");    // save it
/* a98b */                   LDA.zpg ("index+0_0022");     // get high byte temp
/* a98d */                   ADC.zpg ("linnum+1_0015");    // + high byte (*5)
/* a98f */                   STA.zpg ("linnum+1_0015");    // save it
/* a991 */                   ASL.zpg ("linnum+0_0014");    // *2 low byte (*10d)
/* a993 */                   ROL.zpg ("linnum+1_0015");    // *2 high byte (*10d)
/* a995 */                   LDA.zpg ("linnum+0_0014");    // get low byte
/* a997 */                   ADC.zpg ("charac_0007");      // add #
/* a999 */                   STA.zpg ("linnum+0_0014");    // save low byte
/* a99b */                   BCC.rel ("_a99f");            // branch if no overflow to high byte
/* a99d */                   INC.zpg ("linnum+1_0015");    // else increment high byte
/* a99f */        _`_a99f`;  JSR.abs ("chrget+0_0073");    // increment and scan memory
/* a9a2 */                   JMP.abs ("_a971");            // loop for next character

// ------------------------------------------------------- // perform LET
/* a9a5 */     _`let_a9a5`;  JSR.abs ("ptrget_b08b");      // get variable address
/* a9a8 */                   STA.zpg ("forpnt+0_0049");    // save variable address low byte
/* a9aa */                   STY.zpg ("forpnt+1_004a");    // save variable address high byte
/* a9ac */                   LDA.imm (0xb2);               // $B2 is "=" token
/* a9ae */                   JSR.abs ("chkcom_aeff");      // scan for CHR$(A), else do syntax error then warm start
/* a9b1 */                   LDA.zpg ("intflg_000e");      // get data type flag, $80 = integer, $00 = float
/* a9b3 */                   PHA.imp ();                   // push data type flag
/* a9b4 */                   LDA.zpg ("valtyp_000d");      // get data type flag, $FF = string, $00 = numeric
/* a9b6 */                   PHA.imp ();                   // push data type flag
/* a9b7 */                   JSR.abs ("frmevl_ad9e");      // evaluate expression
/* a9ba */                   PLA.imp ();                   // pop data type flag
/* a9bb */                   ROL.acc ();                   // string bit into carry
/* a9bc */                   JSR.abs ("_ad90");            // do type match check
/* a9bf */                   BNE.rel ("putstr_a9d9");      // branch if string
/* a9c1 */                   PLA.imp ();                   // pop integer/float data type flag
                                                           // assign value to numeric variable
/* a9c2 */        _`_a9c2`;  BPL.rel ("ptflpt_a9d6");      // branch if float
                                                           // expression is numeric integer
/* a9c4 */  _`putint_a9c4`;  JSR.abs ("round_bc1b");       // round FAC1
/* a9c7 */                   JSR.abs ("ayint_b1bf");       // evaluate integer expression, no sign check
/* a9ca */                   LDY.imm (0x00);               // clear index
/* a9cc */                   LDA.zpg ("facho+2_0064");     // get FAC1 mantissa 3
/* a9ce */                   STA.iny ("forpnt+0_0049");    // save as integer variable low byte
/* a9d0 */                   INY.imp ();                   // increment index
/* a9d1 */                   LDA.zpg ("facho+3_0065");     // get FAC1 mantissa 4
/* a9d3 */                   STA.iny ("forpnt+0_0049");    // save as integer variable high byte
/* a9d5 */                   RTS.imp ();
/* a9d6 */  _`ptflpt_a9d6`;  JMP.abs ("_bbd0");            // pack FAC1 into variable pointer and return
                                                           // assign value to numeric variable
/* a9d9 */  _`putstr_a9d9`;  PLA.imp ();                   // dump integer/float data type flag
/* a9da */        _`_a9da`;  LDY.zpg ("forpnt+1_004a");    // get variable pointer high byte
/* a9dc */                   CPY.imm (0xbf);               // was it TI$ pointer
/* a9de */                   BNE.rel ("getspt_aa2c");      // branch if not
                                                           // else it's TI$ = <expr$>
/* a9e0 */                   JSR.abs ("_b6a6");            // pop string off descriptor stack, or from top of string
                                                           // space returns with A = length, X = pointer low byte,
                                                           // Y = pointer high byte
/* a9e3 */  _`puttim_a9e3`;  CMP.imm (0x06);               // compare length with 6
/* a9e5 */                   BNE.rel ("_aa24");            // if length not 6 do illegal quantity error then warm start
/* a9e7 */                   LDY.imm (0x00);               // clear index
/* a9e9 */                   STY.zpg ("facexp_0061");      // clear FAC1 exponent
/* a9eb */                   STY.zpg ("facsgn_0066");      // clear FAC1 sign (b7)
/* a9ed */        _`_a9ed`;  STY.zpg ("fbufpt+0_0071");    // save index
/* a9ef */                   JSR.abs ("_aa1d");            // check and evaluate numeric digit
/* a9f2 */                   JSR.abs ("mul10_bae2");       // multiply FAC1 by 10
/* a9f5 */                   INC.zpg ("fbufpt+0_0071");    // increment index
/* a9f7 */                   LDY.zpg ("fbufpt+0_0071");    // restore index
/* a9f9 */                   JSR.abs ("_aa1d");            // check and evaluate numeric digit
/* a9fc */                   JSR.abs ("movaf_bc0c");       // round and copy FAC1 to FAC2
/* a9ff */                   TAX.imp ();                   // copy FAC1 exponent
/* aa00 */                   BEQ.rel ("_aa07");            // branch if FAC1 zero
/* aa02 */                   INX.imp ();                   // increment index, * 2
/* aa03 */                   TXA.imp ();                   // copy back to A
/* aa04 */                   JSR.abs ("_baed");            // FAC1 = (FAC1 + (FAC2 * 2)) * 2 = FAC1 * 6
/* aa07 */        _`_aa07`;  LDY.zpg ("fbufpt+0_0071");    // get index
/* aa09 */                   INY.imp ();                   // increment index
/* aa0a */                   CPY.imm (0x06);               // compare index with 6
/* aa0c */                   BNE.rel ("_a9ed");            // loop if not 6
/* aa0e */                   JSR.abs ("mul10_bae2");       // multiply FAC1 by 10
/* aa11 */                   JSR.abs ("qint_bc9b");        // convert FAC1 floating to fixed
/* aa14 */                   LDX.zpg ("facho+2_0064");     // get FAC1 mantissa 3
/* aa16 */                   LDY.zpg ("facho+1_0063");     // get FAC1 mantissa 2
/* aa18 */                   LDA.zpg ("facho+3_0065");     // get FAC1 mantissa 4
/* aa1a */                   JMP.abs ("settim_ffdb");      // set real time clock and return

// ------------------------------------------------------- // check and evaluate numeric digit
/* aa1d */        _`_aa1d`;  LDA.iny ("index+0_0022");     // get byte from string
/* aa1f */                   JSR.abs ("chrget+13_0080");   // clear Cb if numeric. this call should be to $84
                                                           // as the code from $80 first comapres the byte with
                                                           // [SPACE] and does a BASIC increment and get if it is
/* aa22 */                   BCC.rel ("_aa27");            // branch if numeric
/* aa24 */        _`_aa24`;  JMP.abs ("fcerr_b248");       // do illegal quantity error then warm start
/* aa27 */        _`_aa27`;  SBC.imm (0x2f);               // subtract $2F + carry to convert ASCII to binary
/* aa29 */                   JMP.abs ("finlog_bd7e");      // evaluate new ASCII digit and return

// ------------------------------------------------------- // assign value to numeric variable, but not TI$
/* aa2c */  _`getspt_aa2c`;  LDY.imm (0x02);               // index to string pointer high byte
/* aa2e */                   LDA.iny ("facho+2_0064");     // get string pointer high byte
/* aa30 */                   CMP.zpg ("fretop+1_0034");    // compare with bottom of string space high byte
/* aa32 */                   BCC.rel ("_aa4b");            // branch if string pointer high byte is less than bottom
                                                           // of string space high byte
/* aa34 */                   BNE.rel ("_aa3d");            // branch if string pointer high byte is greater than
                                                           // bottom of string space high byte
                                                           // else high bytes were equal
/* aa36 */                   DEY.imp ();                   // decrement index to string pointer low byte
/* aa37 */                   LDA.iny ("facho+2_0064");     // get string pointer low byte
/* aa39 */                   CMP.zpg ("fretop+0_0033");    // compare with bottom of string space low byte
/* aa3b */                   BCC.rel ("_aa4b");            // branch if string pointer low byte is less than bottom
                                                           // of string space low byte
/* aa3d */        _`_aa3d`;  LDY.zpg ("facho+3_0065");     // get descriptor pointer high byte
/* aa3f */                   CPY.zpg ("vartab+1_002e");    // compare with start of variables high byte
/* aa41 */                   BCC.rel ("_aa4b");            // branch if less, is on string stack
/* aa43 */                   BNE.rel ("_aa52");            // if greater make space and copy string
                                                           // else high bytes were equal
/* aa45 */                   LDA.zpg ("facho+2_0064");     // get descriptor pointer low byte
/* aa47 */                   CMP.zpg ("vartab+0_002d");    // compare with start of variables low byte
/* aa49 */                   BCS.rel ("_aa52");            // if greater or equal make space and copy string
/* aa4b */        _`_aa4b`;  LDA.zpg ("facho+2_0064");     // get descriptor pointer low byte
/* aa4d */                   LDY.zpg ("facho+3_0065");     // get descriptor pointer high byte
/* aa4f */                   JMP.abs ("_aa68");            // go copy descriptor to variable
/* aa52 */        _`_aa52`;  LDY.imm (0x00);               // clear index
/* aa54 */                   LDA.iny ("facho+2_0064");     // get string length
/* aa56 */                   JSR.abs ("_b475");            // copy descriptor pointer and make string space A bytes long
/* aa59 */                   LDA.zpg ("dscpnt+0_0050");    // copy old descriptor pointer low byte
/* aa5b */                   LDY.zpg ("dscpnt+1_0051");    // copy old descriptor pointer high byte
/* aa5d */                   STA.zpg ("arisgn_006f");      // save old descriptor pointer low byte
/* aa5f */                   STY.zpg ("facov_0070");       // save old descriptor pointer high byte
/* aa61 */                   JSR.abs ("movins_b67a");      // copy string from descriptor to utility pointer
/* aa64 */                   LDA.imm (0x61);               // get descriptor pointer low byte
/* aa66 */                   LDY.imm (0x00);               // get descriptor pointer high byte
/* aa68 */        _`_aa68`;  STA.zpg ("dscpnt+0_0050");    // save descriptor pointer low byte
/* aa6a */                   STY.zpg ("dscpnt+1_0051");    // save descriptor pointer high byte
/* aa6c */                   JSR.abs ("frefac_b6db");      // clean descriptor stack, YA = pointer
/* aa6f */                   LDY.imm (0x00);               // clear index
/* aa71 */                   LDA.iny ("dscpnt+0_0050");    // get string length from new descriptor
/* aa73 */                   STA.iny ("forpnt+0_0049");    // copy string length to variable
/* aa75 */                   INY.imp ();                   // increment index
/* aa76 */                   LDA.iny ("dscpnt+0_0050");    // get string pointer low byte from new descriptor
/* aa78 */                   STA.iny ("forpnt+0_0049");    // copy string pointer low byte to variable
/* aa7a */                   INY.imp ();                   // increment index
/* aa7b */                   LDA.iny ("dscpnt+0_0050");    // get string pointer high byte from new descriptor
/* aa7d */                   STA.iny ("forpnt+0_0049");    // copy string pointer high byte to variable
/* aa7f */                   RTS.imp ();

// ------------------------------------------------------- // perform PRINT#
/* aa80 */  _`printn_aa80`;  JSR.abs ("cmd_aa86");         // perform CMD
/* aa83 */                   JMP.abs ("_abb5");            // close input and output channels and return

// ------------------------------------------------------- // perform CMD
/* aa86 */     _`cmd_aa86`;  JSR.abs ("_b79e");            // get byte parameter
/* aa89 */                   BEQ.rel ("_aa90");            // branch if following byte is ":" or [EOT]
/* aa8b */                   LDA.imm (0x2c);               // set ","
/* aa8d */                   JSR.abs ("chkcom_aeff");      // scan for CHR$(A), else do syntax error then warm start
/* aa90 */        _`_aa90`;  PHP.imp ();                   // save status
/* aa91 */                   STX.zpg ("channl_0013");      // set current I/O channel
/* aa93 */                   JSR.abs ("bckout_e118");      // open channel for output with error check
/* aa96 */                   PLP.imp ();                   // restore status
/* aa97 */                   JMP.abs ("print_aaa0");       // perform PRINT
/* aa9a */  _`strdon_aa9a`;  JSR.abs ("_ab21");            // print string from utility pointer
/* aa9d */        _`_aa9d`;  JSR.abs ("chrgot_0079");      // scan memory

// ------------------------------------------------------- // perform PRINT
/* aaa0 */   _`print_aaa0`;  BEQ.rel ("crdo_aad7");        // if nothing following just print CR/LF
/* aaa2 */        _`_aaa2`;  BEQ.rel ("_aae7");            // exit if nothing following, end of PRINT branch
/* aaa4 */                   CMP.imm (0xa3);               // compare with token for TAB(
/* aaa6 */                   BEQ.rel ("_aaf8");            // if TAB( go handle it
/* aaa8 */                   CMP.imm (0xa6);               // compare with token for SPC(
/* aaaa */                   CLC.imp ();                   // flag SPC(
/* aaab */                   BEQ.rel ("_aaf8");            // if SPC( go handle it
/* aaad */                   CMP.imm (0x2c);               // compare with ","
/* aaaf */                   BEQ.rel ("comprt_aae8");      // if "," go skip to the next TAB position
/* aab1 */                   CMP.imm (0x3b);               // compare with ";"
/* aab3 */                   BEQ.rel ("_ab13");            // if ";" go continue the print loop
/* aab5 */                   JSR.abs ("frmevl_ad9e");      // evaluate expression
/* aab8 */   _`varop_aab8`;  BIT.zpg ("valtyp_000d");      // test data type flag, $FF = string, $00 = numeric
/* aaba */                   BMI.rel ("strdon_aa9a");      // if string go print string, scan memory and continue PRINT
/* aabc */                   JSR.abs ("fout_bddd");        // convert FAC1 to ASCII string result in (AY)
/* aabf */                   JSR.abs ("strlit_b487");      // print " terminated string to utility pointer
/* aac2 */                   JSR.abs ("_ab21");            // print string from utility pointer
/* aac5 */                   JSR.abs ("outspc_ab3b");      // print [SPACE] or [CURSOR RIGHT]
/* aac8 */                   BNE.rel ("_aa9d");            // go scan memory and continue PRINT, branch always

// ------------------------------------------------------- // set XY to $0200 - 1 and print [CR]
/* aaca */        _`_aaca`;  LDA.imm (0x00);               // clear A
/* aacc */                   STA.abx ("buf+0_0200");       // clear first byte of input buffer
/* aacf */                   LDX.imm (0xff);               // $0200 - 1 low byte
/* aad1 */                   LDY.imm (0x01);               // $0200 - 1 high byte
/* aad3 */                   LDA.zpg ("channl_0013");      // get current I/O channel
/* aad5 */                   BNE.rel ("_aae7");            // exit if not default channel

// ------------------------------------------------------- // print CR/LF
/* aad7 */    _`crdo_aad7`;  LDA.imm (0x0d);               // set [CR]
/* aad9 */                   JSR.abs ("_ab47");            // print the character
/* aadc */                   BIT.zpg ("channl_0013");      // test current I/O channel
/* aade */                   BPL.rel ("_aae5");            // if ?? toggle A, EOR #$FF and return
/* aae0 */                   LDA.imm (0x0a);               // set [LF]
/* aae2 */                   JSR.abs ("_ab47");            // print the character
                                                           // toggle A
/* aae5 */        _`_aae5`;  EOR.imm (0xff);               // invert A
/* aae7 */        _`_aae7`;  RTS.imp ();
                                                           // was ","
/* aae8 */  _`comprt_aae8`;  SEC.imp ();                   // set Cb for read cursor position
/* aae9 */                   JSR.abs ("plot_fff0");        // read/set X,Y cursor position
/* aaec */                   TYA.imp ();                   // copy cursor Y
/* aaed */                   SEC.imp ();                   // set carry for subtract
/* aaee */        _`_aaee`;  SBC.imm (0x0a);               // subtract one TAB length
/* aaf0 */                   BCS.rel ("_aaee");            // loop if result was +ve
/* aaf2 */                   EOR.imm (0xff);               // complement it
/* aaf4 */                   ADC.imm (0x01);               // +1, twos complement
/* aaf6 */                   BNE.rel ("_ab0e");            // always print A spaces, result is never $00
/* aaf8 */        _`_aaf8`;  PHP.imp ();                   // save TAB( or SPC( status
/* aaf9 */                   SEC.imp ();                   // set Cb for read cursor position
/* aafa */                   JSR.abs ("plot_fff0");        // read/set X,Y cursor position
/* aafd */                   STY.zpg ("trmpos_0009");      // save current cursor position
/* aaff */                   JSR.abs ("gtbytc_b79b");      // scan and get byte parameter
/* ab02 */                   CMP.imm (0x29);               // compare with ")"
/* ab04 */                   BNE.rel ("_ab5f");            // if not ")" do syntax error
/* ab06 */                   PLP.imp ();                   // restore TAB( or SPC( status
/* ab07 */                   BCC.rel ("_ab0f");            // branch if was SPC(
                                                           // else was TAB(
/* ab09 */                   TXA.imp ();                   // copy TAB() byte to A
/* ab0a */                   SBC.zpg ("trmpos_0009");      // subtract current cursor position
/* ab0c */                   BCC.rel ("_ab13");            // go loop for next if already past requited position
/* ab0e */        _`_ab0e`;  TAX.imp ();                   // copy [SPACE] count to X
/* ab0f */        _`_ab0f`;  INX.imp ();                   // increment count
/* ab10 */        _`_ab10`;  DEX.imp ();                   // decrement count
/* ab11 */                   BNE.rel ("_ab19");            // branch if count was not zero
                                                           // was ";" or [SPACES] printed
/* ab13 */        _`_ab13`;  JSR.abs ("chrget+0_0073");    // increment and scan memory
/* ab16 */                   JMP.abs ("_aaa2");            // continue print loop
/* ab19 */        _`_ab19`;  JSR.abs ("outspc_ab3b");      // print [SPACE] or [CURSOR RIGHT]
/* ab1c */                   BNE.rel ("_ab10");            // loop, branch always

// ------------------------------------------------------- // print null terminated string
/* ab1e */  _`strout_ab1e`;  JSR.abs ("strlit_b487");      // print " terminated string to utility pointer

// ------------------------------------------------------- // print string from utility pointer
/* ab21 */        _`_ab21`;  JSR.abs ("_b6a6");            // pop string off descriptor stack, or from top of string
                                                           // space returns with A = length, X = pointer low byte,
                                                           // Y = pointer high byte
/* ab24 */                   TAX.imp ();                   // copy length
/* ab25 */                   LDY.imm (0x00);               // clear index
/* ab27 */                   INX.imp ();                   // increment length, for pre decrement loop
/* ab28 */        _`_ab28`;  DEX.imp ();                   // decrement length
/* ab29 */                   BEQ.rel ("_aae7");            // exit if done
/* ab2b */                   LDA.iny ("index+0_0022");     // get byte from string
/* ab2d */                   JSR.abs ("_ab47");            // print the character
/* ab30 */                   INY.imp ();                   // increment index
/* ab31 */                   CMP.imm (0x0d);               // compare byte with [CR]
/* ab33 */                   BNE.rel ("_ab28");            // loop if not [CR]
/* ab35 */                   JSR.abs ("_aae5");            // toggle A, EOR #$FF. what is the point of this ??
/* ab38 */                   JMP.abs ("_ab28");            // loop

// ------------------------------------------------------- // print [SPACE] or [CURSOR RIGHT]
/* ab3b */  _`outspc_ab3b`;  LDA.zpg ("channl_0013");      // get current I/O channel
/* ab3d */                   BEQ.rel ("_ab42");            // if default channel go output [CURSOR RIGHT]
/* ab3f */                   LDA.imm (0x20);               // else output [SPACE]
/* ab41 */                   _.bytes(0x2c);                // makes next line BIT $1DA9
/* ab42 */        _`_ab42`;  LDA.imm (0x1d);               // set [CURSOR RIGHT]
/* ab44 */                   _.bytes(0x2c);                // makes next line BIT $3FA9

// ------------------------------------------------------- // print "?"
/* ab45 */        _`_ab45`;  LDA.imm (0x3f);               // set "?"

// ------------------------------------------------------- // print character
/* ab47 */        _`_ab47`;  JSR.abs ("bchout_e10c");      // output character to channel with error check
/* ab4a */                   AND.imm (0xff);               // set the flags on A
/* ab4c */                   RTS.imp ();

// ------------------------------------------------------- // bad input routine
/* ab4d */  _`doagin_ab4d`;  LDA.zpg ("inpflg_0011");      // get INPUT mode flag, $00 = INPUT, $40 = GET, $98 = READ
/* ab4f */                   BEQ.rel ("_ab62");            // branch if INPUT
/* ab51 */                   BMI.rel ("_ab57");            // branch if READ
                                                           // else was GET
/* ab53 */                   LDY.imm (0xff);               // set current line high byte to -1, indicate immediate mode
/* ab55 */                   BNE.rel ("_ab5b");            // branch always
/* ab57 */        _`_ab57`;  LDA.zpg ("datlin+0_003f");    // get current DATA line number low byte
/* ab59 */                   LDY.zpg ("datlin+1_0040");    // get current DATA line number high byte
/* ab5b */        _`_ab5b`;  STA.zpg ("curlin+0_0039");    // set current line number low byte
/* ab5d */                   STY.zpg ("curlin+1_003a");    // set current line number high byte
/* ab5f */        _`_ab5f`;  JMP.abs ("synerr_af08");      // do syntax error then warm start
                                                           // was INPUT
/* ab62 */        _`_ab62`;  LDA.zpg ("channl_0013");      // get current I/O channel
/* ab64 */                   BEQ.rel ("_ab6b");            // branch if default channel
/* ab66 */                   LDX.imm (0x18);               // else error $18, file data error
/* ab68 */                   JMP.abs ("error_a437");       // do error #X then warm start
/* ab6b */        _`_ab6b`;  LDA.imm (0x0c);               // set "?REDO FROM START" pointer low byte
/* ab6d */                   LDY.imm (0xad);               // set "?REDO FROM START" pointer high byte
/* ab6f */                   JSR.abs ("strout_ab1e");      // print null terminated string
/* ab72 */                   LDA.zpg ("oldtxt+0_003d");    // get continue pointer low byte
/* ab74 */                   LDY.zpg ("oldtxt+1_003e");    // get continue pointer high byte
/* ab76 */                   STA.zpg ("txtptr+0_007a");    // save BASIC execute pointer low byte
/* ab78 */                   STY.zpg ("txtptr+1_007b");    // save BASIC execute pointer high byte
/* ab7a */                   RTS.imp ();

// ------------------------------------------------------- // perform GET
/* ab7b */     _`get_ab7b`;  JSR.abs ("errdir_b3a6");      // check not Direct, back here if ok
/* ab7e */                   CMP.imm (0x23);               // compare with "#"
/* ab80 */                   BNE.rel ("_ab92");            // branch if not GET#
/* ab82 */                   JSR.abs ("chrget+0_0073");    // increment and scan memory
/* ab85 */                   JSR.abs ("_b79e");            // get byte parameter
/* ab88 */                   LDA.imm (0x2c);               // set ","
/* ab8a */                   JSR.abs ("chkcom_aeff");      // scan for CHR$(A), else do syntax error then warm start
/* ab8d */                   STX.zpg ("channl_0013");      // set current I/O channel
/* ab8f */                   JSR.abs ("bckin_e11e");       // open channel for input with error check
/* ab92 */        _`_ab92`;  LDX.imm (0x01);               // set pointer low byte
/* ab94 */                   LDY.imm (0x02);               // set pointer high byte
/* ab96 */                   LDA.imm (0x00);               // clear A
/* ab98 */                   STA.abs ("buf+1_0201");       // ensure null terminator
/* ab9b */                   LDA.imm (0x40);               // input mode = GET
/* ab9d */                   JSR.abs ("_ac0f");            // perform the GET part of READ
/* aba0 */                   LDX.zpg ("channl_0013");      // get current I/O channel
/* aba2 */                   BNE.rel ("_abb7");            // if not default channel go do channel close and return
/* aba4 */                   RTS.imp ();

// ------------------------------------------------------- // perform INPUT#
/* aba5 */  _`inputn_aba5`;  JSR.abs ("_b79e");            // get byte parameter
/* aba8 */                   LDA.imm (0x2c);               // set ","
/* abaa */                   JSR.abs ("chkcom_aeff");      // scan for CHR$(A), else do syntax error then warm start
/* abad */                   STX.zpg ("channl_0013");      // set current I/O channel
/* abaf */                   JSR.abs ("bckin_e11e");       // open channel for input with error check
/* abb2 */                   JSR.abs ("_abce");            // perform INPUT with no prompt string

// ------------------------------------------------------- // close input and output channels
/* abb5 */        _`_abb5`;  LDA.zpg ("channl_0013");      // get current I/O channel
/* abb7 */        _`_abb7`;  JSR.abs ("clrchn_ffcc");      // close input and output channels
/* abba */                   LDX.imm (0x00);               // clear X
/* abbc */                   STX.zpg ("channl_0013");      // clear current I/O channel, flag default
/* abbe */                   RTS.imp ();

// ------------------------------------------------------- // perform INPUT
/* abbf */   _`input_abbf`;  CMP.imm (0x22);               // compare next byte with open quote
/* abc1 */                   BNE.rel ("_abce");            // if no prompt string just do INPUT
/* abc3 */                   JSR.abs ("_aebd");            // print "..." string
/* abc6 */                   LDA.imm (0x3b);               // load A with ";"
/* abc8 */                   JSR.abs ("chkcom_aeff");      // scan for CHR$(A), else do syntax error then warm start
/* abcb */                   JSR.abs ("_ab21");            // print string from utility pointer
                                                           // done with prompt, now get data
/* abce */        _`_abce`;  JSR.abs ("errdir_b3a6");      // check not Direct, back here if ok
/* abd1 */                   LDA.imm (0x2c);               // set ","
/* abd3 */                   STA.abs ("bstack+192_01ff");  // save to start of buffer - 1
/* abd6 */        _`_abd6`;  JSR.abs ("qinlin_abf9");      // print "? " and get BASIC input
/* abd9 */                   LDA.zpg ("channl_0013");      // get current I/O channel
/* abdb */                   BEQ.rel ("bufful_abea");      // branch if default I/O channel
/* abdd */                   JSR.abs ("readst_ffb7");      // read I/O status word
/* abe0 */                   AND.imm (0x02);               // mask no DSR/timeout
/* abe2 */                   BEQ.rel ("bufful_abea");      // branch if not error
/* abe4 */                   JSR.abs ("_abb5");            // close input and output channels
/* abe7 */                   JMP.abs ("data_a8f8");        // perform DATA
/* abea */  _`bufful_abea`;  LDA.abs ("buf+0_0200");       // get first byte in input buffer
/* abed */                   BNE.rel ("_ac0d");            // branch if not null
                                                           // else ..
/* abef */                   LDA.zpg ("channl_0013");      // get current I/O channel
/* abf1 */                   BNE.rel ("_abd6");            // if not default channel go get BASIC input
/* abf3 */                   JSR.abs ("datan_a906");       // scan for next BASIC statement ([:] or [EOL])
/* abf6 */                   JMP.abs ("_a8fb");            // add Y to the BASIC execute pointer and return

// ------------------------------------------------------- // print "? " and get BASIC input
/* abf9 */  _`qinlin_abf9`;  LDA.zpg ("channl_0013");      // get current I/O channel
/* abfb */                   BNE.rel ("_ac03");            // skip "?" prompt if not default channel
/* abfd */                   JSR.abs ("_ab45");            // print "?"
/* ac00 */                   JSR.abs ("outspc_ab3b");      // print [SPACE] or [CURSOR RIGHT]
/* ac03 */        _`_ac03`;  JMP.abs ("inlin_a560");       // call for BASIC input and return

// ------------------------------------------------------- // perform READ
/* ac06 */    _`read_ac06`;  LDX.zpg ("datptr+0_0041");    // get DATA pointer low byte
/* ac08 */                   LDY.zpg ("datptr+1_0042");    // get DATA pointer high byte
/* ac0a */                   LDA.imm (0x98);               // set input mode = READ
/* ac0c */                   _.bytes(0x2c);                // makes next line BIT $00A9
/* ac0d */        _`_ac0d`;  LDA.imm (0x00);               // set input mode = INPUT

// ------------------------------------------------------- // perform GET
/* ac0f */        _`_ac0f`;  STA.zpg ("inpflg_0011");      // set input mode flag, $00 = INPUT, $40 = GET, $98 = READ
/* ac11 */                   STX.zpg ("inpptr+0_0043");    // save READ pointer low byte
/* ac13 */                   STY.zpg ("inpptr+1_0044");    // save READ pointer high byte
                                                           // READ, GET or INPUT next variable from list
/* ac15 */        _`_ac15`;  JSR.abs ("ptrget_b08b");      // get variable address
/* ac18 */                   STA.zpg ("forpnt+0_0049");    // save address low byte
/* ac1a */                   STY.zpg ("forpnt+1_004a");    // save address high byte
/* ac1c */                   LDA.zpg ("txtptr+0_007a");    // get BASIC execute pointer low byte
/* ac1e */                   LDY.zpg ("txtptr+1_007b");    // get BASIC execute pointer high byte
/* ac20 */                   STA.zpg ("opptr+0_004b");     // save BASIC execute pointer low byte
/* ac22 */                   STY.zpg ("opptr+1_004c");     // save BASIC execute pointer high byte
/* ac24 */                   LDX.zpg ("inpptr+0_0043");    // get READ pointer low byte
/* ac26 */                   LDY.zpg ("inpptr+1_0044");    // get READ pointer high byte
/* ac28 */                   STX.zpg ("txtptr+0_007a");    // save as BASIC execute pointer low byte
/* ac2a */                   STY.zpg ("txtptr+1_007b");    // save as BASIC execute pointer high byte
/* ac2c */                   JSR.abs ("chrgot_0079");      // scan memory
/* ac2f */                   BNE.rel ("_ac51");            // branch if not null
                                                           // pointer was to null entry
/* ac31 */                   BIT.zpg ("inpflg_0011");      // test input mode flag, $00 = INPUT, $40 = GET, $98 = READ
/* ac33 */                   BVC.rel ("_ac41");            // branch if not GET
                                                           // else was GET
/* ac35 */   _`rdget_ac35`;  JSR.abs ("bgetin_e124");      // get character from input device with error check
/* ac38 */                   STA.abs ("buf+0_0200");       // save to buffer
/* ac3b */                   LDX.imm (0xff);               // set pointer low byte
/* ac3d */                   LDY.imm (0x01);               // set pointer high byte
/* ac3f */                   BNE.rel ("_ac4d");            // go interpret single character
/* ac41 */        _`_ac41`;  BMI.rel ("_acb8");            // branch if READ
                                                           // else was INPUT
/* ac43 */                   LDA.zpg ("channl_0013");      // get current I/O channel
/* ac45 */                   BNE.rel ("_ac4a");            // skip "?" prompt if not default channel
/* ac47 */                   JSR.abs ("_ab45");            // print "?"
/* ac4a */        _`_ac4a`;  JSR.abs ("qinlin_abf9");      // print "? " and get BASIC input
/* ac4d */        _`_ac4d`;  STX.zpg ("txtptr+0_007a");    // save BASIC execute pointer low byte
/* ac4f */                   STY.zpg ("txtptr+1_007b");    // save BASIC execute pointer high byte
/* ac51 */        _`_ac51`;  JSR.abs ("chrget+0_0073");    // increment and scan memory, execute pointer now points to
                                                           // start of next data or null terminator
/* ac54 */                   BIT.zpg ("valtyp_000d");      // test data type flag, $FF = string, $00 = numeric
/* ac56 */                   BPL.rel ("_ac89");            // branch if numeric
                                                           // type is string
/* ac58 */                   BIT.zpg ("inpflg_0011");      // test INPUT mode flag, $00 = INPUT, $40 = GET, $98 = READ
/* ac5a */                   BVC.rel ("_ac65");            // branch if not GET
                                                           // else do string GET
/* ac5c */                   INX.imp ();                   // clear X ??
/* ac5d */                   STX.zpg ("txtptr+0_007a");    // save BASIC execute pointer low byte
/* ac5f */                   LDA.imm (0x00);               // clear A
/* ac61 */                   STA.zpg ("charac_0007");      // clear search character
/* ac63 */                   BEQ.rel ("_ac71");            // branch always
                                                           // is string INPUT or string READ
/* ac65 */        _`_ac65`;  STA.zpg ("charac_0007");      // save search character
/* ac67 */                   CMP.imm (0x22);               // compare with "
/* ac69 */                   BEQ.rel ("_ac72");            // branch if quote
                                                           // string is not in quotes so ":", "," or $00 are the
                                                           // termination characters
/* ac6b */                   LDA.imm (0x3a);               // set ":"
/* ac6d */                   STA.zpg ("charac_0007");      // set search character
/* ac6f */                   LDA.imm (0x2c);               // set ","
/* ac71 */        _`_ac71`;  CLC.imp ();                   // clear carry for add
/* ac72 */        _`_ac72`;  STA.zpg ("endchr_0008");      // set scan quotes flag
/* ac74 */                   LDA.zpg ("txtptr+0_007a");    // get BASIC execute pointer low byte
/* ac76 */                   LDY.zpg ("txtptr+1_007b");    // get BASIC execute pointer high byte
/* ac78 */                   ADC.imm (0x00);               // add to pointer low byte. this add increments the pointer
                                                           // if the mode is INPUT or READ and the data is a "..."
                                                           // string
/* ac7a */                   BCC.rel ("_ac7d");            // branch if no rollover
/* ac7c */                   INY.imp ();                   // else increment pointer high byte
/* ac7d */        _`_ac7d`;  JSR.abs ("_b48d");            // print string to utility pointer
/* ac80 */                   JSR.abs ("_b7e2");            // restore BASIC execute pointer from temp
/* ac83 */                   JSR.abs ("_a9da");            // perform string LET
/* ac86 */                   JMP.abs ("_ac91");            // continue processing command
                                                           // GET, INPUT or READ is numeric
/* ac89 */        _`_ac89`;  JSR.abs ("fin_bcf3");         // get FAC1 from string
/* ac8c */                   LDA.zpg ("intflg_000e");      // get data type flag, $80 = integer, $00 = float
/* ac8e */                   JSR.abs ("_a9c2");            // assign value to numeric variable
/* ac91 */        _`_ac91`;  JSR.abs ("chrgot_0079");      // scan memory
/* ac94 */                   BEQ.rel ("_ac9d");            // branch if ":" or [EOL]
/* ac96 */                   CMP.imm (0x2c);               // comparte with ","
/* ac98 */                   BEQ.rel ("_ac9d");            // branch if ","
/* ac9a */                   JMP.abs ("doagin_ab4d");      // else go do bad input routine
                                                           // string terminated with ":", "," or $00
/* ac9d */        _`_ac9d`;  LDA.zpg ("txtptr+0_007a");    // get BASIC execute pointer low byte
/* ac9f */                   LDY.zpg ("txtptr+1_007b");    // get BASIC execute pointer high byte
/* aca1 */                   STA.zpg ("inpptr+0_0043");    // save READ pointer low byte
/* aca3 */                   STY.zpg ("inpptr+1_0044");    // save READ pointer high byte
/* aca5 */                   LDA.zpg ("opptr+0_004b");     // get saved BASIC execute pointer low byte
/* aca7 */                   LDY.zpg ("opptr+1_004c");     // get saved BASIC execute pointer high byte
/* aca9 */                   STA.zpg ("txtptr+0_007a");    // restore BASIC execute pointer low byte
/* acab */                   STY.zpg ("txtptr+1_007b");    // restore BASIC execute pointer high byte
/* acad */                   JSR.abs ("chrgot_0079");      // scan memory
/* acb0 */                   BEQ.rel ("_acdf");            // branch if ":" or [EOL]
/* acb2 */                   JSR.abs ("_aefd");            // scan for ",", else do syntax error then warm start
/* acb5 */                   JMP.abs ("_ac15");            // go READ or INPUT next variable from list
                                                           // was READ
/* acb8 */        _`_acb8`;  JSR.abs ("datan_a906");       // scan for next BASIC statement ([:] or [EOL])
/* acbb */                   INY.imp ();                   // increment index to next byte
/* acbc */                   TAX.imp ();                   // copy byte to X
/* acbd */                   BNE.rel ("_acd1");            // branch if ":"
/* acbf */                   LDX.imm (0x0d);               // else set error $0D, out of data error
/* acc1 */                   INY.imp ();                   // increment index to next line pointer high byte
/* acc2 */                   LDA.iny ("txtptr+0_007a");    // get next line pointer high byte
/* acc4 */                   BEQ.rel ("_ad32");            // branch if program end, eventually does error X
/* acc6 */                   INY.imp ();                   // increment index
/* acc7 */                   LDA.iny ("txtptr+0_007a");    // get next line # low byte
/* acc9 */                   STA.zpg ("datlin+0_003f");    // save current DATA line low byte
/* accb */                   INY.imp ();                   // increment index
/* accc */                   LDA.iny ("txtptr+0_007a");    // get next line # high byte
/* acce */                   INY.imp ();                   // increment index
/* accf */                   STA.zpg ("datlin+1_0040");    // save current DATA line high byte
/* acd1 */        _`_acd1`;  JSR.abs ("_a8fb");            // add Y to the BASIC execute pointer
/* acd4 */                   JSR.abs ("chrgot_0079");      // scan memory
/* acd7 */                   TAX.imp ();                   // copy the byte
/* acd8 */                   CPX.imm (0x83);               // compare it with token for DATA
/* acda */                   BNE.rel ("_acb8");            // loop if not DATA
/* acdc */                   JMP.abs ("_ac51");            // continue evaluating READ
/* acdf */        _`_acdf`;  LDA.zpg ("inpptr+0_0043");    // get READ pointer low byte
/* ace1 */                   LDY.zpg ("inpptr+1_0044");    // get READ pointer high byte
/* ace3 */                   LDX.zpg ("inpflg_0011");      // get INPUT mode flag, $00 = INPUT, $40 = GET, $98 = READ
/* ace5 */                   BPL.rel ("_acea");            // branch if INPUT or GET
/* ace7 */                   JMP.abs ("_a827");            // else set data pointer and exit
/* acea */        _`_acea`;  LDY.imm (0x00);               // clear index
/* acec */                   LDA.iny ("inpptr+0_0043");    // get READ byte
/* acee */                   BEQ.rel ("_acfb");            // exit if [EOL]
/* acf0 */                   LDA.zpg ("channl_0013");      // get current I/O channel
/* acf2 */                   BNE.rel ("_acfb");            // exit if not default channel
/* acf4 */                   LDA.imm (0xfc);               // set "?EXTRA IGNORED" pointer low byte
/* acf6 */                   LDY.imm (0xac);               // set "?EXTRA IGNORED" pointer high byte
/* acf8 */                   JMP.abs ("strout_ab1e");      // print null terminated string
/* acfb */        _`_acfb`;  RTS.imp ();

// ------------------------------------------------------- // input error messages
                                                           // '?extra ignored'
/* acfc */   _`exint_acfc`;  _.bytes(0x3f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x20, 0x49);
/* ad04 */                   _.bytes(0x47, 0x4e, 0x4f, 0x52, 0x45, 0x44, 0x0d, 0x00);
                                                           // '?redo from start'
/* ad0c */                   _.bytes(0x3f, 0x52, 0x45, 0x44, 0x4f, 0x20, 0x46, 0x52);
/* ad14 */                   _.bytes(0x4f, 0x4d, 0x20, 0x53, 0x54, 0x41, 0x52, 0x54);
/* ad1c */                   _.bytes(0x0d, 0x00);

// ------------------------------------------------------- // perform NEXT
/* ad1e */    _`next_ad1e`;  BNE.rel ("_ad24");            // branch if NEXT variable
/* ad20 */                   LDY.imm (0x00);               // else clear Y
/* ad22 */                   BEQ.rel ("_ad27");            // branch always
                                                           // NEXT variable
/* ad24 */        _`_ad24`;  JSR.abs ("ptrget_b08b");      // get variable address
/* ad27 */        _`_ad27`;  STA.zpg ("forpnt+0_0049");    // save FOR/NEXT variable pointer low byte
/* ad29 */                   STY.zpg ("forpnt+1_004a");    // save FOR/NEXT variable pointer high byte
                                                           // (high byte cleared if no variable defined)
/* ad2b */                   JSR.abs ("fndfor_a38a");      // search the stack for FOR or GOSUB activity
/* ad2e */                   BEQ.rel ("_ad35");            // branch if FOR, this variable, found
/* ad30 */                   LDX.imm (0x0a);               // else set error $0A, next without for error
/* ad32 */        _`_ad32`;  JMP.abs ("error_a437");       // do error #X then warm start
                                                           // found this FOR variable
/* ad35 */        _`_ad35`;  TXS.imp ();                   // update stack pointer
/* ad36 */                   TXA.imp ();                   // copy stack pointer
/* ad37 */                   CLC.imp ();                   // clear carry for add
/* ad38 */                   ADC.imm (0x04);               // point to STEP value
/* ad3a */                   PHA.imp ();                   // save it
/* ad3b */                   ADC.imm (0x06);               // point to TO value
/* ad3d */                   STA.zpg ("index+2_0024");     // save pointer to TO variable for compare
/* ad3f */                   PLA.imp ();                   // restore pointer to STEP value
/* ad40 */                   LDY.imm (0x01);               // point to stack page
/* ad42 */                   JSR.abs ("movfm_bba2");       // unpack memory (AY) into FAC1
/* ad45 */                   TSX.imp ();                   // get stack pointer back
/* ad46 */                   LDA.abx ("bad+9_0109");       // get step sign
/* ad49 */                   STA.zpg ("facsgn_0066");      // save FAC1 sign (b7)
/* ad4b */                   LDA.zpg ("forpnt+0_0049");    // get FOR/NEXT variable pointer low byte
/* ad4d */                   LDY.zpg ("forpnt+1_004a");    // get FOR/NEXT variable pointer high byte
/* ad4f */                   JSR.abs ("fadd_b867");        // add FOR variable to FAC1
/* ad52 */                   JSR.abs ("_bbd0");            // pack FAC1 into FOR variable
/* ad55 */                   LDY.imm (0x01);               // point to stack page
/* ad57 */                   JSR.abs ("_bc5d");            // compare FAC1 with TO value
/* ad5a */                   TSX.imp ();                   // get stack pointer back
/* ad5b */                   SEC.imp ();                   // set carry for subtract
/* ad5c */                   SBC.abx ("bad+9_0109");       // subtract step sign
/* ad5f */                   BEQ.rel ("_ad78");            // branch if =, loop complete
                                                           // loop back and do it all again
/* ad61 */  _`donext_ad61`;  LDA.abx ("bad+15_010f");      // get FOR line low byte
/* ad64 */                   STA.zpg ("curlin+0_0039");    // save current line number low byte
/* ad66 */                   LDA.abx ("bad+16_0110");      // get FOR line high byte
/* ad69 */                   STA.zpg ("curlin+1_003a");    // save current line number high byte
/* ad6b */                   LDA.abx ("bad+18_0112");      // get BASIC execute pointer low byte
/* ad6e */                   STA.zpg ("txtptr+0_007a");    // save BASIC execute pointer low byte
/* ad70 */                   LDA.abx ("bad+17_0111");      // get BASIC execute pointer high byte
/* ad73 */                   STA.zpg ("txtptr+1_007b");    // save BASIC execute pointer high byte
/* ad75 */        _`_ad75`;  JMP.abs ("newstt_a7ae");      // go do interpreter inner loop
                                                           // NEXT loop comlete
/* ad78 */        _`_ad78`;  TXA.imp ();                   // stack copy to A
/* ad79 */                   ADC.imm (0x11);               // add $12, $11 + carry, to dump FOR structure
/* ad7b */                   TAX.imp ();                   // copy back to index
/* ad7c */                   TXS.imp ();                   // copy to stack pointer
/* ad7d */                   JSR.abs ("chrgot_0079");      // scan memory
/* ad80 */                   CMP.imm (0x2c);               // compare with ","
/* ad82 */                   BNE.rel ("_ad75");            // if not "," go do interpreter inner loop
                                                           // was "," so another NEXT variable to do
/* ad84 */                   JSR.abs ("chrget+0_0073");    // increment and scan memory
/* ad87 */                   JSR.abs ("_ad24");            // do NEXT variable

// ------------------------------------------------------- // evaluate expression and check type mismatch
/* ad8a */  _`frmnum_ad8a`;  JSR.abs ("frmevl_ad9e");      // evaluate expression
                                                           // check if source and destination are numeric
/* ad8d */        _`_ad8d`;  CLC.imp ();
/* ad8e */                   _.bytes(0x24);                // makes next line BIT $38
                                                           // check if source and destination are string
/* ad8f */        _`_ad8f`;  SEC.imp ();                   // destination is string
                                                           // type match check, set C for string, clear C for numeric
/* ad90 */        _`_ad90`;  BIT.zpg ("valtyp_000d");      // test data type flag, $FF = string, $00 = numeric
/* ad92 */                   BMI.rel ("_ad97");            // branch if string
/* ad94 */                   BCS.rel ("_ad99");            // if destiantion is numeric do type missmatch error
/* ad96 */        _`_ad96`;  RTS.imp ();
/* ad97 */        _`_ad97`;  BCS.rel ("_ad96");            // exit if destination is string
                                                           // do type missmatch error
/* ad99 */        _`_ad99`;  LDX.imm (0x16);               // error code $16, type missmatch error
/* ad9b */                   JMP.abs ("error_a437");       // do error #X then warm start

// ------------------------------------------------------- // evaluate expression
/* ad9e */  _`frmevl_ad9e`;  LDX.zpg ("txtptr+0_007a");    // get BASIC execute pointer low byte
/* ada0 */                   BNE.rel ("_ada4");            // skip next if not zero
/* ada2 */                   DEC.zpg ("txtptr+1_007b");    // else decrement BASIC execute pointer high byte
/* ada4 */        _`_ada4`;  DEC.zpg ("txtptr+0_007a");    // decrement BASIC execute pointer low byte
/* ada6 */                   LDX.imm (0x00);               // set null precedence, flag done
/* ada8 */                   _.bytes(0x24);                // makes next line BIT $48
/* ada9 */        _`_ada9`;  PHA.imp ();                   // push compare evaluation byte if branch to here
/* adaa */                   TXA.imp ();                   // copy precedence byte
/* adab */                   PHA.imp ();                   // push precedence byte
/* adac */                   LDA.imm (0x01);               // 2 bytes
/* adae */                   JSR.abs ("getstk_a3fb");      // check room on stack for A*2 bytes
/* adb1 */                   JSR.abs ("eval_ae83");        // get value from line
/* adb4 */                   LDA.imm (0x00);               // clear A
/* adb6 */                   STA.zpg ("opmask_004d");      // clear comparrison evaluation flag
/* adb8 */        _`_adb8`;  JSR.abs ("chrgot_0079");      // scan memory
/* adbb */        _`_adbb`;  SEC.imp ();                   // set carry for subtract
/* adbc */                   SBC.imm (0xb1);               // subtract the token for ">"
/* adbe */                   BCC.rel ("_add7");            // branch if < ">"
/* adc0 */                   CMP.imm (0x03);               // compare with ">" to +3
/* adc2 */                   BCS.rel ("_add7");            // branch if >= 3
                                                           // was token for ">" "=" or "<"
/* adc4 */                   CMP.imm (0x01);               // compare with token for =
/* adc6 */                   ROL.acc ();                   // *2, b0 = carry (=1 if token was = or <)
/* adc7 */                   EOR.imm (0x01);               // toggle b0
/* adc9 */                   EOR.zpg ("opmask_004d");      // EOR with comparrison evaluation flag
/* adcb */                   CMP.zpg ("opmask_004d");      // compare with comparrison evaluation flag
/* adcd */                   BCC.rel ("_ae30");            // if < saved flag do syntax error then warm start
/* adcf */                   STA.zpg ("opmask_004d");      // save new comparrison evaluation flag
/* add1 */                   JSR.abs ("chrget+0_0073");    // increment and scan memory
/* add4 */                   JMP.abs ("_adbb");            // go do next character
/* add7 */        _`_add7`;  LDX.zpg ("opmask_004d");      // get comparrison evaluation flag
/* add9 */                   BNE.rel ("_ae07");            // branch if compare function
/* addb */                   BCS.rel ("_ae58");            // go do functions
                                                           // else was < TK_GT so is operator or lower
/* addd */                   ADC.imm (0x07);               // add # of operators (+, -, *, /, ^, AND or OR)
/* addf */                   BCC.rel ("_ae58");            // branch if < + operator
                                                           // carry was set so token was +, -, *, /, ^, AND or OR
/* ade1 */                   ADC.zpg ("valtyp_000d");      // add data type flag, $FF = string, $00 = numeric
/* ade3 */                   BNE.rel ("_ade8");            // branch if not string or not + token
                                                           // will only be $00 if type is string and token was +
/* ade5 */                   JMP.abs ("cat_b63d");         // add strings, string 1 is in the descriptor, string 2
                                                           // is in line, and return
/* ade8 */        _`_ade8`;  ADC.imm (0xff);               // -1 (corrects for carry add)
/* adea */                   STA.zpg ("index+0_0022");     // save it
/* adec */                   ASL.acc ();                   // *2
/* aded */                   ADC.zpg ("index+0_0022");     // *3
/* adef */                   TAY.imp ();                   // copy to index
/* adf0 */        _`_adf0`;  PLA.imp ();                   // pull previous precedence
/* adf1 */                   CMP.aby ("optab_a080");       // compare with precedence byte
/* adf4 */                   BCS.rel ("_ae5d");            // branch if A >=
/* adf6 */                   JSR.abs ("_ad8d");            // check if source is numeric, else do type mismatch
/* adf9 */        _`_adf9`;  PHA.imp ();                   // save precedence
/* adfa */        _`_adfa`;  JSR.abs ("_ae20");            // get vector, execute function then continue evaluation
/* adfd */                   PLA.imp ();                   // restore precedence
/* adfe */                   LDY.zpg ("opptr+0_004b");     // get precedence stacked flag
/* ae00 */                   BPL.rel ("_ae19");            // branch if stacked values
/* ae02 */                   TAX.imp ();                   // copy precedence, set flags
/* ae03 */                   BEQ.rel ("_ae5b");            // exit if done
/* ae05 */                   BNE.rel ("_ae66");            // else pop FAC2 and return, branch always
/* ae07 */        _`_ae07`;  LSR.zpg ("valtyp_000d");      // clear data type flag, $FF = string, $00 = numeric
/* ae09 */                   TXA.imp ();                   // copy compare function flag
/* ae0a */                   ROL.acc ();                   // <<1, shift data type flag into b0, 1 = string, 0 = num
/* ae0b */                   LDX.zpg ("txtptr+0_007a");    // get BASIC execute pointer low byte
/* ae0d */                   BNE.rel ("_ae11");            // branch if no underflow
/* ae0f */                   DEC.zpg ("txtptr+1_007b");    // else decrement BASIC execute pointer high byte
/* ae11 */        _`_ae11`;  DEC.zpg ("txtptr+0_007a");    // decrement BASIC execute pointer low byte
/* ae13 */                   LDY.imm (0x1b);
                                                           // set offset to = operator precedence entry
/* ae15 */                   STA.zpg ("opmask_004d");      // save new comparrison evaluation flag
/* ae17 */                   BNE.rel ("_adf0");            // branch always
/* ae19 */        _`_ae19`;  CMP.aby ("optab_a080");       // compare with stacked function precedence
/* ae1c */                   BCS.rel ("_ae66");            // if A >=, pop FAC2 and return
/* ae1e */                   BCC.rel ("_adf9");            // else go stack this one and continue, branch always

// ------------------------------------------------------- // get vector, execute function then continue evaluation
/* ae20 */        _`_ae20`;  LDA.aby (0xa082);             // get function vector high byte
/* ae23 */                   PHA.imp ();                   // onto stack
/* ae24 */                   LDA.aby (0xa081);             // get function vector low byte
/* ae27 */                   PHA.imp ();                   // onto stack
                                                           // now push sign, round FAC1 and put on stack
/* ae28 */                   JSR.abs ("_ae33");            // function will return here, then the next RTS will call
                                                           // the function
/* ae2b */                   LDA.zpg ("opmask_004d");      // get comparrison evaluation flag
/* ae2d */                   JMP.abs ("_ada9");            // continue evaluating expression
/* ae30 */        _`_ae30`;  JMP.abs ("synerr_af08");      // do syntax error then warm start
/* ae33 */        _`_ae33`;  LDA.zpg ("facsgn_0066");      // get FAC1 sign (b7)
/* ae35 */                   LDX.aby ("optab_a080");       // get precedence byte

// ------------------------------------------------------- // push sign, round FAC1 and put on stack
/* ae38 */        _`_ae38`;  TAY.imp ();                   // copy sign
/* ae39 */                   PLA.imp ();                   // get return address low byte
/* ae3a */                   STA.zpg ("index+0_0022");     // save it
/* ae3c */                   INC.zpg ("index+0_0022");     // increment it as return-1 is pushed
                                                           // note, no check is made on the high byte so if the calling
                                                           // routine ever assembles to a page edge then this all goes
                                                           // horribly wrong!
/* ae3e */                   PLA.imp ();                   // get return address high byte
/* ae3f */                   STA.zpg ("index+1_0023");     // save it
/* ae41 */                   TYA.imp ();                   // restore sign
/* ae42 */                   PHA.imp ();                   // push sign

// ------------------------------------------------------- // round FAC1 and put on stack
/* ae43 */        _`_ae43`;  JSR.abs ("round_bc1b");       // round FAC1
/* ae46 */                   LDA.zpg ("facho+3_0065");     // get FAC1 mantissa 4
/* ae48 */                   PHA.imp ();                   // save it
/* ae49 */                   LDA.zpg ("facho+2_0064");     // get FAC1 mantissa 3
/* ae4b */                   PHA.imp ();                   // save it
/* ae4c */                   LDA.zpg ("facho+1_0063");     // get FAC1 mantissa 2
/* ae4e */                   PHA.imp ();                   // save it
/* ae4f */                   LDA.zpg ("facho+0_0062");     // get FAC1 mantissa 1
/* ae51 */                   PHA.imp ();                   // save it
/* ae52 */                   LDA.zpg ("facexp_0061");      // get FAC1 exponent
/* ae54 */                   PHA.imp ();                   // save it
/* ae55 */                   JMP.ind ("index+0_0022");     // return, sort of

// ------------------------------------------------------- // do functions
/* ae58 */        _`_ae58`;  LDY.imm (0xff);               // flag function
/* ae5a */                   PLA.imp ();                   // pull precedence byte
/* ae5b */        _`_ae5b`;  BEQ.rel ("_ae80");            // exit if done
/* ae5d */        _`_ae5d`;  CMP.imm (0x64);               // compare previous precedence with $64
/* ae5f */                   BEQ.rel ("_ae64");            // branch if was $64 (< function)
/* ae61 */                   JSR.abs ("_ad8d");            // check if source is numeric, else do type mismatch
/* ae64 */        _`_ae64`;  STY.zpg ("opptr+0_004b");     // save precedence stacked flag
                                                           // pop FAC2 and return
/* ae66 */        _`_ae66`;  PLA.imp ();                   // pop byte
/* ae67 */                   LSR.acc ();                   // shift out comparison evaluation lowest bit
/* ae68 */                   STA.zpg ("tansgn_0012");      // save the comparison evaluation flag
/* ae6a */                   PLA.imp ();                   // pop exponent
/* ae6b */                   STA.zpg ("argexp_0069");      // save FAC2 exponent
/* ae6d */                   PLA.imp ();                   // pop mantissa 1
/* ae6e */                   STA.zpg ("argho+0_006a");     // save FAC2 mantissa 1
/* ae70 */                   PLA.imp ();                   // pop mantissa 2
/* ae71 */                   STA.zpg ("argho+1_006b");     // save FAC2 mantissa 2
/* ae73 */                   PLA.imp ();                   // pop mantissa 3
/* ae74 */                   STA.zpg ("argho+2_006c");     // save FAC2 mantissa 3
/* ae76 */                   PLA.imp ();                   // pop mantissa 4
/* ae77 */                   STA.zpg ("argho+3_006d");     // save FAC2 mantissa 4
/* ae79 */                   PLA.imp ();                   // pop sign
/* ae7a */                   STA.zpg ("argsgn_006e");      // save FAC2 sign (b7)
/* ae7c */                   EOR.zpg ("facsgn_0066");      // EOR FAC1 sign (b7)
/* ae7e */                   STA.zpg ("arisgn_006f");      // save sign compare (FAC1 EOR FAC2)
/* ae80 */        _`_ae80`;  LDA.zpg ("facexp_0061");      // get FAC1 exponent
/* ae82 */                   RTS.imp ();

// ------------------------------------------------------- // get value from line
/* ae83 */    _`eval_ae83`;  JMP.ind ("ieval+0_030a");     // get arithmetic element

// ------------------------------------------------------- // get arithmetic element, the get arithmetic element vector is initialised to point here
/* ae86 */                   LDA.imm (0x00);               // clear byte
/* ae88 */                   STA.zpg ("valtyp_000d");      // clear data type flag, $FF = string, $00 = numeric
/* ae8a */        _`_ae8a`;  JSR.abs ("chrget+0_0073");    // increment and scan memory
/* ae8d */                   BCS.rel ("_ae92");            // branch if not numeric character
                                                           // else numeric string found (e.g. 123)
/* ae8f */        _`_ae8f`;  JMP.abs ("fin_bcf3");         // get FAC1 from string and return
                                                           // get value from line .. continued
                                                           // wasn't a number so ...
/* ae92 */        _`_ae92`;  JSR.abs ("isletc_b113");      // check byte, return Cb = 0 if<"A" or >"Z"
/* ae95 */                   BCC.rel ("_ae9a");            // branch if not variable name
/* ae97 */                   JMP.abs ("isvar_af28");       // variable name set-up and return
/* ae9a */        _`_ae9a`;  CMP.imm (0xff);               // compare with token for PI
/* ae9c */                   BNE.rel ("qdot_aead");        // branch if not PI
/* ae9e */                   LDA.imm (0xa8);               // get PI pointer low byte
/* aea0 */                   LDY.imm (0xae);               // get PI pointer high byte
/* aea2 */                   JSR.abs ("movfm_bba2");       // unpack memory (AY) into FAC1
/* aea5 */                   JMP.abs ("chrget+0_0073");    // increment and scan memory and return

// ------------------------------------------------------- // PI as floating number
                                                           // 3.141592653
/* aea8 */   _`pival_aea8`;  _.bytes(0x82, 0x49, 0x0f, 0xda, 0xa1);

// ------------------------------------------------------- // get value from line .. continued
                                                           // wasn't variable name so ...
/* aead */    _`qdot_aead`;  CMP.imm (0x2e);               // compare with "."
/* aeaf */                   BEQ.rel ("_ae8f");            // if so get FAC1 from string and return, e.g. was .123
                                                           // wasn't .123 so ...
/* aeb1 */                   CMP.imm (0xab);               // compare with token for -
/* aeb3 */                   BEQ.rel ("domin_af0d");       // branch if - token, do set-up for functions
                                                           // wasn't -123 so ...
/* aeb5 */                   CMP.imm (0xaa);               // compare with token for +
/* aeb7 */                   BEQ.rel ("_ae8a");            // branch if + token, +1 = 1 so ignore leading +
                                                           // it wasn't any sort of number so ...
/* aeb9 */                   CMP.imm (0x22);               // compare with "
/* aebb */                   BNE.rel ("_aecc");            // branch if not open quote
                                                           // was open quote so get the enclosed string

// ------------------------------------------------------- // print "..." string to string utility area
/* aebd */        _`_aebd`;  LDA.zpg ("txtptr+0_007a");    // get BASIC execute pointer low byte
/* aebf */                   LDY.zpg ("txtptr+1_007b");    // get BASIC execute pointer high byte
/* aec1 */                   ADC.imm (0x00);               // add carry to low byte
/* aec3 */                   BCC.rel ("_aec6");            // branch if no overflow
/* aec5 */                   INY.imp ();                   // increment high byte
/* aec6 */        _`_aec6`;  JSR.abs ("strlit_b487");      // print " terminated string to utility pointer
/* aec9 */                   JMP.abs ("_b7e2");            // restore BASIC execute pointer from temp and return
                                                           // get value from line .. continued
                                                           // wasn't a string so ...
/* aecc */        _`_aecc`;  CMP.imm (0xa8);               // compare with token for NOT
/* aece */                   BNE.rel ("_aee3");            // branch if not token for NOT
                                                           // was NOT token
/* aed0 */                   LDY.imm (0x18);               // offset to NOT function
/* aed2 */                   BNE.rel ("_af0f");            // do set-up for function then execute, branch always
                                                           // do = compare
/* aed4 */                   JSR.abs ("ayint_b1bf");       // evaluate integer expression, no sign check
/* aed7 */                   LDA.zpg ("facho+3_0065");     // get FAC1 mantissa 4
/* aed9 */                   EOR.imm (0xff);               // invert it
/* aedb */                   TAY.imp ();                   // copy it
/* aedc */                   LDA.zpg ("facho+2_0064");     // get FAC1 mantissa 3
/* aede */                   EOR.imm (0xff);               // invert it
/* aee0 */                   JMP.abs ("givayf_b391");      // convert fixed integer AY to float FAC1 and return
                                                           // get value from line .. continued
                                                           // wasn't a string or NOT so ...
/* aee3 */        _`_aee3`;  CMP.imm (0xa5);               // compare with token for FN
/* aee5 */                   BNE.rel ("_aeea");            // branch if not token for FN
/* aee7 */                   JMP.abs ("fndoer_b3f4");      // else go evaluate FNx
                                                           // get value from line .. continued
                                                           // wasn't a string, NOT or FN so ...
/* aeea */        _`_aeea`;  CMP.imm (0xb4);               // compare with token for SGN
/* aeec */                   BCC.rel ("parchk_aef1");      // if less than SGN token evaluate expression in parentheses
                                                           // else was a function token
/* aeee */                   JMP.abs ("isfun_afa7");       // go set up function references, branch always
                                                           // get value from line .. continued
                                                           // if here it can only be something in brackets so ....
                                                           // evaluate expression within parentheses
/* aef1 */  _`parchk_aef1`;  JSR.abs ("chkopn_aefa");      // scan for "(", else do syntax error then warm start
/* aef4 */                   JSR.abs ("frmevl_ad9e");      // evaluate expression
                                                           // all the 'scan for' routines return the character after the sought character
                                                           // scan for ")", else do syntax error then warm start
/* aef7 */  _`chkcls_aef7`;  LDA.imm (0x29);               // load A with ")"
/* aef9 */                   _.bytes(0x2c);                // makes next line BIT $28A9
                                                           // scan for "(", else do syntax error then warm start
/* aefa */  _`chkopn_aefa`;  LDA.imm (0x28);               // load A with "("
/* aefc */                   _.bytes(0x2c);                // makes next line BIT $2CA9
                                                           // scan for ",", else do syntax error then warm start
/* aefd */        _`_aefd`;  LDA.imm (0x2c);               // load A with ","
                                                           // scan for CHR$(A), else do syntax error then warm start
/* aeff */  _`chkcom_aeff`;  LDY.imm (0x00);               // clear index
/* af01 */                   CMP.iny ("txtptr+0_007a");    // compare with BASIC byte
/* af03 */                   BNE.rel ("synerr_af08");      // if not expected byte do syntax error then warm start
/* af05 */                   JMP.abs ("chrget+0_0073");    // else increment and scan memory and return
                                                           // syntax error then warm start
/* af08 */  _`synerr_af08`;  LDX.imm (0x0b);               // error code $0B, syntax error
/* af0a */                   JMP.abs ("error_a437");       // do error #X then warm start
/* af0d */   _`domin_af0d`;  LDY.imm (0x15);               // set offset from base to > operator
/* af0f */        _`_af0f`;  PLA.imp ();                   // dump return address low byte
/* af10 */                   PLA.imp ();                   // dump return address high byte
/* af11 */                   JMP.abs ("_adfa");            // execute function then continue evaluation

// ------------------------------------------------------- // check address range, return Cb = 1 if address in BASIC ROM
/* af14 */  _`rsvvar_af14`;  SEC.imp ();                   // set carry for subtract
/* af15 */                   LDA.zpg ("facho+2_0064");     // get variable address low byte
/* af17 */                   SBC.imm (0x00);               // subtract $A000 low byte
/* af19 */                   LDA.zpg ("facho+3_0065");     // get variable address high byte
/* af1b */                   SBC.imm (0xa0);               // subtract $A000 high byte
/* af1d */                   BCC.rel ("_af27");            // exit if address < $A000
/* af1f */                   LDA.imm (0xa2);               // get end of BASIC marker low byte
/* af21 */                   SBC.zpg ("facho+2_0064");     // subtract variable address low byte
/* af23 */                   LDA.imm (0xe3);               // get end of BASIC marker high byte
/* af25 */                   SBC.zpg ("facho+3_0065");     // subtract variable address high byte
/* af27 */        _`_af27`;  RTS.imp ();

// ------------------------------------------------------- // variable name set-up
/* af28 */   _`isvar_af28`;  JSR.abs ("ptrget_b08b");      // get variable address
/* af2b */  _`isvret_af2b`;  STA.zpg ("facho+2_0064");     // save variable pointer low byte
/* af2d */                   STY.zpg ("facho+3_0065");     // save variable pointer high byte
/* af2f */                   LDX.zpg ("varnam+0_0045");    // get current variable name first character
/* af31 */                   LDY.zpg ("varnam+1_0046");    // get current variable name second character
/* af33 */                   LDA.zpg ("valtyp_000d");      // get data type flag, $FF = string, $00 = numeric
/* af35 */                   BEQ.rel ("_af5d");            // branch if numeric
                                                           // variable is string
/* af37 */                   LDA.imm (0x00);               // else clear A
/* af39 */                   STA.zpg ("facov_0070");       // clear FAC1 rounding byte
/* af3b */                   JSR.abs ("rsvvar_af14");      // check address range
/* af3e */                   BCC.rel ("_af5c");            // exit if not in BASIC ROM
/* af40 */                   CPX.imm (0x54);               // compare variable name first character with "T"
/* af42 */                   BNE.rel ("_af5c");            // exit if not "T"
/* af44 */                   CPY.imm (0xc9);               // compare variable name second character with "I$"
/* af46 */                   BNE.rel ("_af5c");            // exit if not "I$"
                                                           // variable name was "TI$"
/* af48 */  _`tisasc_af48`;  JSR.abs ("_af84");            // read real time clock into FAC1 mantissa, 0HML
/* af4b */                   STY.zpg ("tempf2+2_005e");    // clear exponent count adjust
/* af4d */                   DEY.imp ();                   // Y = $FF
/* af4e */                   STY.zpg ("fbufpt+0_0071");    // set output string index, -1 to allow for pre increment
/* af50 */                   LDY.imm (0x06);               // HH:MM:SS is six digits
/* af52 */                   STY.zpg ("tempf2+1_005d");    // set number of characters before the decimal point
/* af54 */                   LDY.imm (0x24);
                                                           // index to jiffy conversion table
/* af56 */                   JSR.abs ("foutim_be68");      // convert jiffy count to string
/* af59 */                   JMP.abs ("_b46f");            // exit via STR$() code tail
/* af5c */        _`_af5c`;  RTS.imp ();
                                                           // variable name set-up, variable is numeric
/* af5d */        _`_af5d`;  BIT.zpg ("intflg_000e");      // test data type flag, $80 = integer, $00 = float
/* af5f */                   BPL.rel ("_af6e");            // branch if float
/* af61 */                   LDY.imm (0x00);               // clear index
/* af63 */                   LDA.iny ("facho+2_0064");     // get integer variable low byte
/* af65 */                   TAX.imp ();                   // copy to X
/* af66 */                   INY.imp ();                   // increment index
/* af67 */                   LDA.iny ("facho+2_0064");     // get integer variable high byte
/* af69 */                   TAY.imp ();                   // copy to Y
/* af6a */                   TXA.imp ();                   // copy loa byte to A
/* af6b */                   JMP.abs ("givayf_b391");      // convert fixed integer AY to float FAC1 and return
                                                           // variable name set-up, variable is float
/* af6e */        _`_af6e`;  JSR.abs ("rsvvar_af14");      // check address range
/* af71 */                   BCC.rel ("_afa0");            // if not in BASIC ROM get pointer and unpack into FAC1
/* af73 */                   CPX.imm (0x54);               // compare variable name first character with "T"
/* af75 */                   BNE.rel ("_af92");            // branch if not "T"
/* af77 */                   CPY.imm (0x49);               // compare variable name second character with "I"
/* af79 */                   BNE.rel ("_afa0");            // branch if not "I"
                                                           // variable name was "TI"
/* af7b */                   JSR.abs ("_af84");            // read real time clock into FAC1 mantissa, 0HML
/* af7e */                   TYA.imp ();                   // clear A
/* af7f */                   LDX.imm (0xa0);               // set exponent to 32 bit value
/* af81 */                   JMP.abs ("_bc4f");            // set exponent = X and normalise FAC1

// ------------------------------------------------------- // read real time clock into FAC1 mantissa, 0HML
/* af84 */        _`_af84`;  JSR.abs ("rdtim_ffde");       // read real time clock
/* af87 */                   STX.zpg ("facho+2_0064");     // save jiffy clock mid byte as  FAC1 mantissa 3
/* af89 */                   STY.zpg ("facho+1_0063");     // save jiffy clock high byte as  FAC1 mantissa 2
/* af8b */                   STA.zpg ("facho+3_0065");     // save jiffy clock low byte as  FAC1 mantissa 4
/* af8d */                   LDY.imm (0x00);               // clear Y
/* af8f */                   STY.zpg ("facho+0_0062");     // clear FAC1 mantissa 1
/* af91 */                   RTS.imp ();
                                                           // variable name set-up, variable is float and not "Tx"
/* af92 */        _`_af92`;  CPX.imm (0x53);               // compare variable name first character with "S"
/* af94 */                   BNE.rel ("_afa0");            // if not "S" go do normal floating variable
/* af96 */                   CPY.imm (0x54);               // compare variable name second character with "
/* af98 */                   BNE.rel ("_afa0");            // if not "T" go do normal floating variable
                                                           // variable name was "ST"
/* af9a */                   JSR.abs ("readst_ffb7");      // read I/O status word
/* af9d */                   JMP.abs ("_bc3c");            // save A as integer byte and return
                                                           // variable is float
/* afa0 */        _`_afa0`;  LDA.zpg ("facho+2_0064");     // get variable pointer low byte
/* afa2 */                   LDY.zpg ("facho+3_0065");     // get variable pointer high byte
/* afa4 */                   JMP.abs ("movfm_bba2");       // unpack memory (AY) into FAC1

// ------------------------------------------------------- // get value from line continued
                                                           // only functions left so ..
                                                           // set up function references
/* afa7 */   _`isfun_afa7`;  ASL.acc ();                   // *2 (2 bytes per function address)
/* afa8 */                   PHA.imp ();                   // save function offset
/* afa9 */                   TAX.imp ();                   // copy function offset
/* afaa */                   JSR.abs ("chrget+0_0073");    // increment and scan memory
/* afad */                   CPX.imm (0x8f);               // compare function offset to CHR$ token offset+1
/* afaf */                   BCC.rel ("numfun_afd1");      // branch if < LEFT$ (can not be =)
                                                           // get value from line .. continued
                                                           // was LEFT$, RIGHT$ or MID$ so..
/* afb1 */  _`strfun_afb1`;  JSR.abs ("chkopn_aefa");      // scan for "(", else do syntax error then warm start
/* afb4 */                   JSR.abs ("frmevl_ad9e");      // evaluate, should be string, expression
/* afb7 */                   JSR.abs ("_aefd");            // scan for ",", else do syntax error then warm start
/* afba */                   JSR.abs ("_ad8f");            // check if source is string, else do type mismatch
/* afbd */                   PLA.imp ();                   // restore function offset
/* afbe */                   TAX.imp ();                   // copy it
/* afbf */                   LDA.zpg ("facho+3_0065");     // get descriptor pointer high byte
/* afc1 */                   PHA.imp ();                   // push string pointer high byte
/* afc2 */                   LDA.zpg ("facho+2_0064");     // get descriptor pointer low byte
/* afc4 */                   PHA.imp ();                   // push string pointer low byte
/* afc5 */                   TXA.imp ();                   // restore function offset
/* afc6 */                   PHA.imp ();                   // save function offset
/* afc7 */                   JSR.abs ("_b79e");            // get byte parameter
/* afca */                   PLA.imp ();                   // restore function offset
/* afcb */                   TAY.imp ();                   // copy function offset
/* afcc */                   TXA.imp ();                   // copy byte parameter to A
/* afcd */                   PHA.imp ();                   // push byte parameter
/* afce */                   JMP.abs ("_afd6");            // go call function
                                                           // get value from line .. continued
                                                           // was SGN() to CHR$() so..
/* afd1 */  _`numfun_afd1`;  JSR.abs ("parchk_aef1");      // evaluate expression within parentheses
/* afd4 */                   PLA.imp ();                   // restore function offset
/* afd5 */                   TAY.imp ();                   // copy to index
/* afd6 */        _`_afd6`;  LDA.aby ("_9fea");            // get function jump vector low byte
/* afd9 */                   STA.zpg ("jmper+1_0055");     // save functions jump vector low byte
/* afdb */                   LDA.aby ("_9feb");            // get function jump vector high byte
/* afde */                   STA.zpg ("jmper+2_0056");     // save functions jump vector high byte
/* afe0 */                   JSR.abs ("jmper+0_0054");     // do function call
/* afe3 */                   JMP.abs ("_ad8d");            // check if source is numeric and RTS, else do type mismatch
                                                           // string functions avoid this by dumping the return address

// ------------------------------------------------------- // perform OR
                                                           // this works because NOT(NOT(x) AND NOT(y)) = x OR y
/* afe6 */    _`orop_afe6`;  LDY.imm (0xff);               // set Y for OR
/* afe8 */                   _.bytes(0x2c);                // makes next line BIT $00A0

// ------------------------------------------------------- // perform AND
/* afe9 */   _`andop_afe9`;  LDY.imm (0x00);               // clear Y for AND
/* afeb */                   STY.zpg ("count_000b");       // set AND/OR invert value
/* afed */                   JSR.abs ("ayint_b1bf");       // evaluate integer expression, no sign check
/* aff0 */                   LDA.zpg ("facho+2_0064");     // get FAC1 mantissa 3
/* aff2 */                   EOR.zpg ("count_000b");       // EOR low byte
/* aff4 */                   STA.zpg ("charac_0007");      // save it
/* aff6 */                   LDA.zpg ("facho+3_0065");     // get FAC1 mantissa 4
/* aff8 */                   EOR.zpg ("count_000b");       // EOR high byte
/* affa */                   STA.zpg ("endchr_0008");      // save it
/* affc */                   JSR.abs ("movfa_bbfc");       // copy FAC2 to FAC1, get 2nd value in expression
/* afff */                   JSR.abs ("ayint_b1bf");       // evaluate integer expression, no sign check
/* b002 */                   LDA.zpg ("facho+3_0065");     // get FAC1 mantissa 4
/* b004 */                   EOR.zpg ("count_000b");       // EOR high byte
/* b006 */                   AND.zpg ("endchr_0008");      // AND with expression 1 high byte
/* b008 */                   EOR.zpg ("count_000b");       // EOR result high byte
/* b00a */                   TAY.imp ();                   // save in Y
/* b00b */                   LDA.zpg ("facho+2_0064");     // get FAC1 mantissa 3
/* b00d */                   EOR.zpg ("count_000b");       // EOR low byte
/* b00f */                   AND.zpg ("charac_0007");      // AND with expression 1 low byte
/* b011 */                   EOR.zpg ("count_000b");       // EOR result low byte
/* b013 */                   JMP.abs ("givayf_b391");      // convert fixed integer AY to float FAC1 and return

// ------------------------------------------------------- // perform comparisons
                                                           // do < compare
/* b016 */   _`dorel_b016`;  JSR.abs ("_ad90");            // type match check, set C for string
/* b019 */                   BCS.rel ("strrel_b02e");      // branch if string
                                                           // do numeric < compare
/* b01b */  _`numrel_b01b`;  LDA.zpg ("argsgn_006e");      // get FAC2 sign (b7)
/* b01d */                   ORA.imm (0x7f);               // set all non sign bits
/* b01f */                   AND.zpg ("argho+0_006a");     // and FAC2 mantissa 1 (AND in sign bit)
/* b021 */                   STA.zpg ("argho+0_006a");     // save FAC2 mantissa 1
/* b023 */                   LDA.imm (0x69);               // set pointer low byte to FAC2
/* b025 */                   LDY.imm (0x00);               // set pointer high byte to FAC2
/* b027 */                   JSR.abs ("fcomp_bc5b");       // compare FAC1 with (AY)
/* b02a */                   TAX.imp ();                   // copy the result
/* b02b */                   JMP.abs ("_b061");            // go evaluate result
                                                           // do string < compare
/* b02e */  _`strrel_b02e`;  LDA.imm (0x00);               // clear byte
/* b030 */                   STA.zpg ("valtyp_000d");      // clear data type flag, $FF = string, $00 = numeric
/* b032 */                   DEC.zpg ("opmask_004d");      // clear < bit in comparrison evaluation flag
/* b034 */                   JSR.abs ("_b6a6");            // pop string off descriptor stack, or from top of string
                                                           // space returns with A = length, X = pointer low byte,
                                                           // Y = pointer high byte
/* b037 */                   STA.zpg ("facexp_0061");      // save length
/* b039 */                   STX.zpg ("facho+0_0062");     // save string pointer low byte
/* b03b */                   STY.zpg ("facho+1_0063");     // save string pointer high byte
/* b03d */                   LDA.zpg ("argho+2_006c");     // get descriptor pointer low byte
/* b03f */                   LDY.zpg ("argho+3_006d");     // get descriptor pointer high byte
/* b041 */                   JSR.abs ("_b6aa");            // pop (YA) descriptor off stack or from top of string space
                                                           // returns with A = length, X = pointer low byte,
                                                           // Y = pointer high byte
/* b044 */                   STX.zpg ("argho+2_006c");     // save string pointer low byte
/* b046 */                   STY.zpg ("argho+3_006d");     // save string pointer high byte
/* b048 */                   TAX.imp ();                   // copy length
/* b049 */                   SEC.imp ();                   // set carry for subtract
/* b04a */                   SBC.zpg ("facexp_0061");      // subtract string 1 length
/* b04c */                   BEQ.rel ("_b056");            // branch if str 1 length = string 2 length
/* b04e */                   LDA.imm (0x01);               // set str 1 length > string 2 length
/* b050 */                   BCC.rel ("_b056");            // branch if so
/* b052 */                   LDX.zpg ("facexp_0061");      // get string 1 length
/* b054 */                   LDA.imm (0xff);               // set str 1 length < string 2 length
/* b056 */        _`_b056`;  STA.zpg ("facsgn_0066");      // save length compare
/* b058 */                   LDY.imm (0xff);               // set index
/* b05a */                   INX.imp ();                   // adjust for loop
/* b05b */        _`_b05b`;  INY.imp ();                   // increment index
/* b05c */                   DEX.imp ();                   // decrement count
/* b05d */                   BNE.rel ("_b066");            // branch if still bytes to do
/* b05f */                   LDX.zpg ("facsgn_0066");      // get length compare back
/* b061 */        _`_b061`;  BMI.rel ("_b072");            // branch if str 1 < str 2
/* b063 */                   CLC.imp ();                   // flag str 1 <= str 2
/* b064 */                   BCC.rel ("_b072");            // go evaluate result
/* b066 */        _`_b066`;  LDA.iny ("argho+2_006c");     // get string 2 byte
/* b068 */                   CMP.iny ("facho+0_0062");     // compare with string 1 byte
/* b06a */                   BEQ.rel ("_b05b");            // loop if bytes =
/* b06c */                   LDX.imm (0xff);               // set str 1 < string 2
/* b06e */                   BCS.rel ("_b072");            // branch if so
/* b070 */                   LDX.imm (0x01);               // set str 1 > string 2
/* b072 */        _`_b072`;  INX.imp ();                   // x = 0, 1 or 2
/* b073 */                   TXA.imp ();                   // copy to A
/* b074 */                   ROL.acc ();                   // * 2 (1, 2 or 4)
/* b075 */                   AND.zpg ("tansgn_0012");      // AND with the comparison evaluation flag
/* b077 */                   BEQ.rel ("_b07b");            // branch if 0 (compare is false)
/* b079 */                   LDA.imm (0xff);               // else set result true
/* b07b */        _`_b07b`;  JMP.abs ("_bc3c");            // save A as integer byte and return
/* b07e */        _`_b07e`;  JSR.abs ("_aefd");            // scan for ",", else do syntax error then warm start

// ------------------------------------------------------- // perform DIM
/* b081 */     _`dim_b081`;  TAX.imp ();                   // copy "DIM" flag to X
/* b082 */                   JSR.abs ("_b090");            // search for variable
/* b085 */                   JSR.abs ("chrgot_0079");      // scan memory
/* b088 */                   BNE.rel ("_b07e");            // scan for "," and loop if not null
/* b08a */                   RTS.imp ();

// ------------------------------------------------------- // search for variable
/* b08b */  _`ptrget_b08b`;  LDX.imm (0x00);               // set DIM flag = $00
/* b08d */                   JSR.abs ("chrgot_0079");      // scan memory, 1st character
/* b090 */        _`_b090`;  STX.zpg ("dimflg_000c");      // save DIM flag
/* b092 */        _`_b092`;  STA.zpg ("varnam+0_0045");    // save 1st character
/* b094 */                   JSR.abs ("chrgot_0079");      // scan memory
/* b097 */                   JSR.abs ("isletc_b113");      // check byte, return Cb = 0 if<"A" or >"Z"
/* b09a */                   BCS.rel ("_b09f");            // branch if ok
/* b09c */        _`_b09c`;  JMP.abs ("synerr_af08");      // else syntax error then warm start
                                                           // was variable name so ...
/* b09f */        _`_b09f`;  LDX.imm (0x00);               // clear 2nd character temp
/* b0a1 */                   STX.zpg ("valtyp_000d");      // clear data type flag, $FF = string, $00 = numeric
/* b0a3 */                   STX.zpg ("intflg_000e");      // clear data type flag, $80 = integer, $00 = float
/* b0a5 */                   JSR.abs ("chrget+0_0073");    // increment and scan memory, 2nd character
/* b0a8 */                   BCC.rel ("_b0af");            // if character = "0"-"9" (ok) go save 2nd character
                                                           // 2nd character wasn't "0" to "9" so ...
/* b0aa */                   JSR.abs ("isletc_b113");      // check byte, return Cb = 0 if<"A" or >"Z"
/* b0ad */                   BCC.rel ("_b0ba");            // branch if <"A" or >"Z" (go check if string)
/* b0af */        _`_b0af`;  TAX.imp ();                   // copy 2nd character
                                                           // ignore further (valid) characters in the variable name
/* b0b0 */        _`_b0b0`;  JSR.abs ("chrget+0_0073");    // increment and scan memory, 3rd character
/* b0b3 */                   BCC.rel ("_b0b0");            // loop if character = "0"-"9" (ignore)
/* b0b5 */                   JSR.abs ("isletc_b113");      // check byte, return Cb = 0 if<"A" or >"Z"
/* b0b8 */                   BCS.rel ("_b0b0");            // loop if character = "A"-"Z" (ignore)
                                                           // check if string variable
/* b0ba */        _`_b0ba`;  CMP.imm (0x24);               // compare with "$"
/* b0bc */                   BNE.rel ("_b0c4");            // branch if not string
                                                           // type is string
/* b0be */                   LDA.imm (0xff);               // set data type = string
/* b0c0 */                   STA.zpg ("valtyp_000d");      // set data type flag, $FF = string, $00 = numeric
/* b0c2 */                   BNE.rel ("_b0d4");            // branch always
/* b0c4 */        _`_b0c4`;  CMP.imm (0x25);               // compare with "%"
/* b0c6 */                   BNE.rel ("_b0db");            // branch if not integer
/* b0c8 */                   LDA.zpg ("subflg_0010");      // get subscript/FNX flag
/* b0ca */                   BNE.rel ("_b09c");            // if ?? do syntax error then warm start
/* b0cc */                   LDA.imm (0x80);               // set integer type
/* b0ce */                   STA.zpg ("intflg_000e");      // set data type = integer
/* b0d0 */                   ORA.zpg ("varnam+0_0045");    // OR current variable name first byte
/* b0d2 */                   STA.zpg ("varnam+0_0045");    // save current variable name first byte
/* b0d4 */        _`_b0d4`;  TXA.imp ();                   // get 2nd character back
/* b0d5 */                   ORA.imm (0x80);               // set top bit, indicate string or integer variable
/* b0d7 */                   TAX.imp ();                   // copy back to 2nd character temp
/* b0d8 */                   JSR.abs ("chrget+0_0073");    // increment and scan memory
/* b0db */        _`_b0db`;  STX.zpg ("varnam+1_0046");    // save 2nd character
/* b0dd */                   SEC.imp ();                   // set carry for subtract
/* b0de */                   ORA.zpg ("subflg_0010");      // or with subscript/FNX flag - or FN name
/* b0e0 */                   SBC.imm (0x28);               // subtract "("
/* b0e2 */                   BNE.rel ("ordvar_b0e7");      // branch if not "("
/* b0e4 */                   JMP.abs ("isary_b1d1");       // go find, or make, array
                                                           // either find or create variable
                                                           // variable name wasn't xx(.... so look for plain variable
/* b0e7 */  _`ordvar_b0e7`;  LDY.imm (0x00);               // clear A
/* b0e9 */                   STY.zpg ("subflg_0010");      // clear subscript/FNX flag
/* b0eb */                   LDA.zpg ("vartab+0_002d");    // get start of variables low byte
/* b0ed */                   LDX.zpg ("vartab+1_002e");    // get start of variables high byte
/* b0ef */        _`_b0ef`;  STX.zpg ("tempf2+4_0060");    // save search address high byte
/* b0f1 */        _`_b0f1`;  STA.zpg ("tempf2+3_005f");    // save search address low byte
/* b0f3 */                   CPX.zpg ("arytab+1_0030");    // compare with end of variables high byte
/* b0f5 */                   BNE.rel ("_b0fb");            // skip next compare if <>
                                                           // high addresses were = so compare low addresses
/* b0f7 */                   CMP.zpg ("arytab+0_002f");    // compare low address with end of variables low byte
/* b0f9 */                   BEQ.rel ("notfns_b11d");      // if not found go make new variable
/* b0fb */        _`_b0fb`;  LDA.zpg ("varnam+0_0045");    // get 1st character of variable to find
/* b0fd */                   CMP.iny ("tempf2+3_005f");    // compare with variable name 1st character
/* b0ff */                   BNE.rel ("_b109");            // branch if no match
                                                           // 1st characters match so compare 2nd character
/* b101 */                   LDA.zpg ("varnam+1_0046");    // get 2nd character of variable to find
/* b103 */                   INY.imp ();                   // index to point to variable name 2nd character
/* b104 */                   CMP.iny ("tempf2+3_005f");    // compare with variable name 2nd character
/* b106 */                   BEQ.rel ("finptr_b185");      // branch if match (found variable)
/* b108 */                   DEY.imp ();                   // else decrement index (now = $00)
/* b109 */        _`_b109`;  CLC.imp ();                   // clear carry for add
/* b10a */                   LDA.zpg ("tempf2+3_005f");    // get search address low byte
/* b10c */                   ADC.imm (0x07);               // +7, offset to next variable name
/* b10e */                   BCC.rel ("_b0f1");            // loop if no overflow to high byte
/* b110 */                   INX.imp ();                   // else increment high byte
/* b111 */                   BNE.rel ("_b0ef");            // loop always, RAM doesn't extend to $FFFF
                                                           // check byte, return Cb = 0 if<"A" or >"Z"
/* b113 */  _`isletc_b113`;  CMP.imm (0x41);               // compare with "A"
/* b115 */                   BCC.rel ("_b11c");            // exit if less
                                                           // carry is set
/* b117 */                   SBC.imm (0x5b);               // subtract "Z"+1
/* b119 */                   SEC.imp ();                   // set carry
/* b11a */                   SBC.imm (0xa5);               // subtract $A5 (restore byte)
                                                           // carry clear if byte > $5A
/* b11c */        _`_b11c`;  RTS.imp ();
                                                           // reached end of variable memory without match
                                                           // ... so create new variable
/* b11d */  _`notfns_b11d`;  PLA.imp ();                   // pop return address low byte
/* b11e */                   PHA.imp ();                   // push return address low byte
/* b11f */                   CMP.imm (0x2a);               // compare with expected calling routine return low byte
/* b121 */                   BNE.rel ("notevl_b128");      // if not get variable go create new variable
                                                           // this will only drop through if the call was from $AF28 and is only called
                                                           // from there if it is searching for a variable from the right hand side of a LET a=b
                                                           // statement, it prevents the creation of variables not assigned a value.
                                                           // value returned by this is either numeric zero, exponent byte is $00, or null string,
                                                           // descriptor length byte is $00. in fact a pointer to any $00 byte would have done.
                                                           // else return dummy null value
/* b123 */        _`_b123`;  LDA.imm (0x13);               // set result pointer low byte
/* b125 */                   LDY.imm (0xbf);               // set result pointer high byte
/* b127 */                   RTS.imp ();
                                                           // create new numeric variable
/* b128 */  _`notevl_b128`;  LDA.zpg ("varnam+0_0045");    // get variable name first character
/* b12a */                   LDY.zpg ("varnam+1_0046");    // get variable name second character
/* b12c */                   CMP.imm (0x54);               // compare first character with "T"
/* b12e */                   BNE.rel ("_b13b");            // branch if not "T"
/* b130 */                   CPY.imm (0xc9);               // compare second character with "I$"
/* b132 */                   BEQ.rel ("_b123");            // if "I$" return null value
/* b134 */                   CPY.imm (0x49);               // compare second character with "I"
/* b136 */                   BNE.rel ("_b13b");            // branch if not "I"
                                                           // if name is "TI" do syntax error
/* b138 */        _`_b138`;  JMP.abs ("synerr_af08");      // do syntax error then warm start
/* b13b */        _`_b13b`;  CMP.imm (0x53);               // compare first character with "S"
/* b13d */                   BNE.rel ("_b143");            // branch if not "S"
/* b13f */                   CPY.imm (0x54);               // compare second character with "T"
/* b141 */                   BEQ.rel ("_b138");            // if name is "ST" do syntax error
/* b143 */        _`_b143`;  LDA.zpg ("arytab+0_002f");    // get end of variables low byte
/* b145 */                   LDY.zpg ("arytab+1_0030");    // get end of variables high byte
/* b147 */                   STA.zpg ("tempf2+3_005f");    // save old block start low byte
/* b149 */                   STY.zpg ("tempf2+4_0060");    // save old block start high byte
/* b14b */                   LDA.zpg ("strend+0_0031");    // get end of arrays low byte
/* b14d */                   LDY.zpg ("strend+1_0032");    // get end of arrays high byte
/* b14f */                   STA.zpg ("tempf1+3_005a");    // save old block end low byte
/* b151 */                   STY.zpg ("tempf1+4_005b");    // save old block end high byte
/* b153 */                   CLC.imp ();                   // clear carry for add
/* b154 */                   ADC.imm (0x07);               // +7, space for one variable
/* b156 */                   BCC.rel ("_b159");            // branch if no overflow to high byte
/* b158 */                   INY.imp ();                   // else increment high byte
/* b159 */        _`_b159`;  STA.zpg ("tempf1+1_0058");    // set new block end low byte
/* b15b */                   STY.zpg ("tempf1+2_0059");    // set new block end high byte
/* b15d */                   JSR.abs ("bltu_a3b8");        // open up space in memory
/* b160 */                   LDA.zpg ("tempf1+1_0058");    // get new start low byte
/* b162 */                   LDY.zpg ("tempf1+2_0059");    // get new start high byte (-$100)
/* b164 */                   INY.imp ();                   // correct high byte
/* b165 */                   STA.zpg ("arytab+0_002f");    // set end of variables low byte
/* b167 */                   STY.zpg ("arytab+1_0030");    // set end of variables high byte
/* b169 */                   LDY.imm (0x00);               // clear index
/* b16b */                   LDA.zpg ("varnam+0_0045");    // get variable name 1st character
/* b16d */                   STA.iny ("tempf2+3_005f");    // save variable name 1st character
/* b16f */                   INY.imp ();                   // increment index
/* b170 */                   LDA.zpg ("varnam+1_0046");    // get variable name 2nd character
/* b172 */                   STA.iny ("tempf2+3_005f");    // save variable name 2nd character
/* b174 */                   LDA.imm (0x00);               // clear A
/* b176 */                   INY.imp ();                   // increment index
/* b177 */                   STA.iny ("tempf2+3_005f");    // initialise variable byte
/* b179 */                   INY.imp ();                   // increment index
/* b17a */                   STA.iny ("tempf2+3_005f");    // initialise variable byte
/* b17c */                   INY.imp ();                   // increment index
/* b17d */                   STA.iny ("tempf2+3_005f");    // initialise variable byte
/* b17f */                   INY.imp ();                   // increment index
/* b180 */                   STA.iny ("tempf2+3_005f");    // initialise variable byte
/* b182 */                   INY.imp ();                   // increment index
/* b183 */                   STA.iny ("tempf2+3_005f");    // initialise variable byte
                                                           // found a match for variable
/* b185 */  _`finptr_b185`;  LDA.zpg ("tempf2+3_005f");    // get variable address low byte
/* b187 */                   CLC.imp ();                   // clear carry for add
/* b188 */                   ADC.imm (0x02);               // +2, offset past variable name bytes
/* b18a */                   LDY.zpg ("tempf2+4_0060");    // get variable address high byte
/* b18c */                   BCC.rel ("_b18f");            // branch if no overflow from add
/* b18e */                   INY.imp ();                   // else increment high byte
/* b18f */        _`_b18f`;  STA.zpg ("varpnt+0_0047");    // save current variable pointer low byte
/* b191 */                   STY.zpg ("varpnt+1_0048");    // save current variable pointer high byte
/* b193 */                   RTS.imp ();
                                                           // set-up array pointer to first element in array
/* b194 */  _`aryget_b194`;  LDA.zpg ("count_000b");       // get # of dimensions (1, 2 or 3)
/* b196 */                   ASL.acc ();                   // *2 (also clears the carry !)
/* b197 */                   ADC.imm (0x05);               // +5 (result is 7, 9 or 11 here)
/* b199 */                   ADC.zpg ("tempf2+3_005f");    // add array start pointer low byte
/* b19b */                   LDY.zpg ("tempf2+4_0060");    // get array pointer high byte
/* b19d */                   BCC.rel ("_b1a0");            // branch if no overflow
/* b19f */                   INY.imp ();                   // else increment high byte
/* b1a0 */        _`_b1a0`;  STA.zpg ("tempf1+1_0058");    // save array data pointer low byte
/* b1a2 */                   STY.zpg ("tempf1+2_0059");    // save array data pointer high byte
/* b1a4 */                   RTS.imp ();

// ------------------------------------------------------- // -32768 as floating value
                                                           // -32768
/* b1a5 */  _`n32768_b1a5`;  _.bytes(0x90, 0x80, 0x00, 0x00, 0x00);

// ------------------------------------------------------- // convert float to fixed
/* b1aa */  _`facinx_b1aa`;  JSR.abs ("ayint_b1bf");       // evaluate integer expression, no sign check
/* b1ad */                   LDA.zpg ("facho+2_0064");     // get result low byte
/* b1af */                   LDY.zpg ("facho+3_0065");     // get result high byte
/* b1b1 */                   RTS.imp ();

// ------------------------------------------------------- // evaluate integer expression
/* b1b2 */  _`intidx_b1b2`;  JSR.abs ("chrget+0_0073");    // increment and scan memory
/* b1b5 */                   JSR.abs ("frmevl_ad9e");      // evaluate expression
                                                           // evaluate integer expression, sign check
/* b1b8 */        _`_b1b8`;  JSR.abs ("_ad8d");            // check if source is numeric, else do type mismatch
/* b1bb */                   LDA.zpg ("facsgn_0066");      // get FAC1 sign (b7)
/* b1bd */                   BMI.rel ("_b1cc");            // do illegal quantity error if -ve
                                                           // evaluate integer expression, no sign check
/* b1bf */   _`ayint_b1bf`;  LDA.zpg ("facexp_0061");      // get FAC1 exponent
/* b1c1 */                   CMP.imm (0x90);               // compare with exponent = 2^16 (n>2^15)
/* b1c3 */                   BCC.rel ("_b1ce");            // if n<2^16 go convert FAC1 floating to fixed and return
/* b1c5 */                   LDA.imm (0xa5);               // set pointer low byte to -32768
/* b1c7 */                   LDY.imm (0xb1);               // set pointer high byte to -32768
/* b1c9 */                   JSR.abs ("fcomp_bc5b");       // compare FAC1 with (AY)
/* b1cc */        _`_b1cc`;  BNE.rel ("fcerr_b248");       // if <> do illegal quantity error then warm start
/* b1ce */        _`_b1ce`;  JMP.abs ("qint_bc9b");        // convert FAC1 floating to fixed and return

// ------------------------------------------------------- // find or make array
                                                           // an array is stored as follows

                                                           // array name             two bytes with the following patterns for different types
                                                           //                        1st char    2nd char
                                                           //                           b7          b7       type             element size
                                                           //                        --------    --------    -----            ------------
                                                           //                           0           0        floating point   5
                                                           //                           0           1        string           3
                                                           //                           1           1        integer          2
                                                           // offset to next array   word
                                                           // dimension count        byte
                                                           // 1st dimension size     word, this is the number of elements including 0
                                                           // 2nd dimension size     word, only here if the array has a second dimension
                                                           // 2nd dimension size     word, only here if the array has a third dimension
                                                           //                        note: the dimension size word is in high byte low byte
                                                           //                        format, not like most 6502 words
                                                           // then for each element the required number of bytes given as the element size above
/* b1d1 */   _`isary_b1d1`;  LDA.zpg ("dimflg_000c");      // get DIM flag
/* b1d3 */                   ORA.zpg ("intflg_000e");      // OR with data type flag
/* b1d5 */                   PHA.imp ();                   // push it
/* b1d6 */                   LDA.zpg ("valtyp_000d");      // get data type flag, $FF = string, $00 = numeric
/* b1d8 */                   PHA.imp ();                   // push it
/* b1d9 */                   LDY.imm (0x00);               // clear dimensions count
                                                           // now get the array dimension(s) and stack it (them) before the data type and DIM flag
/* b1db */        _`_b1db`;  TYA.imp ();                   // copy dimensions count
/* b1dc */                   PHA.imp ();                   // save it
/* b1dd */                   LDA.zpg ("varnam+1_0046");    // get array name 2nd byte
/* b1df */                   PHA.imp ();                   // save it
/* b1e0 */                   LDA.zpg ("varnam+0_0045");    // get array name 1st byte
/* b1e2 */                   PHA.imp ();                   // save it
/* b1e3 */                   JSR.abs ("intidx_b1b2");      // evaluate integer expression
/* b1e6 */                   PLA.imp ();                   // pull array name 1st byte
/* b1e7 */                   STA.zpg ("varnam+0_0045");    // restore array name 1st byte
/* b1e9 */                   PLA.imp ();                   // pull array name 2nd byte
/* b1ea */                   STA.zpg ("varnam+1_0046");    // restore array name 2nd byte
/* b1ec */                   PLA.imp ();                   // pull dimensions count
/* b1ed */                   TAY.imp ();                   // restore it
/* b1ee */                   TSX.imp ();                   // copy stack pointer
/* b1ef */                   LDA.abx ("bad+2_0102");       // get DIM flag
/* b1f2 */                   PHA.imp ();                   // push it
/* b1f3 */                   LDA.abx ("bad+1_0101");       // get data type flag
/* b1f6 */                   PHA.imp ();                   // push it
/* b1f7 */                   LDA.zpg ("facho+2_0064");     // get this dimension size high byte
/* b1f9 */                   STA.abx ("bad+2_0102");       // stack before flag bytes
/* b1fc */                   LDA.zpg ("facho+3_0065");     // get this dimension size low byte
/* b1fe */                   STA.abx ("bad+1_0101");       // stack before flag bytes
/* b201 */                   INY.imp ();                   // increment dimensions count
/* b202 */                   JSR.abs ("chrgot_0079");      // scan memory
/* b205 */                   CMP.imm (0x2c);               // compare with ","
/* b207 */                   BEQ.rel ("_b1db");            // if found go do next dimension
/* b209 */                   STY.zpg ("count_000b");       // store dimensions count
/* b20b */                   JSR.abs ("chkcls_aef7");      // scan for ")", else do syntax error then warm start
/* b20e */                   PLA.imp ();                   // pull data type flag
/* b20f */                   STA.zpg ("valtyp_000d");      // restore data type flag, $FF = string, $00 = numeric
/* b211 */                   PLA.imp ();                   // pull data type flag
/* b212 */                   STA.zpg ("intflg_000e");      // restore data type flag, $80 = integer, $00 = float
/* b214 */                   AND.imm (0x7f);               // mask dim flag
/* b216 */                   STA.zpg ("dimflg_000c");      // restore DIM flag
/* b218 */  _`fndary_b218`;  LDX.zpg ("arytab+0_002f");    // set end of variables low byte
                                                           // (array memory start low byte)
/* b21a */                   LDA.zpg ("arytab+1_0030");    // set end of variables high byte
                                                           // (array memory start high byte)
                                                           // now check to see if we are at the end of array memory, we would be if there were
                                                           // no arrays.
/* b21c */        _`_b21c`;  STX.zpg ("tempf2+3_005f");    // save as array start pointer low byte
/* b21e */                   STA.zpg ("tempf2+4_0060");    // save as array start pointer high byte
/* b220 */                   CMP.zpg ("strend+1_0032");    // compare with end of arrays high byte
/* b222 */                   BNE.rel ("_b228");            // branch if not reached array memory end
/* b224 */                   CPX.zpg ("strend+0_0031");    // else compare with end of arrays low byte
/* b226 */                   BEQ.rel ("notfdd_b261");      // go build array if not found
                                                           // search for array
/* b228 */        _`_b228`;  LDY.imm (0x00);               // clear index
/* b22a */                   LDA.iny ("tempf2+3_005f");    // get array name first byte
/* b22c */                   INY.imp ();                   // increment index to second name byte
/* b22d */                   CMP.zpg ("varnam+0_0045");    // compare with this array name first byte
/* b22f */                   BNE.rel ("_b237");            // branch if no match
/* b231 */                   LDA.zpg ("varnam+1_0046");    // else get this array name second byte
/* b233 */                   CMP.iny ("tempf2+3_005f");    // compare with array name second byte
/* b235 */                   BEQ.rel ("_b24d");            // array found so branch
                                                           // no match
/* b237 */        _`_b237`;  INY.imp ();                   // increment index
/* b238 */                   LDA.iny ("tempf2+3_005f");    // get array size low byte
/* b23a */                   CLC.imp ();                   // clear carry for add
/* b23b */                   ADC.zpg ("tempf2+3_005f");    // add array start pointer low byte
/* b23d */                   TAX.imp ();                   // copy low byte to X
/* b23e */                   INY.imp ();                   // increment index
/* b23f */                   LDA.iny ("tempf2+3_005f");    // get array size high byte
/* b241 */                   ADC.zpg ("tempf2+4_0060");    // add array memory pointer high byte
/* b243 */                   BCC.rel ("_b21c");            // if no overflow go check next array

// ------------------------------------------------------- // do bad subscript error
/* b245 */   _`bserr_b245`;  LDX.imm (0x12);               // error $12, bad subscript error
/* b247 */                   _.bytes(0x2c);                // makes next line BIT $0EA2

// ------------------------------------------------------- // do illegal quantity error
/* b248 */   _`fcerr_b248`;  LDX.imm (0x0e);               // error $0E, illegal quantity error
/* b24a */        _`_b24a`;  JMP.abs ("error_a437");       // do error #X then warm start

// ------------------------------------------------------- // found the array
/* b24d */        _`_b24d`;  LDX.imm (0x13);               // set error $13, double dimension error
/* b24f */                   LDA.zpg ("dimflg_000c");      // get DIM flag
/* b251 */                   BNE.rel ("_b24a");            // if we are trying to dimension it do error #X then warm
                                                           // start
                                                           // found the array and we're not dimensioning it so we must find an element in it
/* b253 */                   JSR.abs ("aryget_b194");      // set-up array pointer to first element in array
/* b256 */                   LDA.zpg ("count_000b");       // get dimensions count
/* b258 */                   LDY.imm (0x04);               // set index to array's # of dimensions
/* b25a */                   CMP.iny ("tempf2+3_005f");    // compare with no of dimensions
/* b25c */                   BNE.rel ("bserr_b245");       // if wrong do bad subscript error
/* b25e */                   JMP.abs ("_b2ea");            // found array so go get element
                                                           // array not found, so build it
/* b261 */  _`notfdd_b261`;  JSR.abs ("aryget_b194");      // set-up array pointer to first element in array
/* b264 */                   JSR.abs ("reason_a408");      // check available memory, do out of memory error if no room
/* b267 */                   LDY.imm (0x00);               // clear Y
/* b269 */                   STY.zpg ("fbufpt+1_0072");    // clear array data size high byte
/* b26b */                   LDX.imm (0x05);               // set default element size
/* b26d */                   LDA.zpg ("varnam+0_0045");    // get variable name 1st byte
/* b26f */                   STA.iny ("tempf2+3_005f");    // save array name 1st byte
/* b271 */                   BPL.rel ("_b274");            // branch if not string or floating point array
/* b273 */                   DEX.imp ();                   // decrement element size, $04
/* b274 */        _`_b274`;  INY.imp ();                   // increment index
/* b275 */                   LDA.zpg ("varnam+1_0046");    // get variable name 2nd byte
/* b277 */                   STA.iny ("tempf2+3_005f");    // save array name 2nd byte
/* b279 */                   BPL.rel ("_b27d");            // branch if not integer or string
/* b27b */                   DEX.imp ();                   // decrement element size, $03
/* b27c */                   DEX.imp ();                   // decrement element size, $02
/* b27d */        _`_b27d`;  STX.zpg ("fbufpt+0_0071");    // save element size
/* b27f */                   LDA.zpg ("count_000b");       // get dimensions count
/* b281 */                   INY.imp ();                   // increment index ..
/* b282 */                   INY.imp ();                   // .. to array  ..
/* b283 */                   INY.imp ();                   // .. dimension count
/* b284 */                   STA.iny ("tempf2+3_005f");    // save array dimension count
/* b286 */        _`_b286`;  LDX.imm (0x0b);               // set default dimension size low byte
/* b288 */                   LDA.imm (0x00);               // set default dimension size high byte
/* b28a */                   BIT.zpg ("dimflg_000c");      // test DIM flag
/* b28c */                   BVC.rel ("_b296");            // branch if default to be used
/* b28e */                   PLA.imp ();                   // pull dimension size low byte
/* b28f */                   CLC.imp ();                   // clear carry for add
/* b290 */                   ADC.imm (0x01);               // add 1, allow for zeroeth element
/* b292 */                   TAX.imp ();                   // copy low byte to X
/* b293 */                   PLA.imp ();                   // pull dimension size high byte
/* b294 */                   ADC.imm (0x00);               // add carry to high byte
/* b296 */        _`_b296`;  INY.imp ();                   // incement index to dimension size high byte
/* b297 */                   STA.iny ("tempf2+3_005f");    // save dimension size high byte
/* b299 */                   INY.imp ();                   // incement index to dimension size low byte
/* b29a */                   TXA.imp ();                   // copy dimension size low byte
/* b29b */                   STA.iny ("tempf2+3_005f");    // save dimension size low byte
/* b29d */                   JSR.abs ("umult_b34c");       // compute array size
/* b2a0 */                   STX.zpg ("fbufpt+0_0071");    // save result low byte
/* b2a2 */                   STA.zpg ("fbufpt+1_0072");    // save result high byte
/* b2a4 */                   LDY.zpg ("index+0_0022");     // restore index
/* b2a6 */                   DEC.zpg ("count_000b");       // decrement dimensions count
/* b2a8 */                   BNE.rel ("_b286");            // loop if not all done
/* b2aa */                   ADC.zpg ("tempf1+2_0059");    // add array data pointer high byte
/* b2ac */                   BCS.rel ("_b30b");            // if overflow do out of memory error then warm start
/* b2ae */                   STA.zpg ("tempf1+2_0059");    // save array data pointer high byte
/* b2b0 */                   TAY.imp ();                   // copy array data pointer high byte
/* b2b1 */                   TXA.imp ();                   // copy array size low byte
/* b2b2 */                   ADC.zpg ("tempf1+1_0058");    // add array data pointer low byte
/* b2b4 */                   BCC.rel ("_b2b9");            // branch if no rollover
/* b2b6 */                   INY.imp ();                   // else increment next array pointer high byte
/* b2b7 */                   BEQ.rel ("_b30b");            // if rolled over do out of memory error then warm start
/* b2b9 */        _`_b2b9`;  JSR.abs ("reason_a408");      // check available memory, do out of memory error if no room
/* b2bc */                   STA.zpg ("strend+0_0031");    // set end of arrays low byte
/* b2be */                   STY.zpg ("strend+1_0032");    // set end of arrays high byte
                                                           // now the aray is created we need to zero all the elements in it
/* b2c0 */                   LDA.imm (0x00);               // clear A for array clear
/* b2c2 */                   INC.zpg ("fbufpt+1_0072");    // increment array size high byte, now block count
/* b2c4 */                   LDY.zpg ("fbufpt+0_0071");    // get array size low byte, now index to block
/* b2c6 */                   BEQ.rel ("_b2cd");            // branch if $00
/* b2c8 */        _`_b2c8`;  DEY.imp ();                   // decrement index, do 0 to n-1
/* b2c9 */                   STA.iny ("tempf1+1_0058");    // clear array element byte
/* b2cb */                   BNE.rel ("_b2c8");            // loop until this block done
/* b2cd */        _`_b2cd`;  DEC.zpg ("tempf1+2_0059");    // decrement array pointer high byte
/* b2cf */                   DEC.zpg ("fbufpt+1_0072");    // decrement block count high byte
/* b2d1 */                   BNE.rel ("_b2c8");            // loop until all blocks done
/* b2d3 */                   INC.zpg ("tempf1+2_0059");    // correct for last loop
/* b2d5 */                   SEC.imp ();                   // set carry for subtract
/* b2d6 */                   LDA.zpg ("strend+0_0031");    // get end of arrays low byte
/* b2d8 */                   SBC.zpg ("tempf2+3_005f");    // subtract array start low byte
/* b2da */                   LDY.imm (0x02);               // index to array size low byte
/* b2dc */                   STA.iny ("tempf2+3_005f");    // save array size low byte
/* b2de */                   LDA.zpg ("strend+1_0032");    // get end of arrays high byte
/* b2e0 */                   INY.imp ();                   // index to array size high byte
/* b2e1 */                   SBC.zpg ("tempf2+4_0060");    // subtract array start high byte
/* b2e3 */                   STA.iny ("tempf2+3_005f");    // save array size high byte
/* b2e5 */                   LDA.zpg ("dimflg_000c");      // get default DIM flag
/* b2e7 */                   BNE.rel ("_b34b");            // exit if this was a DIM command
                                                           // else, find element
/* b2e9 */                   INY.imp ();                   // set index to # of dimensions, the dimension indeces
                                                           // are on the stack and will be removed as the position
                                                           // of the array element is calculated
/* b2ea */        _`_b2ea`;  LDA.iny ("tempf2+3_005f");    // get array's dimension count
/* b2ec */                   STA.zpg ("count_000b");       // save it
/* b2ee */                   LDA.imm (0x00);               // clear byte
/* b2f0 */                   STA.zpg ("fbufpt+0_0071");    // clear array data pointer low byte
/* b2f2 */        _`_b2f2`;  STA.zpg ("fbufpt+1_0072");    // save array data pointer high byte
/* b2f4 */                   INY.imp ();                   // increment index, point to array bound high byte
/* b2f5 */                   PLA.imp ();                   // pull array index low byte
/* b2f6 */                   TAX.imp ();                   // copy to X
/* b2f7 */                   STA.zpg ("facho+2_0064");     // save index low byte to FAC1 mantissa 3
/* b2f9 */                   PLA.imp ();                   // pull array index high byte
/* b2fa */                   STA.zpg ("facho+3_0065");     // save index high byte to FAC1 mantissa 4
/* b2fc */                   CMP.iny ("tempf2+3_005f");    // compare with array bound high byte
/* b2fe */                   BCC.rel ("inlpn2_b30e");      // branch if within bounds
/* b300 */                   BNE.rel ("_b308");            // if outside bounds do bad subscript error
                                                           // else high byte was = so test low bytes
/* b302 */                   INY.imp ();                   // index to array bound low byte
/* b303 */                   TXA.imp ();                   // get array index low byte
/* b304 */                   CMP.iny ("tempf2+3_005f");    // compare with array bound low byte
/* b306 */                   BCC.rel ("_b30f");            // branch if within bounds
/* b308 */        _`_b308`;  JMP.abs ("bserr_b245");       // do bad subscript error
/* b30b */        _`_b30b`;  JMP.abs ("omerr_a435");       // do out of memory error then warm start
/* b30e */  _`inlpn2_b30e`;  INY.imp ();                   // index to array bound low byte
/* b30f */        _`_b30f`;  LDA.zpg ("fbufpt+1_0072");    // get array data pointer high byte
/* b311 */                   ORA.zpg ("fbufpt+0_0071");    // OR with array data pointer low byte
/* b313 */                   CLC.imp ();                   // clear carry for either add, carry always clear here ??
/* b314 */                   BEQ.rel ("_b320");            // branch if array data pointer = null, skip multiply
/* b316 */                   JSR.abs ("umult_b34c");       // compute array size
/* b319 */                   TXA.imp ();                   // get result low byte
/* b31a */                   ADC.zpg ("facho+2_0064");     // add index low byte from FAC1 mantissa 3
/* b31c */                   TAX.imp ();                   // save result low byte
/* b31d */                   TYA.imp ();                   // get result high byte
/* b31e */                   LDY.zpg ("index+0_0022");     // restore index
/* b320 */        _`_b320`;  ADC.zpg ("facho+3_0065");     // add index high byte from FAC1 mantissa 4
/* b322 */                   STX.zpg ("fbufpt+0_0071");    // save array data pointer low byte
/* b324 */                   DEC.zpg ("count_000b");       // decrement dimensions count
/* b326 */                   BNE.rel ("_b2f2");            // loop if dimensions still to do
/* b328 */                   STA.zpg ("fbufpt+1_0072");    // save array data pointer high byte
/* b32a */                   LDX.imm (0x05);               // set default element size
/* b32c */                   LDA.zpg ("varnam+0_0045");    // get variable name 1st byte
/* b32e */                   BPL.rel ("_b331");            // branch if not string or floating point array
/* b330 */                   DEX.imp ();                   // decrement element size, $04
/* b331 */        _`_b331`;  LDA.zpg ("varnam+1_0046");    // get variable name 2nd byte
/* b333 */                   BPL.rel ("_b337");            // branch if not integer or string
/* b335 */                   DEX.imp ();                   // decrement element size, $03
/* b336 */                   DEX.imp ();                   // decrement element size, $02
/* b337 */        _`_b337`;  STX.zpg ("resho+2_0028");     // save dimension size low byte
/* b339 */                   LDA.imm (0x00);               // clear dimension size high byte
/* b33b */                   JSR.abs ("_b355");            // compute array size
/* b33e */                   TXA.imp ();                   // copy array size low byte
/* b33f */                   ADC.zpg ("tempf1+1_0058");    // add array data start pointer low byte
/* b341 */                   STA.zpg ("varpnt+0_0047");    // save as current variable pointer low byte
/* b343 */                   TYA.imp ();                   // copy array size high byte
/* b344 */                   ADC.zpg ("tempf1+2_0059");    // add array data start pointer high byte
/* b346 */                   STA.zpg ("varpnt+1_0048");    // save as current variable pointer high byte
/* b348 */                   TAY.imp ();                   // copy high byte to Y
/* b349 */                   LDA.zpg ("varpnt+0_0047");    // get current variable pointer low byte
                                                           // pointer to element is now in AY
/* b34b */        _`_b34b`;  RTS.imp ();
                                                           // compute array size, result in XY
/* b34c */   _`umult_b34c`;  STY.zpg ("index+0_0022");     // save index
/* b34e */                   LDA.iny ("tempf2+3_005f");    // get dimension size low byte
/* b350 */                   STA.zpg ("resho+2_0028");     // save dimension size low byte
/* b352 */                   DEY.imp ();                   // decrement index
/* b353 */                   LDA.iny ("tempf2+3_005f");    // get dimension size high byte
/* b355 */        _`_b355`;  STA.zpg ("resho+3_0029");     // save dimension size high byte
/* b357 */                   LDA.imm (0x10);               // count = $10 (16 bit multiply)
/* b359 */                   STA.zpg ("tempf2+1_005d");    // save bit count
/* b35b */                   LDX.imm (0x00);               // clear result low byte
/* b35d */                   LDY.imm (0x00);               // clear result high byte
/* b35f */        _`_b35f`;  TXA.imp ();                   // get result low byte
/* b360 */                   ASL.acc ();                   // *2
/* b361 */                   TAX.imp ();                   // save result low byte
/* b362 */                   TYA.imp ();                   // get result high byte
/* b363 */                   ROL.acc ();                   // *2
/* b364 */                   TAY.imp ();                   // save result high byte
/* b365 */                   BCS.rel ("_b30b");            // if overflow go do "Out of memory" error
/* b367 */                   ASL.zpg ("fbufpt+0_0071");    // shift element size low byte
/* b369 */                   ROL.zpg ("fbufpt+1_0072");    // shift element size high byte
/* b36b */                   BCC.rel ("_b378");            // skip add if no carry
/* b36d */                   CLC.imp ();                   // else clear carry for add
/* b36e */                   TXA.imp ();                   // get result low byte
/* b36f */                   ADC.zpg ("resho+2_0028");     // add dimension size low byte
/* b371 */                   TAX.imp ();                   // save result low byte
/* b372 */                   TYA.imp ();                   // get result high byte
/* b373 */                   ADC.zpg ("resho+3_0029");     // add dimension size high byte
/* b375 */                   TAY.imp ();                   // save result high byte
/* b376 */                   BCS.rel ("_b30b");            // if overflow go do "Out of memory" error
/* b378 */        _`_b378`;  DEC.zpg ("tempf2+1_005d");    // decrement bit count
/* b37a */                   BNE.rel ("_b35f");            // loop until all done
/* b37c */                   RTS.imp ();
                                                           // perform FRE()
/* b37d */     _`fre_b37d`;  LDA.zpg ("valtyp_000d");      // get data type flag, $FF = string, $00 = numeric
/* b37f */                   BEQ.rel ("_b384");            // branch if numeric
/* b381 */                   JSR.abs ("_b6a6");            // pop string off descriptor stack, or from top of string
                                                           // space returns with A = length, X=$71=pointer low byte,
                                                           // Y=$72=pointer high byte
                                                           // FRE(n) was numeric so do this
/* b384 */        _`_b384`;  JSR.abs ("garbag_b526");      // go do garbage collection
/* b387 */                   SEC.imp ();                   // set carry for subtract
/* b388 */                   LDA.zpg ("fretop+0_0033");    // get bottom of string space low byte
/* b38a */                   SBC.zpg ("strend+0_0031");    // subtract end of arrays low byte
/* b38c */                   TAY.imp ();                   // copy result to Y
/* b38d */                   LDA.zpg ("fretop+1_0034");    // get bottom of string space high byte
/* b38f */                   SBC.zpg ("strend+1_0032");    // subtract end of arrays high byte

// ------------------------------------------------------- // convert fixed integer AY to float FAC1
/* b391 */  _`givayf_b391`;  LDX.imm (0x00);               // set type = numeric
/* b393 */                   STX.zpg ("valtyp_000d");      // clear data type flag, $FF = string, $00 = numeric
/* b395 */                   STA.zpg ("facho+0_0062");     // save FAC1 mantissa 1
/* b397 */                   STY.zpg ("facho+1_0063");     // save FAC1 mantissa 2
/* b399 */                   LDX.imm (0x90);               // set exponent=2^16 (integer)
/* b39b */                   JMP.abs ("_bc44");            // set exp = X, clear FAC1 3 and 4, normalise and return

// ------------------------------------------------------- // perform POS()
/* b39e */     _`pos_b39e`;  SEC.imp ();                   // set Cb for read cursor position
/* b39f */                   JSR.abs ("plot_fff0");        // read/set X,Y cursor position
/* b3a2 */        _`_b3a2`;  LDA.imm (0x00);               // clear high byte
/* b3a4 */                   BEQ.rel ("givayf_b391");      // convert fixed integer AY to float FAC1, branch always
                                                           // check not Direct, used by DEF and INPUT
/* b3a6 */  _`errdir_b3a6`;  LDX.zpg ("curlin+1_003a");    // get current line number high byte
/* b3a8 */                   INX.imp ();                   // increment it
/* b3a9 */                   BNE.rel ("_b34b");            // return if not direct mode
                                                           // else do illegal direct error
/* b3ab */                   LDX.imm (0x15);               // error $15, illegal direct error
/* b3ad */                   _.bytes(0x2c);                // makes next line BIT $1BA2
/* b3ae */        _`_b3ae`;  LDX.imm (0x1b);               // error $1B, undefined function error
/* b3b0 */                   JMP.abs ("error_a437");       // do error #X then warm start

// ------------------------------------------------------- // perform DEF
/* b3b3 */     _`def_b3b3`;  JSR.abs ("getfnm_b3e1");      // check FNx syntax
/* b3b6 */                   JSR.abs ("errdir_b3a6");      // check not direct, back here if ok
/* b3b9 */                   JSR.abs ("chkopn_aefa");      // scan for "(", else do syntax error then warm start
/* b3bc */                   LDA.imm (0x80);               // set flag for FNx
/* b3be */                   STA.zpg ("subflg_0010");      // save subscript/FNx flag
/* b3c0 */                   JSR.abs ("ptrget_b08b");      // get variable address
/* b3c3 */                   JSR.abs ("_ad8d");            // check if source is numeric, else do type mismatch
/* b3c6 */                   JSR.abs ("chkcls_aef7");      // scan for ")", else do syntax error then warm start
/* b3c9 */                   LDA.imm (0xb2);               // get = token
/* b3cb */                   JSR.abs ("chkcom_aeff");      // scan for CHR$(A), else do syntax error then warm start
/* b3ce */                   PHA.imp ();                   // push next character
/* b3cf */                   LDA.zpg ("varpnt+1_0048");    // get current variable pointer high byte
/* b3d1 */                   PHA.imp ();                   // push it
/* b3d2 */                   LDA.zpg ("varpnt+0_0047");    // get current variable pointer low byte
/* b3d4 */                   PHA.imp ();                   // push it
/* b3d5 */                   LDA.zpg ("txtptr+1_007b");    // get BASIC execute pointer high byte
/* b3d7 */                   PHA.imp ();                   // push it
/* b3d8 */                   LDA.zpg ("txtptr+0_007a");    // get BASIC execute pointer low byte
/* b3da */                   PHA.imp ();                   // push it
/* b3db */                   JSR.abs ("data_a8f8");        // perform DATA
/* b3de */                   JMP.abs ("_b44f");            // put execute pointer and variable pointer into function
                                                           // and return

// ------------------------------------------------------- // check FNx syntax
/* b3e1 */  _`getfnm_b3e1`;  LDA.imm (0xa5);               // set FN token
/* b3e3 */                   JSR.abs ("chkcom_aeff");      // scan for CHR$(A), else do syntax error then warm start
/* b3e6 */                   ORA.imm (0x80);               // set FN flag bit
/* b3e8 */                   STA.zpg ("subflg_0010");      // save FN name
/* b3ea */                   JSR.abs ("_b092");            // search for FN variable
/* b3ed */                   STA.zpg ("defpnt+0_004e");    // save function pointer low byte
/* b3ef */                   STY.zpg ("defpnt+1_004f");    // save function pointer high byte
/* b3f1 */                   JMP.abs ("_ad8d");            // check if source is numeric and return, else do type
                                                           // mismatch

// ------------------------------------------------------- // Evaluate FNx
/* b3f4 */  _`fndoer_b3f4`;  JSR.abs ("getfnm_b3e1");      // check FNx syntax
/* b3f7 */                   LDA.zpg ("defpnt+1_004f");    // get function pointer high byte
/* b3f9 */                   PHA.imp ();                   // push it
/* b3fa */                   LDA.zpg ("defpnt+0_004e");    // get function pointer low byte
/* b3fc */                   PHA.imp ();                   // push it
/* b3fd */                   JSR.abs ("parchk_aef1");      // evaluate expression within parentheses
/* b400 */                   JSR.abs ("_ad8d");            // check if source is numeric, else do type mismatch
/* b403 */                   PLA.imp ();                   // pop function pointer low byte
/* b404 */                   STA.zpg ("defpnt+0_004e");    // restore it
/* b406 */                   PLA.imp ();                   // pop function pointer high byte
/* b407 */                   STA.zpg ("defpnt+1_004f");    // restore it
/* b409 */                   LDY.imm (0x02);               // index to variable pointer high byte
/* b40b */                   LDA.iny ("defpnt+0_004e");    // get variable address low byte
/* b40d */                   STA.zpg ("varpnt+0_0047");    // save current variable pointer low byte
/* b40f */                   TAX.imp ();                   // copy address low byte
/* b410 */                   INY.imp ();                   // index to variable address high byte
/* b411 */                   LDA.iny ("defpnt+0_004e");    // get variable pointer high byte
/* b413 */                   BEQ.rel ("_b3ae");            // branch if high byte zero
/* b415 */                   STA.zpg ("varpnt+1_0048");    // save current variable pointer high byte
/* b417 */                   INY.imp ();                   // index to mantissa 3
                                                           // now stack the function variable value before use
/* b418 */        _`_b418`;  LDA.iny ("varpnt+0_0047");    // get byte from variable
/* b41a */                   PHA.imp ();                   // stack it
/* b41b */                   DEY.imp ();                   // decrement index
/* b41c */                   BPL.rel ("_b418");            // loop until variable stacked
/* b41e */                   LDY.zpg ("varpnt+1_0048");    // get current variable pointer high byte
/* b420 */                   JSR.abs ("_bbd4");            // pack FAC1 into (XY)
/* b423 */                   LDA.zpg ("txtptr+1_007b");    // get BASIC execute pointer high byte
/* b425 */                   PHA.imp ();                   // push it
/* b426 */                   LDA.zpg ("txtptr+0_007a");    // get BASIC execute pointer low byte
/* b428 */                   PHA.imp ();                   // push it
/* b429 */                   LDA.iny ("defpnt+0_004e");    // get function execute pointer low byte
/* b42b */                   STA.zpg ("txtptr+0_007a");    // save BASIC execute pointer low byte
/* b42d */                   INY.imp ();                   // index to high byte
/* b42e */                   LDA.iny ("defpnt+0_004e");    // get function execute pointer high byte
/* b430 */                   STA.zpg ("txtptr+1_007b");    // save BASIC execute pointer high byte
/* b432 */                   LDA.zpg ("varpnt+1_0048");    // get current variable pointer high byte
/* b434 */                   PHA.imp ();                   // push it
/* b435 */                   LDA.zpg ("varpnt+0_0047");    // get current variable pointer low byte
/* b437 */                   PHA.imp ();                   // push it
/* b438 */                   JSR.abs ("frmnum_ad8a");      // evaluate expression and check is numeric, else do
                                                           // type mismatch
/* b43b */                   PLA.imp ();                   // pull variable address low byte
/* b43c */                   STA.zpg ("defpnt+0_004e");    // save variable address low byte
/* b43e */                   PLA.imp ();                   // pull variable address high byte
/* b43f */                   STA.zpg ("defpnt+1_004f");    // save variable address high byte
/* b441 */                   JSR.abs ("chrgot_0079");      // scan memory
/* b444 */                   BEQ.rel ("_b449");            // branch if null (should be [EOL] marker)
/* b446 */                   JMP.abs ("synerr_af08");      // else syntax error then warm start

// ------------------------------------------------------- // restore BASIC execute pointer and function variable from stack
/* b449 */        _`_b449`;  PLA.imp ();                   // pull BASIC execute pointer low byte
/* b44a */                   STA.zpg ("txtptr+0_007a");    // save BASIC execute pointer low byte
/* b44c */                   PLA.imp ();                   // pull BASIC execute pointer high byte
/* b44d */                   STA.zpg ("txtptr+1_007b");    // save BASIC execute pointer high byte
                                                           // put execute pointer and variable pointer into function
/* b44f */        _`_b44f`;  LDY.imm (0x00);               // clear index
/* b451 */                   PLA.imp ();                   // pull BASIC execute pointer low byte
/* b452 */                   STA.iny ("defpnt+0_004e");    // save to function
/* b454 */                   PLA.imp ();                   // pull BASIC execute pointer high byte
/* b455 */                   INY.imp ();                   // increment index
/* b456 */                   STA.iny ("defpnt+0_004e");    // save to function
/* b458 */                   PLA.imp ();                   // pull current variable address low byte
/* b459 */                   INY.imp ();                   // increment index
/* b45a */                   STA.iny ("defpnt+0_004e");    // save to function
/* b45c */                   PLA.imp ();                   // pull current variable address high byte
/* b45d */                   INY.imp ();                   // increment index
/* b45e */                   STA.iny ("defpnt+0_004e");    // save to function
/* b460 */                   PLA.imp ();                   // pull ??
/* b461 */                   INY.imp ();                   // increment index
/* b462 */                   STA.iny ("defpnt+0_004e");    // save to function
/* b464 */                   RTS.imp ();

// ------------------------------------------------------- // perform STR$()
/* b465 */    _`strd_b465`;  JSR.abs ("_ad8d");            // check if source is numeric, else do type mismatch
/* b468 */                   LDY.imm (0x00);               // set string index
/* b46a */                   JSR.abs ("_bddf");            // convert FAC1 to string
/* b46d */                   PLA.imp ();                   // dump return address (skip type check)
/* b46e */                   PLA.imp ();                   // dump return address (skip type check)
/* b46f */        _`_b46f`;  LDA.imm (0xff);               // set result string low pointer
/* b471 */                   LDY.imm (0x00);               // set result string high pointer
/* b473 */                   BEQ.rel ("strlit_b487");      // print null terminated string to utility pointer

// ------------------------------------------------------- // do string vector
                                                           // copy descriptor pointer and make string space A bytes long
/* b475 */        _`_b475`;  LDX.zpg ("facho+2_0064");     // get descriptor pointer low byte
/* b477 */                   LDY.zpg ("facho+3_0065");     // get descriptor pointer high byte
/* b479 */                   STX.zpg ("dscpnt+0_0050");    // save descriptor pointer low byte
/* b47b */                   STY.zpg ("dscpnt+1_0051");    // save descriptor pointer high byte

// ------------------------------------------------------- // make string space A bytes long
/* b47d */        _`_b47d`;  JSR.abs ("getspa_b4f4");      // make space in string memory for string A long
/* b480 */                   STX.zpg ("facho+0_0062");     // save string pointer low byte
/* b482 */                   STY.zpg ("facho+1_0063");     // save string pointer high byte
/* b484 */                   STA.zpg ("facexp_0061");      // save length
/* b486 */                   RTS.imp ();

// ------------------------------------------------------- // scan, set up string
                                                           // print " terminated string to utility pointer
/* b487 */  _`strlit_b487`;  LDX.imm (0x22);               // set terminator to "
/* b489 */                   STX.zpg ("charac_0007");      // set search character, terminator 1
/* b48b */                   STX.zpg ("endchr_0008");      // set terminator 2
                                                           // print search or alternate terminated string to utility pointer
                                                           // source is AY
/* b48d */        _`_b48d`;  STA.zpg ("arisgn_006f");      // store string start low byte
/* b48f */                   STY.zpg ("facov_0070");       // store string start high byte
/* b491 */                   STA.zpg ("facho+0_0062");     // save string pointer low byte
/* b493 */                   STY.zpg ("facho+1_0063");     // save string pointer high byte
/* b495 */                   LDY.imm (0xff);               // set length to -1
/* b497 */        _`_b497`;  INY.imp ();                   // increment length
/* b498 */                   LDA.iny ("arisgn_006f");      // get byte from string
/* b49a */                   BEQ.rel ("_b4a8");            // exit loop if null byte [EOS]
/* b49c */                   CMP.zpg ("charac_0007");      // compare with search character, terminator 1
/* b49e */                   BEQ.rel ("_b4a4");            // branch if terminator
/* b4a0 */                   CMP.zpg ("endchr_0008");      // compare with terminator 2
/* b4a2 */                   BNE.rel ("_b497");            // loop if not terminator 2
/* b4a4 */        _`_b4a4`;  CMP.imm (0x22);               // compare with "
/* b4a6 */                   BEQ.rel ("_b4a9");            // branch if " (carry set if = !)
/* b4a8 */        _`_b4a8`;  CLC.imp ();                   // clear carry for add (only if [EOL] terminated string)
/* b4a9 */        _`_b4a9`;  STY.zpg ("facexp_0061");      // save length in FAC1 exponent
/* b4ab */                   TYA.imp ();                   // copy length to A
/* b4ac */                   ADC.zpg ("arisgn_006f");      // add string start low byte
/* b4ae */                   STA.zpg ("fbufpt+0_0071");    // save string end low byte
/* b4b0 */                   LDX.zpg ("facov_0070");       // get string start high byte
/* b4b2 */                   BCC.rel ("_b4b5");            // branch if no low byte overflow
/* b4b4 */                   INX.imp ();                   // else increment high byte
/* b4b5 */        _`_b4b5`;  STX.zpg ("fbufpt+1_0072");    // save string end high byte
/* b4b7 */                   LDA.zpg ("facov_0070");       // get string start high byte
/* b4b9 */                   BEQ.rel ("_b4bf");            // branch if in utility area
/* b4bb */                   CMP.imm (0x02);               // compare with input buffer memory high byte
/* b4bd */                   BNE.rel ("_b4ca");            // branch if not in input buffer memory
                                                           // string in input buffer or utility area, move to string
                                                           // memory
/* b4bf */        _`_b4bf`;  TYA.imp ();                   // copy length to A
/* b4c0 */                   JSR.abs ("_b475");            // copy descriptor pointer and make string space A bytes long
/* b4c3 */                   LDX.zpg ("arisgn_006f");      // get string start low byte
/* b4c5 */                   LDY.zpg ("facov_0070");       // get string start high byte
/* b4c7 */                   JSR.abs ("_b688");            // store string A bytes long from XY to utility pointer
                                                           // check for space on descriptor stack then ...
                                                           // put string address and length on descriptor stack and update stack pointers
/* b4ca */        _`_b4ca`;  LDX.zpg ("temppt_0016");      // get the descriptor stack pointer
/* b4cc */                   CPX.imm (0x22);               // compare it with the maximum + 1
/* b4ce */                   BNE.rel ("putnw1_b4d5");      // if there is space on the string stack continue
                                                           // else do string too complex error
/* b4d0 */                   LDX.imm (0x19);               // error $19, string too complex error
/* b4d2 */        _`_b4d2`;  JMP.abs ("error_a437");       // do error #X then warm start
                                                           // put string address and length on descriptor stack and update stack pointers
/* b4d5 */  _`putnw1_b4d5`;  LDA.zpg ("facexp_0061");      // get the string length
/* b4d7 */                   STA.zpx (0x00);               // put it on the string stack
/* b4d9 */                   LDA.zpg ("facho+0_0062");     // get the string pointer low byte
/* b4db */                   STA.zpx (0x01);               // put it on the string stack
/* b4dd */                   LDA.zpg ("facho+1_0063");     // get the string pointer high byte
/* b4df */                   STA.zpx (0x02);               // put it on the string stack
/* b4e1 */                   LDY.imm (0x00);               // clear Y
/* b4e3 */                   STX.zpg ("facho+2_0064");     // save the string descriptor pointer low byte
/* b4e5 */                   STY.zpg ("facho+3_0065");     // save the string descriptor pointer high byte, always $00
/* b4e7 */                   STY.zpg ("facov_0070");       // clear FAC1 rounding byte
/* b4e9 */                   DEY.imp ();                   // Y = $FF
/* b4ea */                   STY.zpg ("valtyp_000d");      // save the data type flag, $FF = string
/* b4ec */                   STX.zpg ("lastpt+0_0017");    // save the current descriptor stack item pointer low byte
/* b4ee */                   INX.imp ();                   // update the stack pointer
/* b4ef */                   INX.imp ();                   // update the stack pointer
/* b4f0 */                   INX.imp ();                   // update the stack pointer
/* b4f1 */                   STX.zpg ("temppt_0016");      // save the new descriptor stack pointer
/* b4f3 */                   RTS.imp ();

// ------------------------------------------------------- // make space in string memory for string A long
                                                           // return X = pointer low byte, Y = pointer high byte
/* b4f4 */  _`getspa_b4f4`;  LSR.zpg ("garbfl_000f");      // clear garbage collected flag (b7)
                                                           // make space for string A long
/* b4f6 */        _`_b4f6`;  PHA.imp ();                   // save string length
/* b4f7 */                   EOR.imm (0xff);               // complement it
/* b4f9 */                   SEC.imp ();                   // set carry for subtract, two's complement add
/* b4fa */                   ADC.zpg ("fretop+0_0033");    // add bottom of string space low byte, subtract length
/* b4fc */                   LDY.zpg ("fretop+1_0034");    // get bottom of string space high byte
/* b4fe */                   BCS.rel ("_b501");            // skip decrement if no underflow
/* b500 */                   DEY.imp ();                   // decrement bottom of string space high byte
/* b501 */        _`_b501`;  CPY.zpg ("strend+1_0032");    // compare with end of arrays high byte
/* b503 */                   BCC.rel ("_b516");            // do out of memory error if less
/* b505 */                   BNE.rel ("_b50b");            // if not = skip next test
/* b507 */                   CMP.zpg ("strend+0_0031");    // compare with end of arrays low byte
/* b509 */                   BCC.rel ("_b516");            // do out of memory error if less
/* b50b */        _`_b50b`;  STA.zpg ("fretop+0_0033");    // save bottom of string space low byte
/* b50d */                   STY.zpg ("fretop+1_0034");    // save bottom of string space high byte
/* b50f */                   STA.zpg ("frespc+0_0035");    // save string utility ptr low byte
/* b511 */                   STY.zpg ("frespc+1_0036");    // save string utility ptr high byte
/* b513 */                   TAX.imp ();                   // copy low byte to X
/* b514 */                   PLA.imp ();                   // get string length back
/* b515 */                   RTS.imp ();
/* b516 */        _`_b516`;  LDX.imm (0x10);               // error code $10, out of memory error
/* b518 */                   LDA.zpg ("garbfl_000f");      // get garbage collected flag
/* b51a */                   BMI.rel ("_b4d2");            // if set then do error code X
/* b51c */                   JSR.abs ("garbag_b526");      // else go do garbage collection
/* b51f */                   LDA.imm (0x80);               // flag for garbage collected
/* b521 */                   STA.zpg ("garbfl_000f");      // set garbage collected flag
/* b523 */                   PLA.imp ();                   // pull length
/* b524 */                   BNE.rel ("_b4f6");            // go try again (loop always, length should never be = $00)

// ------------------------------------------------------- // garbage collection routine
/* b526 */  _`garbag_b526`;  LDX.zpg ("memsiz+0_0037");    // get end of memory low byte
/* b528 */                   LDA.zpg ("memsiz+1_0038");    // get end of memory high byte
                                                           // re-run routine from last ending
/* b52a */        _`_b52a`;  STX.zpg ("fretop+0_0033");    // set bottom of string space low byte
/* b52c */                   STA.zpg ("fretop+1_0034");    // set bottom of string space high byte
/* b52e */                   LDY.imm (0x00);               // clear index
/* b530 */                   STY.zpg ("defpnt+1_004f");    // clear working pointer high byte
/* b532 */                   STY.zpg ("defpnt+0_004e");    // clear working pointer low byte
/* b534 */                   LDA.zpg ("strend+0_0031");    // get end of arrays low byte
/* b536 */                   LDX.zpg ("strend+1_0032");    // get end of arrays high byte
/* b538 */                   STA.zpg ("tempf2+3_005f");    // save as highest uncollected string pointer low byte
/* b53a */                   STX.zpg ("tempf2+4_0060");    // save as highest uncollected string pointer high byte
/* b53c */                   LDA.imm (0x19);               // set descriptor stack pointer
/* b53e */                   LDX.imm (0x00);               // clear X
/* b540 */                   STA.zpg ("index+0_0022");     // save descriptor stack pointer low byte
/* b542 */                   STX.zpg ("index+1_0023");     // save descriptor stack pointer high byte ($00)
/* b544 */        _`_b544`;  CMP.zpg ("temppt_0016");      // compare with descriptor stack pointer
/* b546 */                   BEQ.rel ("_b54d");            // branch if =
/* b548 */                   JSR.abs ("_b5c7");            // check string salvageability
/* b54b */                   BEQ.rel ("_b544");            // loop always
                                                           // done stacked strings, now do string variables
/* b54d */        _`_b54d`;  LDA.imm (0x07);               // set step size = $07, collecting variables
/* b54f */                   STA.zpg ("four6_0053");       // save garbage collection step size
/* b551 */                   LDA.zpg ("vartab+0_002d");    // get start of variables low byte
/* b553 */                   LDX.zpg ("vartab+1_002e");    // get start of variables high byte
/* b555 */                   STA.zpg ("index+0_0022");     // save as pointer low byte
/* b557 */                   STX.zpg ("index+1_0023");     // save as pointer high byte
/* b559 */        _`_b559`;  CPX.zpg ("arytab+1_0030");    // compare end of variables high byte,
                                                           // start of arrays high byte
/* b55b */                   BNE.rel ("_b561");            // branch if no high byte match
/* b55d */                   CMP.zpg ("arytab+0_002f");    // else compare end of variables low byte,
                                                           // start of arrays low byte
/* b55f */                   BEQ.rel ("_b566");            // branch if = variable memory end
/* b561 */        _`_b561`;  JSR.abs ("dvars_b5bd");       // check variable salvageability
/* b564 */                   BEQ.rel ("_b559");            // loop always
                                                           // done string variables, now do string arrays
/* b566 */        _`_b566`;  STA.zpg ("tempf1+1_0058");    // save start of arrays low byte as working pointer
/* b568 */                   STX.zpg ("tempf1+2_0059");    // save start of arrays high byte as working pointer
/* b56a */                   LDA.imm (0x03);               // set step size, collecting descriptors
/* b56c */                   STA.zpg ("four6_0053");       // save step size
/* b56e */        _`_b56e`;  LDA.zpg ("tempf1+1_0058");    // get pointer low byte
/* b570 */                   LDX.zpg ("tempf1+2_0059");    // get pointer high byte
/* b572 */        _`_b572`;  CPX.zpg ("strend+1_0032");    // compare with end of arrays high byte
/* b574 */                   BNE.rel ("_b57d");            // branch if not at end
/* b576 */                   CMP.zpg ("strend+0_0031");    // else compare with end of arrays low byte
/* b578 */                   BNE.rel ("_b57d");            // branch if not at end
/* b57a */                   JMP.abs ("grbpas_b606");      // collect string, tidy up and exit if at end ??
/* b57d */        _`_b57d`;  STA.zpg ("index+0_0022");     // save pointer low byte
/* b57f */                   STX.zpg ("index+1_0023");     // save pointer high byte
/* b581 */                   LDY.imm (0x00);               // set index
/* b583 */                   LDA.iny ("index+0_0022");     // get array name first byte
/* b585 */                   TAX.imp ();                   // copy it
/* b586 */                   INY.imp ();                   // increment index
/* b587 */                   LDA.iny ("index+0_0022");     // get array name second byte
/* b589 */                   PHP.imp ();                   // push the flags
/* b58a */                   INY.imp ();                   // increment index
/* b58b */                   LDA.iny ("index+0_0022");     // get array size low byte
/* b58d */                   ADC.zpg ("tempf1+1_0058");    // add start of this array low byte
/* b58f */                   STA.zpg ("tempf1+1_0058");    // save start of next array low byte
/* b591 */                   INY.imp ();                   // increment index
/* b592 */                   LDA.iny ("index+0_0022");     // get array size high byte
/* b594 */                   ADC.zpg ("tempf1+2_0059");    // add start of this array high byte
/* b596 */                   STA.zpg ("tempf1+2_0059");    // save start of next array high byte
/* b598 */                   PLP.imp ();                   // restore the flags
/* b599 */                   BPL.rel ("_b56e");            // skip if not string array
                                                           // was possibly string array so ...
/* b59b */                   TXA.imp ();                   // get name first byte back
/* b59c */                   BMI.rel ("_b56e");            // skip if not string array
/* b59e */                   INY.imp ();                   // increment index
/* b59f */                   LDA.iny ("index+0_0022");     // get # of dimensions
/* b5a1 */                   LDY.imm (0x00);               // clear index
/* b5a3 */                   ASL.acc ();                   // *2
/* b5a4 */                   ADC.imm (0x05);               // +5 (array header size)
/* b5a6 */                   ADC.zpg ("index+0_0022");     // add pointer low byte
/* b5a8 */                   STA.zpg ("index+0_0022");     // save pointer low byte
/* b5aa */                   BCC.rel ("_b5ae");            // branch if no rollover
/* b5ac */                   INC.zpg ("index+1_0023");     // else increment pointer hgih byte
/* b5ae */        _`_b5ae`;  LDX.zpg ("index+1_0023");     // get pointer high byte
/* b5b0 */        _`_b5b0`;  CPX.zpg ("tempf1+2_0059");    // compare pointer high byte with end of this array high byte
/* b5b2 */                   BNE.rel ("_b5b8");            // branch if not there yet
/* b5b4 */                   CMP.zpg ("tempf1+1_0058");    // compare pointer low byte with end of this array low byte
/* b5b6 */                   BEQ.rel ("_b572");            // if at end of this array go check next array
/* b5b8 */        _`_b5b8`;  JSR.abs ("_b5c7");            // check string salvageability
/* b5bb */                   BEQ.rel ("_b5b0");            // loop
                                                           // check variable salvageability
/* b5bd */   _`dvars_b5bd`;  LDA.iny ("index+0_0022");     // get variable name first byte
/* b5bf */                   BMI.rel ("_b5f6");            // add step and exit if not string
/* b5c1 */                   INY.imp ();                   // increment index
/* b5c2 */                   LDA.iny ("index+0_0022");     // get variable name second byte
/* b5c4 */                   BPL.rel ("_b5f6");            // add step and exit if not string
/* b5c6 */                   INY.imp ();                   // increment index
                                                           // check string salvageability
/* b5c7 */        _`_b5c7`;  LDA.iny ("index+0_0022");     // get string length
/* b5c9 */                   BEQ.rel ("_b5f6");            // add step and exit if null string
/* b5cb */                   INY.imp ();                   // increment index
/* b5cc */                   LDA.iny ("index+0_0022");     // get string pointer low byte
/* b5ce */                   TAX.imp ();                   // copy to X
/* b5cf */                   INY.imp ();                   // increment index
/* b5d0 */                   LDA.iny ("index+0_0022");     // get string pointer high byte
/* b5d2 */                   CMP.zpg ("fretop+1_0034");    // compare string pointer high byte with bottom of string
                                                           // space high byte
/* b5d4 */                   BCC.rel ("_b5dc");            // if bottom of string space greater go test against highest
                                                           // uncollected string
/* b5d6 */                   BNE.rel ("_b5f6");            // if bottom of string space less string has been collected
                                                           // so go update pointers, step to next and return
                                                           // high bytes were equal so test low bytes
/* b5d8 */                   CPX.zpg ("fretop+0_0033");    // compare string pointer low byte with bottom of string
                                                           // space low byte
/* b5da */                   BCS.rel ("_b5f6");            // if bottom of string space less string has been collected
                                                           // so go update pointers, step to next and return
                                                           // else test string against highest uncollected string so far
/* b5dc */        _`_b5dc`;  CMP.zpg ("tempf2+4_0060");    // compare string pointer high byte with highest uncollected
                                                           // string high byte
/* b5de */                   BCC.rel ("_b5f6");            // if highest uncollected string is greater then go update
                                                           // pointers, step to next and return
/* b5e0 */                   BNE.rel ("_b5e6");            // if highest uncollected string is less then go set this
                                                           // string as highest uncollected so far
                                                           // high bytes were equal so test low bytes
/* b5e2 */                   CPX.zpg ("tempf2+3_005f");    // compare string pointer low byte with highest uncollected
                                                           // string low byte
/* b5e4 */                   BCC.rel ("_b5f6");            // if highest uncollected string is greater then go update
                                                           // pointers, step to next and return
                                                           // else set current string as highest uncollected string
/* b5e6 */        _`_b5e6`;  STX.zpg ("tempf2+3_005f");    // save string pointer low byte as highest uncollected string
                                                           // low byte
/* b5e8 */                   STA.zpg ("tempf2+4_0060");    // save string pointer high byte as highest uncollected
                                                           // string high byte
/* b5ea */                   LDA.zpg ("index+0_0022");     // get descriptor pointer low byte
/* b5ec */                   LDX.zpg ("index+1_0023");     // get descriptor pointer high byte
/* b5ee */                   STA.zpg ("defpnt+0_004e");    // save working pointer high byte
/* b5f0 */                   STX.zpg ("defpnt+1_004f");    // save working pointer low byte
/* b5f2 */                   LDA.zpg ("four6_0053");       // get step size
/* b5f4 */                   STA.zpg ("jmper+1_0055");     // copy step size
/* b5f6 */        _`_b5f6`;  LDA.zpg ("four6_0053");       // get step size
/* b5f8 */                   CLC.imp ();                   // clear carry for add
/* b5f9 */                   ADC.zpg ("index+0_0022");     // add pointer low byte
/* b5fb */                   STA.zpg ("index+0_0022");     // save pointer low byte
/* b5fd */                   BCC.rel ("_b601");            // branch if no rollover
/* b5ff */                   INC.zpg ("index+1_0023");     // else increment pointer high byte
/* b601 */        _`_b601`;  LDX.zpg ("index+1_0023");     // get pointer high byte
/* b603 */                   LDY.imm (0x00);               // flag not moved
/* b605 */                   RTS.imp ();
                                                           // collect string
/* b606 */  _`grbpas_b606`;  LDA.zpg ("defpnt+1_004f");    // get working pointer low byte
/* b608 */                   ORA.zpg ("defpnt+0_004e");    // OR working pointer high byte
/* b60a */                   BEQ.rel ("_b601");            // exit if nothing to collect
/* b60c */                   LDA.zpg ("jmper+1_0055");     // get copied step size
/* b60e */                   AND.imm (0x04);               // mask step size, $04 for variables, $00 for array or stack
/* b610 */                   LSR.acc ();                   // >> 1
/* b611 */                   TAY.imp ();                   // copy to index
/* b612 */                   STA.zpg ("jmper+1_0055");     // save offset to descriptor start
/* b614 */                   LDA.iny ("defpnt+0_004e");    // get string length low byte
/* b616 */                   ADC.zpg ("tempf2+3_005f");    // add string start low byte
/* b618 */                   STA.zpg ("tempf1+3_005a");    // set block end low byte
/* b61a */                   LDA.zpg ("tempf2+4_0060");    // get string start high byte
/* b61c */                   ADC.imm (0x00);               // add carry
/* b61e */                   STA.zpg ("tempf1+4_005b");    // set block end high byte
/* b620 */                   LDA.zpg ("fretop+0_0033");    // get bottom of string space low byte
/* b622 */                   LDX.zpg ("fretop+1_0034");    // get bottom of string space high byte
/* b624 */                   STA.zpg ("tempf1+1_0058");    // save destination end low byte
/* b626 */                   STX.zpg ("tempf1+2_0059");    // save destination end high byte
/* b628 */                   JSR.abs ("_a3bf");            // open up space in memory, don't set array end. this
                                                           // copies the string from where it is to the end of the
                                                           // uncollected string memory
/* b62b */                   LDY.zpg ("jmper+1_0055");     // restore offset to descriptor start
/* b62d */                   INY.imp ();                   // increment index to string pointer low byte
/* b62e */                   LDA.zpg ("tempf1+1_0058");    // get new string pointer low byte
/* b630 */                   STA.iny ("defpnt+0_004e");    // save new string pointer low byte
/* b632 */                   TAX.imp ();                   // copy string pointer low byte
/* b633 */                   INC.zpg ("tempf1+2_0059");    // increment new string pointer high byte
/* b635 */                   LDA.zpg ("tempf1+2_0059");    // get new string pointer high byte
/* b637 */                   INY.imp ();                   // increment index to string pointer high byte
/* b638 */                   STA.iny ("defpnt+0_004e");    // save new string pointer high byte
/* b63a */                   JMP.abs ("_b52a");            // re-run routine from last ending, XA holds new bottom
                                                           // of string memory pointer

// ------------------------------------------------------- // concatenate
                                                           // add strings, the first string is in the descriptor, the second string is in line
/* b63d */     _`cat_b63d`;  LDA.zpg ("facho+3_0065");     // get descriptor pointer high byte
/* b63f */                   PHA.imp ();                   // put on stack
/* b640 */                   LDA.zpg ("facho+2_0064");     // get descriptor pointer low byte
/* b642 */                   PHA.imp ();                   // put on stack
/* b643 */                   JSR.abs ("eval_ae83");        // get value from line
/* b646 */                   JSR.abs ("_ad8f");            // check if source is string, else do type mismatch
/* b649 */                   PLA.imp ();                   // get descriptor pointer low byte back
/* b64a */                   STA.zpg ("arisgn_006f");      // set pointer low byte
/* b64c */                   PLA.imp ();                   // get descriptor pointer high byte back
/* b64d */                   STA.zpg ("facov_0070");       // set pointer high byte
/* b64f */                   LDY.imm (0x00);               // clear index
/* b651 */                   LDA.iny ("arisgn_006f");      // get length of first string from descriptor
/* b653 */                   CLC.imp ();                   // clear carry for add
/* b654 */                   ADC.iny ("facho+2_0064");     // add length of second string
/* b656 */                   BCC.rel ("_b65d");            // branch if no overflow
/* b658 */                   LDX.imm (0x17);               // else error $17, string too long error
/* b65a */                   JMP.abs ("error_a437");       // do error #X then warm start
/* b65d */        _`_b65d`;  JSR.abs ("_b475");            // copy descriptor pointer and make string space A bytes long
/* b660 */                   JSR.abs ("movins_b67a");      // copy string from descriptor to utility pointer
/* b663 */                   LDA.zpg ("dscpnt+0_0050");    // get descriptor pointer low byte
/* b665 */                   LDY.zpg ("dscpnt+1_0051");    // get descriptor pointer high byte
/* b667 */                   JSR.abs ("_b6aa");            // pop (YA) descriptor off stack or from top of string space
                                                           // returns with A = length, X = pointer low byte,
                                                           // Y = pointer high byte
/* b66a */                   JSR.abs ("_b68c");            // store string from pointer to utility pointer
/* b66d */                   LDA.zpg ("arisgn_006f");      // get descriptor pointer low byte
/* b66f */                   LDY.zpg ("facov_0070");       // get descriptor pointer high byte
/* b671 */                   JSR.abs ("_b6aa");            // pop (YA) descriptor off stack or from top of string space
                                                           // returns with A = length, X = pointer low byte,
                                                           // Y = pointer high byte
/* b674 */                   JSR.abs ("_b4ca");            // check space on descriptor stack then put string address
                                                           // and length on descriptor stack and update stack pointers
/* b677 */                   JMP.abs ("_adb8");            // continue evaluation

// ------------------------------------------------------- // copy string from descriptor to utility pointer
/* b67a */  _`movins_b67a`;  LDY.imm (0x00);               // clear index
/* b67c */                   LDA.iny ("arisgn_006f");      // get string length
/* b67e */                   PHA.imp ();                   // save it
/* b67f */                   INY.imp ();                   // increment index
/* b680 */                   LDA.iny ("arisgn_006f");      // get string pointer low byte
/* b682 */                   TAX.imp ();                   // copy to X
/* b683 */                   INY.imp ();                   // increment index
/* b684 */                   LDA.iny ("arisgn_006f");      // get string pointer high byte
/* b686 */                   TAY.imp ();                   // copy to Y
/* b687 */                   PLA.imp ();                   // get length back
/* b688 */        _`_b688`;  STX.zpg ("index+0_0022");     // save string pointer low byte
/* b68a */                   STY.zpg ("index+1_0023");     // save string pointer high byte
                                                           // store string from pointer to utility pointer
/* b68c */        _`_b68c`;  TAY.imp ();                   // copy length as index
/* b68d */                   BEQ.rel ("_b699");            // branch if null string
/* b68f */                   PHA.imp ();                   // save length
/* b690 */        _`_b690`;  DEY.imp ();                   // decrement length/index
/* b691 */                   LDA.iny ("index+0_0022");     // get byte from string
/* b693 */                   STA.iny ("frespc+0_0035");    // save byte to destination
/* b695 */                   TYA.imp ();                   // copy length/index
/* b696 */                   BNE.rel ("_b690");            // loop if not all done yet
/* b698 */                   PLA.imp ();                   // restore length
/* b699 */        _`_b699`;  CLC.imp ();                   // clear carry for add
/* b69a */                   ADC.zpg ("frespc+0_0035");    // add string utility ptr low byte
/* b69c */                   STA.zpg ("frespc+0_0035");    // save string utility ptr low byte
/* b69e */                   BCC.rel ("_b6a2");            // branch if no rollover
/* b6a0 */                   INC.zpg ("frespc+1_0036");    // increment string utility ptr high byte
/* b6a2 */        _`_b6a2`;  RTS.imp ();

// ------------------------------------------------------- // evaluate string
/* b6a3 */  _`frestr_b6a3`;  JSR.abs ("_ad8f");            // check if source is string, else do type mismatch
                                                           // pop string off descriptor stack, or from top of string space
                                                           // returns with A = length, X = pointer low byte, Y = pointer high byte
/* b6a6 */        _`_b6a6`;  LDA.zpg ("facho+2_0064");     // get descriptor pointer low byte
/* b6a8 */                   LDY.zpg ("facho+3_0065");     // get descriptor pointer high byte
                                                           // pop (YA) descriptor off stack or from top of string space
                                                           // returns with A = length, X = pointer low byte, Y = pointer high byte
/* b6aa */        _`_b6aa`;  STA.zpg ("index+0_0022");     // save string pointer low byte
/* b6ac */                   STY.zpg ("index+1_0023");     // save string pointer high byte
/* b6ae */                   JSR.abs ("frefac_b6db");      // clean descriptor stack, YA = pointer
/* b6b1 */                   PHP.imp ();                   // save status flags
/* b6b2 */                   LDY.imm (0x00);               // clear index
/* b6b4 */                   LDA.iny ("index+0_0022");     // get length from string descriptor
/* b6b6 */                   PHA.imp ();                   // put on stack
/* b6b7 */                   INY.imp ();                   // increment index
/* b6b8 */                   LDA.iny ("index+0_0022");     // get string pointer low byte from descriptor
/* b6ba */                   TAX.imp ();                   // copy to X
/* b6bb */                   INY.imp ();                   // increment index
/* b6bc */                   LDA.iny ("index+0_0022");     // get string pointer high byte from descriptor
/* b6be */                   TAY.imp ();                   // copy to Y
/* b6bf */                   PLA.imp ();                   // get string length back
/* b6c0 */                   PLP.imp ();                   // restore status
/* b6c1 */                   BNE.rel ("_b6d6");            // branch if pointer <> last_sl,last_sh
/* b6c3 */                   CPY.zpg ("fretop+1_0034");    // compare with bottom of string space high byte
/* b6c5 */                   BNE.rel ("_b6d6");            // branch if <>
/* b6c7 */                   CPX.zpg ("fretop+0_0033");    // else compare with bottom of string space low byte
/* b6c9 */                   BNE.rel ("_b6d6");            // branch if <>
/* b6cb */                   PHA.imp ();                   // save string length
/* b6cc */                   CLC.imp ();                   // clear carry for add
/* b6cd */                   ADC.zpg ("fretop+0_0033");    // add bottom of string space low byte
/* b6cf */                   STA.zpg ("fretop+0_0033");    // set bottom of string space low byte
/* b6d1 */                   BCC.rel ("_b6d5");            // skip increment if no overflow
/* b6d3 */                   INC.zpg ("fretop+1_0034");    // increment bottom of string space high byte
/* b6d5 */        _`_b6d5`;  PLA.imp ();                   // restore string length
/* b6d6 */        _`_b6d6`;  STX.zpg ("index+0_0022");     // save string pointer low byte
/* b6d8 */                   STY.zpg ("index+1_0023");     // save string pointer high byte
/* b6da */                   RTS.imp ();
                                                           // clean descriptor stack, YA = pointer
                                                           // checks if AY is on the descriptor stack, if so does a stack discard
/* b6db */  _`frefac_b6db`;  CPY.zpg ("lastpt+1_0018");    // compare high byte with current descriptor stack item
                                                           // pointer high byte
/* b6dd */                   BNE.rel ("_b6eb");            // exit if <>
/* b6df */                   CMP.zpg ("lastpt+0_0017");    // compare low byte with current descriptor stack item
                                                           // pointer low byte
/* b6e1 */                   BNE.rel ("_b6eb");            // exit if <>
/* b6e3 */                   STA.zpg ("temppt_0016");      // set descriptor stack pointer
/* b6e5 */                   SBC.imm (0x03);               // update last string pointer low byte
/* b6e7 */                   STA.zpg ("lastpt+0_0017");    // save current descriptor stack item pointer low byte
/* b6e9 */                   LDY.imm (0x00);               // clear high byte
/* b6eb */        _`_b6eb`;  RTS.imp ();

// ------------------------------------------------------- // perform CHR$()
/* b6ec */    _`chrd_b6ec`;  JSR.abs ("_b7a1");            // evaluate byte expression, result in X
/* b6ef */                   TXA.imp ();                   // copy to A
/* b6f0 */                   PHA.imp ();                   // save character
/* b6f1 */                   LDA.imm (0x01);               // string is single byte
/* b6f3 */                   JSR.abs ("_b47d");            // make string space A bytes long
/* b6f6 */                   PLA.imp ();                   // get character back
/* b6f7 */                   LDY.imm (0x00);               // clear index
/* b6f9 */                   STA.iny ("facho+0_0062");     // save byte in string - byte IS string!
/* b6fb */                   PLA.imp ();                   // dump return address (skip type check)
/* b6fc */                   PLA.imp ();                   // dump return address (skip type check)
/* b6fd */                   JMP.abs ("_b4ca");            // check space on descriptor stack then put string address
                                                           // and length on descriptor stack and update stack pointers

// ------------------------------------------------------- // perform LEFT$()
/* b700 */   _`leftd_b700`;  JSR.abs ("pream_b761");       // pull string data and byte parameter from stack
                                                           // return pointer in descriptor, byte in A (and X), Y=0
/* b703 */                   CMP.iny ("dscpnt+0_0050");    // compare byte parameter with string length
/* b705 */                   TYA.imp ();                   // clear A
/* b706 */        _`_b706`;  BCC.rel ("_b70c");            // branch if string length > byte parameter
/* b708 */                   LDA.iny ("dscpnt+0_0050");    // else make parameter = length
/* b70a */                   TAX.imp ();                   // copy to byte parameter copy
/* b70b */                   TYA.imp ();                   // clear string start offset
/* b70c */        _`_b70c`;  PHA.imp ();                   // save string start offset
/* b70d */        _`_b70d`;  TXA.imp ();                   // copy byte parameter (or string length if <)
/* b70e */        _`_b70e`;  PHA.imp ();                   // save string length
/* b70f */                   JSR.abs ("_b47d");            // make string space A bytes long
/* b712 */                   LDA.zpg ("dscpnt+0_0050");    // get descriptor pointer low byte
/* b714 */                   LDY.zpg ("dscpnt+1_0051");    // get descriptor pointer high byte
/* b716 */                   JSR.abs ("_b6aa");            // pop (YA) descriptor off stack or from top of string space
                                                           // returns with A = length, X = pointer low byte,
                                                           // Y = pointer high byte
/* b719 */                   PLA.imp ();                   // get string length back
/* b71a */                   TAY.imp ();                   // copy length to Y
/* b71b */                   PLA.imp ();                   // get string start offset back
/* b71c */                   CLC.imp ();                   // clear carry for add
/* b71d */                   ADC.zpg ("index+0_0022");     // add start offset to string start pointer low byte
/* b71f */                   STA.zpg ("index+0_0022");     // save string start pointer low byte
/* b721 */                   BCC.rel ("_b725");            // branch if no overflow
/* b723 */                   INC.zpg ("index+1_0023");     // else increment string start pointer high byte
/* b725 */        _`_b725`;  TYA.imp ();                   // copy length to A
/* b726 */                   JSR.abs ("_b68c");            // store string from pointer to utility pointer
/* b729 */                   JMP.abs ("_b4ca");            // check space on descriptor stack then put string address
                                                           // and length on descriptor stack and update stack pointers

// ------------------------------------------------------- // perform RIGHT$()
/* b72c */  _`rightd_b72c`;  JSR.abs ("pream_b761");       // pull string data and byte parameter from stack
                                                           // return pointer in descriptor, byte in A (and X), Y=0
/* b72f */                   CLC.imp ();                   // clear carry for add-1
/* b730 */                   SBC.iny ("dscpnt+0_0050");    // subtract string length
/* b732 */                   EOR.imm (0xff);               // invert it (A=LEN(expression$)-l)
/* b734 */                   JMP.abs ("_b706");            // go do rest of LEFT$()

// ------------------------------------------------------- // perform MID$()
/* b737 */    _`midd_b737`;  LDA.imm (0xff);               // set default length = 255
/* b739 */                   STA.zpg ("facho+3_0065");     // save default length
/* b73b */                   JSR.abs ("chrgot_0079");      // scan memory
/* b73e */                   CMP.imm (0x29);               // compare with ")"
/* b740 */                   BEQ.rel ("_b748");            // branch if = ")" (skip second byte get)
/* b742 */                   JSR.abs ("_aefd");            // scan for ",", else do syntax error then warm start
/* b745 */                   JSR.abs ("_b79e");            // get byte parameter
/* b748 */        _`_b748`;  JSR.abs ("pream_b761");       // pull string data and byte parameter from stack
                                                           // return pointer in descriptor, byte in A (and X), Y=0
/* b74b */                   BEQ.rel ("_b798");            // if null do illegal quantity error then warm start
/* b74d */                   DEX.imp ();                   // decrement start index
/* b74e */                   TXA.imp ();                   // copy to A
/* b74f */                   PHA.imp ();                   // save string start offset
/* b750 */                   CLC.imp ();                   // clear carry for sub-1
/* b751 */                   LDX.imm (0x00);               // clear output string length
/* b753 */                   SBC.iny ("dscpnt+0_0050");    // subtract string length
/* b755 */                   BCS.rel ("_b70d");            // if start>string length go do null string
/* b757 */                   EOR.imm (0xff);               // complement -length
/* b759 */                   CMP.zpg ("facho+3_0065");     // compare byte parameter
/* b75b */                   BCC.rel ("_b70e");            // if length>remaining string go do RIGHT$
/* b75d */                   LDA.zpg ("facho+3_0065");     // get length byte
/* b75f */                   BCS.rel ("_b70e");            // go do string copy, branch always

// ------------------------------------------------------- // pull string data and byte parameter from stack
                                                           // return pointer in descriptor, byte in A (and X), Y=0
/* b761 */   _`pream_b761`;  JSR.abs ("chkcls_aef7");      // scan for ")", else do syntax error then warm start
/* b764 */                   PLA.imp ();                   // pull return address low byte
/* b765 */                   TAY.imp ();                   // save return address low byte
/* b766 */                   PLA.imp ();                   // pull return address high byte
/* b767 */                   STA.zpg ("jmper+1_0055");     // save return address high byte
/* b769 */                   PLA.imp ();                   // dump call to function vector low byte
/* b76a */                   PLA.imp ();                   // dump call to function vector high byte
/* b76b */                   PLA.imp ();                   // pull byte parameter
/* b76c */                   TAX.imp ();                   // copy byte parameter to X
/* b76d */                   PLA.imp ();                   // pull string pointer low byte
/* b76e */                   STA.zpg ("dscpnt+0_0050");    // save it
/* b770 */                   PLA.imp ();                   // pull string pointer high byte
/* b771 */                   STA.zpg ("dscpnt+1_0051");    // save it
/* b773 */                   LDA.zpg ("jmper+1_0055");     // get return address high byte
/* b775 */                   PHA.imp ();                   // back on stack
/* b776 */                   TYA.imp ();                   // get return address low byte
/* b777 */                   PHA.imp ();                   // back on stack
/* b778 */                   LDY.imm (0x00);               // clear index
/* b77a */                   TXA.imp ();                   // copy byte parameter
/* b77b */                   RTS.imp ();

// ------------------------------------------------------- // perform LEN()
/* b77c */     _`len_b77c`;  JSR.abs ("len1_b782");        // evaluate string, get length in A (and Y)
/* b77f */                   JMP.abs ("_b3a2");            // convert Y to byte in FAC1 and return

// ------------------------------------------------------- // evaluate string, get length in Y
/* b782 */    _`len1_b782`;  JSR.abs ("frestr_b6a3");      // evaluate string
/* b785 */                   LDX.imm (0x00);               // set data type = numeric
/* b787 */                   STX.zpg ("valtyp_000d");      // clear data type flag, $FF = string, $00 = numeric
/* b789 */                   TAY.imp ();                   // copy length to Y
/* b78a */                   RTS.imp ();

// ------------------------------------------------------- // perform ASC()
/* b78b */     _`asc_b78b`;  JSR.abs ("len1_b782");        // evaluate string, get length in A (and Y)
/* b78e */                   BEQ.rel ("_b798");            // if null do illegal quantity error then warm start
/* b790 */                   LDY.imm (0x00);               // set index to first character
/* b792 */                   LDA.iny ("index+0_0022");     // get byte
/* b794 */                   TAY.imp ();                   // copy to Y
/* b795 */                   JMP.abs ("_b3a2");            // convert Y to byte in FAC1 and return

// ------------------------------------------------------- // do illegal quantity error then warm start
/* b798 */        _`_b798`;  JMP.abs ("fcerr_b248");       // do illegal quantity error then warm start

// ------------------------------------------------------- // scan and get byte parameter
/* b79b */  _`gtbytc_b79b`;  JSR.abs ("chrget+0_0073");    // increment and scan memory

// ------------------------------------------------------- // get byte parameter
/* b79e */        _`_b79e`;  JSR.abs ("frmnum_ad8a");      // evaluate expression and check is numeric, else do
                                                           // type mismatch

// ------------------------------------------------------- // evaluate byte expression, result in X
/* b7a1 */        _`_b7a1`;  JSR.abs ("_b1b8");            // evaluate integer expression, sign check
/* b7a4 */                   LDX.zpg ("facho+2_0064");     // get FAC1 mantissa 3
/* b7a6 */                   BNE.rel ("_b798");            // if not null do illegal quantity error then warm start
/* b7a8 */                   LDX.zpg ("facho+3_0065");     // get FAC1 mantissa 4
/* b7aa */                   JMP.abs ("chrgot_0079");      // scan memory and return

// ------------------------------------------------------- // perform VAL()
/* b7ad */     _`val_b7ad`;  JSR.abs ("len1_b782");        // evaluate string, get length in A (and Y)
/* b7b0 */                   BNE.rel ("strval_b7b5");      // branch if not null string
                                                           // string was null so set result = $00
/* b7b2 */                   JMP.abs ("_b8f7");            // clear FAC1 exponent and sign and return
/* b7b5 */  _`strval_b7b5`;  LDX.zpg ("txtptr+0_007a");    // get BASIC execute pointer low byte
/* b7b7 */                   LDY.zpg ("txtptr+1_007b");    // get BASIC execute pointer high byte
/* b7b9 */                   STX.zpg ("fbufpt+0_0071");    // save BASIC execute pointer low byte
/* b7bb */                   STY.zpg ("fbufpt+1_0072");    // save BASIC execute pointer high byte
/* b7bd */                   LDX.zpg ("index+0_0022");     // get string pointer low byte
/* b7bf */                   STX.zpg ("txtptr+0_007a");    // save BASIC execute pointer low byte
/* b7c1 */                   CLC.imp ();                   // clear carry for add
/* b7c2 */                   ADC.zpg ("index+0_0022");     // add string length
/* b7c4 */                   STA.zpg ("index+2_0024");     // save string end low byte
/* b7c6 */                   LDX.zpg ("index+1_0023");     // get string pointer high byte
/* b7c8 */                   STX.zpg ("txtptr+1_007b");    // save BASIC execute pointer high byte
/* b7ca */                   BCC.rel ("_b7cd");            // branch if no high byte increment
/* b7cc */                   INX.imp ();                   // increment string end high byte
/* b7cd */        _`_b7cd`;  STX.zpg ("index+3_0025");     // save string end high byte
/* b7cf */                   LDY.imm (0x00);               // set index to $00
/* b7d1 */                   LDA.iny ("index+2_0024");     // get string end byte
/* b7d3 */                   PHA.imp ();                   // push it
/* b7d4 */                   TYA.imp ();                   // clear A
/* b7d5 */                   STA.iny ("index+2_0024");     // terminate string with $00
/* b7d7 */                   JSR.abs ("chrgot_0079");      // scan memory
/* b7da */                   JSR.abs ("fin_bcf3");         // get FAC1 from string
/* b7dd */                   PLA.imp ();                   // restore string end byte
/* b7de */                   LDY.imm (0x00);               // clear index
/* b7e0 */                   STA.iny ("index+2_0024");     // put string end byte back

// ------------------------------------------------------- // restore BASIC execute pointer from temp
/* b7e2 */        _`_b7e2`;  LDX.zpg ("fbufpt+0_0071");    // get BASIC execute pointer low byte back
/* b7e4 */                   LDY.zpg ("fbufpt+1_0072");    // get BASIC execute pointer high byte back
/* b7e6 */                   STX.zpg ("txtptr+0_007a");    // save BASIC execute pointer low byte
/* b7e8 */                   STY.zpg ("txtptr+1_007b");    // save BASIC execute pointer high byte
/* b7ea */                   RTS.imp ();

// ------------------------------------------------------- // get parameters for POKE/WAIT
/* b7eb */  _`getnum_b7eb`;  JSR.abs ("frmnum_ad8a");      // evaluate expression and check is numeric, else do
                                                           // type mismatch
/* b7ee */                   JSR.abs ("getadr_b7f7");      // convert FAC_1 to integer in temporary integer
/* b7f1 */        _`_b7f1`;  JSR.abs ("_aefd");            // scan for ",", else do syntax error then warm start
/* b7f4 */                   JMP.abs ("_b79e");            // get byte parameter and return

// ------------------------------------------------------- // convert FAC_1 to integer in temporary integer
/* b7f7 */  _`getadr_b7f7`;  LDA.zpg ("facsgn_0066");      // get FAC1 sign
/* b7f9 */                   BMI.rel ("_b798");            // if -ve do illegal quantity error then warm start
/* b7fb */                   LDA.zpg ("facexp_0061");      // get FAC1 exponent
/* b7fd */                   CMP.imm (0x91);               // compare with exponent = 2^16
/* b7ff */                   BCS.rel ("_b798");            // if >= do illegal quantity error then warm start
/* b801 */                   JSR.abs ("qint_bc9b");        // convert FAC1 floating to fixed
/* b804 */                   LDA.zpg ("facho+2_0064");     // get FAC1 mantissa 3
/* b806 */                   LDY.zpg ("facho+3_0065");     // get FAC1 mantissa 4
/* b808 */                   STY.zpg ("linnum+0_0014");    // save temporary integer low byte
/* b80a */                   STA.zpg ("linnum+1_0015");    // save temporary integer high byte
/* b80c */                   RTS.imp ();

// ------------------------------------------------------- // perform PEEK()
/* b80d */    _`peek_b80d`;  LDA.zpg ("linnum+1_0015");    // get line number high byte
/* b80f */                   PHA.imp ();                   // save line number high byte
/* b810 */                   LDA.zpg ("linnum+0_0014");    // get line number low byte
/* b812 */                   PHA.imp ();                   // save line number low byte
/* b813 */                   JSR.abs ("getadr_b7f7");      // convert FAC_1 to integer in temporary integer
/* b816 */                   LDY.imm (0x00);               // clear index
/* b818 */                   LDA.iny ("linnum+0_0014");    // read byte
/* b81a */                   TAY.imp ();                   // copy byte to A
/* b81b */                   PLA.imp ();                   // pull byte
/* b81c */                   STA.zpg ("linnum+0_0014");    // restore line number low byte
/* b81e */                   PLA.imp ();                   // pull byte
/* b81f */                   STA.zpg ("linnum+1_0015");    // restore line number high byte
/* b821 */                   JMP.abs ("_b3a2");            // convert Y to byte in FAC_1 and return

// ------------------------------------------------------- // perform POKE
/* b824 */    _`poke_b824`;  JSR.abs ("getnum_b7eb");      // get parameters for POKE/WAIT
/* b827 */                   TXA.imp ();                   // copy byte to A
/* b828 */                   LDY.imm (0x00);               // clear index
/* b82a */                   STA.iny ("linnum+0_0014");    // write byte
/* b82c */                   RTS.imp ();

// ------------------------------------------------------- // perform WAIT
/* b82d */    _`wait_b82d`;  JSR.abs ("getnum_b7eb");      // get parameters for POKE/WAIT
/* b830 */                   STX.zpg ("forpnt+0_0049");    // save byte
/* b832 */                   LDX.imm (0x00);               // clear mask
/* b834 */                   JSR.abs ("chrgot_0079");      // scan memory
/* b837 */                   BEQ.rel ("_b83c");            // skip if no third argument
/* b839 */                   JSR.abs ("_b7f1");            // scan for "," and get byte, else syntax error then
                                                           // warm start
/* b83c */        _`_b83c`;  STX.zpg ("forpnt+1_004a");    // save EOR argument
/* b83e */                   LDY.imm (0x00);               // clear index
/* b840 */        _`_b840`;  LDA.iny ("linnum+0_0014");    // get byte via temporary integer (address)
/* b842 */                   EOR.zpg ("forpnt+1_004a");    // EOR with second argument       (mask)
/* b844 */                   AND.zpg ("forpnt+0_0049");    // AND with first argument        (byte)
/* b846 */                   BEQ.rel ("_b840");            // loop if result is zero
/* b848 */        _`_b848`;  RTS.imp ();

// ------------------------------------------------------- // add 0.5 to FAC1 (round FAC1)
/* b849 */   _`faddh_b849`;  LDA.imm (0x11);               // set 0.5 pointer low byte
/* b84b */                   LDY.imm (0xbf);               // set 0.5 pointer high byte
/* b84d */                   JMP.abs ("fadd_b867");        // add (AY) to FAC1

// ------------------------------------------------------- // perform subtraction, FAC1 from (AY)
/* b850 */    _`fsub_b850`;  JSR.abs ("conupk_ba8c");      // unpack memory (AY) into FAC2

// ------------------------------------------------------- // perform subtraction, FAC1 from FAC2
/* b853 */   _`fsubt_b853`;  LDA.zpg ("facsgn_0066");      // get FAC1 sign (b7)
/* b855 */                   EOR.imm (0xff);               // complement it
/* b857 */                   STA.zpg ("facsgn_0066");      // save FAC1 sign (b7)
/* b859 */                   EOR.zpg ("argsgn_006e");      // EOR with FAC2 sign (b7)
/* b85b */                   STA.zpg ("arisgn_006f");      // save sign compare (FAC1 EOR FAC2)
/* b85d */                   LDA.zpg ("facexp_0061");      // get FAC1 exponent
/* b85f */                   JMP.abs ("faddt_b86a");       // add FAC2 to FAC1 and return
/* b862 */   _`fadd5_b862`;  JSR.abs ("_b999");            // shift FACX A times right (>8 shifts)
/* b865 */                   BCC.rel ("_b8a3");            // go subtract mantissas

// ------------------------------------------------------- // add (AY) to FAC1
/* b867 */    _`fadd_b867`;  JSR.abs ("conupk_ba8c");      // unpack memory (AY) into FAC2

// ------------------------------------------------------- // add FAC2 to FAC1
/* b86a */   _`faddt_b86a`;  BNE.rel ("_b86f");            // branch if FAC1 is not zero
/* b86c */                   JMP.abs ("movfa_bbfc");       // FAC1 was zero so copy FAC2 to FAC1 and return
                                                           // FAC1 is non zero
/* b86f */        _`_b86f`;  LDX.zpg ("facov_0070");       // get FAC1 rounding byte
/* b871 */                   STX.zpg ("jmper+2_0056");     // save as FAC2 rounding byte
/* b873 */                   LDX.imm (0x69);               // set index to FAC2 exponent address
/* b875 */                   LDA.zpg ("argexp_0069");      // get FAC2 exponent
/* b877 */        _`_b877`;  TAY.imp ();                   // copy exponent
/* b878 */                   BEQ.rel ("_b848");            // exit if zero
/* b87a */                   SEC.imp ();                   // set carry for subtract
/* b87b */                   SBC.zpg ("facexp_0061");      // subtract FAC1 exponent
/* b87d */                   BEQ.rel ("_b8a3");            // if equal go add mantissas
/* b87f */                   BCC.rel ("_b893");            // if FAC2 < FAC1 then go shift FAC2 right
                                                           // else FAC2 > FAC1
/* b881 */                   STY.zpg ("facexp_0061");      // save FAC1 exponent
/* b883 */                   LDY.zpg ("argsgn_006e");      // get FAC2 sign (b7)
/* b885 */                   STY.zpg ("facsgn_0066");      // save FAC1 sign (b7)
/* b887 */                   EOR.imm (0xff);               // complement A
/* b889 */                   ADC.imm (0x00);               // +1, twos complement, carry is set
/* b88b */                   LDY.imm (0x00);               // clear Y
/* b88d */                   STY.zpg ("jmper+2_0056");     // clear FAC2 rounding byte
/* b88f */                   LDX.imm (0x61);               // set index to FAC1 exponent address
/* b891 */                   BNE.rel ("_b897");            // branch always
                                                           // FAC2 < FAC1
/* b893 */        _`_b893`;  LDY.imm (0x00);               // clear Y
/* b895 */                   STY.zpg ("facov_0070");       // clear FAC1 rounding byte
/* b897 */        _`_b897`;  CMP.imm (0xf9);               // compare exponent diff with $F9
/* b899 */                   BMI.rel ("fadd5_b862");       // branch if range $79-$F8
/* b89b */                   TAY.imp ();                   // copy exponent difference to Y
/* b89c */                   LDA.zpg ("facov_0070");       // get FAC1 rounding byte
/* b89e */                   LSR.zpx (0x01);               // shift FAC? mantissa 1
/* b8a0 */                   JSR.abs ("_b9b0");            // shift FACX Y times right
                                                           // exponents are equal now do mantissa subtract
/* b8a3 */        _`_b8a3`;  BIT.zpg ("arisgn_006f");      // test sign compare (FAC1 EOR FAC2)
/* b8a5 */                   BPL.rel ("normal_b8fe");      // if = add FAC2 mantissa to FAC1 mantissa and return
/* b8a7 */   _`fadd4_b8a7`;  LDY.imm (0x61);               // set the Y index to FAC1 exponent address
/* b8a9 */                   CPX.imm (0x69);               // compare X to FAC2 exponent address
/* b8ab */                   BEQ.rel ("_b8af");            // if = continue, Y = FAC1, X = FAC2
/* b8ad */                   LDY.imm (0x69);               // else set the Y index to FAC2 exponent address
                                                           // subtract the smaller from the bigger (take the sign of
                                                           // the bigger)
/* b8af */        _`_b8af`;  SEC.imp ();                   // set carry for subtract
/* b8b0 */                   EOR.imm (0xff);               // ones complement A
/* b8b2 */                   ADC.zpg ("jmper+2_0056");     // add FAC2 rounding byte
/* b8b4 */                   STA.zpg ("facov_0070");       // save FAC1 rounding byte
/* b8b6 */                   LDA.aby ("adray1+1_0004");    // get FACY mantissa 4
/* b8b9 */                   SBC.zpx (0x04);               // subtract FACX mantissa 4
/* b8bb */                   STA.zpg ("facho+3_0065");     // save FAC1 mantissa 4
/* b8bd */                   LDA.aby ("adray1+0_0003");    // get FACY mantissa 3
/* b8c0 */                   SBC.zpx (0x03);               // subtract FACX mantissa 3
/* b8c2 */                   STA.zpg ("facho+2_0064");     // save FAC1 mantissa 3
/* b8c4 */                   LDA.aby ("_0002");            // get FACY mantissa 2
/* b8c7 */                   SBC.zpx (0x02);               // subtract FACX mantissa 2
/* b8c9 */                   STA.zpg ("facho+1_0063");     // save FAC1 mantissa 2
/* b8cb */                   LDA.aby ("r6510_0001");       // get FACY mantissa 1
/* b8ce */                   SBC.zpx (0x01);               // subtract FACX mantissa 1
/* b8d0 */                   STA.zpg ("facho+0_0062");     // save FAC1 mantissa 1

// ------------------------------------------------------- // do ABS and normalise FAC1
/* b8d2 */        _`_b8d2`;  BCS.rel ("_b8d7");            // branch if number is +ve
/* b8d4 */                   JSR.abs ("negfac_b947");      // negate FAC1

// ------------------------------------------------------- // normalise FAC1
/* b8d7 */        _`_b8d7`;  LDY.imm (0x00);               // clear Y
/* b8d9 */                   TYA.imp ();                   // clear A
/* b8da */                   CLC.imp ();                   // clear carry for add
/* b8db */        _`_b8db`;  LDX.zpg ("facho+0_0062");     // get FAC1 mantissa 1
/* b8dd */                   BNE.rel ("_b929");            // if not zero normalise FAC1
/* b8df */                   LDX.zpg ("facho+1_0063");     // get FAC1 mantissa 2
/* b8e1 */                   STX.zpg ("facho+0_0062");     // save FAC1 mantissa 1
/* b8e3 */                   LDX.zpg ("facho+2_0064");     // get FAC1 mantissa 3
/* b8e5 */                   STX.zpg ("facho+1_0063");     // save FAC1 mantissa 2
/* b8e7 */                   LDX.zpg ("facho+3_0065");     // get FAC1 mantissa 4
/* b8e9 */                   STX.zpg ("facho+2_0064");     // save FAC1 mantissa 3
/* b8eb */                   LDX.zpg ("facov_0070");       // get FAC1 rounding byte
/* b8ed */                   STX.zpg ("facho+3_0065");     // save FAC1 mantissa 4
/* b8ef */                   STY.zpg ("facov_0070");       // clear FAC1 rounding byte
/* b8f1 */                   ADC.imm (0x08);               // add x to exponent offset
/* b8f3 */                   CMP.imm (0x20);               // compare with $20, max offset, all bits would be = 0
/* b8f5 */                   BNE.rel ("_b8db");            // loop if not max

// ------------------------------------------------------- // clear FAC1 exponent and sign
/* b8f7 */        _`_b8f7`;  LDA.imm (0x00);               // clear A
/* b8f9 */        _`_b8f9`;  STA.zpg ("facexp_0061");      // set FAC1 exponent

// ------------------------------------------------------- // save FAC1 sign
/* b8fb */        _`_b8fb`;  STA.zpg ("facsgn_0066");      // save FAC1 sign (b7)
/* b8fd */                   RTS.imp ();

// ------------------------------------------------------- // add FAC2 mantissa to FAC1 mantissa
/* b8fe */  _`normal_b8fe`;  ADC.zpg ("jmper+2_0056");     // add FAC2 rounding byte
/* b900 */                   STA.zpg ("facov_0070");       // save FAC1 rounding byte
/* b902 */                   LDA.zpg ("facho+3_0065");     // get FAC1 mantissa 4
/* b904 */                   ADC.zpg ("argho+3_006d");     // add FAC2 mantissa 4
/* b906 */                   STA.zpg ("facho+3_0065");     // save FAC1 mantissa 4
/* b908 */                   LDA.zpg ("facho+2_0064");     // get FAC1 mantissa 3
/* b90a */                   ADC.zpg ("argho+2_006c");     // add FAC2 mantissa 3
/* b90c */                   STA.zpg ("facho+2_0064");     // save FAC1 mantissa 3
/* b90e */                   LDA.zpg ("facho+1_0063");     // get FAC1 mantissa 2
/* b910 */                   ADC.zpg ("argho+1_006b");     // add FAC2 mantissa 2
/* b912 */                   STA.zpg ("facho+1_0063");     // save FAC1 mantissa 2
/* b914 */                   LDA.zpg ("facho+0_0062");     // get FAC1 mantissa 1
/* b916 */                   ADC.zpg ("argho+0_006a");     // add FAC2 mantissa 1
/* b918 */                   STA.zpg ("facho+0_0062");     // save FAC1 mantissa 1
/* b91a */                   JMP.abs ("_b936");            // test and normalise FAC1 for C=0/1
/* b91d */        _`_b91d`;  ADC.imm (0x01);               // add 1 to exponent offset
/* b91f */                   ASL.zpg ("facov_0070");       // shift FAC1 rounding byte
/* b921 */                   ROL.zpg ("facho+3_0065");     // shift FAC1 mantissa 4
/* b923 */                   ROL.zpg ("facho+2_0064");     // shift FAC1 mantissa 3
/* b925 */                   ROL.zpg ("facho+1_0063");     // shift FAC1 mantissa 2
/* b927 */                   ROL.zpg ("facho+0_0062");     // shift FAC1 mantissa 1
                                                           // normalise FAC1
/* b929 */        _`_b929`;  BPL.rel ("_b91d");            // loop if not normalised
/* b92b */                   SEC.imp ();                   // set carry for subtract
/* b92c */                   SBC.zpg ("facexp_0061");      // subtract FAC1 exponent
/* b92e */                   BCS.rel ("_b8f7");            // branch if underflow (set result = $0)
/* b930 */                   EOR.imm (0xff);               // complement exponent
/* b932 */                   ADC.imm (0x01);               // +1 (twos complement)
/* b934 */                   STA.zpg ("facexp_0061");      // save FAC1 exponent
                                                           // test and normalise FAC1 for C=0/1
/* b936 */        _`_b936`;  BCC.rel ("_b946");            // exit if no overflow
                                                           // normalise FAC1 for C=1
/* b938 */        _`_b938`;  INC.zpg ("facexp_0061");      // increment FAC1 exponent
/* b93a */                   BEQ.rel ("overr_b97e");       // if zero do overflow error then warm start
/* b93c */                   ROR.zpg ("facho+0_0062");     // shift FAC1 mantissa 1
/* b93e */                   ROR.zpg ("facho+1_0063");     // shift FAC1 mantissa 2
/* b940 */                   ROR.zpg ("facho+2_0064");     // shift FAC1 mantissa 3
/* b942 */                   ROR.zpg ("facho+3_0065");     // shift FAC1 mantissa 4
/* b944 */                   ROR.zpg ("facov_0070");       // shift FAC1 rounding byte
/* b946 */        _`_b946`;  RTS.imp ();

// ------------------------------------------------------- // negate FAC1
/* b947 */  _`negfac_b947`;  LDA.zpg ("facsgn_0066");      // get FAC1 sign (b7)
/* b949 */                   EOR.imm (0xff);               // complement it
/* b94b */                   STA.zpg ("facsgn_0066");      // save FAC1 sign (b7)
                                                           // twos complement FAC1 mantissa
/* b94d */        _`_b94d`;  LDA.zpg ("facho+0_0062");     // get FAC1 mantissa 1
/* b94f */                   EOR.imm (0xff);               // complement it
/* b951 */                   STA.zpg ("facho+0_0062");     // save FAC1 mantissa 1
/* b953 */                   LDA.zpg ("facho+1_0063");     // get FAC1 mantissa 2
/* b955 */                   EOR.imm (0xff);               // complement it
/* b957 */                   STA.zpg ("facho+1_0063");     // save FAC1 mantissa 2
/* b959 */                   LDA.zpg ("facho+2_0064");     // get FAC1 mantissa 3
/* b95b */                   EOR.imm (0xff);               // complement it
/* b95d */                   STA.zpg ("facho+2_0064");     // save FAC1 mantissa 3
/* b95f */                   LDA.zpg ("facho+3_0065");     // get FAC1 mantissa 4
/* b961 */                   EOR.imm (0xff);               // complement it
/* b963 */                   STA.zpg ("facho+3_0065");     // save FAC1 mantissa 4
/* b965 */                   LDA.zpg ("facov_0070");       // get FAC1 rounding byte
/* b967 */                   EOR.imm (0xff);               // complement it
/* b969 */                   STA.zpg ("facov_0070");       // save FAC1 rounding byte
/* b96b */                   INC.zpg ("facov_0070");       // increment FAC1 rounding byte
/* b96d */                   BNE.rel ("_b97d");            // exit if no overflow
                                                           // increment FAC1 mantissa
/* b96f */        _`_b96f`;  INC.zpg ("facho+3_0065");     // increment FAC1 mantissa 4
/* b971 */                   BNE.rel ("_b97d");            // finished if no rollover
/* b973 */                   INC.zpg ("facho+2_0064");     // increment FAC1 mantissa 3
/* b975 */                   BNE.rel ("_b97d");            // finished if no rollover
/* b977 */                   INC.zpg ("facho+1_0063");     // increment FAC1 mantissa 2
/* b979 */                   BNE.rel ("_b97d");            // finished if no rollover
/* b97b */                   INC.zpg ("facho+0_0062");     // increment FAC1 mantissa 1
/* b97d */        _`_b97d`;  RTS.imp ();

// ------------------------------------------------------- // do overflow error then warm start
/* b97e */   _`overr_b97e`;  LDX.imm (0x0f);               // error $0F, overflow error
/* b980 */                   JMP.abs ("error_a437");       // do error #X then warm start

// ------------------------------------------------------- // shift FCAtemp << A+8 times
/* b983 */  _`mulshf_b983`;  LDX.imm (0x25);               // set the offset to FACtemp
/* b985 */        _`_b985`;  LDY.zpx (0x04);               // get FACX mantissa 4
/* b987 */                   STY.zpg ("facov_0070");       // save as FAC1 rounding byte
/* b989 */                   LDY.zpx (0x03);               // get FACX mantissa 3
/* b98b */                   STY.zpx (0x04);               // save FACX mantissa 4
/* b98d */                   LDY.zpx (0x02);               // get FACX mantissa 2
/* b98f */                   STY.zpx (0x03);               // save FACX mantissa 3
/* b991 */                   LDY.zpx (0x01);               // get FACX mantissa 1
/* b993 */                   STY.zpx (0x02);               // save FACX mantissa 2
/* b995 */                   LDY.zpg ("bits_0068");        // get FAC1 overflow byte
/* b997 */                   STY.zpx (0x01);               // save FACX mantissa 1
                                                           // shift FACX -A times right (> 8 shifts)
/* b999 */        _`_b999`;  ADC.imm (0x08);               // add 8 to shift count
/* b99b */                   BMI.rel ("_b985");            // go do 8 shift if still -ve
/* b99d */                   BEQ.rel ("_b985");            // go do 8 shift if zero
/* b99f */                   SBC.imm (0x08);               // else subtract 8 again
/* b9a1 */                   TAY.imp ();                   // save count to Y
/* b9a2 */                   LDA.zpg ("facov_0070");       // get FAC1 rounding byte
/* b9a4 */                   BCS.rel ("_b9ba");
/* b9a6 */        _`_b9a6`;  ASL.zpx (0x01);               // shift FACX mantissa 1
/* b9a8 */                   BCC.rel ("_b9ac");            // branch if +ve
/* b9aa */                   INC.zpx (0x01);               // this sets b7 eventually
/* b9ac */        _`_b9ac`;  ROR.zpx (0x01);               // shift FACX mantissa 1 (correct for ASL)
/* b9ae */                   ROR.zpx (0x01);               // shift FACX mantissa 1 (put carry in b7)
                                                           // shift FACX Y times right
/* b9b0 */        _`_b9b0`;  ROR.zpx (0x02);               // shift FACX mantissa 2
/* b9b2 */                   ROR.zpx (0x03);               // shift FACX mantissa 3
/* b9b4 */                   ROR.zpx (0x04);               // shift FACX mantissa 4
/* b9b6 */                   ROR.acc ();                   // shift FACX rounding byte
/* b9b7 */                   INY.imp ();                   // increment exponent diff
/* b9b8 */                   BNE.rel ("_b9a6");            // branch if range adjust not complete
/* b9ba */        _`_b9ba`;  CLC.imp ();                   // just clear it
/* b9bb */                   RTS.imp ();

// ------------------------------------------------------- // constants and series for LOG(n)
                                                           // 1
/* b9bc */    _`fone_b9bc`;  _.bytes(0x81, 0x00, 0x00, 0x00, 0x00);
/* b9c1 */  _`logcn2_b9c1`;  _.bytes(0x03);                // series counter
                                                           //  .434255942
/* b9c2 */                   _.bytes(0x7f, 0x5e, 0x56, 0xcb, 0x79);
                                                           //  .576584541
/* b9c7 */                   _.bytes(0x80, 0x13, 0x9b, 0x0b, 0x64);
                                                           //  .961800759
/* b9cc */                   _.bytes(0x80, 0x76, 0x38, 0x93, 0x16);
                                                           // 2.88539007
/* b9d1 */                   _.bytes(0x82, 0x38, 0xaa, 0x3b, 0x20);
                                                           //  .707106781 = 1/SQR(2)
/* b9d6 */                   _.bytes(0x80, 0x35, 0x04, 0xf3, 0x34);
                                                           // 1.41421356 = SQR(2)
/* b9db */                   _.bytes(0x81, 0x35, 0x04, 0xf3, 0x34);
                                                           // -.5
/* b9e0 */                   _.bytes(0x80, 0x80, 0x00, 0x00, 0x00);
                                                           //  .693147181  =  LOG(2)
/* b9e5 */                   _.bytes(0x80, 0x31, 0x72, 0x17, 0xf8);

// ------------------------------------------------------- // perform LOG()
/* b9ea */     _`log_b9ea`;  JSR.abs ("sign_bc2b");        // test sign and zero
/* b9ed */                   BEQ.rel ("_b9f1");            // if zero do illegal quantity error then warm start
/* b9ef */                   BPL.rel ("_b9f4");            // skip error if +ve
/* b9f1 */        _`_b9f1`;  JMP.abs ("fcerr_b248");       // do illegal quantity error then warm start
/* b9f4 */        _`_b9f4`;  LDA.zpg ("facexp_0061");      // get FAC1 exponent
/* b9f6 */                   SBC.imm (0x7f);               // normalise it
/* b9f8 */                   PHA.imp ();                   // save it
/* b9f9 */                   LDA.imm (0x80);               // set exponent to zero
/* b9fb */                   STA.zpg ("facexp_0061");      // save FAC1 exponent
/* b9fd */                   LDA.imm (0xd6);               // pointer to 1/root 2 low byte
/* b9ff */                   LDY.imm (0xb9);               // pointer to 1/root 2 high byte
/* ba01 */                   JSR.abs ("fadd_b867");        // add (AY) to FAC1 (1/root2)
/* ba04 */                   LDA.imm (0xdb);               // pointer to root 2 low byte
/* ba06 */                   LDY.imm (0xb9);               // pointer to root 2 high byte
/* ba08 */                   JSR.abs ("fdiv_bb0f");        // convert AY and do (AY)/FAC1 (root2/(x+(1/root2)))
/* ba0b */                   LDA.imm (0xbc);               // pointer to 1 low byte
/* ba0d */                   LDY.imm (0xb9);               // pointer to 1 high byte
/* ba0f */                   JSR.abs ("fsub_b850");        // subtract FAC1 ((root2/(x+(1/root2)))-1) from (AY)
/* ba12 */                   LDA.imm (0xc1);               // pointer to series for LOG(n) low byte
/* ba14 */                   LDY.imm (0xb9);               // pointer to series for LOG(n) high byte
/* ba16 */                   JSR.abs ("polyx_e043");       // ^2 then series evaluation
/* ba19 */                   LDA.imm (0xe0);               // pointer to -0.5 low byte
/* ba1b */                   LDY.imm (0xb9);               // pointer to -0.5 high byte
/* ba1d */                   JSR.abs ("fadd_b867");        // add (AY) to FAC1
/* ba20 */                   PLA.imp ();                   // restore FAC1 exponent
/* ba21 */                   JSR.abs ("finlog_bd7e");      // evaluate new ASCII digit
/* ba24 */                   LDA.imm (0xe5);               // pointer to LOG(2) low byte
/* ba26 */                   LDY.imm (0xb9);               // pointer to LOG(2) high byte

// ------------------------------------------------------- // do convert AY, FCA1*(AY)
/* ba28 */   _`fmult_ba28`;  JSR.abs ("conupk_ba8c");      // unpack memory (AY) into FAC2
/* ba2b */                   BNE.rel ("_ba30");            // multiply FAC1 by FAC2 ??
/* ba2d */                   JMP.abs ("_ba8b");            // exit if zero
/* ba30 */        _`_ba30`;  JSR.abs ("muldiv_bab7");      // test and adjust accumulators
/* ba33 */                   LDA.imm (0x00);               // clear A
/* ba35 */                   STA.zpg ("resho+0_0026");     // clear temp mantissa 1
/* ba37 */                   STA.zpg ("resho+1_0027");     // clear temp mantissa 2
/* ba39 */                   STA.zpg ("resho+2_0028");     // clear temp mantissa 3
/* ba3b */                   STA.zpg ("resho+3_0029");     // clear temp mantissa 4
/* ba3d */                   LDA.zpg ("facov_0070");       // get FAC1 rounding byte
/* ba3f */                   JSR.abs ("mulply_ba59");      // go do shift/add FAC2
/* ba42 */                   LDA.zpg ("facho+3_0065");     // get FAC1 mantissa 4
/* ba44 */                   JSR.abs ("mulply_ba59");      // go do shift/add FAC2
/* ba47 */                   LDA.zpg ("facho+2_0064");     // get FAC1 mantissa 3
/* ba49 */                   JSR.abs ("mulply_ba59");      // go do shift/add FAC2
/* ba4c */                   LDA.zpg ("facho+1_0063");     // get FAC1 mantissa 2
/* ba4e */                   JSR.abs ("mulply_ba59");      // go do shift/add FAC2
/* ba51 */                   LDA.zpg ("facho+0_0062");     // get FAC1 mantissa 1
/* ba53 */                   JSR.abs ("_ba5e");            // go do shift/add FAC2
/* ba56 */                   JMP.abs ("_bb8f");            // copy temp to FAC1, normalise and return
/* ba59 */  _`mulply_ba59`;  BNE.rel ("_ba5e");            // branch if byte <> zero
/* ba5b */                   JMP.abs ("mulshf_b983");      // shift FCAtemp << A+8 times
                                                           // else do shift and add
/* ba5e */        _`_ba5e`;  LSR.acc ();                   // shift byte
/* ba5f */                   ORA.imm (0x80);               // set top bit (mark for 8 times)
/* ba61 */        _`_ba61`;  TAY.imp ();                   // copy result
/* ba62 */                   BCC.rel ("_ba7d");            // skip next if bit was zero
/* ba64 */                   CLC.imp ();                   // clear carry for add
/* ba65 */                   LDA.zpg ("resho+3_0029");     // get temp mantissa 4
/* ba67 */                   ADC.zpg ("argho+3_006d");     // add FAC2 mantissa 4
/* ba69 */                   STA.zpg ("resho+3_0029");     // save temp mantissa 4
/* ba6b */                   LDA.zpg ("resho+2_0028");     // get temp mantissa 3
/* ba6d */                   ADC.zpg ("argho+2_006c");     // add FAC2 mantissa 3
/* ba6f */                   STA.zpg ("resho+2_0028");     // save temp mantissa 3
/* ba71 */                   LDA.zpg ("resho+1_0027");     // get temp mantissa 2
/* ba73 */                   ADC.zpg ("argho+1_006b");     // add FAC2 mantissa 2
/* ba75 */                   STA.zpg ("resho+1_0027");     // save temp mantissa 2
/* ba77 */                   LDA.zpg ("resho+0_0026");     // get temp mantissa 1
/* ba79 */                   ADC.zpg ("argho+0_006a");     // add FAC2 mantissa 1
/* ba7b */                   STA.zpg ("resho+0_0026");     // save temp mantissa 1
/* ba7d */        _`_ba7d`;  ROR.zpg ("resho+0_0026");     // shift temp mantissa 1
/* ba7f */                   ROR.zpg ("resho+1_0027");     // shift temp mantissa 2
/* ba81 */                   ROR.zpg ("resho+2_0028");     // shift temp mantissa 3
/* ba83 */                   ROR.zpg ("resho+3_0029");     // shift temp mantissa 4
/* ba85 */                   ROR.zpg ("facov_0070");       // shift temp rounding byte
/* ba87 */                   TYA.imp ();                   // get byte back
/* ba88 */                   LSR.acc ();                   // shift byte
/* ba89 */                   BNE.rel ("_ba61");            // loop if all bits not done
/* ba8b */        _`_ba8b`;  RTS.imp ();

// ------------------------------------------------------- // unpack memory (AY) into FAC2
/* ba8c */  _`conupk_ba8c`;  STA.zpg ("index+0_0022");     // save pointer low byte
/* ba8e */                   STY.zpg ("index+1_0023");     // save pointer high byte
/* ba90 */                   LDY.imm (0x04);               // 5 bytes to get (0-4)
/* ba92 */                   LDA.iny ("index+0_0022");     // get mantissa 4
/* ba94 */                   STA.zpg ("argho+3_006d");     // save FAC2 mantissa 4
/* ba96 */                   DEY.imp ();                   // decrement index
/* ba97 */                   LDA.iny ("index+0_0022");     // get mantissa 3
/* ba99 */                   STA.zpg ("argho+2_006c");     // save FAC2 mantissa 3
/* ba9b */                   DEY.imp ();                   // decrement index
/* ba9c */                   LDA.iny ("index+0_0022");     // get mantissa 2
/* ba9e */                   STA.zpg ("argho+1_006b");     // save FAC2 mantissa 2
/* baa0 */                   DEY.imp ();                   // decrement index
/* baa1 */                   LDA.iny ("index+0_0022");     // get mantissa 1 + sign
/* baa3 */                   STA.zpg ("argsgn_006e");      // save FAC2 sign (b7)
/* baa5 */                   EOR.zpg ("facsgn_0066");      // EOR with FAC1 sign (b7)
/* baa7 */                   STA.zpg ("arisgn_006f");      // save sign compare (FAC1 EOR FAC2)
/* baa9 */                   LDA.zpg ("argsgn_006e");      // recover FAC2 sign (b7)
/* baab */                   ORA.imm (0x80);               // set 1xxx xxx (set normal bit)
/* baad */                   STA.zpg ("argho+0_006a");     // save FAC2 mantissa 1
/* baaf */                   DEY.imp ();                   // decrement index
/* bab0 */                   LDA.iny ("index+0_0022");     // get exponent byte
/* bab2 */                   STA.zpg ("argexp_0069");      // save FAC2 exponent
/* bab4 */                   LDA.zpg ("facexp_0061");      // get FAC1 exponent
/* bab6 */                   RTS.imp ();

// ------------------------------------------------------- // test and adjust accumulators
/* bab7 */  _`muldiv_bab7`;  LDA.zpg ("argexp_0069");      // get FAC2 exponent
/* bab9 */                   BEQ.rel ("_bada");            // branch if FAC2 = $00 (handle underflow)
/* babb */                   CLC.imp ();                   // clear carry for add
/* babc */                   ADC.zpg ("facexp_0061");      // add FAC1 exponent
/* babe */                   BCC.rel ("_bac4");            // branch if sum of exponents < $0100
/* bac0 */                   BMI.rel ("_badf");            // do overflow error
/* bac2 */                   CLC.imp ();                   // clear carry for the add
/* bac3 */                   _.bytes(0x2c);                // makes next line BIT $1410
/* bac4 */        _`_bac4`;  BPL.rel ("_bada");            // if +ve go handle underflow
/* bac6 */                   ADC.imm (0x80);               // adjust exponent
/* bac8 */                   STA.zpg ("facexp_0061");      // save FAC1 exponent
/* baca */                   BNE.rel ("_bacf");            // branch if not zero
/* bacc */                   JMP.abs ("_b8fb");            // save FAC1 sign and return
/* bacf */        _`_bacf`;  LDA.zpg ("arisgn_006f");      // get sign compare (FAC1 EOR FAC2)
/* bad1 */                   STA.zpg ("facsgn_0066");      // save FAC1 sign (b7)
/* bad3 */                   RTS.imp ();
                                                           // handle overflow and underflow
/* bad4 */  _`mldvex_bad4`;  LDA.zpg ("facsgn_0066");      // get FAC1 sign (b7)
/* bad6 */                   EOR.imm (0xff);               // complement it
/* bad8 */                   BMI.rel ("_badf");            // do overflow error
                                                           // handle underflow
/* bada */        _`_bada`;  PLA.imp ();                   // pop return address low byte
/* badb */                   PLA.imp ();                   // pop return address high byte
/* badc */                   JMP.abs ("_b8f7");            // clear FAC1 exponent and sign and return
/* badf */        _`_badf`;  JMP.abs ("overr_b97e");       // do overflow error then warm start

// ------------------------------------------------------- // multiply FAC1 by 10
/* bae2 */   _`mul10_bae2`;  JSR.abs ("movaf_bc0c");       // round and copy FAC1 to FAC2
/* bae5 */                   TAX.imp ();                   // copy exponent (set the flags)
/* bae6 */                   BEQ.rel ("_baf8");            // exit if zero
/* bae8 */                   CLC.imp ();                   // clear carry for add
/* bae9 */                   ADC.imm (0x02);               // add two to exponent (*4)
/* baeb */                   BCS.rel ("_badf");            // do overflow error if > $FF
                                                           // FAC1 = (FAC1 + FAC2) * 2
/* baed */        _`_baed`;  LDX.imm (0x00);               // clear byte
/* baef */                   STX.zpg ("arisgn_006f");      // clear sign compare (FAC1 EOR FAC2)
/* baf1 */                   JSR.abs ("_b877");            // add FAC2 to FAC1 (*5)
/* baf4 */                   INC.zpg ("facexp_0061");      // increment FAC1 exponent (*10)
/* baf6 */                   BEQ.rel ("_badf");            // if exponent now zero go do overflow error
/* baf8 */        _`_baf8`;  RTS.imp ();

// ------------------------------------------------------- // 10 as a floating value
                                                           // 10
/* baf9 */    _`tenc_baf9`;  _.bytes(0x84, 0x20, 0x00, 0x00, 0x00);

// ------------------------------------------------------- // divide FAC1 by 10
/* bafe */   _`div10_bafe`;  JSR.abs ("movaf_bc0c");       // round and copy FAC1 to FAC2
/* bb01 */                   LDA.imm (0xf9);               // set 10 pointer low byte
/* bb03 */                   LDY.imm (0xba);               // set 10 pointer high byte
/* bb05 */                   LDX.imm (0x00);               // clear sign

// ------------------------------------------------------- // divide by (AY) (X=sign)
/* bb07 */   _`fdivf_bb07`;  STX.zpg ("arisgn_006f");      // save sign compare (FAC1 EOR FAC2)
/* bb09 */                   JSR.abs ("movfm_bba2");       // unpack memory (AY) into FAC1
/* bb0c */                   JMP.abs ("fdivt_bb12");       // do FAC2/FAC1
                                                           // Perform divide-by

// ------------------------------------------------------- // convert AY and do (AY)/FAC1
/* bb0f */    _`fdiv_bb0f`;  JSR.abs ("conupk_ba8c");      // unpack memory (AY) into FAC2
/* bb12 */   _`fdivt_bb12`;  BEQ.rel ("_bb8a");            // if zero go do /0 error
/* bb14 */                   JSR.abs ("round_bc1b");       // round FAC1
/* bb17 */                   LDA.imm (0x00);               // clear A
/* bb19 */                   SEC.imp ();                   // set carry for subtract
/* bb1a */                   SBC.zpg ("facexp_0061");      // subtract FAC1 exponent (2s complement)
/* bb1c */                   STA.zpg ("facexp_0061");      // save FAC1 exponent
/* bb1e */                   JSR.abs ("muldiv_bab7");      // test and adjust accumulators
/* bb21 */                   INC.zpg ("facexp_0061");      // increment FAC1 exponent
/* bb23 */                   BEQ.rel ("_badf");            // if zero do overflow error
/* bb25 */                   LDX.imm (0xfc);               // set index to FAC temp
/* bb27 */                   LDA.imm (0x01);               // set byte
/* bb29 */        _`_bb29`;  LDY.zpg ("argho+0_006a");     // get FAC2 mantissa 1
/* bb2b */                   CPY.zpg ("facho+0_0062");     // compare FAC1 mantissa 1
/* bb2d */                   BNE.rel ("_bb3f");            // branch if <>
/* bb2f */                   LDY.zpg ("argho+1_006b");     // get FAC2 mantissa 2
/* bb31 */                   CPY.zpg ("facho+1_0063");     // compare FAC1 mantissa 2
/* bb33 */                   BNE.rel ("_bb3f");            // branch if <>
/* bb35 */                   LDY.zpg ("argho+2_006c");     // get FAC2 mantissa 3
/* bb37 */                   CPY.zpg ("facho+2_0064");     // compare FAC1 mantissa 3
/* bb39 */                   BNE.rel ("_bb3f");            // branch if <>
/* bb3b */                   LDY.zpg ("argho+3_006d");     // get FAC2 mantissa 4
/* bb3d */                   CPY.zpg ("facho+3_0065");     // compare FAC1 mantissa 4
/* bb3f */        _`_bb3f`;  PHP.imp ();                   // save FAC2-FAC1 compare status
/* bb40 */                   ROL.acc ();                   // shift byte
/* bb41 */                   BCC.rel ("_bb4c");            // skip next if no carry
/* bb43 */                   INX.imp ();                   // increment index to FAC temp
/* bb44 */                   STA.zpx (0x29);
/* bb46 */                   BEQ.rel ("_bb7a");
/* bb48 */                   BPL.rel ("_bb7e");
/* bb4a */                   LDA.imm (0x01);
/* bb4c */        _`_bb4c`;  PLP.imp ();                   // restore FAC2-FAC1 compare status
/* bb4d */                   BCS.rel ("_bb5d");            // if FAC2 >= FAC1 then do subtract
                                                           // FAC2 = FAC2*2
/* bb4f */        _`_bb4f`;  ASL.zpg ("argho+3_006d");     // shift FAC2 mantissa 4
/* bb51 */                   ROL.zpg ("argho+2_006c");     // shift FAC2 mantissa 3
/* bb53 */                   ROL.zpg ("argho+1_006b");     // shift FAC2 mantissa 2
/* bb55 */                   ROL.zpg ("argho+0_006a");     // shift FAC2 mantissa 1
/* bb57 */                   BCS.rel ("_bb3f");            // loop with no compare
/* bb59 */                   BMI.rel ("_bb29");            // loop with compare
/* bb5b */                   BPL.rel ("_bb3f");            // loop with no compare, branch always
/* bb5d */        _`_bb5d`;  TAY.imp ();                   // save FAC2-FAC1 compare status
/* bb5e */                   LDA.zpg ("argho+3_006d");     // get FAC2 mantissa 4
/* bb60 */                   SBC.zpg ("facho+3_0065");     // subtract FAC1 mantissa 4
/* bb62 */                   STA.zpg ("argho+3_006d");     // save FAC2 mantissa 4
/* bb64 */                   LDA.zpg ("argho+2_006c");     // get FAC2 mantissa 3
/* bb66 */                   SBC.zpg ("facho+2_0064");     // subtract FAC1 mantissa 3
/* bb68 */                   STA.zpg ("argho+2_006c");     // save FAC2 mantissa 3
/* bb6a */                   LDA.zpg ("argho+1_006b");     // get FAC2 mantissa 2
/* bb6c */                   SBC.zpg ("facho+1_0063");     // subtract FAC1 mantissa 2
/* bb6e */                   STA.zpg ("argho+1_006b");     // save FAC2 mantissa 2
/* bb70 */                   LDA.zpg ("argho+0_006a");     // get FAC2 mantissa 1
/* bb72 */                   SBC.zpg ("facho+0_0062");     // subtract FAC1 mantissa 1
/* bb74 */                   STA.zpg ("argho+0_006a");     // save FAC2 mantissa 1
/* bb76 */                   TYA.imp ();                   // restore FAC2-FAC1 compare status
/* bb77 */                   JMP.abs ("_bb4f");
/* bb7a */        _`_bb7a`;  LDA.imm (0x40);
/* bb7c */                   BNE.rel ("_bb4c");            // branch always
                                                           // do A<<6, save as FAC1 rounding byte, normalise and return
/* bb7e */        _`_bb7e`;  ASL.acc ();
/* bb7f */                   ASL.acc ();
/* bb80 */                   ASL.acc ();
/* bb81 */                   ASL.acc ();
/* bb82 */                   ASL.acc ();
/* bb83 */                   ASL.acc ();
/* bb84 */                   STA.zpg ("facov_0070");       // save FAC1 rounding byte
/* bb86 */                   PLP.imp ();                   // dump FAC2-FAC1 compare status
/* bb87 */                   JMP.abs ("_bb8f");            // copy temp to FAC1, normalise and return
                                                           // do "Divide by zero" error
/* bb8a */        _`_bb8a`;  LDX.imm (0x14);               // error $14, divide by zero error
/* bb8c */                   JMP.abs ("error_a437");       // do error #X then warm start
/* bb8f */        _`_bb8f`;  LDA.zpg ("resho+0_0026");     // get temp mantissa 1
/* bb91 */                   STA.zpg ("facho+0_0062");     // save FAC1 mantissa 1
/* bb93 */                   LDA.zpg ("resho+1_0027");     // get temp mantissa 2
/* bb95 */                   STA.zpg ("facho+1_0063");     // save FAC1 mantissa 2
/* bb97 */                   LDA.zpg ("resho+2_0028");     // get temp mantissa 3
/* bb99 */                   STA.zpg ("facho+2_0064");     // save FAC1 mantissa 3
/* bb9b */                   LDA.zpg ("resho+3_0029");     // get temp mantissa 4
/* bb9d */                   STA.zpg ("facho+3_0065");     // save FAC1 mantissa 4
/* bb9f */                   JMP.abs ("_b8d7");            // normalise FAC1 and return

// ------------------------------------------------------- // unpack memory (AY) into FAC1
/* bba2 */   _`movfm_bba2`;  STA.zpg ("index+0_0022");     // save pointer low byte
/* bba4 */                   STY.zpg ("index+1_0023");     // save pointer high byte
/* bba6 */                   LDY.imm (0x04);               // 5 bytes to do
/* bba8 */                   LDA.iny ("index+0_0022");     // get fifth byte
/* bbaa */                   STA.zpg ("facho+3_0065");     // save FAC1 mantissa 4
/* bbac */                   DEY.imp ();                   // decrement index
/* bbad */                   LDA.iny ("index+0_0022");     // get fourth byte
/* bbaf */                   STA.zpg ("facho+2_0064");     // save FAC1 mantissa 3
/* bbb1 */                   DEY.imp ();                   // decrement index
/* bbb2 */                   LDA.iny ("index+0_0022");     // get third byte
/* bbb4 */                   STA.zpg ("facho+1_0063");     // save FAC1 mantissa 2
/* bbb6 */                   DEY.imp ();                   // decrement index
/* bbb7 */                   LDA.iny ("index+0_0022");     // get second byte
/* bbb9 */                   STA.zpg ("facsgn_0066");      // save FAC1 sign (b7)
/* bbbb */                   ORA.imm (0x80);               // set 1xxx xxxx (add normal bit)
/* bbbd */                   STA.zpg ("facho+0_0062");     // save FAC1 mantissa 1
/* bbbf */                   DEY.imp ();                   // decrement index
/* bbc0 */                   LDA.iny ("index+0_0022");     // get first byte (exponent)
/* bbc2 */                   STA.zpg ("facexp_0061");      // save FAC1 exponent
/* bbc4 */                   STY.zpg ("facov_0070");       // clear FAC1 rounding byte
/* bbc6 */                   RTS.imp ();

// ------------------------------------------------------- // pack FAC1 into $5C
/* bbc7 */   _`mov2f_bbc7`;  LDX.imm (0x5c);               // set pointer low byte
/* bbc9 */                   _.bytes(0x2c);                // makes next line BIT $57A2

// ------------------------------------------------------- // pack FAC1 into $57
/* bbca */                   LDX.imm (0x57);               // set pointer low byte
/* bbcc */                   LDY.imm (0x00);               // set pointer high byte
/* bbce */                   BEQ.rel ("_bbd4");            // pack FAC1 into (XY) and return, branch always

// ------------------------------------------------------- // pack FAC1 into variable pointer
/* bbd0 */        _`_bbd0`;  LDX.zpg ("forpnt+0_0049");    // get destination pointer low byte
/* bbd2 */                   LDY.zpg ("forpnt+1_004a");    // get destination pointer high byte

// ------------------------------------------------------- // pack FAC1 into (XY)
/* bbd4 */        _`_bbd4`;  JSR.abs ("round_bc1b");       // round FAC1
/* bbd7 */                   STX.zpg ("index+0_0022");     // save pointer low byte
/* bbd9 */                   STY.zpg ("index+1_0023");     // save pointer high byte
/* bbdb */                   LDY.imm (0x04);               // set index
/* bbdd */                   LDA.zpg ("facho+3_0065");     // get FAC1 mantissa 4
/* bbdf */                   STA.iny ("index+0_0022");     // store in destination
/* bbe1 */                   DEY.imp ();                   // decrement index
/* bbe2 */                   LDA.zpg ("facho+2_0064");     // get FAC1 mantissa 3
/* bbe4 */                   STA.iny ("index+0_0022");     // store in destination
/* bbe6 */                   DEY.imp ();                   // decrement index
/* bbe7 */                   LDA.zpg ("facho+1_0063");     // get FAC1 mantissa 2
/* bbe9 */                   STA.iny ("index+0_0022");     // store in destination
/* bbeb */                   DEY.imp ();                   // decrement index
/* bbec */                   LDA.zpg ("facsgn_0066");      // get FAC1 sign (b7)
/* bbee */                   ORA.imm (0x7f);               // set bits x111 1111
/* bbf0 */                   AND.zpg ("facho+0_0062");     // AND in FAC1 mantissa 1
/* bbf2 */                   STA.iny ("index+0_0022");     // store in destination
/* bbf4 */                   DEY.imp ();                   // decrement index
/* bbf5 */                   LDA.zpg ("facexp_0061");      // get FAC1 exponent
/* bbf7 */                   STA.iny ("index+0_0022");     // store in destination
/* bbf9 */                   STY.zpg ("facov_0070");       // clear FAC1 rounding byte
/* bbfb */                   RTS.imp ();

// ------------------------------------------------------- // copy FAC2 to FAC1
/* bbfc */   _`movfa_bbfc`;  LDA.zpg ("argsgn_006e");      // get FAC2 sign (b7)
                                                           // save FAC1 sign and copy ABS(FAC2) to FAC1
/* bbfe */        _`_bbfe`;  STA.zpg ("facsgn_0066");      // save FAC1 sign (b7)
/* bc00 */                   LDX.imm (0x05);               // 5 bytes to copy
/* bc02 */        _`_bc02`;  LDA.zpx (0x68);               // get byte from FAC2,X
/* bc04 */                   STA.zpx (0x60);               // save byte at FAC1,X
/* bc06 */                   DEX.imp ();                   // decrement count
/* bc07 */                   BNE.rel ("_bc02");            // loop if not all done
/* bc09 */                   STX.zpg ("facov_0070");       // clear FAC1 rounding byte
/* bc0b */                   RTS.imp ();

// ------------------------------------------------------- // round and copy FAC1 to FAC2
/* bc0c */   _`movaf_bc0c`;  JSR.abs ("round_bc1b");       // round FAC1
                                                           // copy FAC1 to FAC2
/* bc0f */   _`movef_bc0f`;  LDX.imm (0x06);               // 6 bytes to copy
/* bc11 */        _`_bc11`;  LDA.zpx (0x60);               // get byte from FAC1,X
/* bc13 */                   STA.zpx (0x68);               // save byte at FAC2,X
/* bc15 */                   DEX.imp ();                   // decrement count
/* bc16 */                   BNE.rel ("_bc11");            // loop if not all done
/* bc18 */                   STX.zpg ("facov_0070");       // clear FAC1 rounding byte
/* bc1a */        _`_bc1a`;  RTS.imp ();

// ------------------------------------------------------- // round FAC1
/* bc1b */   _`round_bc1b`;  LDA.zpg ("facexp_0061");      // get FAC1 exponent
/* bc1d */                   BEQ.rel ("_bc1a");            // exit if zero
/* bc1f */                   ASL.zpg ("facov_0070");       // shift FAC1 rounding byte
/* bc21 */                   BCC.rel ("_bc1a");            // exit if no overflow
                                                           // round FAC1 (no check)
/* bc23 */        _`_bc23`;  JSR.abs ("_b96f");            // increment FAC1 mantissa
/* bc26 */                   BNE.rel ("_bc1a");            // branch if no overflow
/* bc28 */                   JMP.abs ("_b938");            // nornalise FAC1 for C=1 and return

// ------------------------------------------------------- // get FAC1 sign
                                                           // return A = $FF, Cb = 1/-ve A = $01, Cb = 0/+ve, A = $00, Cb = ?/0
/* bc2b */    _`sign_bc2b`;  LDA.zpg ("facexp_0061");      // get FAC1 exponent
/* bc2d */                   BEQ.rel ("_bc38");            // exit if zero (allready correct SGN(0)=0)

// ------------------------------------------------------- // return A = $FF, Cb = 1/-ve A = $01, Cb = 0/+ve
                                                           // no = 0 check
/* bc2f */        _`_bc2f`;  LDA.zpg ("facsgn_0066");      // else get FAC1 sign (b7)

// ------------------------------------------------------- // return A = $FF, Cb = 1/-ve A = $01, Cb = 0/+ve
                                                           // no = 0 check, sign in A
/* bc31 */        _`_bc31`;  ROL.acc ();                   // move sign bit to carry
/* bc32 */                   LDA.imm (0xff);               // set byte for -ve result
/* bc34 */                   BCS.rel ("_bc38");            // return if sign was set (-ve)
/* bc36 */                   LDA.imm (0x01);               // else set byte for +ve result
/* bc38 */        _`_bc38`;  RTS.imp ();

// ------------------------------------------------------- // perform SGN()
/* bc39 */     _`sgn_bc39`;  JSR.abs ("sign_bc2b");        // get FAC1 sign, return A = $FF -ve, A = $01 +ve

// ------------------------------------------------------- // save A as integer byte
/* bc3c */        _`_bc3c`;  STA.zpg ("facho+0_0062");     // save FAC1 mantissa 1
/* bc3e */                   LDA.imm (0x00);               // clear A
/* bc40 */                   STA.zpg ("facho+1_0063");     // clear FAC1 mantissa 2
/* bc42 */                   LDX.imm (0x88);               // set exponent
                                                           // set exponent = X, clear FAC1 3 and 4 and normalise
/* bc44 */        _`_bc44`;  LDA.zpg ("facho+0_0062");     // get FAC1 mantissa 1
/* bc46 */                   EOR.imm (0xff);               // complement it
/* bc48 */                   ROL.acc ();                   // sign bit into carry
                                                           // set exponent = X, clear mantissa 4 and 3 and normalise FAC1
/* bc49 */        _`_bc49`;  LDA.imm (0x00);               // clear A
/* bc4b */                   STA.zpg ("facho+3_0065");     // clear FAC1 mantissa 4
/* bc4d */                   STA.zpg ("facho+2_0064");     // clear FAC1 mantissa 3
                                                           // set exponent = X and normalise FAC1
/* bc4f */        _`_bc4f`;  STX.zpg ("facexp_0061");      // set FAC1 exponent
/* bc51 */                   STA.zpg ("facov_0070");       // clear FAC1 rounding byte
/* bc53 */                   STA.zpg ("facsgn_0066");      // clear FAC1 sign (b7)
/* bc55 */                   JMP.abs ("_b8d2");            // do ABS and normalise FAC1

// ------------------------------------------------------- // perform ABS()
/* bc58 */     _`abs_bc58`;  LSR.zpg ("facsgn_0066");      // clear FAC1 sign, put zero in b7
/* bc5a */                   RTS.imp ();

// ------------------------------------------------------- // compare FAC1 with (AY)
                                                           // returns A=$00 if FAC1 = (AY)
                                                           // returns A=$01 if FAC1 > (AY)
                                                           // returns A=$FF if FAC1 < (AY)
/* bc5b */   _`fcomp_bc5b`;  STA.zpg ("index+2_0024");     // save pointer low byte
/* bc5d */        _`_bc5d`;  STY.zpg ("index+3_0025");     // save pointer high byte
/* bc5f */                   LDY.imm (0x00);               // clear index
/* bc61 */                   LDA.iny ("index+2_0024");     // get exponent
/* bc63 */                   INY.imp ();                   // increment index
/* bc64 */                   TAX.imp ();                   // copy (AY) exponent to X
/* bc65 */                   BEQ.rel ("sign_bc2b");        // branch if (AY) exponent=0 and get FAC1 sign
                                                           // A = $FF, Cb = 1/-ve A = $01, Cb = 0/+ve
/* bc67 */                   LDA.iny ("index+2_0024");     // get (AY) mantissa 1, with sign
/* bc69 */                   EOR.zpg ("facsgn_0066");      // EOR FAC1 sign (b7)
/* bc6b */                   BMI.rel ("_bc2f");            // if signs <> do return A = $FF, Cb = 1/-ve
                                                           // A = $01, Cb = 0/+ve and return
/* bc6d */                   CPX.zpg ("facexp_0061");      // compare (AY) exponent with FAC1 exponent
/* bc6f */                   BNE.rel ("_bc92");            // branch if different
/* bc71 */                   LDA.iny ("index+2_0024");     // get (AY) mantissa 1, with sign
/* bc73 */                   ORA.imm (0x80);               // normalise top bit
/* bc75 */                   CMP.zpg ("facho+0_0062");     // compare with FAC1 mantissa 1
/* bc77 */                   BNE.rel ("_bc92");            // branch if different
/* bc79 */                   INY.imp ();                   // increment index
/* bc7a */                   LDA.iny ("index+2_0024");     // get mantissa 2
/* bc7c */                   CMP.zpg ("facho+1_0063");     // compare with FAC1 mantissa 2
/* bc7e */                   BNE.rel ("_bc92");            // branch if different
/* bc80 */                   INY.imp ();                   // increment index
/* bc81 */                   LDA.iny ("index+2_0024");     // get mantissa 3
/* bc83 */                   CMP.zpg ("facho+2_0064");     // compare with FAC1 mantissa 3
/* bc85 */                   BNE.rel ("_bc92");            // branch if different
/* bc87 */                   INY.imp ();                   // increment index
/* bc88 */                   LDA.imm (0x7f);               // set for 1/2 value rounding byte
/* bc8a */                   CMP.zpg ("facov_0070");       // compare with FAC1 rounding byte (set carry)
/* bc8c */                   LDA.iny ("index+2_0024");     // get mantissa 4
/* bc8e */                   SBC.zpg ("facho+3_0065");     // subtract FAC1 mantissa 4
/* bc90 */                   BEQ.rel ("_bcba");            // exit if mantissa 4 equal
                                                           // gets here if number <> FAC1
/* bc92 */        _`_bc92`;  LDA.zpg ("facsgn_0066");      // get FAC1 sign (b7)
/* bc94 */                   BCC.rel ("_bc98");            // branch if FAC1 > (AY)
/* bc96 */                   EOR.imm (0xff);               // else toggle FAC1 sign
/* bc98 */        _`_bc98`;  JMP.abs ("_bc31");            // return A = $FF, Cb = 1/-ve A = $01, Cb = 0/+ve

// ------------------------------------------------------- // convert FAC1 floating to fixed
/* bc9b */    _`qint_bc9b`;  LDA.zpg ("facexp_0061");      // get FAC1 exponent
/* bc9d */                   BEQ.rel ("_bce9");            // if zero go clear FAC1 and return
/* bc9f */                   SEC.imp ();                   // set carry for subtract
/* bca0 */                   SBC.imm (0xa0);               // subtract maximum integer range exponent
/* bca2 */                   BIT.zpg ("facsgn_0066");      // test FAC1 sign (b7)
/* bca4 */                   BPL.rel ("_bcaf");            // branch if FAC1 +ve
                                                           // FAC1 was -ve
/* bca6 */                   TAX.imp ();                   // copy subtracted exponent
/* bca7 */                   LDA.imm (0xff);               // overflow for -ve number
/* bca9 */                   STA.zpg ("bits_0068");        // set FAC1 overflow byte
/* bcab */                   JSR.abs ("_b94d");            // twos complement FAC1 mantissa
/* bcae */                   TXA.imp ();                   // restore subtracted exponent
/* bcaf */        _`_bcaf`;  LDX.imm (0x61);               // set index to FAC1
/* bcb1 */                   CMP.imm (0xf9);               // compare exponent result
/* bcb3 */                   BPL.rel ("_bcbb");            // if < 8 shifts shift FAC1 A times right and return
/* bcb5 */                   JSR.abs ("_b999");            // shift FAC1 A times right (> 8 shifts)
/* bcb8 */                   STY.zpg ("bits_0068");        // clear FAC1 overflow byte
/* bcba */        _`_bcba`;  RTS.imp ();

// ------------------------------------------------------- // shift FAC1 A times right
/* bcbb */        _`_bcbb`;  TAY.imp ();                   // copy shift count
/* bcbc */                   LDA.zpg ("facsgn_0066");      // get FAC1 sign (b7)
/* bcbe */                   AND.imm (0x80);               // mask sign bit only (x000 0000)
/* bcc0 */                   LSR.zpg ("facho+0_0062");     // shift FAC1 mantissa 1
/* bcc2 */                   ORA.zpg ("facho+0_0062");     // OR sign in b7 FAC1 mantissa 1
/* bcc4 */                   STA.zpg ("facho+0_0062");     // save FAC1 mantissa 1
/* bcc6 */                   JSR.abs ("_b9b0");            // shift FAC1 Y times right
/* bcc9 */                   STY.zpg ("bits_0068");        // clear FAC1 overflow byte
/* bccb */                   RTS.imp ();

// ------------------------------------------------------- // perform INT()
/* bccc */     _`int_bccc`;  LDA.zpg ("facexp_0061");      // get FAC1 exponent
/* bcce */                   CMP.imm (0xa0);               // compare with max int
/* bcd0 */                   BCS.rel ("_bcf2");            // exit if >= (allready int, too big for fractional part!)
/* bcd2 */                   JSR.abs ("qint_bc9b");        // convert FAC1 floating to fixed
/* bcd5 */                   STY.zpg ("facov_0070");       // save FAC1 rounding byte
/* bcd7 */                   LDA.zpg ("facsgn_0066");      // get FAC1 sign (b7)
/* bcd9 */                   STY.zpg ("facsgn_0066");      // save FAC1 sign (b7)
/* bcdb */                   EOR.imm (0x80);               // toggle FAC1 sign
/* bcdd */                   ROL.acc ();                   // shift into carry
/* bcde */                   LDA.imm (0xa0);               // set new exponent
/* bce0 */                   STA.zpg ("facexp_0061");      // save FAC1 exponent
/* bce2 */                   LDA.zpg ("facho+3_0065");     // get FAC1 mantissa 4
/* bce4 */                   STA.zpg ("charac_0007");      // save FAC1 mantissa 4 for power function
/* bce6 */                   JMP.abs ("_b8d2");            // do ABS and normalise FAC1

// ------------------------------------------------------- // clear FAC1 and return
/* bce9 */        _`_bce9`;  STA.zpg ("facho+0_0062");     // clear FAC1 mantissa 1
/* bceb */                   STA.zpg ("facho+1_0063");     // clear FAC1 mantissa 2
/* bced */                   STA.zpg ("facho+2_0064");     // clear FAC1 mantissa 3
/* bcef */                   STA.zpg ("facho+3_0065");     // clear FAC1 mantissa 4
/* bcf1 */                   TAY.imp ();                   // clear Y
/* bcf2 */        _`_bcf2`;  RTS.imp ();

// ------------------------------------------------------- // get FAC1 from string
/* bcf3 */     _`fin_bcf3`;  LDY.imm (0x00);               // clear Y
/* bcf5 */                   LDX.imm (0x0a);               // set index
/* bcf7 */        _`_bcf7`;  STY.zpx (0x5d);               // clear byte
/* bcf9 */                   DEX.imp ();                   // decrement index
/* bcfa */                   BPL.rel ("_bcf7");            // loop until numexp to negnum (and FAC1) = $00
/* bcfc */                   BCC.rel ("_bd0d");            // branch if first character is numeric
/* bcfe */                   CMP.imm (0x2d);               // else compare with "-"
/* bd00 */                   BNE.rel ("_bd06");            // branch if not "-"
/* bd02 */                   STX.zpg ("sgnflg_0067");      // set flag for -ve n (negnum = $FF)
/* bd04 */                   BEQ.rel ("_bd0a");            // branch always
/* bd06 */        _`_bd06`;  CMP.imm (0x2b);               // else compare with "+"
/* bd08 */                   BNE.rel ("_bd0f");            // branch if not "+"
/* bd0a */        _`_bd0a`;  JSR.abs ("chrget+0_0073");    // increment and scan memory
/* bd0d */        _`_bd0d`;  BCC.rel ("_bd6a");            // branch if numeric character
/* bd0f */        _`_bd0f`;  CMP.imm (0x2e);               // else compare with "."
/* bd11 */                   BEQ.rel ("_bd41");            // branch if "."
/* bd13 */                   CMP.imm (0x45);               // else compare with "E"
/* bd15 */                   BNE.rel ("_bd47");            // branch if not "E"
                                                           // was "E" so evaluate exponential part
/* bd17 */                   JSR.abs ("chrget+0_0073");    // increment and scan memory
/* bd1a */                   BCC.rel ("_bd33");            // branch if numeric character
/* bd1c */                   CMP.imm (0xab);               // else compare with token for -
/* bd1e */                   BEQ.rel ("_bd2e");            // branch if token for -
/* bd20 */                   CMP.imm (0x2d);               // else compare with "-"
/* bd22 */                   BEQ.rel ("_bd2e");            // branch if "-"
/* bd24 */                   CMP.imm (0xaa);               // else compare with token for +
/* bd26 */                   BEQ.rel ("_bd30");            // branch if token for +
/* bd28 */                   CMP.imm (0x2b);               // else compare with "+"
/* bd2a */                   BEQ.rel ("_bd30");            // branch if "+"
/* bd2c */                   BNE.rel ("_bd35");            // branch always
/* bd2e */        _`_bd2e`;  ROR.zpg ("tempf2+4_0060");    // set exponent -ve flag (C, which=1, into b7)
/* bd30 */        _`_bd30`;  JSR.abs ("chrget+0_0073");    // increment and scan memory
/* bd33 */        _`_bd33`;  BCC.rel ("_bd91");            // branch if numeric character
/* bd35 */        _`_bd35`;  BIT.zpg ("tempf2+4_0060");    // test exponent -ve flag
/* bd37 */                   BPL.rel ("_bd47");            // if +ve go evaluate exponent
                                                           // else do exponent = -exponent
/* bd39 */                   LDA.imm (0x00);               // clear result
/* bd3b */                   SEC.imp ();                   // set carry for subtract
/* bd3c */                   SBC.zpg ("tempf2+2_005e");    // subtract exponent byte
/* bd3e */                   JMP.abs ("_bd49");            // go evaluate exponent
/* bd41 */        _`_bd41`;  ROR.zpg ("tempf2+3_005f");    // set decimal point flag
/* bd43 */                   BIT.zpg ("tempf2+3_005f");    // test decimal point flag
/* bd45 */                   BVC.rel ("_bd0a");            // branch if only one decimal point so far
                                                           // evaluate exponent
/* bd47 */        _`_bd47`;  LDA.zpg ("tempf2+2_005e");    // get exponent count byte
/* bd49 */        _`_bd49`;  SEC.imp ();                   // set carry for subtract
/* bd4a */                   SBC.zpg ("tempf2+1_005d");    // subtract numerator exponent
/* bd4c */                   STA.zpg ("tempf2+2_005e");    // save exponent count byte
/* bd4e */                   BEQ.rel ("_bd62");            // branch if no adjustment
/* bd50 */                   BPL.rel ("_bd5b");            // else if +ve go do FAC1*10^expcnt
                                                           // else go do FAC1/10^(0-expcnt)
/* bd52 */        _`_bd52`;  JSR.abs ("div10_bafe");       // divide FAC1 by 10
/* bd55 */                   INC.zpg ("tempf2+2_005e");    // increment exponent count byte
/* bd57 */                   BNE.rel ("_bd52");            // loop until all done
/* bd59 */                   BEQ.rel ("_bd62");            // branch always
/* bd5b */        _`_bd5b`;  JSR.abs ("mul10_bae2");       // multiply FAC1 by 10
/* bd5e */                   DEC.zpg ("tempf2+2_005e");    // decrement exponent count byte
/* bd60 */                   BNE.rel ("_bd5b");            // loop until all done
/* bd62 */        _`_bd62`;  LDA.zpg ("sgnflg_0067");      // get -ve flag
/* bd64 */                   BMI.rel ("_bd67");            // if -ve do - FAC1 and return
/* bd66 */                   RTS.imp ();

// ------------------------------------------------------- // do - FAC1 and return
/* bd67 */        _`_bd67`;  JMP.abs ("negop_bfb4");       // do - FAC1
                                                           // do unsigned FAC1*10+number
/* bd6a */        _`_bd6a`;  PHA.imp ();                   // save character
/* bd6b */                   BIT.zpg ("tempf2+3_005f");    // test decimal point flag
/* bd6d */                   BPL.rel ("_bd71");            // skip exponent increment if not set
/* bd6f */                   INC.zpg ("tempf2+1_005d");    // else increment number exponent
/* bd71 */        _`_bd71`;  JSR.abs ("mul10_bae2");       // multiply FAC1 by 10
/* bd74 */                   PLA.imp ();                   // restore character
/* bd75 */                   SEC.imp ();                   // set carry for subtract
/* bd76 */                   SBC.imm (0x30);               // convert to binary
/* bd78 */                   JSR.abs ("finlog_bd7e");      // evaluate new ASCII digit
/* bd7b */                   JMP.abs ("_bd0a");            // go do next character
                                                           // evaluate new ASCII digit
                                                           // multiply FAC1 by 10 then (ABS) add in new digit
/* bd7e */  _`finlog_bd7e`;  PHA.imp ();                   // save digit
/* bd7f */                   JSR.abs ("movaf_bc0c");       // round and copy FAC1 to FAC2
/* bd82 */                   PLA.imp ();                   // restore digit
/* bd83 */                   JSR.abs ("_bc3c");            // save A as integer byte
/* bd86 */                   LDA.zpg ("argsgn_006e");      // get FAC2 sign (b7)
/* bd88 */                   EOR.zpg ("facsgn_0066");      // toggle with FAC1 sign (b7)
/* bd8a */                   STA.zpg ("arisgn_006f");      // save sign compare (FAC1 EOR FAC2)
/* bd8c */                   LDX.zpg ("facexp_0061");      // get FAC1 exponent
/* bd8e */                   JMP.abs ("faddt_b86a");       // add FAC2 to FAC1 and return
                                                           // evaluate next character of exponential part of number
/* bd91 */        _`_bd91`;  LDA.zpg ("tempf2+2_005e");    // get exponent count byte
/* bd93 */                   CMP.imm (0x0a);               // compare with 10 decimal
/* bd95 */                   BCC.rel ("_bda0");            // branch if less
/* bd97 */                   LDA.imm (0x64);               // make all -ve exponents = -100 decimal (causes underflow)
/* bd99 */                   BIT.zpg ("tempf2+4_0060");    // test exponent -ve flag
/* bd9b */                   BMI.rel ("_bdae");            // branch if -ve
/* bd9d */                   JMP.abs ("overr_b97e");       // else do overflow error then warm start
/* bda0 */        _`_bda0`;  ASL.acc ();                   // *2
/* bda1 */                   ASL.acc ();                   // *4
/* bda2 */                   CLC.imp ();                   // clear carry for add
/* bda3 */                   ADC.zpg ("tempf2+2_005e");    // *5
/* bda5 */                   ASL.acc ();                   // *10
/* bda6 */                   CLC.imp ();                   // clear carry for add
/* bda7 */                   LDY.imm (0x00);               // set index
/* bda9 */                   ADC.iny ("txtptr+0_007a");    // add character (will be $30 too much!)
/* bdab */                   SEC.imp ();                   // set carry for subtract
/* bdac */                   SBC.imm (0x30);               // convert character to binary
/* bdae */        _`_bdae`;  STA.zpg ("tempf2+2_005e");    // save exponent count byte
/* bdb0 */                   JMP.abs ("_bd30");            // go get next character

// ------------------------------------------------------- // limits for scientific mode
                                                           // 99999999.90625, maximum value with at least one decimal
/* bdb3 */   _`n0999_bdb3`;  _.bytes(0x9b, 0x3e, 0xbc, 0x1f, 0xfd);
                                                           // 999999999.25, maximum value before scientific notation
/* bdb8 */                   _.bytes(0x9e, 0x6e, 0x6b, 0x27, 0xfd);
                                                           // 1000000000
/* bdbd */                   _.bytes(0x9e, 0x6e, 0x6b, 0x28, 0x00);

// ------------------------------------------------------- // do " IN " line number message
/* bdc2 */   _`inprt_bdc2`;  LDA.imm (0x71);               // set " IN " pointer low byte
/* bdc4 */                   LDY.imm (0xa3);               // set " IN " pointer high byte
/* bdc6 */                   JSR.abs ("_bdda");            // print null terminated string
/* bdc9 */                   LDA.zpg ("curlin+1_003a");    // get the current line number high byte
/* bdcb */                   LDX.zpg ("curlin+0_0039");    // get the current line number low byte

// ------------------------------------------------------- // print XA as unsigned integer
/* bdcd */  _`linprt_bdcd`;  STA.zpg ("facho+0_0062");     // save high byte as FAC1 mantissa1
/* bdcf */                   STX.zpg ("facho+1_0063");     // save low byte as FAC1 mantissa2
/* bdd1 */                   LDX.imm (0x90);               // set exponent to 16d bits
/* bdd3 */                   SEC.imp ();                   // set integer is +ve flag
/* bdd4 */                   JSR.abs ("_bc49");            // set exponent = X, clear mantissa 4 and 3 and normalise
                                                           // FAC1
/* bdd7 */                   JSR.abs ("_bddf");            // convert FAC1 to string
/* bdda */        _`_bdda`;  JMP.abs ("strout_ab1e");      // print null terminated string

// ------------------------------------------------------- // convert FAC1 to ASCII string result in (AY)
/* bddd */    _`fout_bddd`;  LDY.imm (0x01);               // set index = 1
/* bddf */        _`_bddf`;  LDA.imm (0x20);               // character = " " (assume +ve)
/* bde1 */                   BIT.zpg ("facsgn_0066");      // test FAC1 sign (b7)
/* bde3 */                   BPL.rel ("_bde7");            // branch if +ve
/* bde5 */                   LDA.imm (0x2d);               // else character = "-"
/* bde7 */        _`_bde7`;  STA.aby ("baszpt_00ff");      // save leading character (" " or "-")
/* bdea */                   STA.zpg ("facsgn_0066");      // save FAC1 sign (b7)
/* bdec */                   STY.zpg ("fbufpt+0_0071");    // save index
/* bdee */                   INY.imp ();                   // increment index
/* bdef */                   LDA.imm (0x30);               // set character = "0"
/* bdf1 */                   LDX.zpg ("facexp_0061");      // get FAC1 exponent
/* bdf3 */                   BNE.rel ("_bdf8");            // branch if FAC1<>0
                                                           // exponent was $00 so FAC1 is 0
/* bdf5 */                   JMP.abs ("_bf04");            // save last character, [EOT] and exit
                                                           // FAC1 is some non zero value
/* bdf8 */        _`_bdf8`;  LDA.imm (0x00);               // clear (number exponent count)
/* bdfa */                   CPX.imm (0x80);               // compare FAC1 exponent with $80 (<1.00000)
/* bdfc */                   BEQ.rel ("_be00");            // branch if 0.5 <= FAC1 < 1.0
/* bdfe */                   BCS.rel ("_be09");            // branch if FAC1=>1
/* be00 */        _`_be00`;  LDA.imm (0xbd);               // set 1000000000 pointer low byte
/* be02 */                   LDY.imm (0xbd);               // set 1000000000 pointer high byte
/* be04 */                   JSR.abs ("fmult_ba28");       // do convert AY, FCA1*(AY)
/* be07 */                   LDA.imm (0xf7);               // set number exponent count
/* be09 */        _`_be09`;  STA.zpg ("tempf2+1_005d");    // save number exponent count
/* be0b */        _`_be0b`;  LDA.imm (0xb8);               // set 999999999.25 pointer low byte (max before sci note)
/* be0d */                   LDY.imm (0xbd);               // set 999999999.25 pointer high byte
/* be0f */                   JSR.abs ("fcomp_bc5b");       // compare FAC1 with (AY)
/* be12 */                   BEQ.rel ("_be32");            // exit if FAC1 = (AY)
/* be14 */                   BPL.rel ("_be28");            // go do /10 if FAC1 > (AY)
                                                           // FAC1 < (AY)
/* be16 */        _`_be16`;  LDA.imm (0xb3);               // set 99999999.90625 pointer low byte
/* be18 */                   LDY.imm (0xbd);               // set 99999999.90625 pointer high byte
/* be1a */                   JSR.abs ("fcomp_bc5b");       // compare FAC1 with (AY)
/* be1d */                   BEQ.rel ("_be21");            // branch if FAC1 = (AY) (allow decimal places)
/* be1f */                   BPL.rel ("_be2f");            // branch if FAC1 > (AY) (no decimal places)
                                                           // FAC1 <= (AY)
/* be21 */        _`_be21`;  JSR.abs ("mul10_bae2");       // multiply FAC1 by 10
/* be24 */                   DEC.zpg ("tempf2+1_005d");    // decrement number exponent count
/* be26 */                   BNE.rel ("_be16");            // go test again, branch always
/* be28 */        _`_be28`;  JSR.abs ("div10_bafe");       // divide FAC1 by 10
/* be2b */                   INC.zpg ("tempf2+1_005d");    // increment number exponent count
/* be2d */                   BNE.rel ("_be0b");            // go test again, branch always
                                                           // now we have just the digits to do
/* be2f */        _`_be2f`;  JSR.abs ("faddh_b849");       // add 0.5 to FAC1 (round FAC1)
/* be32 */        _`_be32`;  JSR.abs ("qint_bc9b");        // convert FAC1 floating to fixed
/* be35 */                   LDX.imm (0x01);               // set default digits before dp = 1
/* be37 */                   LDA.zpg ("tempf2+1_005d");    // get number exponent count
/* be39 */                   CLC.imp ();                   // clear carry for add
/* be3a */                   ADC.imm (0x0a);               // up to 9 digits before point
/* be3c */                   BMI.rel ("_be47");            // if -ve then 1 digit before dp
/* be3e */                   CMP.imm (0x0b);               // A>=$0B if n>=1E9
/* be40 */                   BCS.rel ("_be48");            // branch if >= $0B
                                                           // carry is clear
/* be42 */                   ADC.imm (0xff);               // take 1 from digit count
/* be44 */                   TAX.imp ();                   // copy to X
/* be45 */                   LDA.imm (0x02);               // set exponent adjust
/* be47 */        _`_be47`;  SEC.imp ();                   // set carry for subtract
/* be48 */        _`_be48`;  SBC.imm (0x02);               // -2
/* be4a */                   STA.zpg ("tempf2+2_005e");    // save exponent adjust
/* be4c */                   STX.zpg ("tempf2+1_005d");    // save digits before dp count
/* be4e */                   TXA.imp ();                   // copy to A
/* be4f */                   BEQ.rel ("_be53");            // branch if no digits before dp
/* be51 */                   BPL.rel ("_be66");            // branch if digits before dp
/* be53 */        _`_be53`;  LDY.zpg ("fbufpt+0_0071");    // get output string index
/* be55 */                   LDA.imm (0x2e);               // character "."
/* be57 */                   INY.imp ();                   // increment index
/* be58 */                   STA.aby ("baszpt_00ff");      // save to output string
/* be5b */                   TXA.imp ();
/* be5c */                   BEQ.rel ("_be64");
/* be5e */                   LDA.imm (0x30);               // character "0"
/* be60 */                   INY.imp ();                   // increment index
/* be61 */                   STA.aby ("baszpt_00ff");      // save to output string
/* be64 */        _`_be64`;  STY.zpg ("fbufpt+0_0071");    // save output string index
/* be66 */        _`_be66`;  LDY.imm (0x00);               // clear index (point to 100,000)
/* be68 */  _`foutim_be68`;  LDX.imm (0x80);
/* be6a */        _`_be6a`;  LDA.zpg ("facho+3_0065");     // get FAC1 mantissa 4
/* be6c */                   CLC.imp ();                   // clear carry for add
/* be6d */                   ADC.aby (0xbf19);             // add byte 4, least significant
/* be70 */                   STA.zpg ("facho+3_0065");     // save FAC1 mantissa4
/* be72 */                   LDA.zpg ("facho+2_0064");     // get FAC1 mantissa 3
/* be74 */                   ADC.aby (0xbf18);             // add byte 3
/* be77 */                   STA.zpg ("facho+2_0064");     // save FAC1 mantissa3
/* be79 */                   LDA.zpg ("facho+1_0063");     // get FAC1 mantissa 2
/* be7b */                   ADC.aby (0xbf17);             // add byte 2
/* be7e */                   STA.zpg ("facho+1_0063");     // save FAC1 mantissa2
/* be80 */                   LDA.zpg ("facho+0_0062");     // get FAC1 mantissa 1
/* be82 */                   ADC.aby ("_bf16");            // add byte 1, most significant
/* be85 */                   STA.zpg ("facho+0_0062");     // save FAC1 mantissa1
/* be87 */                   INX.imp ();                   // increment the digit, set the sign on the test sense bit
/* be88 */                   BCS.rel ("_be8e");            // if the carry is set go test if the result was positive
                                                           // else the result needs to be negative
/* be8a */                   BPL.rel ("_be6a");            // not -ve so try again
/* be8c */                   BMI.rel ("_be90");            // else done so return the digit
/* be8e */        _`_be8e`;  BMI.rel ("_be6a");            // not +ve so try again
                                                           // else done so return the digit
/* be90 */        _`_be90`;  TXA.imp ();                   // copy the digit
/* be91 */                   BCC.rel ("_be97");            // if Cb=0 just use it
/* be93 */                   EOR.imm (0xff);               // else make the 2's complement ..
/* be95 */                   ADC.imm (0x0a);               // .. and subtract it from 10
/* be97 */        _`_be97`;  ADC.imm (0x2f);               // add "0"-1 to result
/* be99 */                   INY.imp ();                   // increment ..
/* be9a */                   INY.imp ();                   // .. index to..
/* be9b */                   INY.imp ();                   // .. next less ..
/* be9c */                   INY.imp ();                   // .. power of ten
/* be9d */                   STY.zpg ("varpnt+0_0047");    // save current variable pointer low byte
/* be9f */                   LDY.zpg ("fbufpt+0_0071");    // get output string index
/* bea1 */                   INY.imp ();                   // increment output string index
/* bea2 */                   TAX.imp ();                   // copy character to X
/* bea3 */                   AND.imm (0x7f);               // mask out top bit
/* bea5 */                   STA.aby ("baszpt_00ff");      // save to output string
/* bea8 */                   DEC.zpg ("tempf2+1_005d");    // decrement # of characters before the dp
/* beaa */                   BNE.rel ("_beb2");            // branch if still characters to do
                                                           // else output the point
/* beac */                   LDA.imm (0x2e);               // character "."
/* beae */                   INY.imp ();                   // increment output string index
/* beaf */                   STA.aby ("baszpt_00ff");      // save to output string
/* beb2 */        _`_beb2`;  STY.zpg ("fbufpt+0_0071");    // save output string index
/* beb4 */                   LDY.zpg ("varpnt+0_0047");    // get current variable pointer low byte
/* beb6 */                   TXA.imp ();                   // get character back
/* beb7 */                   EOR.imm (0xff);               // toggle the test sense bit
/* beb9 */                   AND.imm (0x80);               // clear the digit
/* bebb */                   TAX.imp ();                   // copy it to the new digit
/* bebc */                   CPY.imm (0x24);
                                                           // compare the table index with the max for decimal numbers
/* bebe */                   BEQ.rel ("_bec4");            // if at the max exit the digit loop
/* bec0 */                   CPY.imm (0x3c);
                                                           // compare the table index with the max for time
/* bec2 */                   BNE.rel ("_be6a");            // loop if not at the max
                                                           // now remove trailing zeroes
/* bec4 */        _`_bec4`;  LDY.zpg ("fbufpt+0_0071");    // restore the output string index
/* bec6 */        _`_bec6`;  LDA.aby ("baszpt_00ff");      // get character from output string
/* bec9 */                   DEY.imp ();                   // decrement output string index
/* beca */                   CMP.imm (0x30);               // compare with "0"
/* becc */                   BEQ.rel ("_bec6");            // loop until non "0" character found
/* bece */                   CMP.imm (0x2e);               // compare with "."
/* bed0 */                   BEQ.rel ("_bed3");            // branch if was dp
                                                           // restore last character
/* bed2 */                   INY.imp ();                   // increment output string index
/* bed3 */        _`_bed3`;  LDA.imm (0x2b);               // character "+"
/* bed5 */                   LDX.zpg ("tempf2+2_005e");    // get exponent count
/* bed7 */                   BEQ.rel ("_bf07");            // if zero go set null terminator and exit
                                                           // exponent isn't zero so write exponent
/* bed9 */                   BPL.rel ("_bee3");            // branch if exponent count +ve
/* bedb */                   LDA.imm (0x00);               // clear A
/* bedd */                   SEC.imp ();                   // set carry for subtract
/* bede */                   SBC.zpg ("tempf2+2_005e");    // subtract exponent count adjust (convert -ve to +ve)
/* bee0 */                   TAX.imp ();                   // copy exponent count to X
/* bee1 */                   LDA.imm (0x2d);               // character "-"
/* bee3 */        _`_bee3`;  STA.aby ("bad+1_0101");       // save to output string
/* bee6 */                   LDA.imm (0x45);               // character "E"
/* bee8 */                   STA.aby ("bad+0_0100");       // save exponent sign to output string
/* beeb */                   TXA.imp ();                   // get exponent count back
/* beec */                   LDX.imm (0x2f);               // one less than "0" character
/* beee */                   SEC.imp ();                   // set carry for subtract
/* beef */        _`_beef`;  INX.imp ();                   // increment 10's character
/* bef0 */                   SBC.imm (0x0a);               // subtract 10 from exponent count
/* bef2 */                   BCS.rel ("_beef");            // loop while still >= 0
/* bef4 */                   ADC.imm (0x3a);               // add character ":" ($30+$0A, result is 10 less that value)
/* bef6 */                   STA.aby ("bad+3_0103");       // save to output string
/* bef9 */                   TXA.imp ();                   // copy 10's character
/* befa */                   STA.aby ("bad+2_0102");       // save to output string
/* befd */                   LDA.imm (0x00);               // set null terminator
/* beff */                   STA.aby ("bad+4_0104");       // save to output string
/* bf02 */                   BEQ.rel ("_bf0c");            // go set string pointer (AY) and exit, branch always
                                                           // save last character, [EOT] and exit
/* bf04 */        _`_bf04`;  STA.aby ("baszpt_00ff");      // save last character to output string
                                                           // set null terminator and exit
/* bf07 */        _`_bf07`;  LDA.imm (0x00);               // set null terminator
/* bf09 */                   STA.aby ("bad+0_0100");       // save after last character
                                                           // set string pointer (AY) and exit
/* bf0c */        _`_bf0c`;  LDA.imm (0x00);               // set result string pointer low byte
/* bf0e */                   LDY.imm (0x01);               // set result string pointer high byte
/* bf10 */                   RTS.imp ();

// ------------------------------------------------------- // constants
/* bf11 */   _`fhalf_bf11`;  _.bytes(0x80, 0x00);          // 0.5, first two bytes
/* bf13 */                   _.bytes(0x00, 0x00, 0x00);    // null return for undefined variables
                                                           // -100 000 000
/* bf16 */        _`_bf16`;  _.bytes(0xfa, 0x0a, 0x1f, 0x00);
                                                           //  +10 000 000
/* bf1a */                   _.bytes(0x00, 0x98, 0x96, 0x80);
                                                           //   -1 000 000
/* bf1e */                   _.bytes(0xff, 0xf0, 0xbd, 0xc0);
                                                           //     +100 000
/* bf22 */                   _.bytes(0x00, 0x01, 0x86, 0xa0);
                                                           //      -10 000
/* bf26 */                   _.bytes(0xff, 0xff, 0xd8, 0xf0);
                                                           //       +1 000
/* bf2a */                   _.bytes(0x00, 0x00, 0x03, 0xe8);
                                                           //        - 100
/* bf2e */                   _.bytes(0xff, 0xff, 0xff, 0x9c);
                                                           //          +10
/* bf32 */                   _.bytes(0x00, 0x00, 0x00, 0x0a);
                                                           //           -1
/* bf36 */                   _.bytes(0xff, 0xff, 0xff, 0xff);

// ------------------------------------------------------- // jiffy counts
                                                           // -2160000    10s hours
/* bf3a */  _`fdcend_bf3a`;  _.bytes(0xff, 0xdf, 0x0a, 0x80);
                                                           //  +216000        hours
/* bf3e */                   _.bytes(0x00, 0x03, 0x4b, 0xc0);
                                                           //   -36000    10s mins
/* bf42 */                   _.bytes(0xff, 0xff, 0x73, 0x60);
                                                           //    +3600        mins
/* bf46 */                   _.bytes(0x00, 0x00, 0x0e, 0x10);
                                                           //     -600    10s secs
/* bf4a */                   _.bytes(0xff, 0xff, 0xfd, 0xa8);
                                                           //      +60        secs
/* bf4e */                   _.bytes(0x00, 0x00, 0x00, 0x3c);

// ------------------------------------------------------- // not referenced
/* bf52 */                   _.bytes(0xec);                // checksum byte

// ------------------------------------------------------- // spare bytes, not referenced
/* bf53 */                   _.bytes(0xaa, 0xaa, 0xaa, 0xaa, 0xaa);
/* bf58 */                   _.bytes(0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa);
/* bf60 */                   _.bytes(0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa);
/* bf68 */                   _.bytes(0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa);
/* bf70 */                   _.bytes(0xaa);

// ------------------------------------------------------- // perform SQR()
/* bf71 */     _`sqr_bf71`;  JSR.abs ("movaf_bc0c");       // round and copy FAC1 to FAC2
/* bf74 */                   LDA.imm (0x11);               // set 0.5 pointer low address
/* bf76 */                   LDY.imm (0xbf);               // set 0.5 pointer high address
/* bf78 */                   JSR.abs ("movfm_bba2");       // unpack memory (AY) into FAC1

// ------------------------------------------------------- // perform power function
/* bf7b */   _`fpwrt_bf7b`;  BEQ.rel ("exp_bfed");         // perform EXP()
/* bf7d */                   LDA.zpg ("argexp_0069");      // get FAC2 exponent
/* bf7f */                   BNE.rel ("_bf84");            // branch if FAC2<>0
/* bf81 */                   JMP.abs ("_b8f9");            // clear FAC1 exponent and sign and return
/* bf84 */        _`_bf84`;  LDX.imm (0x4e);               // set destination pointer low byte
/* bf86 */                   LDY.imm (0x00);               // set destination pointer high byte
/* bf88 */                   JSR.abs ("_bbd4");            // pack FAC1 into (XY)
/* bf8b */                   LDA.zpg ("argsgn_006e");      // get FAC2 sign (b7)
/* bf8d */                   BPL.rel ("_bf9e");            // branch if FAC2>0
                                                           // else FAC2 is -ve and can only be raised to an
                                                           // integer power which gives an x + j0 result
/* bf8f */                   JSR.abs ("int_bccc");         // perform INT()
/* bf92 */                   LDA.imm (0x4e);               // set source pointer low byte
/* bf94 */                   LDY.imm (0x00);               // set source pointer high byte
/* bf96 */                   JSR.abs ("fcomp_bc5b");       // compare FAC1 with (AY)
/* bf99 */                   BNE.rel ("_bf9e");            // branch if FAC1 <> (AY) to allow Function Call error
                                                           // this will leave FAC1 -ve and cause a Function Call
                                                           // error when LOG() is called
/* bf9b */                   TYA.imp ();                   // clear sign b7
/* bf9c */                   LDY.zpg ("charac_0007");      // get FAC1 mantissa 4 from INT() function as sign in
                                                           // Y for possible later negation, b0 only needed
/* bf9e */        _`_bf9e`;  JSR.abs ("_bbfe");            // save FAC1 sign and copy ABS(FAC2) to FAC1
/* bfa1 */                   TYA.imp ();                   // copy sign back ..
/* bfa2 */                   PHA.imp ();                   // .. and save it
/* bfa3 */                   JSR.abs ("log_b9ea");         // perform LOG()
/* bfa6 */                   LDA.imm (0x4e);               // set pointer low byte
/* bfa8 */                   LDY.imm (0x00);               // set pointer high byte
/* bfaa */                   JSR.abs ("fmult_ba28");       // do convert AY, FCA1*(AY)
/* bfad */                   JSR.abs ("exp_bfed");         // perform EXP()
/* bfb0 */                   PLA.imp ();                   // pull sign from stack
/* bfb1 */                   LSR.acc ();                   // b0 is to be tested
/* bfb2 */                   BCC.rel ("_bfbe");            // if no bit then exit
                                                           // do - FAC1
/* bfb4 */   _`negop_bfb4`;  LDA.zpg ("facexp_0061");      // get FAC1 exponent
/* bfb6 */                   BEQ.rel ("_bfbe");            // exit if FAC1_e = $00
/* bfb8 */                   LDA.zpg ("facsgn_0066");      // get FAC1 sign (b7)
/* bfba */                   EOR.imm (0xff);               // complement it
/* bfbc */                   STA.zpg ("facsgn_0066");      // save FAC1 sign (b7)
/* bfbe */        _`_bfbe`;  RTS.imp ();

// ------------------------------------------------------- // exp(n) constant and series
                                                           // 1.44269504 = 1/LOG(2)
/* bfbf */  _`logeb2_bfbf`;  _.bytes(0x81, 0x38, 0xaa, 0x3b, 0x29);
/* bfc4 */                   _.bytes(0x07);                // series count
                                                           // 2.14987637E-5
/* bfc5 */                   _.bytes(0x71, 0x34, 0x58, 0x3e, 0x56);
                                                           // 1.43523140E-4
/* bfca */                   _.bytes(0x74, 0x16, 0x7e, 0xb3, 0x1b);
                                                           // 1.34226348E-3
/* bfcf */                   _.bytes(0x77, 0x2f, 0xee, 0xe3, 0x85);
                                                           // 9.61401701E-3
/* bfd4 */                   _.bytes(0x7a, 0x1d, 0x84, 0x1c, 0x2a);
                                                           // 5.55051269E-2
/* bfd9 */                   _.bytes(0x7c, 0x63, 0x59, 0x58, 0x0a);
                                                           // 2.40226385E-1
/* bfde */                   _.bytes(0x7e, 0x75, 0xfd, 0xe7, 0xc6);
                                                           // 6.93147186E-1
/* bfe3 */                   _.bytes(0x80, 0x31, 0x72, 0x18, 0x10);
                                                           // 1.00000000
/* bfe8 */                   _.bytes(0x81, 0x00, 0x00, 0x00, 0x00);

// ------------------------------------------------------- // perform EXP()
/* bfed */     _`exp_bfed`;  LDA.imm (0xbf);               // set 1.443 pointer low byte
/* bfef */                   LDY.imm (0xbf);               // set 1.443 pointer high byte
/* bff1 */                   JSR.abs ("fmult_ba28");       // do convert AY, FCA1*(AY)
/* bff4 */                   LDA.zpg ("facov_0070");       // get FAC1 rounding byte
/* bff6 */                   ADC.imm (0x50);               // +$50/$100
/* bff8 */                   BCC.rel ("_bffd");            // skip rounding if no carry
/* bffa */                   JSR.abs ("_bc23");            // round FAC1 (no check)
/* bffd */        _`_bffd`;  JMP.abs ("(exp_e000");        // continue EXP()

  }
));


/***/ }),

/***/ "./src/target/rom/character.js":
/*!*************************************!*\
  !*** ./src/target/rom/character.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/*
   Characters ($d000 – $efff, when mapped)

   The source below assembles into a bytestream fully compatible with the C64's
   character ROM.

   If you want to substitute your own ROM, just export a byte array instead:
       export default [ 0x.., ... ];

   Unlike the rest of the Viciious project, which was authored from scratch and
   entered into the public domain, the source below is derived from works by
   multiple other authors and I make no representations as to its ownership or
   terms of use.
*/

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ([

  // Unshifted $00 (0) >@<
  "  XXXX  ",
  " XX  XX ",
  " XX XXX ",
  " XX XXX ",
  " XX     ",
  " XX   X ",
  "  XXXX  ",
  "        ",

  // Unshifted $01 (1) >A<
  "   XX   ",
  "  XXXX  ",
  " XX  XX ",
  " XXXXXX ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  "        ",

  // Unshifted $02 (2) >B<
  " XXXXX  ",
  " XX  XX ",
  " XX  XX ",
  " XXXXX  ",
  " XX  XX ",
  " XX  XX ",
  " XXXXX  ",
  "        ",

  // Unshifted $03 (3) >C<
  "  XXXX  ",
  " XX  XX ",
  " XX     ",
  " XX     ",
  " XX     ",
  " XX  XX ",
  "  XXXX  ",
  "        ",

  // Unshifted $04 (4) >D<
  " XXXX   ",
  " XX XX  ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  " XX XX  ",
  " XXXX   ",
  "        ",

  // Unshifted $05 (5) >E<
  " XXXXXX ",
  " XX     ",
  " XX     ",
  " XXXX   ",
  " XX     ",
  " XX     ",
  " XXXXXX ",
  "        ",

  // Unshifted $06 (6) >F<
  " XXXXXX ",
  " XX     ",
  " XX     ",
  " XXXX   ",
  " XX     ",
  " XX     ",
  " XX     ",
  "        ",

  // Unshifted $07 (7) >G<
  "  XXXX  ",
  " XX  XX ",
  " XX     ",
  " XX XXX ",
  " XX  XX ",
  " XX  XX ",
  "  XXXX  ",
  "        ",

  // Unshifted $08 (8) >H<
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  " XXXXXX ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  "        ",

  // Unshifted $09 (9) >I<
  "  XXXX  ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "  XXXX  ",
  "        ",

  // Unshifted $0a (10) >J<
  "   XXXX ",
  "    XX  ",
  "    XX  ",
  "    XX  ",
  "    XX  ",
  " XX XX  ",
  "  XXX   ",
  "        ",

  // Unshifted $0b (11) >K<
  " XX  XX ",
  " XX XX  ",
  " XXXX   ",
  " XXX    ",
  " XXXX   ",
  " XX XX  ",
  " XX  XX ",
  "        ",

  // Unshifted $0c (12) >L<
  " XX     ",
  " XX     ",
  " XX     ",
  " XX     ",
  " XX     ",
  " XX     ",
  " XXXXXX ",
  "        ",

  // Unshifted $0d (13) >M<
  " XX   XX",
  " XXX XXX",
  " XXXXXXX",
  " XX X XX",
  " XX   XX",
  " XX   XX",
  " XX   XX",
  "        ",

  // Unshifted $0e (14) >N<
  " XX  XX ",
  " XXX XX ",
  " XXXXXX ",
  " XXXXXX ",
  " XX XXX ",
  " XX  XX ",
  " XX  XX ",
  "        ",

  // Unshifted $0f (15) >O<
  "  XXXX  ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  "  XXXX  ",
  "        ",

  // Unshifted $10 (16) >P<
  " XXXXX  ",
  " XX  XX ",
  " XX  XX ",
  " XXXXX  ",
  " XX     ",
  " XX     ",
  " XX     ",
  "        ",

  // Unshifted $11 (17) >Q<
  "  XXXX  ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  "  XXXX  ",
  "    XXX ",
  "        ",

  // Unshifted $12 (18) >R<
  " XXXXX  ",
  " XX  XX ",
  " XX  XX ",
  " XXXXX  ",
  " XXXX   ",
  " XX XX  ",
  " XX  XX ",
  "        ",

  // Unshifted $13 (19) >S<
  "  XXXX  ",
  " XX  XX ",
  " XX     ",
  "  XXXX  ",
  "     XX ",
  " XX  XX ",
  "  XXXX  ",
  "        ",

  // Unshifted $14 (20) >T<
  " XXXXXX ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "        ",

  // Unshifted $15 (21) >U<
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  "  XXXX  ",
  "        ",

  // Unshifted $16 (22) >V<
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  "  XXXX  ",
  "   XX   ",
  "        ",

  // Unshifted $17 (23) >W<
  " XX   XX",
  " XX   XX",
  " XX   XX",
  " XX X XX",
  " XXXXXXX",
  " XXX XXX",
  " XX   XX",
  "        ",

  // Unshifted $18 (24) >X<
  " XX  XX ",
  " XX  XX ",
  "  XXXX  ",
  "   XX   ",
  "  XXXX  ",
  " XX  XX ",
  " XX  XX ",
  "        ",

  // Unshifted $19 (25) >Y<
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  "  XXXX  ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "        ",

  // Unshifted $1a (26) >Z<
  " XXXXXX ",
  "     XX ",
  "    XX  ",
  "   XX   ",
  "  XX    ",
  " XX     ",
  " XXXXXX ",
  "        ",

  // Unshifted $1b (27) >[<
  "  XXXX  ",
  "  XX    ",
  "  XX    ",
  "  XX    ",
  "  XX    ",
  "  XX    ",
  "  XXXX  ",
  "        ",

  // Unshifted $1c (28) >£<
  "    XX  ",
  "   X  X ",
  "  XX    ",
  " XXXXX  ",
  "  XX    ",
  " XX   X ",
  "XXXXXX  ",
  "        ",

  // Unshifted $1d (29) >]<
  "  XXXX  ",
  "    XX  ",
  "    XX  ",
  "    XX  ",
  "    XX  ",
  "    XX  ",
  "  XXXX  ",
  "        ",

  // Unshifted $1e (30) >↑<
  "        ",
  "   XX   ",
  "  XXXX  ",
  " XXXXXX ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",

  // Unshifted $1f (31) >←<
  "        ",
  "   X    ",
  "  XX    ",
  " XXXXXXX",
  " XXXXXXX",
  "  XX    ",
  "   X    ",
  "        ",

  // Unshifted $20 (32) > <
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",

  // Unshifted $21 (33) >!<
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "        ",
  "        ",
  "   XX   ",
  "        ",

  // Unshifted $22 (34) >"<
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",

  // Unshifted $23 (35) >#<
  " XX  XX ",
  " XX  XX ",
  "XXXXXXXX",
  " XX  XX ",
  "XXXXXXXX",
  " XX  XX ",
  " XX  XX ",
  "        ",

  // Unshifted $24 (36) >$<
  "   XX   ",
  "  XXXXX ",
  " XX     ",
  "  XXXX  ",
  "     XX ",
  " XXXXX  ",
  "   XX   ",
  "        ",

  // Unshifted $25 (37) >%<
  " XX   X ",
  " XX  XX ",
  "    XX  ",
  "   XX   ",
  "  XX    ",
  " XX  XX ",
  " X   XX ",
  "        ",

  // Unshifted $26 (38) >&<
  "  XXXX  ",
  " XX  XX ",
  "  XXXX  ",
  "  XXX   ",
  " XX  XXX",
  " XX  XX ",
  "  XXXXXX",
  "        ",

  // Unshifted $27 (39) >'<
  "     XX ",
  "    XX  ",
  "   XX   ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",

  // Unshifted $28 (40) >(<
  "    XX  ",
  "   XX   ",
  "  XX    ",
  "  XX    ",
  "  XX    ",
  "   XX   ",
  "    XX  ",
  "        ",

  // Unshifted $29 (41) >)<
  "  XX    ",
  "   XX   ",
  "    XX  ",
  "    XX  ",
  "    XX  ",
  "   XX   ",
  "  XX    ",
  "        ",

  // Unshifted $2a (42) >*<
  "        ",
  " XX  XX ",
  "  XXXX  ",
  "XXXXXXXX",
  "  XXXX  ",
  " XX  XX ",
  "        ",
  "        ",

  // Unshifted $2b (43) >+<
  "        ",
  "   XX   ",
  "   XX   ",
  " XXXXXX ",
  "   XX   ",
  "   XX   ",
  "        ",
  "        ",

  // Unshifted $2c (44) >,<
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "   XX   ",
  "   XX   ",
  "  XX    ",

  // Unshifted $2d (45) >-<
  "        ",
  "        ",
  "        ",
  " XXXXXX ",
  "        ",
  "        ",
  "        ",
  "        ",

  // Unshifted $2e (46) >.<
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "   XX   ",
  "   XX   ",
  "        ",

  // Unshifted $2f (47) >/<
  "        ",
  "      XX",
  "     XX ",
  "    XX  ",
  "   XX   ",
  "  XX    ",
  " XX     ",
  "        ",

  // Unshifted $30 (48) >0<
  "  XXXX  ",
  " XX  XX ",
  " XX XXX ",
  " XXX XX ",
  " XX  XX ",
  " XX  XX ",
  "  XXXX  ",
  "        ",

  // Unshifted $31 (49) >1<
  "   XX   ",
  "   XX   ",
  "  XXX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  " XXXXXX ",
  "        ",

  // Unshifted $32 (50) >2<
  "  XXXX  ",
  " XX  XX ",
  "     XX ",
  "    XX  ",
  "  XX    ",
  " XX     ",
  " XXXXXX ",
  "        ",

  // Unshifted $33 (51) >3<
  "  XXXX  ",
  " XX  XX ",
  "     XX ",
  "   XXX  ",
  "     XX ",
  " XX  XX ",
  "  XXXX  ",
  "        ",

  // Unshifted $34 (52) >4<
  "     XX ",
  "    XXX ",
  "   XXXX ",
  " XX  XX ",
  " XXXXXXX",
  "     XX ",
  "     XX ",
  "        ",

  // Unshifted $35 (53) >5<
  " XXXXXX ",
  " XX     ",
  " XXXXX  ",
  "     XX ",
  "     XX ",
  " XX  XX ",
  "  XXXX  ",
  "        ",

  // Unshifted $36 (54) >6<
  "  XXXX  ",
  " XX  XX ",
  " XX     ",
  " XXXXX  ",
  " XX  XX ",
  " XX  XX ",
  "  XXXX  ",
  "        ",

  // Unshifted $37 (55) >7<
  " XXXXXX ",
  " XX  XX ",
  "    XX  ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "        ",

  // Unshifted $38 (56) >8<
  "  XXXX  ",
  " XX  XX ",
  " XX  XX ",
  "  XXXX  ",
  " XX  XX ",
  " XX  XX ",
  "  XXXX  ",
  "        ",

  // Unshifted $39 (57) >9<
  "  XXXX  ",
  " XX  XX ",
  " XX  XX ",
  "  XXXXX ",
  "     XX ",
  " XX  XX ",
  "  XXXX  ",
  "        ",

  // Unshifted $3a (58) >:<
  "        ",
  "        ",
  "   XX   ",
  "        ",
  "        ",
  "   XX   ",
  "        ",
  "        ",

  // Unshifted $3b (59) >;<
  "        ",
  "        ",
  "   XX   ",
  "        ",
  "        ",
  "   XX   ",
  "   XX   ",
  "  XX    ",

  // Unshifted $3c (60) ><<
  "    XXX ",
  "   XX   ",
  "  XX    ",
  " XX     ",
  "  XX    ",
  "   XX   ",
  "    XXX ",
  "        ",

  // Unshifted $3d (61) >=<
  "        ",
  "        ",
  " XXXXXX ",
  "        ",
  " XXXXXX ",
  "        ",
  "        ",
  "        ",

  // Unshifted $3e (62) >><
  " XXX    ",
  "   XX   ",
  "    XX  ",
  "     XX ",
  "    XX  ",
  "   XX   ",
  " XXX    ",
  "        ",

  // Unshifted $3f (63) >?<
  "  XXXX  ",
  " XX  XX ",
  "     XX ",
  "    XX  ",
  "   XX   ",
  "        ",
  "   XX   ",
  "        ",

  // Unshifted $40 (64) >─<
  "        ",
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",
  "        ",

  // Unshifted $41 (65) >♠<
  "    X   ",
  "   XXX  ",
  "  XXXXX ",
  " XXXXXXX",
  " XXXXXXX",
  "   XXX  ",
  "  XXXXX ",
  "        ",

  // Unshifted $42 (66) >│<
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",

  // Unshifted $43 (67) >─<
  "        ",
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",
  "        ",

  // Unshifted $44 (68) >─<
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",
  "        ",
  "        ",

  // Unshifted $45 (69) >▔<
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",

  // Unshifted $46 (70) >─<
  "        ",
  "        ",
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",

  // Unshifted $47 (71) >│<
  "  XX    ",
  "  XX    ",
  "  XX    ",
  "  XX    ",
  "  XX    ",
  "  XX    ",
  "  XX    ",
  "  XX    ",

  // Unshifted $48 (72) >│<
  "    XX  ",
  "    XX  ",
  "    XX  ",
  "    XX  ",
  "    XX  ",
  "    XX  ",
  "    XX  ",
  "    XX  ",

  // Unshifted $49 (73) >╮<
  "        ",
  "        ",
  "        ",
  "XXX     ",
  "XXXX    ",
  "  XXX   ",
  "   XX   ",
  "   XX   ",

  // Unshifted $4a (74) >╰<
  "   XX   ",
  "   XX   ",
  "   XXX  ",
  "    XXXX",
  "     XXX",
  "        ",
  "        ",
  "        ",

  // Unshifted $4b (75) >╯<
  "   XX   ",
  "   XX   ",
  "  XXX   ",
  "XXXX    ",
  "XXX     ",
  "        ",
  "        ",
  "        ",

  // Unshifted $4c (76) >⌞<
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $4d (77) >╲<
  "XX      ",
  "XXX     ",
  " XXX    ",
  "  XXX   ",
  "   XXX  ",
  "    XXX ",
  "     XXX",
  "      XX",

  // Unshifted $4e (78) >╱<
  "      XX",
  "     XXX",
  "    XXX ",
  "   XXX  ",
  "  XXX   ",
  " XXX    ",
  "XXX     ",
  "XX      ",

  // Unshifted $4f (79) >⌜<
  "XXXXXXXX",
  "XXXXXXXX",
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",

  // Unshifted $50 (80) >⌝<
  "XXXXXXXX",
  "XXXXXXXX",
  "      XX",
  "      XX",
  "      XX",
  "      XX",
  "      XX",
  "      XX",

  // Unshifted $51 (81) >●<
  "        ",
  "  XXXX  ",
  " XXXXXX ",
  " XXXXXX ",
  " XXXXXX ",
  " XXXXXX ",
  "  XXXX  ",
  "        ",

  // Unshifted $52 (82) >_<
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",

  // Unshifted $53 (83) >♥<
  "  XX XX ",
  " XXXXXXX",
  " XXXXXXX",
  " XXXXXXX",
  "  XXXXX ",
  "   XXX  ",
  "    X   ",
  "        ",

  // Unshifted $54 (84) >▎<
  " XX     ",
  " XX     ",
  " XX     ",
  " XX     ",
  " XX     ",
  " XX     ",
  " XX     ",
  " XX     ",

  // Unshifted $55 (85) >╭<
  "        ",
  "        ",
  "        ",
  "     XXX",
  "    XXXX",
  "   XXX  ",
  "   XX   ",
  "   XX   ",

  // Unshifted $56 (86) >╳<
  "XX    XX",
  "XXX  XXX",
  " XXXXXX ",
  "  XXXX  ",
  "  XXXX  ",
  " XXXXXX ",
  "XXX  XXX",
  "XX    XX",

  // Unshifted $57 (87) >○<
  "        ",
  "  XXXX  ",
  " XXXXXX ",
  " XX  XX ",
  " XX  XX ",
  " XXXXXX ",
  "  XXXX  ",
  "        ",

  // Unshifted $58 (88) >♣<
  "   XX   ",
  "   XX   ",
  " XX  XX ",
  " XX  XX ",
  "   XX   ",
  "   XX   ",
  "  XXXX  ",
  "        ",

  // Unshifted $59 (89) >▕<
  "     XX ",
  "     XX ",
  "     XX ",
  "     XX ",
  "     XX ",
  "     XX ",
  "     XX ",
  "     XX ",

  // Unshifted $5a (90) >♦<
  "    X   ",
  "   XXX  ",
  "  XXXXX ",
  " XXXXXXX",
  "  XXXXX ",
  "   XXX  ",
  "    X   ",
  "        ",

  // Unshifted $5b (91) >┼<
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "XXXXXXXX",
  "XXXXXXXX",
  "   XX   ",
  "   XX   ",
  "   XX   ",

  // Unshifted $5c (92) >▒<
  "XX      ",
  "XX      ",
  "  XX    ",
  "  XX    ",
  "XX      ",
  "XX      ",
  "  XX    ",
  "  XX    ",

  // Unshifted $5d (93) >│<
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",

  // Unshifted $5e (94) >π<
  "        ",
  "        ",
  "      XX",
  "  XXXXX ",
  " XXX XX ",
  "  XX XX ",
  "  XX XX ",
  "        ",

  // Unshifted $5f (95) >◥<
  "XXXXXXXX",
  " XXXXXXX",
  "  XXXXXX",
  "   XXXXX",
  "    XXXX",
  "     XXX",
  "      XX",
  "       X",

  // Unshifted $60 (96) > <
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",

  // Unshifted $61 (97) >▌<
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",

  // Unshifted $62 (98) >▄<
  "        ",
  "        ",
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $63 (99) >▔<
  "XXXXXXXX",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",

  // Unshifted $64 (100) >▁<
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "XXXXXXXX",

  // Unshifted $65 (101) >▎<
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",

  // Unshifted $66 (102) >▒<
  "XX  XX  ",
  "XX  XX  ",
  "  XX  XX",
  "  XX  XX",
  "XX  XX  ",
  "XX  XX  ",
  "  XX  XX",
  "  XX  XX",

  // Unshifted $67 (103) >▕<
  "      XX",
  "      XX",
  "      XX",
  "      XX",
  "      XX",
  "      XX",
  "      XX",
  "      XX",

  // Unshifted $68 (104) >▒<
  "        ",
  "        ",
  "        ",
  "        ",
  "XX  XX  ",
  "XX  XX  ",
  "  XX  XX",
  "  XX  XX",

  // Unshifted $69 (105) >◤<
  "XXXXXXXX",
  "XXXXXXX ",
  "XXXXXX  ",
  "XXXXX   ",
  "XXXX    ",
  "XXX     ",
  "XX      ",
  "X       ",

  // Unshifted $6a (106) >▕<
  "      XX",
  "      XX",
  "      XX",
  "      XX",
  "      XX",
  "      XX",
  "      XX",
  "      XX",

  // Unshifted $6b (107) >├<
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XXXXX",
  "   XXXXX",
  "   XX   ",
  "   XX   ",
  "   XX   ",

  // Unshifted $6c (108) >▗<
  "        ",
  "        ",
  "        ",
  "        ",
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "    XXXX",

  // Unshifted $6d (109) >└<
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XXXXX",
  "   XXXXX",
  "        ",
  "        ",
  "        ",

  // Unshifted $6e (110) >┐<
  "        ",
  "        ",
  "        ",
  "XXXXX   ",
  "XXXXX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",

  // Unshifted $6f (111) >▂<
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $70 (112) >┌<
  "        ",
  "        ",
  "        ",
  "   XXXXX",
  "   XXXXX",
  "   XX   ",
  "   XX   ",
  "   XX   ",

  // Unshifted $71 (113) >┴<
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",
  "        ",

  // Unshifted $72 (114) >┬<
  "        ",
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "   XX   ",
  "   XX   ",
  "   XX   ",

  // Unshifted $73 (115) >┤<
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "XXXXX   ",
  "XXXXX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",

  // Unshifted $74 (116) >▎<
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",

  // Unshifted $75 (117) >▍<
  "XXX     ",
  "XXX     ",
  "XXX     ",
  "XXX     ",
  "XXX     ",
  "XXX     ",
  "XXX     ",
  "XXX     ",

  // Unshifted $76 (118) >▕<
  "     XXX",
  "     XXX",
  "     XXX",
  "     XXX",
  "     XXX",
  "     XXX",
  "     XXX",
  "     XXX",

  // Unshifted $77 (119) >▔<
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",

  // Unshifted $78 (120) >▔<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",

  // Unshifted $79 (121) >▃<
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $7a (122) >⌟<
  "      XX",
  "      XX",
  "      XX",
  "      XX",
  "      XX",
  "      XX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $7b (123) >▖<
  "        ",
  "        ",
  "        ",
  "        ",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",

  // Unshifted $7c (124) >▝<
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "        ",
  "        ",
  "        ",
  "        ",

  // Unshifted $7d (125) >┘<
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "XXXXX   ",
  "XXXXX   ",
  "        ",
  "        ",
  "        ",

  // Unshifted $7e (126) >▘<
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "        ",
  "        ",
  "        ",
  "        ",

  // Unshifted $7f (127) >▚<
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "    XXXX",

  // Unshifted $80 (128) >@<
  "XX    XX",
  "X  XX  X",
  "X  X   X",
  "X  X   X",
  "X  XXXXX",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Unshifted $81 (129) >A<
  "XXX  XXX",
  "XX    XX",
  "X  XX  X",
  "X      X",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "XXXXXXXX",

  // Unshifted $82 (130) >B<
  "X     XX",
  "X  XX  X",
  "X  XX  X",
  "X     XX",
  "X  XX  X",
  "X  XX  X",
  "X     XX",
  "XXXXXXXX",

  // Unshifted $83 (131) >C<
  "XX    XX",
  "X  XX  X",
  "X  XXXXX",
  "X  XXXXX",
  "X  XXXXX",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Unshifted $84 (132) >D<
  "X    XXX",
  "X  X  XX",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "X  X  XX",
  "X    XXX",
  "XXXXXXXX",

  // Unshifted $85 (133) >E<
  "X      X",
  "X  XXXXX",
  "X  XXXXX",
  "X    XXX",
  "X  XXXXX",
  "X  XXXXX",
  "X      X",
  "XXXXXXXX",

  // Unshifted $86 (134) >F<
  "X      X",
  "X  XXXXX",
  "X  XXXXX",
  "X    XXX",
  "X  XXXXX",
  "X  XXXXX",
  "X  XXXXX",
  "XXXXXXXX",

  // Unshifted $87 (135) >G<
  "XX    XX",
  "X  XX  X",
  "X  XXXXX",
  "X  X   X",
  "X  XX  X",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Unshifted $88 (136) >H<
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "X      X",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "XXXXXXXX",

  // Unshifted $89 (137) >I<
  "XX    XX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XX    XX",
  "XXXXXXXX",

  // Unshifted $8a (138) >J<
  "XXX    X",
  "XXXX  XX",
  "XXXX  XX",
  "XXXX  XX",
  "XXXX  XX",
  "X  X  XX",
  "XX   XXX",
  "XXXXXXXX",

  // Unshifted $8b (139) >K<
  "X  XX  X",
  "X  X  XX",
  "X    XXX",
  "X   XXXX",
  "X    XXX",
  "X  X  XX",
  "X  XX  X",
  "XXXXXXXX",

  // Unshifted $8c (140) >L<
  "X  XXXXX",
  "X  XXXXX",
  "X  XXXXX",
  "X  XXXXX",
  "X  XXXXX",
  "X  XXXXX",
  "X      X",
  "XXXXXXXX",

  // Unshifted $8d (141) >M<
  "X  XXX  ",
  "X   X   ",
  "X       ",
  "X  X X  ",
  "X  XXX  ",
  "X  XXX  ",
  "X  XXX  ",
  "XXXXXXXX",

  // Unshifted $8e (142) >N<
  "X  XX  X",
  "X   X  X",
  "X      X",
  "X      X",
  "X  X   X",
  "X  XX  X",
  "X  XX  X",
  "XXXXXXXX",

  // Unshifted $8f (143) >O<
  "XX    XX",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Unshifted $90 (144) >P<
  "X     XX",
  "X  XX  X",
  "X  XX  X",
  "X     XX",
  "X  XXXXX",
  "X  XXXXX",
  "X  XXXXX",
  "XXXXXXXX",

  // Unshifted $91 (145) >Q<
  "XX    XX",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "XX    XX",
  "XXXX   X",
  "XXXXXXXX",

  // Unshifted $92 (146) >R<
  "X     XX",
  "X  XX  X",
  "X  XX  X",
  "X     XX",
  "X    XXX",
  "X  X  XX",
  "X  XX  X",
  "XXXXXXXX",

  // Unshifted $93 (147) >S<
  "XX    XX",
  "X  XX  X",
  "X  XXXXX",
  "XX    XX",
  "XXXXX  X",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Unshifted $94 (148) >T<
  "X      X",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXXXXXXX",

  // Unshifted $95 (149) >U<
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Unshifted $96 (150) >V<
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "XX    XX",
  "XXX  XXX",
  "XXXXXXXX",

  // Unshifted $97 (151) >W<
  "X  XXX  ",
  "X  XXX  ",
  "X  XXX  ",
  "X  X X  ",
  "X       ",
  "X   X   ",
  "X  XXX  ",
  "XXXXXXXX",

  // Unshifted $98 (152) >X<
  "X  XX  X",
  "X  XX  X",
  "XX    XX",
  "XXX  XXX",
  "XX    XX",
  "X  XX  X",
  "X  XX  X",
  "XXXXXXXX",

  // Unshifted $99 (153) >Y<
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "XX    XX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXXXXXXX",

  // Unshifted $9a (154) >Z<
  "X      X",
  "XXXXX  X",
  "XXXX  XX",
  "XXX  XXX",
  "XX  XXXX",
  "X  XXXXX",
  "X      X",
  "XXXXXXXX",

  // Unshifted $9b (155) >[<
  "XX    XX",
  "XX  XXXX",
  "XX  XXXX",
  "XX  XXXX",
  "XX  XXXX",
  "XX  XXXX",
  "XX    XX",
  "XXXXXXXX",

  // Unshifted $9c (156) >£<
  "XXXX  XX",
  "XXX XX X",
  "XX  XXXX",
  "X     XX",
  "XX  XXXX",
  "X  XXX X",
  "      XX",
  "XXXXXXXX",

  // Unshifted $9d (157) >]<
  "XX    XX",
  "XXXX  XX",
  "XXXX  XX",
  "XXXX  XX",
  "XXXX  XX",
  "XXXX  XX",
  "XX    XX",
  "XXXXXXXX",

  // Unshifted $9e (158) >↑<
  "XXXXXXXX",
  "XXX  XXX",
  "XX    XX",
  "X      X",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",

  // Unshifted $9f (159) >←<
  "XXXXXXXX",
  "XXX XXXX",
  "XX  XXXX",
  "X       ",
  "X       ",
  "XX  XXXX",
  "XXX XXXX",
  "XXXXXXXX",

  // Unshifted $a0 (160) > <
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $a1 (161) >!<
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXX  XXX",
  "XXXXXXXX",

  // Unshifted $a2 (162) >"<
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $a3 (163) >#<
  "X  XX  X",
  "X  XX  X",
  "        ",
  "X  XX  X",
  "        ",
  "X  XX  X",
  "X  XX  X",
  "XXXXXXXX",

  // Unshifted $a4 (164) >$<
  "XXX  XXX",
  "XX     X",
  "X  XXXXX",
  "XX    XX",
  "XXXXX  X",
  "X     XX",
  "XXX  XXX",
  "XXXXXXXX",

  // Unshifted $a5 (165) >%<
  "X  XXX X",
  "X  XX  X",
  "XXXX  XX",
  "XXX  XXX",
  "XX  XXXX",
  "X  XX  X",
  "X XXX  X",
  "XXXXXXXX",

  // Unshifted $a6 (166) >&<
  "XX    XX",
  "X  XX  X",
  "XX    XX",
  "XX   XXX",
  "X  XX   ",
  "X  XX  X",
  "XX      ",
  "XXXXXXXX",

  // Unshifted $a7 (167) >'<
  "XXXXX  X",
  "XXXX  XX",
  "XXX  XXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $a8 (168) >(<
  "XXXX  XX",
  "XXX  XXX",
  "XX  XXXX",
  "XX  XXXX",
  "XX  XXXX",
  "XXX  XXX",
  "XXXX  XX",
  "XXXXXXXX",

  // Unshifted $a9 (169) >)<
  "XX  XXXX",
  "XXX  XXX",
  "XXXX  XX",
  "XXXX  XX",
  "XXXX  XX",
  "XXX  XXX",
  "XX  XXXX",
  "XXXXXXXX",

  // Unshifted $aa (170) >*<
  "XXXXXXXX",
  "X  XX  X",
  "XX    XX",
  "        ",
  "XX    XX",
  "X  XX  X",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $ab (171) >+<
  "XXXXXXXX",
  "XXX  XXX",
  "XXX  XXX",
  "X      X",
  "XXX  XXX",
  "XXX  XXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $ac (172) >,<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXX  XXX",
  "XXX  XXX",
  "XX  XXXX",

  // Unshifted $ad (173) >-<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "X      X",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $ae (174) >.<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXXXXXXX",

  // Unshifted $af (175) >/<
  "XXXXXXXX",
  "XXXXXX  ",
  "XXXXX  X",
  "XXXX  XX",
  "XXX  XXX",
  "XX  XXXX",
  "X  XXXXX",
  "XXXXXXXX",

  // Unshifted $b0 (176) >0<
  "XX    XX",
  "X  XX  X",
  "X  X   X",
  "X   X  X",
  "X  XX  X",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Unshifted $b1 (177) >1<
  "XXX  XXX",
  "XXX  XXX",
  "XX   XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "X      X",
  "XXXXXXXX",

  // Unshifted $b2 (178) >2<
  "XX    XX",
  "X  XX  X",
  "XXXXX  X",
  "XXXX  XX",
  "XX  XXXX",
  "X  XXXXX",
  "X      X",
  "XXXXXXXX",

  // Unshifted $b3 (179) >3<
  "XX    XX",
  "X  XX  X",
  "XXXXX  X",
  "XXX   XX",
  "XXXXX  X",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Unshifted $b4 (180) >4<
  "XXXXX  X",
  "XXXX   X",
  "XXX    X",
  "X  XX  X",
  "X       ",
  "XXXXX  X",
  "XXXXX  X",
  "XXXXXXXX",

  // Unshifted $b5 (181) >5<
  "X      X",
  "X  XXXXX",
  "X     XX",
  "XXXXX  X",
  "XXXXX  X",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Unshifted $b6 (182) >6<
  "XX    XX",
  "X  XX  X",
  "X  XXXXX",
  "X     XX",
  "X  XX  X",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Unshifted $b7 (183) >7<
  "X      X",
  "X  XX  X",
  "XXXX  XX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXXXXXXX",

  // Unshifted $b8 (184) >8<
  "XX    XX",
  "X  XX  X",
  "X  XX  X",
  "XX    XX",
  "X  XX  X",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Unshifted $b9 (185) >9<
  "XX    XX",
  "X  XX  X",
  "X  XX  X",
  "XX     X",
  "XXXXX  X",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Unshifted $ba (186) >:<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXX  XXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXX  XXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $bb (187) >;<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXX  XXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXX  XXX",
  "XXX  XXX",
  "XX  XXXX",

  // Unshifted $bc (188) ><<
  "XXXX   X",
  "XXX  XXX",
  "XX  XXXX",
  "X  XXXXX",
  "XX  XXXX",
  "XXX  XXX",
  "XXXX   X",
  "XXXXXXXX",

  // Unshifted $bd (189) >=<
  "XXXXXXXX",
  "XXXXXXXX",
  "X      X",
  "XXXXXXXX",
  "X      X",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $be (190) >><
  "X   XXXX",
  "XXX  XXX",
  "XXXX  XX",
  "XXXXX  X",
  "XXXX  XX",
  "XXX  XXX",
  "X   XXXX",
  "XXXXXXXX",

  // Unshifted $bf (191) >?<
  "XX    XX",
  "X  XX  X",
  "XXXXX  X",
  "XXXX  XX",
  "XXX  XXX",
  "XXXXXXXX",
  "XXX  XXX",
  "XXXXXXXX",

  // Unshifted $c0 (192) >─<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $c1 (193) >♠<
  "XXXX XXX",
  "XXX   XX",
  "XX     X",
  "X       ",
  "X       ",
  "XXX   XX",
  "XX     X",
  "XXXXXXXX",

  // Unshifted $c2 (194) >│<
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",

  // Unshifted $c3 (195) >─<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $c4 (196) >─<
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $c5 (197) >▔<
  "XXXXXXXX",
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $c6 (198) >─<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $c7 (199) >│<
  "XX  XXXX",
  "XX  XXXX",
  "XX  XXXX",
  "XX  XXXX",
  "XX  XXXX",
  "XX  XXXX",
  "XX  XXXX",
  "XX  XXXX",

  // Unshifted $c8 (200) >│<
  "XXXX  XX",
  "XXXX  XX",
  "XXXX  XX",
  "XXXX  XX",
  "XXXX  XX",
  "XXXX  XX",
  "XXXX  XX",
  "XXXX  XX",

  // Unshifted $c9 (201) >╮<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "   XXXXX",
  "    XXXX",
  "XX   XXX",
  "XXX  XXX",
  "XXX  XXX",

  // Unshifted $ca (202) >╰<
  "XXX  XXX",
  "XXX  XXX",
  "XXX   XX",
  "XXXX    ",
  "XXXXX   ",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $cb (203) >╯<
  "XXX  XXX",
  "XXX  XXX",
  "XX   XXX",
  "    XXXX",
  "   XXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $cc (204) >⌞<
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "        ",
  "        ",

  // Unshifted $cd (205) >╲<
  "  XXXXXX",
  "   XXXXX",
  "X   XXXX",
  "XX   XXX",
  "XXX   XX",
  "XXXX   X",
  "XXXXX   ",
  "XXXXXX  ",

  // Unshifted $ce (206) >╱<
  "XXXXXX  ",
  "XXXXX   ",
  "XXXX   X",
  "XXX   XX",
  "XX   XXX",
  "X   XXXX",
  "   XXXXX",
  "  XXXXXX",

  // Unshifted $cf (207) >⌜<
  "        ",
  "        ",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",

  // Unshifted $d0 (208) >⌝<
  "        ",
  "        ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",

  // Unshifted $d1 (209) >●<
  "XXXXXXXX",
  "XX    XX",
  "X      X",
  "X      X",
  "X      X",
  "X      X",
  "XX    XX",
  "XXXXXXXX",

  // Unshifted $d2 (210) >_<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",
  "XXXXXXXX",

  // Unshifted $d3 (211) >♥<
  "XX  X  X",
  "X       ",
  "X       ",
  "X       ",
  "XX     X",
  "XXX   XX",
  "XXXX XXX",
  "XXXXXXXX",

  // Unshifted $d4 (212) >▎<
  "X  XXXXX",
  "X  XXXXX",
  "X  XXXXX",
  "X  XXXXX",
  "X  XXXXX",
  "X  XXXXX",
  "X  XXXXX",
  "X  XXXXX",

  // Unshifted $d5 (213) >╭<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXX   ",
  "XXXX    ",
  "XXX   XX",
  "XXX  XXX",
  "XXX  XXX",

  // Unshifted $d6 (214) >╳<
  "  XXXX  ",
  "   XX   ",
  "X      X",
  "XX    XX",
  "XX    XX",
  "X      X",
  "   XX   ",
  "  XXXX  ",

  // Unshifted $d7 (215) >○<
  "XXXXXXXX",
  "XX    XX",
  "X      X",
  "X  XX  X",
  "X  XX  X",
  "X      X",
  "XX    XX",
  "XXXXXXXX",

  // Unshifted $d8 (216) >♣<
  "XXX  XXX",
  "XXX  XXX",
  "X  XX  X",
  "X  XX  X",
  "XXX  XXX",
  "XXX  XXX",
  "XX    XX",
  "XXXXXXXX",

  // Unshifted $d9 (217) >▕<
  "XXXXX  X",
  "XXXXX  X",
  "XXXXX  X",
  "XXXXX  X",
  "XXXXX  X",
  "XXXXX  X",
  "XXXXX  X",
  "XXXXX  X",

  // Unshifted $da (218) >♦<
  "XXXX XXX",
  "XXX   XX",
  "XX     X",
  "X       ",
  "XX     X",
  "XXX   XX",
  "XXXX XXX",
  "XXXXXXXX",

  // Unshifted $db (219) >┼<
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "        ",
  "        ",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",

  // Unshifted $dc (220) >▒<
  "  XXXXXX",
  "  XXXXXX",
  "XX  XXXX",
  "XX  XXXX",
  "  XXXXXX",
  "  XXXXXX",
  "XX  XXXX",
  "XX  XXXX",

  // Unshifted $dd (221) >│<
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",

  // Unshifted $de (222) >π<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXX  ",
  "XX     X",
  "X   X  X",
  "XX  X  X",
  "XX  X  X",
  "XXXXXXXX",

  // Unshifted $df (223) >◥<
  "        ",
  "X       ",
  "XX      ",
  "XXX     ",
  "XXXX    ",
  "XXXXX   ",
  "XXXXXX  ",
  "XXXXXXX ",

  // Unshifted $e0 (224) > <
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $e1 (225) >▌<
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "    XXXX",

  // Unshifted $e2 (226) >▄<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",
  "        ",
  "        ",

  // Unshifted $e3 (227) >▔<
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $e4 (228) >▁<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",

  // Unshifted $e5 (229) >▎<
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",

  // Unshifted $e6 (230) >▒<
  "  XX  XX",
  "  XX  XX",
  "XX  XX  ",
  "XX  XX  ",
  "  XX  XX",
  "  XX  XX",
  "XX  XX  ",
  "XX  XX  ",

  // Unshifted $e7 (231) >▕<
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",

  // Unshifted $e8 (232) >▒<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "  XX  XX",
  "  XX  XX",
  "XX  XX  ",
  "XX  XX  ",

  // Unshifted $e9 (233) >◤<
  "        ",
  "       X",
  "      XX",
  "     XXX",
  "    XXXX",
  "   XXXXX",
  "  XXXXXX",
  " XXXXXXX",

  // Unshifted $ea (234) >▕<
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",

  // Unshifted $eb (235) >├<
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX     ",
  "XXX     ",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",

  // Unshifted $ec (236) >▗<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",

  // Unshifted $ed (237) >└<
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX     ",
  "XXX     ",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $ee (238) >┐<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "     XXX",
  "     XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",

  // Unshifted $ef (239) >▂<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",

  // Unshifted $f0 (240) >┌<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXX     ",
  "XXX     ",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",

  // Unshifted $f1 (241) >┴<
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $f2 (242) >┬<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",

  // Unshifted $f3 (243) >┤<
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "     XXX",
  "     XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",

  // Unshifted $f4 (244) >▎<
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",

  // Unshifted $f5 (245) >▍<
  "   XXXXX",
  "   XXXXX",
  "   XXXXX",
  "   XXXXX",
  "   XXXXX",
  "   XXXXX",
  "   XXXXX",
  "   XXXXX",

  // Unshifted $f6 (246) >▕<
  "XXXXX   ",
  "XXXXX   ",
  "XXXXX   ",
  "XXXXX   ",
  "XXXXX   ",
  "XXXXX   ",
  "XXXXX   ",
  "XXXXX   ",

  // Unshifted $f7 (247) >▔<
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $f8 (248) >▔<
  "        ",
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $f9 (249) >▃<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",
  "        ",

  // Unshifted $fa (250) >⌟<
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "        ",
  "        ",

  // Unshifted $fb (251) >▖<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "    XXXX",

  // Unshifted $fc (252) >▝<
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $fd (253) >┘<
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "     XXX",
  "     XXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $fe (254) >▘<
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Unshifted $ff (255) >▚<
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",

  // Shifted $00 (0) >@<
  "  XXXX  ",
  " XX  XX ",
  " XX XXX ",
  " XX XXX ",
  " XX     ",
  " XX   X ",
  "  XXXX  ",
  "        ",

  // Shifted $01 (1) >a<
  "        ",
  "        ",
  "  XXXX  ",
  "     XX ",
  "  XXXXX ",
  " XX  XX ",
  "  XXXXX ",
  "        ",

  // Shifted $02 (2) >b<
  "        ",
  " XX     ",
  " XX     ",
  " XXXXX  ",
  " XX  XX ",
  " XX  XX ",
  " XXXXX  ",
  "        ",

  // Shifted $03 (3) >c<
  "        ",
  "        ",
  "  XXXX  ",
  " XX     ",
  " XX     ",
  " XX     ",
  "  XXXX  ",
  "        ",

  // Shifted $04 (4) >d<
  "        ",
  "     XX ",
  "     XX ",
  "  XXXXX ",
  " XX  XX ",
  " XX  XX ",
  "  XXXXX ",
  "        ",

  // Shifted $05 (5) >e<
  "        ",
  "        ",
  "  XXXX  ",
  " XX  XX ",
  " XXXXXX ",
  " XX     ",
  "  XXXX  ",
  "        ",

  // Shifted $06 (6) >f<
  "        ",
  "    XXX ",
  "   XX   ",
  "  XXXXX ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "        ",

  // Shifted $07 (7) >g<
  "        ",
  "        ",
  "  XXXXX ",
  " XX  XX ",
  " XX  XX ",
  "  XXXXX ",
  "     XX ",
  " XXXXX  ",

  // Shifted $08 (8) >h<
  "        ",
  " XX     ",
  " XX     ",
  " XXXXX  ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  "        ",

  // Shifted $09 (9) >i<
  "        ",
  "   XX   ",
  "        ",
  "  XXX   ",
  "   XX   ",
  "   XX   ",
  "  XXXX  ",
  "        ",

  // Shifted $0a (10) >j<
  "        ",
  "     XX ",
  "        ",
  "     XX ",
  "     XX ",
  "     XX ",
  "     XX ",
  "  XXXX  ",

  // Shifted $0b (11) >k<
  "        ",
  " XX     ",
  " XX     ",
  " XX XX  ",
  " XXXX   ",
  " XX XX  ",
  " XX  XX ",
  "        ",

  // Shifted $0c (12) >l<
  "        ",
  "  XXX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "  XXXX  ",
  "        ",

  // Shifted $0d (13) >m<
  "        ",
  "        ",
  " XX  XX ",
  " XXXXXXX",
  " XXXXXXX",
  " XX X XX",
  " XX   XX",
  "        ",

  // Shifted $0e (14) >n<
  "        ",
  "        ",
  " XXXXX  ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  "        ",

  // Shifted $0f (15) >o<
  "        ",
  "        ",
  "  XXXX  ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  "  XXXX  ",
  "        ",

  // Shifted $10 (16) >p<
  "        ",
  "        ",
  " XXXXX  ",
  " XX  XX ",
  " XX  XX ",
  " XXXXX  ",
  " XX     ",
  " XX     ",

  // Shifted $11 (17) >q<
  "        ",
  "        ",
  "  XXXXX ",
  " XX  XX ",
  " XX  XX ",
  "  XXXXX ",
  "     XX ",
  "     XX ",

  // Shifted $12 (18) >r<
  "        ",
  "        ",
  " XXXXX  ",
  " XX  XX ",
  " XX     ",
  " XX     ",
  " XX     ",
  "        ",

  // Shifted $13 (19) >s<
  "        ",
  "        ",
  "  XXXXX ",
  " XX     ",
  "  XXXX  ",
  "     XX ",
  " XXXXX  ",
  "        ",

  // Shifted $14 (20) >t<
  "        ",
  "   XX   ",
  " XXXXXX ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "    XXX ",
  "        ",

  // Shifted $15 (21) >u<
  "        ",
  "        ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  "  XXXXX ",
  "        ",

  // Shifted $16 (22) >v<
  "        ",
  "        ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  "  XXXX  ",
  "   XX   ",
  "        ",

  // Shifted $17 (23) >w<
  "        ",
  "        ",
  " XX   XX",
  " XX X XX",
  " XXXXXXX",
  "  XXXXX ",
  "  XX XX ",
  "        ",

  // Shifted $18 (24) >x<
  "        ",
  "        ",
  " XX  XX ",
  "  XXXX  ",
  "   XX   ",
  "  XXXX  ",
  " XX  XX ",
  "        ",

  // Shifted $19 (25) >y<
  "        ",
  "        ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  "  XXXXX ",
  "    XX  ",
  " XXXX   ",

  // Shifted $1a (26) >z<
  "        ",
  "        ",
  " XXXXXX ",
  "    XX  ",
  "   XX   ",
  "  XX    ",
  " XXXXXX ",
  "        ",

  // Shifted $1b (27) >[<
  "  XXXX  ",
  "  XX    ",
  "  XX    ",
  "  XX    ",
  "  XX    ",
  "  XX    ",
  "  XXXX  ",
  "        ",

  // Shifted $1c (28) >£<
  "    XX  ",
  "   X  X ",
  "  XX    ",
  " XXXXX  ",
  "  XX    ",
  " XX   X ",
  "XXXXXX  ",
  "        ",

  // Shifted $1d (29) >]<
  "  XXXX  ",
  "    XX  ",
  "    XX  ",
  "    XX  ",
  "    XX  ",
  "    XX  ",
  "  XXXX  ",
  "        ",

  // Shifted $1e (30) >↑<
  "        ",
  "   XX   ",
  "  XXXX  ",
  " XXXXXX ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",

  // Shifted $1f (31) >←<
  "        ",
  "   X    ",
  "  XX    ",
  " XXXXXXX",
  " XXXXXXX",
  "  XX    ",
  "   X    ",
  "        ",

  // Shifted $20 (32) > <
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",

  // Shifted $21 (33) >!<
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "        ",
  "        ",
  "   XX   ",
  "        ",

  // Shifted $22 (34) >"<
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",

  // Shifted $23 (35) >#<
  " XX  XX ",
  " XX  XX ",
  "XXXXXXXX",
  " XX  XX ",
  "XXXXXXXX",
  " XX  XX ",
  " XX  XX ",
  "        ",

  // Shifted $24 (36) >$<
  "   XX   ",
  "  XXXXX ",
  " XX     ",
  "  XXXX  ",
  "     XX ",
  " XXXXX  ",
  "   XX   ",
  "        ",

  // Shifted $25 (37) >%<
  " XX   X ",
  " XX  XX ",
  "    XX  ",
  "   XX   ",
  "  XX    ",
  " XX  XX ",
  " X   XX ",
  "        ",

  // Shifted $26 (38) >&<
  "  XXXX  ",
  " XX  XX ",
  "  XXXX  ",
  "  XXX   ",
  " XX  XXX",
  " XX  XX ",
  "  XXXXXX",
  "        ",

  // Shifted $27 (39) >'<
  "     XX ",
  "    XX  ",
  "   XX   ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",

  // Shifted $28 (40) >(<
  "    XX  ",
  "   XX   ",
  "  XX    ",
  "  XX    ",
  "  XX    ",
  "   XX   ",
  "    XX  ",
  "        ",

  // Shifted $29 (41) >)<
  "  XX    ",
  "   XX   ",
  "    XX  ",
  "    XX  ",
  "    XX  ",
  "   XX   ",
  "  XX    ",
  "        ",

  // Shifted $2a (42) >*<
  "        ",
  " XX  XX ",
  "  XXXX  ",
  "XXXXXXXX",
  "  XXXX  ",
  " XX  XX ",
  "        ",
  "        ",

  // Shifted $2b (43) >+<
  "        ",
  "   XX   ",
  "   XX   ",
  " XXXXXX ",
  "   XX   ",
  "   XX   ",
  "        ",
  "        ",

  // Shifted $2c (44) >,<
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "   XX   ",
  "   XX   ",
  "  XX    ",

  // Shifted $2d (45) >-<
  "        ",
  "        ",
  "        ",
  " XXXXXX ",
  "        ",
  "        ",
  "        ",
  "        ",

  // Shifted $2e (46) >.<
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "   XX   ",
  "   XX   ",
  "        ",

  // Shifted $2f (47) >/<
  "        ",
  "      XX",
  "     XX ",
  "    XX  ",
  "   XX   ",
  "  XX    ",
  " XX     ",
  "        ",

  // Shifted $30 (48) >0<
  "  XXXX  ",
  " XX  XX ",
  " XX XXX ",
  " XXX XX ",
  " XX  XX ",
  " XX  XX ",
  "  XXXX  ",
  "        ",

  // Shifted $31 (49) >1<
  "   XX   ",
  "   XX   ",
  "  XXX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  " XXXXXX ",
  "        ",

  // Shifted $32 (50) >2<
  "  XXXX  ",
  " XX  XX ",
  "     XX ",
  "    XX  ",
  "  XX    ",
  " XX     ",
  " XXXXXX ",
  "        ",

  // Shifted $33 (51) >3<
  "  XXXX  ",
  " XX  XX ",
  "     XX ",
  "   XXX  ",
  "     XX ",
  " XX  XX ",
  "  XXXX  ",
  "        ",

  // Shifted $34 (52) >4<
  "     XX ",
  "    XXX ",
  "   XXXX ",
  " XX  XX ",
  " XXXXXXX",
  "     XX ",
  "     XX ",
  "        ",

  // Shifted $35 (53) >5<
  " XXXXXX ",
  " XX     ",
  " XXXXX  ",
  "     XX ",
  "     XX ",
  " XX  XX ",
  "  XXXX  ",
  "        ",

  // Shifted $36 (54) >6<
  "  XXXX  ",
  " XX  XX ",
  " XX     ",
  " XXXXX  ",
  " XX  XX ",
  " XX  XX ",
  "  XXXX  ",
  "        ",

  // Shifted $37 (55) >7<
  " XXXXXX ",
  " XX  XX ",
  "    XX  ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "        ",

  // Shifted $38 (56) >8<
  "  XXXX  ",
  " XX  XX ",
  " XX  XX ",
  "  XXXX  ",
  " XX  XX ",
  " XX  XX ",
  "  XXXX  ",
  "        ",

  // Shifted $39 (57) >9<
  "  XXXX  ",
  " XX  XX ",
  " XX  XX ",
  "  XXXXX ",
  "     XX ",
  " XX  XX ",
  "  XXXX  ",
  "        ",

  // Shifted $3a (58) >:<
  "        ",
  "        ",
  "   XX   ",
  "        ",
  "        ",
  "   XX   ",
  "        ",
  "        ",

  // Shifted $3b (59) >;<
  "        ",
  "        ",
  "   XX   ",
  "        ",
  "        ",
  "   XX   ",
  "   XX   ",
  "  XX    ",

  // Shifted $3c (60) ><<
  "    XXX ",
  "   XX   ",
  "  XX    ",
  " XX     ",
  "  XX    ",
  "   XX   ",
  "    XXX ",
  "        ",

  // Shifted $3d (61) >=<
  "        ",
  "        ",
  " XXXXXX ",
  "        ",
  " XXXXXX ",
  "        ",
  "        ",
  "        ",

  // Shifted $3e (62) >><
  " XXX    ",
  "   XX   ",
  "    XX  ",
  "     XX ",
  "    XX  ",
  "   XX   ",
  " XXX    ",
  "        ",

  // Shifted $3f (63) >?<
  "  XXXX  ",
  " XX  XX ",
  "     XX ",
  "    XX  ",
  "   XX   ",
  "        ",
  "   XX   ",
  "        ",

  // Shifted $40 (64) >─<
  "        ",
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",
  "        ",

  // Shifted $41 (65) >A<
  "   XX   ",
  "  XXXX  ",
  " XX  XX ",
  " XXXXXX ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  "        ",

  // Shifted $42 (66) >B<
  " XXXXX  ",
  " XX  XX ",
  " XX  XX ",
  " XXXXX  ",
  " XX  XX ",
  " XX  XX ",
  " XXXXX  ",
  "        ",

  // Shifted $43 (67) >C<
  "  XXXX  ",
  " XX  XX ",
  " XX     ",
  " XX     ",
  " XX     ",
  " XX  XX ",
  "  XXXX  ",
  "        ",

  // Shifted $44 (68) >D<
  " XXXX   ",
  " XX XX  ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  " XX XX  ",
  " XXXX   ",
  "        ",

  // Shifted $45 (69) >E<
  " XXXXXX ",
  " XX     ",
  " XX     ",
  " XXXX   ",
  " XX     ",
  " XX     ",
  " XXXXXX ",
  "        ",

  // Shifted $46 (70) >F<
  " XXXXXX ",
  " XX     ",
  " XX     ",
  " XXXX   ",
  " XX     ",
  " XX     ",
  " XX     ",
  "        ",

  // Shifted $47 (71) >G<
  "  XXXX  ",
  " XX  XX ",
  " XX     ",
  " XX XXX ",
  " XX  XX ",
  " XX  XX ",
  "  XXXX  ",
  "        ",

  // Shifted $48 (72) >H<
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  " XXXXXX ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  "        ",

  // Shifted $49 (73) >I<
  "  XXXX  ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "  XXXX  ",
  "        ",

  // Shifted $4a (74) >J<
  "   XXXX ",
  "    XX  ",
  "    XX  ",
  "    XX  ",
  "    XX  ",
  " XX XX  ",
  "  XXX   ",
  "        ",

  // Shifted $4b (75) >K<
  " XX  XX ",
  " XX XX  ",
  " XXXX   ",
  " XXX    ",
  " XXXX   ",
  " XX XX  ",
  " XX  XX ",
  "        ",

  // Shifted $4c (76) >L<
  " XX     ",
  " XX     ",
  " XX     ",
  " XX     ",
  " XX     ",
  " XX     ",
  " XXXXXX ",
  "        ",

  // Shifted $4d (77) >M<
  " XX   XX",
  " XXX XXX",
  " XXXXXXX",
  " XX X XX",
  " XX   XX",
  " XX   XX",
  " XX   XX",
  "        ",

  // Shifted $4e (78) >N<
  " XX  XX ",
  " XXX XX ",
  " XXXXXX ",
  " XXXXXX ",
  " XX XXX ",
  " XX  XX ",
  " XX  XX ",
  "        ",

  // Shifted $4f (79) >O<
  "  XXXX  ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  "  XXXX  ",
  "        ",

  // Shifted $50 (80) >P<
  " XXXXX  ",
  " XX  XX ",
  " XX  XX ",
  " XXXXX  ",
  " XX     ",
  " XX     ",
  " XX     ",
  "        ",

  // Shifted $51 (81) >Q<
  "  XXXX  ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  "  XXXX  ",
  "    XXX ",
  "        ",

  // Shifted $52 (82) >R<
  " XXXXX  ",
  " XX  XX ",
  " XX  XX ",
  " XXXXX  ",
  " XXXX   ",
  " XX XX  ",
  " XX  XX ",
  "        ",

  // Shifted $53 (83) >S<
  "  XXXX  ",
  " XX  XX ",
  " XX     ",
  "  XXXX  ",
  "     XX ",
  " XX  XX ",
  "  XXXX  ",
  "        ",

  // Shifted $54 (84) >T<
  " XXXXXX ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "        ",

  // Shifted $55 (85) >U<
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  "  XXXX  ",
  "        ",

  // Shifted $56 (86) >V<
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  "  XXXX  ",
  "   XX   ",
  "        ",

  // Shifted $57 (87) >W<
  " XX   XX",
  " XX   XX",
  " XX   XX",
  " XX X XX",
  " XXXXXXX",
  " XXX XXX",
  " XX   XX",
  "        ",

  // Shifted $58 (88) >X<
  " XX  XX ",
  " XX  XX ",
  "  XXXX  ",
  "   XX   ",
  "  XXXX  ",
  " XX  XX ",
  " XX  XX ",
  "        ",

  // Shifted $59 (89) >Y<
  " XX  XX ",
  " XX  XX ",
  " XX  XX ",
  "  XXXX  ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "        ",

  // Shifted $5a (90) >Z<
  " XXXXXX ",
  "     XX ",
  "    XX  ",
  "   XX   ",
  "  XX    ",
  " XX     ",
  " XXXXXX ",
  "        ",

  // Shifted $5b (91) >┼<
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "XXXXXXXX",
  "XXXXXXXX",
  "   XX   ",
  "   XX   ",
  "   XX   ",

  // Shifted $5c (92) >▒<
  "XX      ",
  "XX      ",
  "  XX    ",
  "  XX    ",
  "XX      ",
  "XX      ",
  "  XX    ",
  "  XX    ",

  // Shifted $5d (93) >│<
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",

  // Shifted $5e (94) >▒<
  "  XX  XX",
  "  XX  XX",
  "XX  XX  ",
  "XX  XX  ",
  "  XX  XX",
  "  XX  XX",
  "XX  XX  ",
  "XX  XX  ",

  // Shifted $5f (95) >▒<
  "  XX  XX",
  "X  XX  X",
  "XX  XX  ",
  " XX  XX ",
  "  XX  XX",
  "X  XX  X",
  "XX  XX  ",
  " XX  XX ",

  // Shifted $60 (96) > <
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",

  // Shifted $61 (97) >▌<
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",

  // Shifted $62 (98) >▄<
  "        ",
  "        ",
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Shifted $63 (99) >▔<
  "XXXXXXXX",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",

  // Shifted $64 (100) >▁<
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "XXXXXXXX",

  // Shifted $65 (101) >▎<
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",

  // Shifted $66 (102) >▒<
  "XX  XX  ",
  "XX  XX  ",
  "  XX  XX",
  "  XX  XX",
  "XX  XX  ",
  "XX  XX  ",
  "  XX  XX",
  "  XX  XX",

  // Shifted $67 (103) >▕<
  "      XX",
  "      XX",
  "      XX",
  "      XX",
  "      XX",
  "      XX",
  "      XX",
  "      XX",

  // Shifted $68 (104) >▒<
  "        ",
  "        ",
  "        ",
  "        ",
  "XX  XX  ",
  "XX  XX  ",
  "  XX  XX",
  "  XX  XX",

  // Shifted $69 (105) >▒<
  "XX  XX  ",
  "X  XX  X",
  "  XX  XX",
  " XX  XX ",
  "XX  XX  ",
  "X  XX  X",
  "  XX  XX",
  " XX  XX ",

  // Shifted $6a (106) >▕<
  "      XX",
  "      XX",
  "      XX",
  "      XX",
  "      XX",
  "      XX",
  "      XX",
  "      XX",

  // Shifted $6b (107) >├<
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XXXXX",
  "   XXXXX",
  "   XX   ",
  "   XX   ",
  "   XX   ",

  // Shifted $6c (108) >▗<
  "        ",
  "        ",
  "        ",
  "        ",
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "    XXXX",

  // Shifted $6d (109) >└<
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "   XXXXX",
  "   XXXXX",
  "        ",
  "        ",
  "        ",

  // Shifted $6e (110) >┐<
  "        ",
  "        ",
  "        ",
  "XXXXX   ",
  "XXXXX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",

  // Shifted $6f (111) >▂<
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",

  // Shifted $70 (112) >┌<
  "        ",
  "        ",
  "        ",
  "   XXXXX",
  "   XXXXX",
  "   XX   ",
  "   XX   ",
  "   XX   ",

  // Shifted $71 (113) >┴<
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",
  "        ",

  // Shifted $72 (114) >┬<
  "        ",
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "   XX   ",
  "   XX   ",
  "   XX   ",

  // Shifted $73 (115) >┤<
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "XXXXX   ",
  "XXXXX   ",
  "   XX   ",
  "   XX   ",
  "   XX   ",

  // Shifted $74 (116) >▎<
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",
  "XX      ",

  // Shifted $75 (117) >▍<
  "XXX     ",
  "XXX     ",
  "XXX     ",
  "XXX     ",
  "XXX     ",
  "XXX     ",
  "XXX     ",
  "XXX     ",

  // Shifted $76 (118) >▕<
  "     XXX",
  "     XXX",
  "     XXX",
  "     XXX",
  "     XXX",
  "     XXX",
  "     XXX",
  "     XXX",

  // Shifted $77 (119) >▔<
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",

  // Shifted $78 (120) >▔<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",

  // Shifted $79 (121) >▃<
  "        ",
  "        ",
  "        ",
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Shifted $7a (122) >✓<
  "       X",
  "      XX",
  "     XX ",
  " XX XX  ",
  " XXXX   ",
  " XXX    ",
  " XX     ",
  "        ",

  // Shifted $7b (123) >▖<
  "        ",
  "        ",
  "        ",
  "        ",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",

  // Shifted $7c (124) >▝<
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "        ",
  "        ",
  "        ",
  "        ",

  // Shifted $7d (125) >┘<
  "   XX   ",
  "   XX   ",
  "   XX   ",
  "XXXXX   ",
  "XXXXX   ",
  "        ",
  "        ",
  "        ",

  // Shifted $7e (126) >▘<
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "        ",
  "        ",
  "        ",
  "        ",

  // Shifted $7f (127) >▚<
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "    XXXX",

  // Shifted $80 (128) >@<
  "XX    XX",
  "X  XX  X",
  "X  X   X",
  "X  X   X",
  "X  XXXXX",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Shifted $81 (129) >a<
  "XXXXXXXX",
  "XXXXXXXX",
  "XX    XX",
  "XXXXX  X",
  "XX     X",
  "X  XX  X",
  "XX     X",
  "XXXXXXXX",

  // Shifted $82 (130) >b<
  "XXXXXXXX",
  "X  XXXXX",
  "X  XXXXX",
  "X     XX",
  "X  XX  X",
  "X  XX  X",
  "X     XX",
  "XXXXXXXX",

  // Shifted $83 (131) >c<
  "XXXXXXXX",
  "XXXXXXXX",
  "XX    XX",
  "X  XXXXX",
  "X  XXXXX",
  "X  XXXXX",
  "XX    XX",
  "XXXXXXXX",

  // Shifted $84 (132) >d<
  "XXXXXXXX",
  "XXXXX  X",
  "XXXXX  X",
  "XX     X",
  "X  XX  X",
  "X  XX  X",
  "XX     X",
  "XXXXXXXX",

  // Shifted $85 (133) >e<
  "XXXXXXXX",
  "XXXXXXXX",
  "XX    XX",
  "X  XX  X",
  "X      X",
  "X  XXXXX",
  "XX    XX",
  "XXXXXXXX",

  // Shifted $86 (134) >f<
  "XXXXXXXX",
  "XXXX   X",
  "XXX  XXX",
  "XX     X",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXXXXXXX",

  // Shifted $87 (135) >g<
  "XXXXXXXX",
  "XXXXXXXX",
  "XX     X",
  "X  XX  X",
  "X  XX  X",
  "XX     X",
  "XXXXX  X",
  "X     XX",

  // Shifted $88 (136) >h<
  "XXXXXXXX",
  "X  XXXXX",
  "X  XXXXX",
  "X     XX",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "XXXXXXXX",

  // Shifted $89 (137) >i<
  "XXXXXXXX",
  "XXX  XXX",
  "XXXXXXXX",
  "XX   XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XX    XX",
  "XXXXXXXX",

  // Shifted $8a (138) >j<
  "XXXXXXXX",
  "XXXXX  X",
  "XXXXXXXX",
  "XXXXX  X",
  "XXXXX  X",
  "XXXXX  X",
  "XXXXX  X",
  "XX    XX",

  // Shifted $8b (139) >k<
  "XXXXXXXX",
  "X  XXXXX",
  "X  XXXXX",
  "X  X  XX",
  "X    XXX",
  "X  X  XX",
  "X  XX  X",
  "XXXXXXXX",

  // Shifted $8c (140) >l<
  "XXXXXXXX",
  "XX   XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XX    XX",
  "XXXXXXXX",

  // Shifted $8d (141) >m<
  "XXXXXXXX",
  "XXXXXXXX",
  "X  XX  X",
  "X       ",
  "X       ",
  "X  X X  ",
  "X  XXX  ",
  "XXXXXXXX",

  // Shifted $8e (142) >n<
  "XXXXXXXX",
  "XXXXXXXX",
  "X     XX",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "XXXXXXXX",

  // Shifted $8f (143) >o<
  "XXXXXXXX",
  "XXXXXXXX",
  "XX    XX",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Shifted $90 (144) >p<
  "XXXXXXXX",
  "XXXXXXXX",
  "X     XX",
  "X  XX  X",
  "X  XX  X",
  "X     XX",
  "X  XXXXX",
  "X  XXXXX",

  // Shifted $91 (145) >q<
  "XXXXXXXX",
  "XXXXXXXX",
  "XX     X",
  "X  XX  X",
  "X  XX  X",
  "XX     X",
  "XXXXX  X",
  "XXXXX  X",

  // Shifted $92 (146) >r<
  "XXXXXXXX",
  "XXXXXXXX",
  "X     XX",
  "X  XX  X",
  "X  XXXXX",
  "X  XXXXX",
  "X  XXXXX",
  "XXXXXXXX",

  // Shifted $93 (147) >s<
  "XXXXXXXX",
  "XXXXXXXX",
  "XX     X",
  "X  XXXXX",
  "XX    XX",
  "XXXXX  X",
  "X     XX",
  "XXXXXXXX",

  // Shifted $94 (148) >t<
  "XXXXXXXX",
  "XXX  XXX",
  "X      X",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXXX   X",
  "XXXXXXXX",

  // Shifted $95 (149) >u<
  "XXXXXXXX",
  "XXXXXXXX",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "XX     X",
  "XXXXXXXX",

  // Shifted $96 (150) >v<
  "XXXXXXXX",
  "XXXXXXXX",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "XX    XX",
  "XXX  XXX",
  "XXXXXXXX",

  // Shifted $97 (151) >w<
  "XXXXXXXX",
  "XXXXXXXX",
  "X  XXX  ",
  "X  X X  ",
  "X       ",
  "XX     X",
  "XX  X  X",
  "XXXXXXXX",

  // Shifted $98 (152) >x<
  "XXXXXXXX",
  "XXXXXXXX",
  "X  XX  X",
  "XX    XX",
  "XXX  XXX",
  "XX    XX",
  "X  XX  X",
  "XXXXXXXX",

  // Shifted $99 (153) >y<
  "XXXXXXXX",
  "XXXXXXXX",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "XX     X",
  "XXXX  XX",
  "X    XXX",

  // Shifted $9a (154) >z<
  "XXXXXXXX",
  "XXXXXXXX",
  "X      X",
  "XXXX  XX",
  "XXX  XXX",
  "XX  XXXX",
  "X      X",
  "XXXXXXXX",

  // Shifted $9b (155) >[<
  "XX    XX",
  "XX  XXXX",
  "XX  XXXX",
  "XX  XXXX",
  "XX  XXXX",
  "XX  XXXX",
  "XX    XX",
  "XXXXXXXX",

  // Shifted $9c (156) >£<
  "XXXX  XX",
  "XXX XX X",
  "XX  XXXX",
  "X     XX",
  "XX  XXXX",
  "X  XXX X",
  "      XX",
  "XXXXXXXX",

  // Shifted $9d (157) >]<
  "XX    XX",
  "XXXX  XX",
  "XXXX  XX",
  "XXXX  XX",
  "XXXX  XX",
  "XXXX  XX",
  "XX    XX",
  "XXXXXXXX",

  // Shifted $9e (158) >↑<
  "XXXXXXXX",
  "XXX  XXX",
  "XX    XX",
  "X      X",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",

  // Shifted $9f (159) >←<
  "XXXXXXXX",
  "XXX XXXX",
  "XX  XXXX",
  "X       ",
  "X       ",
  "XX  XXXX",
  "XXX XXXX",
  "XXXXXXXX",

  // Shifted $a0 (160) > <
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Shifted $a1 (161) >!<
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXX  XXX",
  "XXXXXXXX",

  // Shifted $a2 (162) >"<
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Shifted $a3 (163) >#<
  "X  XX  X",
  "X  XX  X",
  "        ",
  "X  XX  X",
  "        ",
  "X  XX  X",
  "X  XX  X",
  "XXXXXXXX",

  // Shifted $a4 (164) >$<
  "XXX  XXX",
  "XX     X",
  "X  XXXXX",
  "XX    XX",
  "XXXXX  X",
  "X     XX",
  "XXX  XXX",
  "XXXXXXXX",

  // Shifted $a5 (165) >%<
  "X  XXX X",
  "X  XX  X",
  "XXXX  XX",
  "XXX  XXX",
  "XX  XXXX",
  "X  XX  X",
  "X XXX  X",
  "XXXXXXXX",

  // Shifted $a6 (166) >&<
  "XX    XX",
  "X  XX  X",
  "XX    XX",
  "XX   XXX",
  "X  XX   ",
  "X  XX  X",
  "XX      ",
  "XXXXXXXX",

  // Shifted $a7 (167) >'<
  "XXXXX  X",
  "XXXX  XX",
  "XXX  XXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Shifted $a8 (168) >(<
  "XXXX  XX",
  "XXX  XXX",
  "XX  XXXX",
  "XX  XXXX",
  "XX  XXXX",
  "XXX  XXX",
  "XXXX  XX",
  "XXXXXXXX",

  // Shifted $a9 (169) >)<
  "XX  XXXX",
  "XXX  XXX",
  "XXXX  XX",
  "XXXX  XX",
  "XXXX  XX",
  "XXX  XXX",
  "XX  XXXX",
  "XXXXXXXX",

  // Shifted $aa (170) >*<
  "XXXXXXXX",
  "X  XX  X",
  "XX    XX",
  "        ",
  "XX    XX",
  "X  XX  X",
  "XXXXXXXX",
  "XXXXXXXX",

  // Shifted $ab (171) >+<
  "XXXXXXXX",
  "XXX  XXX",
  "XXX  XXX",
  "X      X",
  "XXX  XXX",
  "XXX  XXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Shifted $ac (172) >,<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXX  XXX",
  "XXX  XXX",
  "XX  XXXX",

  // Shifted $ad (173) >-<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "X      X",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Shifted $ae (174) >.<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXXXXXXX",

  // Shifted $af (175) >/<
  "XXXXXXXX",
  "XXXXXX  ",
  "XXXXX  X",
  "XXXX  XX",
  "XXX  XXX",
  "XX  XXXX",
  "X  XXXXX",
  "XXXXXXXX",

  // Shifted $b0 (176) >0<
  "XX    XX",
  "X  XX  X",
  "X  X   X",
  "X   X  X",
  "X  XX  X",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Shifted $b1 (177) >1<
  "XXX  XXX",
  "XXX  XXX",
  "XX   XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "X      X",
  "XXXXXXXX",

  // Shifted $b2 (178) >2<
  "XX    XX",
  "X  XX  X",
  "XXXXX  X",
  "XXXX  XX",
  "XX  XXXX",
  "X  XXXXX",
  "X      X",
  "XXXXXXXX",

  // Shifted $b3 (179) >3<
  "XX    XX",
  "X  XX  X",
  "XXXXX  X",
  "XXX   XX",
  "XXXXX  X",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Shifted $b4 (180) >4<
  "XXXXX  X",
  "XXXX   X",
  "XXX    X",
  "X  XX  X",
  "X       ",
  "XXXXX  X",
  "XXXXX  X",
  "XXXXXXXX",

  // Shifted $b5 (181) >5<
  "X      X",
  "X  XXXXX",
  "X     XX",
  "XXXXX  X",
  "XXXXX  X",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Shifted $b6 (182) >6<
  "XX    XX",
  "X  XX  X",
  "X  XXXXX",
  "X     XX",
  "X  XX  X",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Shifted $b7 (183) >7<
  "X      X",
  "X  XX  X",
  "XXXX  XX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXXXXXXX",

  // Shifted $b8 (184) >8<
  "XX    XX",
  "X  XX  X",
  "X  XX  X",
  "XX    XX",
  "X  XX  X",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Shifted $b9 (185) >9<
  "XX    XX",
  "X  XX  X",
  "X  XX  X",
  "XX     X",
  "XXXXX  X",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Shifted $ba (186) >:<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXX  XXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXX  XXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Shifted $bb (187) >;<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXX  XXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXX  XXX",
  "XXX  XXX",
  "XX  XXXX",

  // Shifted $bc (188) ><<
  "XXXX   X",
  "XXX  XXX",
  "XX  XXXX",
  "X  XXXXX",
  "XX  XXXX",
  "XXX  XXX",
  "XXXX   X",
  "XXXXXXXX",

  // Shifted $bd (189) >=<
  "XXXXXXXX",
  "XXXXXXXX",
  "X      X",
  "XXXXXXXX",
  "X      X",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Shifted $be (190) >><
  "X   XXXX",
  "XXX  XXX",
  "XXXX  XX",
  "XXXXX  X",
  "XXXX  XX",
  "XXX  XXX",
  "X   XXXX",
  "XXXXXXXX",

  // Shifted $bf (191) >?<
  "XX    XX",
  "X  XX  X",
  "XXXXX  X",
  "XXXX  XX",
  "XXX  XXX",
  "XXXXXXXX",
  "XXX  XXX",
  "XXXXXXXX",

  // Shifted $c0 (192) >─<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Shifted $c1 (193) >A<
  "XXX  XXX",
  "XX    XX",
  "X  XX  X",
  "X      X",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "XXXXXXXX",

  // Shifted $c2 (194) >B<
  "X     XX",
  "X  XX  X",
  "X  XX  X",
  "X     XX",
  "X  XX  X",
  "X  XX  X",
  "X     XX",
  "XXXXXXXX",

  // Shifted $c3 (195) >C<
  "XX    XX",
  "X  XX  X",
  "X  XXXXX",
  "X  XXXXX",
  "X  XXXXX",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Shifted $c4 (196) >D<
  "X    XXX",
  "X  X  XX",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "X  X  XX",
  "X    XXX",
  "XXXXXXXX",

  // Shifted $c5 (197) >E<
  "X      X",
  "X  XXXXX",
  "X  XXXXX",
  "X    XXX",
  "X  XXXXX",
  "X  XXXXX",
  "X      X",
  "XXXXXXXX",

  // Shifted $c6 (198) >F<
  "X      X",
  "X  XXXXX",
  "X  XXXXX",
  "X    XXX",
  "X  XXXXX",
  "X  XXXXX",
  "X  XXXXX",
  "XXXXXXXX",

  // Shifted $c7 (199) >G<
  "XX    XX",
  "X  XX  X",
  "X  XXXXX",
  "X  X   X",
  "X  XX  X",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Shifted $c8 (200) >H<
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "X      X",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "XXXXXXXX",

  // Shifted $c9 (201) >I<
  "XX    XX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XX    XX",
  "XXXXXXXX",

  // Shifted $ca (202) >J<
  "XXX    X",
  "XXXX  XX",
  "XXXX  XX",
  "XXXX  XX",
  "XXXX  XX",
  "X  X  XX",
  "XX   XXX",
  "XXXXXXXX",

  // Shifted $cb (203) >K<
  "X  XX  X",
  "X  X  XX",
  "X    XXX",
  "X   XXXX",
  "X    XXX",
  "X  X  XX",
  "X  XX  X",
  "XXXXXXXX",

  // Shifted $cc (204) >L<
  "X  XXXXX",
  "X  XXXXX",
  "X  XXXXX",
  "X  XXXXX",
  "X  XXXXX",
  "X  XXXXX",
  "X      X",
  "XXXXXXXX",

  // Shifted $cd (205) >M<
  "X  XXX  ",
  "X   X   ",
  "X       ",
  "X  X X  ",
  "X  XXX  ",
  "X  XXX  ",
  "X  XXX  ",
  "XXXXXXXX",

  // Shifted $ce (206) >N<
  "X  XX  X",
  "X   X  X",
  "X      X",
  "X      X",
  "X  X   X",
  "X  XX  X",
  "X  XX  X",
  "XXXXXXXX",

  // Shifted $cf (207) >O<
  "XX    XX",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Shifted $d0 (208) >P<
  "X     XX",
  "X  XX  X",
  "X  XX  X",
  "X     XX",
  "X  XXXXX",
  "X  XXXXX",
  "X  XXXXX",
  "XXXXXXXX",

  // Shifted $d1 (209) >Q<
  "XX    XX",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "XX    XX",
  "XXXX   X",
  "XXXXXXXX",

  // Shifted $d2 (210) >R<
  "X     XX",
  "X  XX  X",
  "X  XX  X",
  "X     XX",
  "X    XXX",
  "X  X  XX",
  "X  XX  X",
  "XXXXXXXX",

  // Shifted $d3 (211) >S<
  "XX    XX",
  "X  XX  X",
  "X  XXXXX",
  "XX    XX",
  "XXXXX  X",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Shifted $d4 (212) >T<
  "X      X",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXXXXXXX",

  // Shifted $d5 (213) >U<
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "XX    XX",
  "XXXXXXXX",

  // Shifted $d6 (214) >V<
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "XX    XX",
  "XXX  XXX",
  "XXXXXXXX",

  // Shifted $d7 (215) >W<
  "X  XXX  ",
  "X  XXX  ",
  "X  XXX  ",
  "X  X X  ",
  "X       ",
  "X   X   ",
  "X  XXX  ",
  "XXXXXXXX",

  // Shifted $d8 (216) >X<
  "X  XX  X",
  "X  XX  X",
  "XX    XX",
  "XXX  XXX",
  "XX    XX",
  "X  XX  X",
  "X  XX  X",
  "XXXXXXXX",

  // Shifted $d9 (217) >Y<
  "X  XX  X",
  "X  XX  X",
  "X  XX  X",
  "XX    XX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXXXXXXX",

  // Shifted $da (218) >Z<
  "X      X",
  "XXXXX  X",
  "XXXX  XX",
  "XXX  XXX",
  "XX  XXXX",
  "X  XXXXX",
  "X      X",
  "XXXXXXXX",

  // Shifted $db (219) >┼<
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "        ",
  "        ",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",

  // Shifted $dc (220) >▒<
  "  XXXXXX",
  "  XXXXXX",
  "XX  XXXX",
  "XX  XXXX",
  "  XXXXXX",
  "  XXXXXX",
  "XX  XXXX",
  "XX  XXXX",

  // Shifted $dd (221) >│<
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",

  // Shifted $de (222) >▒<
  "XX  XX  ",
  "XX  XX  ",
  "  XX  XX",
  "  XX  XX",
  "XX  XX  ",
  "XX  XX  ",
  "  XX  XX",
  "  XX  XX",

  // Shifted $df (223) >▒<
  "XX  XX  ",
  " XX  XX ",
  "  XX  XX",
  "X  XX  X",
  "XX  XX  ",
  " XX  XX ",
  "  XX  XX",
  "X  XX  X",

  // Shifted $e0 (224) > <
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Shifted $e1 (225) >▌<
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "    XXXX",

  // Shifted $e2 (226) >▄<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",
  "        ",
  "        ",

  // Shifted $e3 (227) >▔<
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Shifted $e4 (228) >▁<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",

  // Shifted $e5 (229) >▎<
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",

  // Shifted $e6 (230) >▒<
  "  XX  XX",
  "  XX  XX",
  "XX  XX  ",
  "XX  XX  ",
  "  XX  XX",
  "  XX  XX",
  "XX  XX  ",
  "XX  XX  ",

  // Shifted $e7 (231) >▕<
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",

  // Shifted $e8 (232) >▒<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "  XX  XX",
  "  XX  XX",
  "XX  XX  ",
  "XX  XX  ",

  // Shifted $e9 (233) >▒<
  "  XX  XX",
  " XX  XX ",
  "XX  XX  ",
  "X  XX  X",
  "  XX  XX",
  " XX  XX ",
  "XX  XX  ",
  "X  XX  X",

  // Shifted $ea (234) >▕<
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",
  "XXXXXX  ",

  // Shifted $eb (235) >├<
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX     ",
  "XXX     ",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",

  // Shifted $ec (236) >▗<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",

  // Shifted $ed (237) >└<
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX     ",
  "XXX     ",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Shifted $ee (238) >┐<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "     XXX",
  "     XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",

  // Shifted $ef (239) >▂<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",

  // Shifted $f0 (240) >┌<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXX     ",
  "XXX     ",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",

  // Shifted $f1 (241) >┴<
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Shifted $f2 (242) >┬<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",

  // Shifted $f3 (243) >┤<
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "     XXX",
  "     XXX",
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",

  // Shifted $f4 (244) >▎<
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",
  "  XXXXXX",

  // Shifted $f5 (245) >▍<
  "   XXXXX",
  "   XXXXX",
  "   XXXXX",
  "   XXXXX",
  "   XXXXX",
  "   XXXXX",
  "   XXXXX",
  "   XXXXX",

  // Shifted $f6 (246) >▕<
  "XXXXX   ",
  "XXXXX   ",
  "XXXXX   ",
  "XXXXX   ",
  "XXXXX   ",
  "XXXXX   ",
  "XXXXX   ",
  "XXXXX   ",

  // Shifted $f7 (247) >▔<
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Shifted $f8 (248) >▔<
  "        ",
  "        ",
  "        ",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Shifted $f9 (249) >▃<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "        ",
  "        ",
  "        ",

  // Shifted $fa (250) >✓<
  "XXXXXXX ",
  "XXXXXX  ",
  "XXXXX  X",
  "X  X  XX",
  "X    XXX",
  "X   XXXX",
  "X  XXXXX",
  "XXXXXXXX",

  // Shifted $fb (251) >▖<
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "    XXXX",

  // Shifted $fc (252) >▝<
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Shifted $fd (253) >┘<
  "XXX  XXX",
  "XXX  XXX",
  "XXX  XXX",
  "     XXX",
  "     XXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Shifted $fe (254) >▘<
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",
  "XXXXXXXX",

  // Shifted $ff (255) >▚<
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "    XXXX",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",
  "XXXX    ",

].map(
  str => Array
    .from(str)
    .reduce((acc, cur) => (acc << 1) | ((cur === " ") ? 0 : 1), 0)
));


/***/ }),

/***/ "./src/target/rom/kernal.js":
/*!**********************************!*\
  !*** ./src/target/rom/kernal.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _tools_assembler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tools/assembler */ "./src/tools/assembler.js");
/*
   Kernal ($e000 – $ffff)

   The source below assembles into a bytestream fully compatible with the C64's
   Kernal ROM. It's adapted from Michael Steil's adaptation(†1) of Lee Davison's
   investigation into the original firmware. All comments below are Lee's.

   The labels are informed by Project64's collection of memory maps(†2) and
   those used in Mapping The Commodore 64(†3). Where sources disagree on names/
   locations, I've based my choices on which had the most consensus and which
   best corresponds to the instructions or data to which they relate.

   †1 https://github.com/mist64/c64disasm
   †2 https://github.com/Project-64/reloaded/blob/master/c64/64MAP11.TXT
   †3 https://github.com/Project-64/reloaded/blob/master/c64/mapc64/MAPC6412.TXT

   If you want to substitute your own ROM, just export a byte array instead:
       export default [ 0x.., ... ];

   Unlike the rest of the Viciious project, which was authored from scratch and
   entered into the public domain, the source below is derived from works by
   multiple other authors and I make no representations as to its ownership or
   terms of use.
*/



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_tools_assembler__WEBPACK_IMPORTED_MODULE_0__.assemble)(
  0xe000,
  ({
    NOP, LDA, LDX, LDY, STA, STX, STY, CLC, CLD, CLI, CLV, SEC, SED, SEI,
    TAX, TAY, TSX, TXA, TXS, TYA, CMP, CPX, CPY, BCS, BCC, BEQ, BNE, BMI,
    BPL, BVS, BVC, BIT, JSR, RTS, RTI, BRK, JMP, INC, DEC, DEX, DEY, INX,
    INY, ADC, SBC, AND, EOR, ORA, ASL, ROL, LSR, ROR, PHA, PHP, PLA, PLP,
    _
  }) => {
            // External labels (RAM)
            _.label(0x0002, "_0002");
            _.label(0x0003, "adray1+0_0003");
            _.label(0x0004, "adray1+1_0004");
            _.label(0x0005, "adray2+0_0005");
            _.label(0x0006, "adray2+1_0006");
            _.label(0x0007, "charac_0007");
            _.label(0x000a, "verck_000a");
            _.label(0x0012, "tansgn_0012");
            _.label(0x0013, "channl_0013");
            _.label(0x0014, "linnum+0_0014");
            _.label(0x0016, "temppt_0016");
            _.label(0x0018, "lastpt+1_0018");
            _.label(0x0022, "index+0_0022");
            _.label(0x0023, "index+1_0023");
            _.label(0x002b, "txttab+0_002b");
            _.label(0x002c, "txttab+1_002c");
            _.label(0x002d, "vartab+0_002d");
            _.label(0x002e, "vartab+1_002e");
            _.label(0x0033, "fretop+0_0033");
            _.label(0x0034, "fretop+1_0034");
            _.label(0x0037, "memsiz+0_0037");
            _.label(0x0038, "memsiz+1_0038");
            _.label(0x0049, "forpnt+0_0049");
            _.label(0x004a, "forpnt+1_004a");
            _.label(0x0053, "four6_0053");
            _.label(0x0054, "jmper+0_0054");
            _.label(0x0056, "jmper+2_0056");
            _.label(0x0061, "facexp_0061");
            _.label(0x0062, "facho+0_0062");
            _.label(0x0063, "facho+1_0063");
            _.label(0x0064, "facho+2_0064");
            _.label(0x0065, "facho+3_0065");
            _.label(0x0066, "facsgn_0066");
            _.label(0x0067, "sgnflg_0067");
            _.label(0x0068, "bits_0068");
            _.label(0x006e, "argsgn_006e");
            _.label(0x006f, "arisgn_006f");
            _.label(0x0070, "facov_0070");
            _.label(0x0071, "fbufpt+0_0071");
            _.label(0x0072, "fbufpt+1_0072");
            _.label(0x0079, "chrgot_0079");
            _.label(0x007a, "txtptr+0_007a");
            _.label(0x007b, "txtptr+1_007b");
            _.label(0x0090, "status_0090");
            _.label(0x0091, "stkey_0091");
            _.label(0x0092, "svxt_0092");
            _.label(0x0093, "verck_0093");
            _.label(0x0094, "c3po_0094");
            _.label(0x0095, "bsour_0095");
            _.label(0x0096, "syno_0096");
            _.label(0x0097, "xsav_0097");
            _.label(0x0098, "ldtnd_0098");
            _.label(0x0099, "dfltn_0099");
            _.label(0x009a, "dflto_009a");
            _.label(0x009b, "prty_009b");
            _.label(0x009c, "dpsw_009c");
            _.label(0x009d, "msgflg_009d");
            _.label(0x009e, "ptr1_009e");
            _.label(0x009f, "ptr2_009f");
            _.label(0x00a0, "time+0_00a0");
            _.label(0x00a1, "time+1_00a1");
            _.label(0x00a2, "time+2_00a2");
            _.label(0x00a3, "tsfcnt_00a3");
            _.label(0x00a4, "tbtcnt_00a4");
            _.label(0x00a5, "cntdn_00a5");
            _.label(0x00a6, "bufpnt_00a6");
            _.label(0x00a7, "inbit_00a7");
            _.label(0x00a8, "bitci_00a8");
            _.label(0x00a9, "rinone_00a9");
            _.label(0x00aa, "ridata_00aa");
            _.label(0x00ab, "riprty_00ab");
            _.label(0x00ac, "sal+0_00ac");
            _.label(0x00ad, "sal+1_00ad");
            _.label(0x00ae, "eal+0_00ae");
            _.label(0x00af, "eal+1_00af");
            _.label(0x00b0, "cmp0+0_00b0");
            _.label(0x00b1, "cmp0+1_00b1");
            _.label(0x00b2, "tape1+0_00b2");
            _.label(0x00b3, "tape1+1_00b3");
            _.label(0x00b4, "bitts_00b4");
            _.label(0x00b5, "nxtbit_00b5");
            _.label(0x00b6, "rodata_00b6");
            _.label(0x00b7, "fnlen_00b7");
            _.label(0x00b8, "la_00b8");
            _.label(0x00b9, "sa_00b9");
            _.label(0x00ba, "fa_00ba");
            _.label(0x00bb, "fnadr+0_00bb");
            _.label(0x00bc, "fnadr+1_00bc");
            _.label(0x00bd, "roprty_00bd");
            _.label(0x00be, "fsblk_00be");
            _.label(0x00bf, "mych_00bf");
            _.label(0x00c0, "cas1_00c0");
            _.label(0x00c1, "stal+0_00c1");
            _.label(0x00c2, "stal+1_00c2");
            _.label(0x00c3, "memuss+0_00c3");
            _.label(0x00c4, "memuss+1_00c4");
            _.label(0x00c5, "lstx_00c5");
            _.label(0x00c6, "ndx_00c6");
            _.label(0x00c7, "rvs_00c7");
            _.label(0x00c8, "indx_00c8");
            _.label(0x00c9, "lxsp+0_00c9");
            _.label(0x00ca, "lxsp+1_00ca");
            _.label(0x00cb, "sfdx_00cb");
            _.label(0x00cc, "blnsw_00cc");
            _.label(0x00cd, "blnct_00cd");
            _.label(0x00ce, "gdbln_00ce");
            _.label(0x00cf, "blnon_00cf");
            _.label(0x00d0, "crsw_00d0");
            _.label(0x00d1, "pnt+0_00d1");
            _.label(0x00d2, "pnt+1_00d2");
            _.label(0x00d3, "pntr_00d3");
            _.label(0x00d4, "qtsw_00d4");
            _.label(0x00d5, "lnmx_00d5");
            _.label(0x00d6, "tblx_00d6");
            _.label(0x00d7, "schar_00d7");
            _.label(0x00d8, "insrt_00d8");
            _.label(0x00d9, "ldtb1+0_00d9");
            _.label(0x00f1, "ldtb1+24_00f1");
            _.label(0x00f3, "user+0_00f3");
            _.label(0x00f4, "user+1_00f4");
            _.label(0x00f5, "keytab+0_00f5");
            _.label(0x00f6, "keytab+1_00f6");
            _.label(0x00f7, "ribuf+0_00f7");
            _.label(0x00f8, "ribuf+1_00f8");
            _.label(0x00f9, "robuf+0_00f9");
            _.label(0x00fa, "robuf+1_00fa");
            _.label(0x0100, "bad+0_0100");
            _.label(0x0101, "bad+1_0101");
            _.label(0x0104, "bad+4_0104");
            _.label(0x01fc, "bstack+189_01fc");
            _.label(0x01fd, "bstack+190_01fd");
            _.label(0x0200, "buf+0_0200");
            _.label(0x0259, "lat+0_0259");
            _.label(0x0263, "fat+0_0263");
            _.label(0x026d, "sat+0_026d");
            _.label(0x0276, "sat+9_0276");
            _.label(0x0277, "keyd+0_0277");
            _.label(0x0278, "keyd+1_0278");
            _.label(0x0281, "memstr+0_0281");
            _.label(0x0282, "memstr+1_0282");
            _.label(0x0283, "memsiz+0_0283");
            _.label(0x0284, "memsiz+1_0284");
            _.label(0x0285, "timout_0285");
            _.label(0x0286, "color_0286");
            _.label(0x0287, "gdcol_0287");
            _.label(0x0288, "hibase_0288");
            _.label(0x0289, "xmax_0289");
            _.label(0x028a, "rptflg_028a");
            _.label(0x028b, "kount_028b");
            _.label(0x028c, "delay_028c");
            _.label(0x028d, "shflag_028d");
            _.label(0x028e, "lstshf_028e");
            _.label(0x028f, "keylog+0_028f");
            _.label(0x0290, "keylog+1_0290");
            _.label(0x0291, "mode_0291");
            _.label(0x0292, "autodn_0292");
            _.label(0x0293, "m51ctr_0293");
            _.label(0x0294, "m51cdr_0294");
            _.label(0x0295, "m51ajb+0_0295");
            _.label(0x0296, "m51ajb+1_0296");
            _.label(0x0297, "rsstat_0297");
            _.label(0x0298, "bitnum_0298");
            _.label(0x0299, "baudof+0_0299");
            _.label(0x029a, "baudof+1_029a");
            _.label(0x029b, "ridbe_029b");
            _.label(0x029c, "ridbs_029c");
            _.label(0x029d, "rodbs_029d");
            _.label(0x029e, "rodbe_029e");
            _.label(0x029f, "irqtmp+0_029f");
            _.label(0x02a0, "irqtmp+1_02a0");
            _.label(0x02a1, "enabl_02a1");
            _.label(0x02a2, "todsns_02a2");
            _.label(0x02a3, "trdtmp_02a3");
            _.label(0x02a4, "td1irq_02a4");
            _.label(0x02a5, "tlnidx_02a5");
            _.label(0x02a6, "tvsflg_02a6");
            _.label(0x0300, "ierror+0_0300");
            _.label(0x030c, "sareg_030c");
            _.label(0x030d, "sxreg_030d");
            _.label(0x030e, "syreg_030e");
            _.label(0x030f, "spreg_030f");
            _.label(0x0310, "usrpok_0310");
            _.label(0x0311, "usradd+0_0311");
            _.label(0x0312, "usradd+1_0312");
            _.label(0x0314, "cinv+0_0314");
            _.label(0x0315, "cinv+1_0315");
            _.label(0x0316, "cbinv+0_0316");
            _.label(0x0318, "nminv+0_0318");
            _.label(0x031a, "iopen+0_031a");
            _.label(0x031c, "iclose+0_031c");
            _.label(0x031e, "ichkin+0_031e");
            _.label(0x0320, "ickout+0_0320");
            _.label(0x0322, "iclrch+0_0322");
            _.label(0x0324, "ibasin+0_0324");
            _.label(0x0326, "ibsout+0_0326");
            _.label(0x0328, "istop+0_0328");
            _.label(0x032a, "igetin+0_032a");
            _.label(0x032c, "iclall+0_032c");
            _.label(0x0330, "iload+0_0330");
            _.label(0x0332, "isave+0_0332");
            _.label(0x8000, "_8000");
            _.label(0x8002, "_8002");
            _.label(0x8003, "_8003");
            _.label(0xcfff, "_cfff");

            // External labels (Memory-mapped IO)
            _.label(0x0000, "d6510_0000");
            _.label(0x0001, "r6510_0001");
            _.label(0xd011, "scroly_d011");
            _.label(0xd012, "raster_d012");
            _.label(0xd016, "scrolx_d016");
            _.label(0xd018, "vmcsb_d018");
            _.label(0xd019, "vicirq_d019");
            _.label(0xd418, "sigvol_d418");
            _.label(0xdc00, "ciapra_dc00");
            _.label(0xdc01, "ciaprb_dc01");
            _.label(0xdc02, "ciddra_dc02");
            _.label(0xdc03, "ciddrb_dc03");
            _.label(0xdc04, "timalo_dc04");
            _.label(0xdc05, "timahi_dc05");
            _.label(0xdc06, "timblo_dc06");
            _.label(0xdc07, "timbhi_dc07");
            _.label(0xdc0d, "ciaicr_dc0d");
            _.label(0xdc0e, "ciacra_dc0e");
            _.label(0xdc0f, "ciacrb_dc0f");
            _.label(0xdd00, "ci2pra_dd00");
            _.label(0xdd01, "ci2prb_dd01");
            _.label(0xdd02, "c2ddra_dd02");
            _.label(0xdd03, "c2ddrb_dd03");
            _.label(0xdd04, "ti2alo_dd04");
            _.label(0xdd05, "ti2ahi_dd05");
            _.label(0xdd06, "ti2blo_dd06");
            _.label(0xdd07, "ti2bhi_dd07");
            _.label(0xdd0d, "ci2icr_dd0d");
            _.label(0xdd0e, "ci2cra_dd0e");
            _.label(0xdd0f, "ci2crb_dd0f");

            // External labels (Basic ROM)
            _.label(0xa000, "restart_a000");
            _.label(0xa002, "_a002");
            _.label(0xa408, "reason_a408");
            _.label(0xa437, "error_a437");
            _.label(0xa43a, "_a43a");
            _.label(0xa474, "ready_a474");
            _.label(0xa52a, "_a52a");
            _.label(0xa533, "linkprg_a533");
            _.label(0xa644, "_a644");
            _.label(0xa663, "_a663");
            _.label(0xa677, "_a677");
            _.label(0xa67a, "_a67a");
            _.label(0xa68e, "stxpt_a68e");
            _.label(0xab1e, "strout_ab1e");
            _.label(0xad8a, "frmnum_ad8a");
            _.label(0xad9e, "frmevl_ad9e");
            _.label(0xaefd, "_aefd");
            _.label(0xaf08, "synerr_af08");
            _.label(0xb6a3, "frestr_b6a3");
            _.label(0xb79e, "_b79e");
            _.label(0xb7f7, "getadr_b7f7");
            _.label(0xb849, "faddh_b849");
            _.label(0xb850, "fsub_b850");
            _.label(0xb853, "fsubt_b853");
            _.label(0xb867, "fadd_b867");
            _.label(0xb8d7, "_b8d7");
            _.label(0xba28, "fmult_ba28");
            _.label(0xbab9, "_bab9");
            _.label(0xbad4, "mldvex_bad4");
            _.label(0xbb07, "fdivf_bb07");
            _.label(0xbb0f, "fdiv_bb0f");
            _.label(0xbba2, "movfm_bba2");
            _.label(0xbbc7, "mov2f_bbc7");
            _.label(0xbbca, "_bbca");
            _.label(0xbbd4, "_bbd4");
            _.label(0xbc0c, "movaf_bc0c");
            _.label(0xbc0f, "movef_bc0f");
            _.label(0xbc2b, "sign_bc2b");
            _.label(0xbccc, "int_bccc");
            _.label(0xbdcd, "linprt_bdcd");
            _.label(0xbfb4, "negop_bfb4");

// ---------------------------------------------------------- start of the kernal ROM
                                                           // EXP() continued
/* e000 */    _`(exp_e000`;  STA.zpg ("jmper+2_0056");     // save FAC2 rounding byte
/* e002 */                   JSR.abs ("movef_bc0f");       // copy FAC1 to FAC2
/* e005 */                   LDA.zpg ("facexp_0061");      // get FAC1 exponent
/* e007 */                   CMP.imm (0x88);               // compare with EXP limit (256d)
/* e009 */                   BCC.rel ("_e00e");            // branch if less
/* e00b */        _`_e00b`;  JSR.abs ("mldvex_bad4");      // handle overflow and underflow
/* e00e */        _`_e00e`;  JSR.abs ("int_bccc");         // perform INT()
/* e011 */                   LDA.zpg ("charac_0007");      // get mantissa 4 from INT()
/* e013 */                   CLC.imp ();                   // clear carry for add
/* e014 */                   ADC.imm (0x81);               // normalise +1
/* e016 */                   BEQ.rel ("_e00b");            // if $00 result has overflowed so go handle it
/* e018 */                   SEC.imp ();                   // set carry for subtract
/* e019 */                   SBC.imm (0x01);               // exponent now correct
/* e01b */                   PHA.imp ();                   // save FAC2 exponent
                                                           // swap FAC1 and FAC2
/* e01c */                   LDX.imm (0x05);               // 4 bytes to do
/* e01e */        _`_e01e`;  LDA.zpx (0x69);               // get FAC2,X
/* e020 */                   LDY.zpx (0x61);               // get FAC1,X
/* e022 */                   STA.zpx (0x61);               // save FAC1,X
/* e024 */                   STY.zpx (0x69);               // save FAC2,X
/* e026 */                   DEX.imp ();                   // decrement count/index
/* e027 */                   BPL.rel ("_e01e");            // loop if not all done
/* e029 */                   LDA.zpg ("jmper+2_0056");     // get FAC2 rounding byte
/* e02b */                   STA.zpg ("facov_0070");       // save as FAC1 rounding byte
/* e02d */                   JSR.abs ("fsubt_b853");       // perform subtraction, FAC2 from FAC1
/* e030 */                   JSR.abs ("negop_bfb4");       // do - FAC1
/* e033 */                   LDA.imm (0xc4);               // set counter pointer low byte
/* e035 */                   LDY.imm (0xbf);               // set counter pointer high byte
/* e037 */                   JSR.abs ("poly2_e059");       // go do series evaluation
/* e03a */                   LDA.imm (0x00);               // clear A
/* e03c */                   STA.zpg ("arisgn_006f");      // clear sign compare (FAC1 EOR FAC2)
/* e03e */                   PLA.imp ();                   // get saved FAC2 exponent
/* e03f */                   JSR.abs ("_bab9");            // test and adjust accumulators
/* e042 */                   RTS.imp ();
                                                           // ^2 then series evaluation
/* e043 */   _`polyx_e043`;  STA.zpg ("fbufpt+0_0071");    // save count pointer low byte
/* e045 */                   STY.zpg ("fbufpt+1_0072");    // save count pointer high byte
/* e047 */                   JSR.abs ("_bbca");            // pack FAC1 into $57
/* e04a */                   LDA.imm (0x57);               // set pointer low byte (Y already $00)
/* e04c */                   JSR.abs ("fmult_ba28");       // do convert AY, FCA1*(AY)
/* e04f */                   JSR.abs ("_e05d");            // go do series evaluation
/* e052 */                   LDA.imm (0x57);               // pointer to original # low byte
/* e054 */                   LDY.imm (0x00);               // pointer to original # high byte
/* e056 */                   JMP.abs ("fmult_ba28");       // do convert AY, FCA1*(AY)
                                                           // do series evaluation
/* e059 */   _`poly2_e059`;  STA.zpg ("fbufpt+0_0071");    // save count pointer low byte
/* e05b */                   STY.zpg ("fbufpt+1_0072");    // save count pointer high byte
                                                           // do series evaluation
/* e05d */        _`_e05d`;  JSR.abs ("mov2f_bbc7");       // pack FAC1 into $5C
/* e060 */                   LDA.iny ("fbufpt+0_0071");    // get constants count
/* e062 */                   STA.zpg ("sgnflg_0067");      // save constants count
/* e064 */                   LDY.zpg ("fbufpt+0_0071");    // get count pointer low byte
/* e066 */                   INY.imp ();                   // increment it (now constants pointer)
/* e067 */                   TYA.imp ();                   // copy it
/* e068 */                   BNE.rel ("_e06c");            // skip next if no overflow
/* e06a */                   INC.zpg ("fbufpt+1_0072");    // else increment high byte
/* e06c */        _`_e06c`;  STA.zpg ("fbufpt+0_0071");    // save low byte
/* e06e */                   LDY.zpg ("fbufpt+1_0072");    // get high byte
/* e070 */        _`_e070`;  JSR.abs ("fmult_ba28");       // do convert AY, FCA1*(AY)
/* e073 */                   LDA.zpg ("fbufpt+0_0071");    // get constants pointer low byte
/* e075 */                   LDY.zpg ("fbufpt+1_0072");    // get constants pointer high byte
/* e077 */                   CLC.imp ();                   // clear carry for add
/* e078 */                   ADC.imm (0x05);               // +5 to low pointer (5 bytes per constant)
/* e07a */                   BCC.rel ("_e07d");            // skip next if no overflow
/* e07c */                   INY.imp ();                   // increment high byte
/* e07d */        _`_e07d`;  STA.zpg ("fbufpt+0_0071");    // save pointer low byte
/* e07f */                   STY.zpg ("fbufpt+1_0072");    // save pointer high byte
/* e081 */                   JSR.abs ("fadd_b867");        // add (AY) to FAC1
/* e084 */                   LDA.imm (0x5c);               // set pointer low byte to partial
/* e086 */                   LDY.imm (0x00);               // set pointer high byte to partial
/* e088 */                   DEC.zpg ("sgnflg_0067");      // decrement constants count
/* e08a */                   BNE.rel ("_e070");            // loop until all done
/* e08c */                   RTS.imp ();

// ------------------------------------------------------- // RND values
                                                           // 11879546            multiplier
/* e08d */   _`rmulc_e08d`;  _.bytes(0x98, 0x35, 0x44, 0x7a, 0x00);
                                                           // 3.927677739E-8      offset
/* e092 */   _`raddc_e092`;  _.bytes(0x68, 0x28, 0xb1, 0x46, 0x00);

// ------------------------------------------------------- // perform RND()
/* e097 */     _`rnd_e097`;  JSR.abs ("sign_bc2b");        // get FAC1 sign
                                                           // return A = $FF -ve, A = $01 +ve
/* e09a */                   BMI.rel ("_e0d3");            // if n<0 copy byte swapped FAC1 into RND() seed
/* e09c */                   BNE.rel ("_e0be");            // if n>0 get next number in RND() sequence
                                                           // else n=0 so get the RND() number from VIA 1 timers
/* e09e */                   JSR.abs ("iobase_fff3");      // return base address of I/O devices
/* e0a1 */                   STX.zpg ("index+0_0022");     // save pointer low byte
/* e0a3 */                   STY.zpg ("index+1_0023");     // save pointer high byte
/* e0a5 */                   LDY.imm (0x04);               // set index to T1 low byte
/* e0a7 */                   LDA.iny ("index+0_0022");     // get T1 low byte
/* e0a9 */                   STA.zpg ("facho+0_0062");     // save FAC1 mantissa 1
/* e0ab */                   INY.imp ();                   // increment index
/* e0ac */                   LDA.iny ("index+0_0022");     // get T1 high byte
/* e0ae */                   STA.zpg ("facho+2_0064");     // save FAC1 mantissa 3
/* e0b0 */                   LDY.imm (0x08);               // set index to T2 low byte
/* e0b2 */                   LDA.iny ("index+0_0022");     // get T2 low byte
/* e0b4 */                   STA.zpg ("facho+1_0063");     // save FAC1 mantissa 2
/* e0b6 */                   INY.imp ();                   // increment index
/* e0b7 */                   LDA.iny ("index+0_0022");     // get T2 high byte
/* e0b9 */                   STA.zpg ("facho+3_0065");     // save FAC1 mantissa 4
/* e0bb */                   JMP.abs ("_e0e3");            // set exponent and exit
/* e0be */        _`_e0be`;  LDA.imm (0x8b);               // set seed pointer low address
/* e0c0 */                   LDY.imm (0x00);               // set seed pointer high address
/* e0c2 */                   JSR.abs ("movfm_bba2");       // unpack memory (AY) into FAC1
/* e0c5 */                   LDA.imm (0x8d);               // set 11879546 pointer low byte
/* e0c7 */                   LDY.imm (0xe0);               // set 11879546 pointer high byte
/* e0c9 */                   JSR.abs ("fmult_ba28");       // do convert AY, FCA1*(AY)
/* e0cc */                   LDA.imm (0x92);               // set 3.927677739E-8 pointer low byte
/* e0ce */                   LDY.imm (0xe0);               // set 3.927677739E-8 pointer high byte
/* e0d0 */                   JSR.abs ("fadd_b867");        // add (AY) to FAC1
/* e0d3 */        _`_e0d3`;  LDX.zpg ("facho+3_0065");     // get FAC1 mantissa 4
/* e0d5 */                   LDA.zpg ("facho+0_0062");     // get FAC1 mantissa 1
/* e0d7 */                   STA.zpg ("facho+3_0065");     // save FAC1 mantissa 4
/* e0d9 */                   STX.zpg ("facho+0_0062");     // save FAC1 mantissa 1
/* e0db */                   LDX.zpg ("facho+1_0063");     // get FAC1 mantissa 2
/* e0dd */                   LDA.zpg ("facho+2_0064");     // get FAC1 mantissa 3
/* e0df */                   STA.zpg ("facho+1_0063");     // save FAC1 mantissa 2
/* e0e1 */                   STX.zpg ("facho+2_0064");     // save FAC1 mantissa 3
/* e0e3 */        _`_e0e3`;  LDA.imm (0x00);               // clear byte
/* e0e5 */                   STA.zpg ("facsgn_0066");      // clear FAC1 sign (always +ve)
/* e0e7 */                   LDA.zpg ("facexp_0061");      // get FAC1 exponent
/* e0e9 */                   STA.zpg ("facov_0070");       // save FAC1 rounding byte
/* e0eb */                   LDA.imm (0x80);               // set exponent = $80
/* e0ed */                   STA.zpg ("facexp_0061");      // save FAC1 exponent
/* e0ef */                   JSR.abs ("_b8d7");            // normalise FAC1
/* e0f2 */                   LDX.imm (0x8b);               // set seed pointer low address
/* e0f4 */                   LDY.imm (0x00);               // set seed pointer high address

// ------------------------------------------------------- // pack FAC1 into (XY)
/* e0f6 */        _`_e0f6`;  JMP.abs ("_bbd4");            // pack FAC1 into (XY)

// ------------------------------------------------------- // handle BASIC I/O error
/* e0f9 */  _`bioerr_e0f9`;  CMP.imm (0xf0);               // compare error with $F0
/* e0fb */                   BNE.rel ("_e104");            // branch if not $F0
/* e0fd */                   STY.zpg ("memsiz+1_0038");    // set end of memory high byte
/* e0ff */                   STX.zpg ("memsiz+0_0037");    // set end of memory low byte
/* e101 */                   JMP.abs ("_a663");            // clear from start to end and return
                                                           // error was not $F0
/* e104 */        _`_e104`;  TAX.imp ();                   // copy error #
/* e105 */                   BNE.rel ("_e109");            // branch if not $00
/* e107 */                   LDX.imm (0x1e);               // else error $1E, break error
/* e109 */        _`_e109`;  JMP.abs ("error_a437");       // do error #X then warm start

// ------------------------------------------------------- // output character to channel with error check
/* e10c */  _`bchout_e10c`;  JSR.abs ("chrout_ffd2");      // output character to channel
/* e10f */                   BCS.rel ("bioerr_e0f9");      // if error go handle BASIC I/O error
/* e111 */                   RTS.imp ();

// ------------------------------------------------------- // input character from channel with error check
/* e112 */   _`bchin_e112`;  JSR.abs ("chrin_ffcf");       // input character from channel
/* e115 */                   BCS.rel ("bioerr_e0f9");      // if error go handle BASIC I/O error
/* e117 */                   RTS.imp ();

// ------------------------------------------------------- // open channel for output with error check
/* e118 */  _`bckout_e118`;  JSR.abs ("_e4ad");            // open channel for output
/* e11b */                   BCS.rel ("bioerr_e0f9");      // if error go handle BASIC I/O error
/* e11d */                   RTS.imp ();

// ------------------------------------------------------- // open channel for input with error check
/* e11e */   _`bckin_e11e`;  JSR.abs ("chkin_ffc6");       // open channel for input
/* e121 */                   BCS.rel ("bioerr_e0f9");      // if error go handle BASIC I/O error
/* e123 */                   RTS.imp ();

// ------------------------------------------------------- // get character from input device with error check
/* e124 */  _`bgetin_e124`;  JSR.abs ("getin_ffe4");       // get character from input device
/* e127 */                   BCS.rel ("bioerr_e0f9");      // if error go handle BASIC I/O error
/* e129 */                   RTS.imp ();

// ------------------------------------------------------- // perform SYS
/* e12a */     _`sys_e12a`;  JSR.abs ("frmnum_ad8a");      // evaluate expression and check is numeric, else do
                                                           // type mismatch
/* e12d */                   JSR.abs ("getadr_b7f7");      // convert FAC_1 to integer in temporary integer
/* e130 */                   LDA.imm (0xe1);               // get return address high byte
/* e132 */                   PHA.imp ();                   // push as return address
/* e133 */                   LDA.imm (0x46);               // get return address low byte
/* e135 */                   PHA.imp ();                   // push as return address
/* e136 */                   LDA.abs ("spreg_030f");       // get saved status register
/* e139 */                   PHA.imp ();                   // put on stack
/* e13a */                   LDA.abs ("sareg_030c");       // get saved A
/* e13d */                   LDX.abs ("sxreg_030d");       // get saved X
/* e140 */                   LDY.abs ("syreg_030e");       // get saved Y
/* e143 */                   PLP.imp ();                   // pull processor status
/* e144 */                   JMP.ind ("linnum+0_0014");    // call SYS address
                                                           // tail end of SYS code
/* e147 */                   PHP.imp ();                   // save status
/* e148 */                   STA.abs ("sareg_030c");       // save returned A
/* e14b */                   STX.abs ("sxreg_030d");       // save returned X
/* e14e */                   STY.abs ("syreg_030e");       // save returned Y
/* e151 */                   PLA.imp ();                   // restore saved status
/* e152 */                   STA.abs ("spreg_030f");       // save status
/* e155 */                   RTS.imp ();

// ------------------------------------------------------- // perform SAVE
/* e156 */   _`savet_e156`;  JSR.abs ("slpara_e1d4");      // get parameters for LOAD/SAVE
/* e159 */                   LDX.zpg ("vartab+0_002d");    // get start of variables low byte
/* e15b */                   LDY.zpg ("vartab+1_002e");    // get start of variables high byte
/* e15d */                   LDA.imm (0x2b);               // index to start of program memory
/* e15f */                   JSR.abs ("save_ffd8");        // save RAM to device, A = index to start address, XY = end
                                                           // address low/high
/* e162 */                   BCS.rel ("bioerr_e0f9");      // if error go handle BASIC I/O error
/* e164 */                   RTS.imp ();

// ------------------------------------------------------- // perform VERIFY
/* e165 */  _`verfyt_e165`;  LDA.imm (0x01);               // flag verify
/* e167 */                   _.bytes(0x2c);                // makes next line BIT $00A9

// ------------------------------------------------------- // perform LOAD
/* e168 */                   LDA.imm (0x00);               // flag load
/* e16a */                   STA.zpg ("verck_000a");       // set load/verify flag
/* e16c */                   JSR.abs ("slpara_e1d4");      // get parameters for LOAD/SAVE
/* e16f */                   LDA.zpg ("verck_000a");       // get load/verify flag
/* e171 */                   LDX.zpg ("txttab+0_002b");    // get start of memory low byte
/* e173 */                   LDY.zpg ("txttab+1_002c");    // get start of memory high byte
/* e175 */                   JSR.abs ("load_ffd5");        // load RAM from a device
/* e178 */                   BCS.rel ("_e1d1");            // if error go handle BASIC I/O error
/* e17a */                   LDA.zpg ("verck_000a");       // get load/verify flag
/* e17c */                   BEQ.rel ("_e195");            // branch if load
/* e17e */                   LDX.imm (0x1c);               // error $1C, verify error
/* e180 */                   JSR.abs ("readst_ffb7");      // read I/O status word
/* e183 */                   AND.imm (0x10);               // mask for tape read error
/* e185 */                   BNE.rel ("_e19e");            // branch if no read error
/* e187 */                   LDA.zpg ("txtptr+0_007a");    // get the BASIC execute pointer low byte
                                                           // is this correct ?? won't this mean the "OK" prompt
                                                           // when doing a load from within a program ?
/* e189 */                   CMP.imm (0x02);
/* e18b */                   BEQ.rel ("_e194");            // if ?? skip "OK" prompt
/* e18d */                   LDA.imm (0x64);               // set "OK" pointer low byte
/* e18f */                   LDY.imm (0xa3);               // set "OK" pointer high byte
/* e191 */                   JMP.abs ("strout_ab1e");      // print null terminated string
/* e194 */        _`_e194`;  RTS.imp ();

// ------------------------------------------------------- // do READY return to BASIC
/* e195 */        _`_e195`;  JSR.abs ("readst_ffb7");      // read I/O status word
/* e198 */                   AND.imm (0xbf);               // mask x0xx xxxx, clear read error
/* e19a */                   BEQ.rel ("_e1a1");            // branch if no errors
/* e19c */                   LDX.imm (0x1d);               // error $1D, load error
/* e19e */        _`_e19e`;  JMP.abs ("error_a437");       // do error #X then warm start
/* e1a1 */        _`_e1a1`;  LDA.zpg ("txtptr+1_007b");    // get BASIC execute pointer high byte
/* e1a3 */                   CMP.imm (0x02);               // compare with $02xx
/* e1a5 */                   BNE.rel ("_e1b5");            // branch if not immediate mode
/* e1a7 */                   STX.zpg ("vartab+0_002d");    // set start of variables low byte
/* e1a9 */                   STY.zpg ("vartab+1_002e");    // set start of variables high byte
/* e1ab */                   LDA.imm (0x76);               // set "READY." pointer low byte
/* e1ad */                   LDY.imm (0xa3);               // set "READY." pointer high byte
/* e1af */                   JSR.abs ("strout_ab1e");      // print null terminated string
/* e1b2 */                   JMP.abs ("_a52a");            // reset execution, clear variables, flush stack,
                                                           // rebuild BASIC chain and do warm start
/* e1b5 */        _`_e1b5`;  JSR.abs ("stxpt_a68e");       // set BASIC execute pointer to start of memory - 1
/* e1b8 */                   JSR.abs ("linkprg_a533");     // rebuild BASIC line chaining
/* e1bb */                   JMP.abs ("_a677");            // rebuild BASIC line chaining, do RESTORE and return

// ------------------------------------------------------- // perform OPEN
/* e1be */   _`opent_e1be`;  JSR.abs ("ocpara_e219");      // get parameters for OPEN/CLOSE
/* e1c1 */                   JSR.abs ("open_ffc0");        // open a logical file
/* e1c4 */                   BCS.rel ("_e1d1");            // branch if error
/* e1c6 */                   RTS.imp ();

// ------------------------------------------------------- // perform CLOSE
/* e1c7 */  _`closet_e1c7`;  JSR.abs ("ocpara_e219");      // get parameters for OPEN/CLOSE
/* e1ca */                   LDA.zpg ("forpnt+0_0049");    // get logical file number
/* e1cc */                   JSR.abs ("close_ffc3");       // close a specified logical file
/* e1cf */                   BCC.rel ("_e194");            // exit if no error
/* e1d1 */        _`_e1d1`;  JMP.abs ("bioerr_e0f9");      // go handle BASIC I/O error

// ------------------------------------------------------- // get parameters for LOAD/SAVE
/* e1d4 */  _`slpara_e1d4`;  LDA.imm (0x00);               // clear file name length
/* e1d6 */                   JSR.abs ("setnam_ffbd");      // clear the filename
/* e1d9 */                   LDX.imm (0x01);               // set default device number, cassette
/* e1db */                   LDY.imm (0x00);               // set default command
/* e1dd */                   JSR.abs ("setlfs_ffba");      // set logical, first and second addresses
/* e1e0 */                   JSR.abs ("deflt_e206");       // exit function if [EOT] or ":"
/* e1e3 */                   JSR.abs ("_e257");            // set filename
/* e1e6 */                   JSR.abs ("deflt_e206");       // exit function if [EOT] or ":"
/* e1e9 */                   JSR.abs ("combyt_e200");      // scan and get byte, else do syntax error then warm start
/* e1ec */                   LDY.imm (0x00);               // clear command
/* e1ee */                   STX.zpg ("forpnt+0_0049");    // save device number
/* e1f0 */                   JSR.abs ("setlfs_ffba");      // set logical, first and second addresses
/* e1f3 */                   JSR.abs ("deflt_e206");       // exit function if [EOT] or ":"
/* e1f6 */                   JSR.abs ("combyt_e200");      // scan and get byte, else do syntax error then warm start
/* e1f9 */                   TXA.imp ();                   // copy command to A
/* e1fa */                   TAY.imp ();                   // copy command to Y
/* e1fb */                   LDX.zpg ("forpnt+0_0049");    // get device number back
/* e1fd */                   JMP.abs ("setlfs_ffba");      // set logical, first and second addresses and return

// ------------------------------------------------------- // scan and get byte, else do syntax error then warm start
/* e200 */  _`combyt_e200`;  JSR.abs ("cmmerr_e20e");      // scan for ",byte", else do syntax error then warm start
/* e203 */                   JMP.abs ("_b79e");            // get byte parameter and return
                                                           // exit function if [EOT] or ":"
/* e206 */   _`deflt_e206`;  JSR.abs ("chrgot_0079");      // scan memory
/* e209 */                   BNE.rel ("_e20d");            // branch if not [EOL] or ":"
/* e20b */                   PLA.imp ();                   // dump return address low byte
/* e20c */                   PLA.imp ();                   // dump return address high byte
/* e20d */        _`_e20d`;  RTS.imp ();

// ------------------------------------------------------- // scan for ",valid byte", else do syntax error then warm start
/* e20e */  _`cmmerr_e20e`;  JSR.abs ("_aefd");            // scan for ",", else do syntax error then warm start

// ------------------------------------------------------- // scan for valid byte, not [EOL] or ":", else do syntax error then warm start
/* e211 */        _`_e211`;  JSR.abs ("chrgot_0079");      // scan memory
/* e214 */                   BNE.rel ("_e20d");            // exit if following byte
/* e216 */                   JMP.abs ("synerr_af08");      // else do syntax error then warm start

// ------------------------------------------------------- // get parameters for OPEN/CLOSE
/* e219 */  _`ocpara_e219`;  LDA.imm (0x00);               // clear the filename length
/* e21b */                   JSR.abs ("setnam_ffbd");      // clear the filename
/* e21e */                   JSR.abs ("_e211");            // scan for valid byte, else do syntax error then warm start
/* e221 */                   JSR.abs ("_b79e");            // get byte parameter, logical file number
/* e224 */                   STX.zpg ("forpnt+0_0049");    // save logical file number
/* e226 */                   TXA.imp ();                   // copy logical file number to A
/* e227 */                   LDX.imm (0x01);               // set default device number, cassette
/* e229 */                   LDY.imm (0x00);               // set default command
/* e22b */                   JSR.abs ("setlfs_ffba");      // set logical, first and second addresses
/* e22e */                   JSR.abs ("deflt_e206");       // exit function if [EOT] or ":"
/* e231 */                   JSR.abs ("combyt_e200");      // scan and get byte, else do syntax error then warm start
/* e234 */                   STX.zpg ("forpnt+1_004a");    // save device number
/* e236 */                   LDY.imm (0x00);               // clear command
/* e238 */                   LDA.zpg ("forpnt+0_0049");    // get logical file number
/* e23a */                   CPX.imm (0x03);               // compare device number with screen
/* e23c */                   BCC.rel ("_e23f");            // branch if less than screen
/* e23e */                   DEY.imp ();                   // else decrement command
/* e23f */        _`_e23f`;  JSR.abs ("setlfs_ffba");      // set logical, first and second addresses
/* e242 */                   JSR.abs ("deflt_e206");       // exit function if [EOT] or ":"
/* e245 */                   JSR.abs ("combyt_e200");      // scan and get byte, else do syntax error then warm start
/* e248 */                   TXA.imp ();                   // copy command to A
/* e249 */                   TAY.imp ();                   // copy command to Y
/* e24a */                   LDX.zpg ("forpnt+1_004a");    // get device number
/* e24c */                   LDA.zpg ("forpnt+0_0049");    // get logical file number
/* e24e */                   JSR.abs ("setlfs_ffba");      // set logical, first and second addresses
/* e251 */                   JSR.abs ("deflt_e206");       // exit function if [EOT] or ":"
/* e254 */                   JSR.abs ("cmmerr_e20e");      // scan for ",byte", else do syntax error then warm start

// ------------------------------------------------------- // set filename
/* e257 */        _`_e257`;  JSR.abs ("frmevl_ad9e");      // evaluate expression
/* e25a */                   JSR.abs ("frestr_b6a3");      // evaluate string
/* e25d */                   LDX.zpg ("index+0_0022");     // get string pointer low byte
/* e25f */                   LDY.zpg ("index+1_0023");     // get string pointer high byte
/* e261 */                   JMP.abs ("setnam_ffbd");      // set the filename and return

// ------------------------------------------------------- // perform COS()
/* e264 */     _`cos_e264`;  LDA.imm (0xe0);               // set pi/2 pointer low byte
/* e266 */                   LDY.imm (0xe2);               // set pi/2 pointer high byte
/* e268 */                   JSR.abs ("fadd_b867");        // add (AY) to FAC1

// ------------------------------------------------------- // perform SIN()
/* e26b */     _`sin_e26b`;  JSR.abs ("movaf_bc0c");       // round and copy FAC1 to FAC2
/* e26e */                   LDA.imm (0xe5);               // set 2*pi pointer low byte
/* e270 */                   LDY.imm (0xe2);               // set 2*pi pointer high byte
/* e272 */                   LDX.zpg ("argsgn_006e");      // get FAC2 sign (b7)
/* e274 */                   JSR.abs ("fdivf_bb07");       // divide by (AY) (X=sign)
/* e277 */                   JSR.abs ("movaf_bc0c");       // round and copy FAC1 to FAC2
/* e27a */                   JSR.abs ("int_bccc");         // perform INT()
/* e27d */                   LDA.imm (0x00);               // clear byte
/* e27f */                   STA.zpg ("arisgn_006f");      // clear sign compare (FAC1 EOR FAC2)
/* e281 */                   JSR.abs ("fsubt_b853");       // perform subtraction, FAC2 from FAC1
/* e284 */                   LDA.imm (0xea);               // set 0.25 pointer low byte
/* e286 */                   LDY.imm (0xe2);               // set 0.25 pointer high byte
/* e288 */                   JSR.abs ("fsub_b850");        // perform subtraction, FAC1 from (AY)
/* e28b */                   LDA.zpg ("facsgn_0066");      // get FAC1 sign (b7)
/* e28d */                   PHA.imp ();                   // save FAC1 sign
/* e28e */                   BPL.rel ("_e29d");            // branch if +ve
                                                           // FAC1 sign was -ve
/* e290 */                   JSR.abs ("faddh_b849");       // add 0.5 to FAC1 (round FAC1)
/* e293 */                   LDA.zpg ("facsgn_0066");      // get FAC1 sign (b7)
/* e295 */                   BMI.rel ("_e2a0");            // branch if -ve
/* e297 */                   LDA.zpg ("tansgn_0012");      // get the comparison evaluation flag
/* e299 */                   EOR.imm (0xff);               // toggle flag
/* e29b */                   STA.zpg ("tansgn_0012");      // save the comparison evaluation flag
/* e29d */        _`_e29d`;  JSR.abs ("negop_bfb4");       // do - FAC1
/* e2a0 */        _`_e2a0`;  LDA.imm (0xea);               // set 0.25 pointer low byte
/* e2a2 */                   LDY.imm (0xe2);               // set 0.25 pointer high byte
/* e2a4 */                   JSR.abs ("fadd_b867");        // add (AY) to FAC1
/* e2a7 */                   PLA.imp ();                   // restore FAC1 sign
/* e2a8 */                   BPL.rel ("_e2ad");            // branch if was +ve
                                                           // else correct FAC1
/* e2aa */                   JSR.abs ("negop_bfb4");       // do - FAC1
/* e2ad */        _`_e2ad`;  LDA.imm (0xef);               // set pointer low byte to counter
/* e2af */                   LDY.imm (0xe2);               // set pointer high byte to counter
/* e2b1 */                   JMP.abs ("polyx_e043");       // ^2 then series evaluation and return

// ------------------------------------------------------- // perform TAN()
/* e2b4 */     _`tan_e2b4`;  JSR.abs ("_bbca");            // pack FAC1 into $57
/* e2b7 */                   LDA.imm (0x00);               // clear A
/* e2b9 */                   STA.zpg ("tansgn_0012");      // clear the comparison evaluation flag
/* e2bb */                   JSR.abs ("sin_e26b");         // perform SIN()
/* e2be */                   LDX.imm (0x4e);               // set sin(n) pointer low byte
/* e2c0 */                   LDY.imm (0x00);               // set sin(n) pointer high byte
/* e2c2 */                   JSR.abs ("_e0f6");            // pack FAC1 into (XY)
/* e2c5 */                   LDA.imm (0x57);               // set n pointer low byte
/* e2c7 */                   LDY.imm (0x00);               // set n pointer high byte
/* e2c9 */                   JSR.abs ("movfm_bba2");       // unpack memory (AY) into FAC1
/* e2cc */                   LDA.imm (0x00);               // clear byte
/* e2ce */                   STA.zpg ("facsgn_0066");      // clear FAC1 sign (b7)
/* e2d0 */                   LDA.zpg ("tansgn_0012");      // get the comparison evaluation flag
/* e2d2 */                   JSR.abs ("_e2dc");            // save flag and go do series evaluation
/* e2d5 */                   LDA.imm (0x4e);               // set sin(n) pointer low byte
/* e2d7 */                   LDY.imm (0x00);               // set sin(n) pointer high byte
/* e2d9 */                   JMP.abs ("fdiv_bb0f");        // convert AY and do (AY)/FAC1

// ------------------------------------------------------- // save comparison flag and do series evaluation
/* e2dc */        _`_e2dc`;  PHA.imp ();                   // save comparison flag
/* e2dd */                   JMP.abs ("_e29d");            // add 0.25, ^2 then series evaluation

// ------------------------------------------------------- // constants and series for SIN/COS(n)
                                                           // 1.570796371, pi/2, as floating number
/* e2e0 */     _`pi2_e2e0`;  _.bytes(0x81, 0x49, 0x0f, 0xda, 0xa2);
                                                           // 6.28319, 2*pi, as floating number
/* e2e5 */   _`twopi_e2e5`;  _.bytes(0x83, 0x49, 0x0f, 0xda, 0xa2);
                                                           // 0.25
/* e2ea */     _`fr4_e2ea`;  _.bytes(0x7f, 0x00, 0x00, 0x00, 0x00);
/* e2ef */  _`sincon_e2ef`;  _.bytes(0x05);                // series counter
                                                           // -14.3813907
/* e2f0 */                   _.bytes(0x84, 0xe6, 0x1a, 0x2d, 0x1b);
                                                           //  42.0077971
/* e2f5 */                   _.bytes(0x86, 0x28, 0x07, 0xfb, 0xf8);
                                                           // -76.7041703
/* e2fa */                   _.bytes(0x87, 0x99, 0x68, 0x89, 0x01);
                                                           //  81.6052237
/* e2ff */                   _.bytes(0x87, 0x23, 0x35, 0xdf, 0xe1);
                                                           // -41.3147021
/* e304 */                   _.bytes(0x86, 0xa5, 0x5d, 0xe7, 0x28);
                                                           //   6.28318531   2*pi
/* e309 */                   _.bytes(0x83, 0x49, 0x0f, 0xda, 0xa2);

// ------------------------------------------------------- // perform ATN()
/* e30e */     _`atn_e30e`;  LDA.zpg ("facsgn_0066");      // get FAC1 sign (b7)
/* e310 */                   PHA.imp ();                   // save sign
/* e311 */                   BPL.rel ("_e316");            // branch if +ve
/* e313 */                   JSR.abs ("negop_bfb4");       // else do - FAC1
/* e316 */        _`_e316`;  LDA.zpg ("facexp_0061");      // get FAC1 exponent
/* e318 */                   PHA.imp ();                   // push exponent
/* e319 */                   CMP.imm (0x81);               // compare with 1
/* e31b */                   BCC.rel ("_e324");            // branch if FAC1 < 1
/* e31d */                   LDA.imm (0xbc);               // pointer to 1 low byte
/* e31f */                   LDY.imm (0xb9);               // pointer to 1 high byte
/* e321 */                   JSR.abs ("fdiv_bb0f");        // convert AY and do (AY)/FAC1
/* e324 */        _`_e324`;  LDA.imm (0x3e);               // pointer to series low byte
/* e326 */                   LDY.imm (0xe3);               // pointer to series high byte
/* e328 */                   JSR.abs ("polyx_e043");       // ^2 then series evaluation
/* e32b */                   PLA.imp ();                   // restore old FAC1 exponent
/* e32c */                   CMP.imm (0x81);               // compare with 1
/* e32e */                   BCC.rel ("_e337");            // branch if FAC1 < 1
/* e330 */                   LDA.imm (0xe0);               // pointer to (pi/2) low byte
/* e332 */                   LDY.imm (0xe2);               // pointer to (pi/2) low byte
/* e334 */                   JSR.abs ("fsub_b850");        // perform subtraction, FAC1 from (AY)
/* e337 */        _`_e337`;  PLA.imp ();                   // restore FAC1 sign
/* e338 */                   BPL.rel ("_e33d");            // exit if was +ve
/* e33a */                   JMP.abs ("negop_bfb4");       // else do - FAC1 and return
/* e33d */        _`_e33d`;  RTS.imp ();

// ------------------------------------------------------- // series for ATN(n)
/* e33e */  _`atncon_e33e`;  _.bytes(0x0b);                // series counter
                                                           // -6.84793912E-04
/* e33f */                   _.bytes(0x76, 0xb3, 0x83, 0xbd, 0xd3);
                                                           //  4.85094216E-03
/* e344 */                   _.bytes(0x79, 0x1e, 0xf4, 0xa6, 0xf5);
                                                           //  -.0161117015
/* e349 */                   _.bytes(0x7b, 0x83, 0xfc, 0xb0, 0x10);
                                                           //   .034209638
/* e34e */                   _.bytes(0x7c, 0x0c, 0x1f, 0x67, 0xca);
                                                           //  -.054279133
/* e353 */                   _.bytes(0x7c, 0xde, 0x53, 0xcb, 0xc1);
                                                           //   .0724571965
/* e358 */                   _.bytes(0x7d, 0x14, 0x64, 0x70, 0x4c);
                                                           //  -.0898019185
/* e35d */                   _.bytes(0x7d, 0xb7, 0xea, 0x51, 0x7a);
                                                           //   .110932413
/* e362 */                   _.bytes(0x7d, 0x63, 0x30, 0x88, 0x7e);
                                                           //  -.142839808
/* e367 */                   _.bytes(0x7e, 0x92, 0x44, 0x99, 0x3a);
                                                           //   .19999912
/* e36c */                   _.bytes(0x7e, 0x4c, 0xcc, 0x91, 0xc7);
                                                           //  -.333333316
/* e371 */                   _.bytes(0x7f, 0xaa, 0xaa, 0xaa, 0x13);
                                                           //  1
/* e376 */                   _.bytes(0x81, 0x00, 0x00, 0x00, 0x00);

// ------------------------------------------------------- // BASIC warm start entry point
/* e37b */  _`bassft_e37b`;  JSR.abs ("clrchn_ffcc");      // close input and output channels
/* e37e */                   LDA.imm (0x00);               // clear A
/* e380 */                   STA.zpg ("channl_0013");      // set current I/O channel, flag default
/* e382 */                   JSR.abs ("_a67a");            // flush BASIC stack and clear continue pointer
/* e385 */                   CLI.imp ();                   // enable the interrupts
/* e386 */        _`_e386`;  LDX.imm (0x80);               // set -ve error, just do warm start
/* e388 */                   JMP.ind ("ierror+0_0300");    // go handle error message, normally $E38B
/* e38b */                   TXA.imp ();                   // copy the error number
/* e38c */                   BMI.rel ("_e391");            // if -ve go do warm start
/* e38e */                   JMP.abs ("_a43a");            // else do error #X then warm start
/* e391 */        _`_e391`;  JMP.abs ("ready_a474");       // do warm start

// ------------------------------------------------------- // BASIC cold start entry point
/* e394 */    _`init_e394`;  JSR.abs ("initv_e453");       // initialise the BASIC vector table
/* e397 */                   JSR.abs ("initcz_e3bf");      // initialise the BASIC RAM locations
/* e39a */                   JSR.abs ("initms_e422");      // print the start up message and initialise the memory
                                                           // pointers
                                                           // not ok ??
/* e39d */                   LDX.imm (0xfb);               // value for start stack
/* e39f */                   TXS.imp ();                   // set stack pointer
/* e3a0 */                   BNE.rel ("_e386");            // do "READY." warm start, branch always

// ------------------------------------------------------- // character get subroutine for zero page
                                                           // the target address for the LDA $EA60 becomes the BASIC execute pointer once the
                                                           // block is copied to its destination, any non zero page address will do at assembly
                                                           // time, to assemble a three byte instruction. $EA60 is RTS, NOP.
                                                           // page 0 initialisation table from $0073
                                                           // increment and scan memory
/* e3a2 */  _`initat_e3a2`;  INC.zpg ("txtptr+0_007a");    // increment BASIC execute pointer low byte
/* e3a4 */                   BNE.rel ("_e3a8");            // branch if no carry
                                                           // else
/* e3a6 */                   INC.zpg ("txtptr+1_007b");    // increment BASIC execute pointer high byte
                                                           // page 0 initialisation table from $0079
                                                           // scan memory
/* e3a8 */        _`_e3a8`;  LDA.abs (0xea60);             // get byte to scan, address set by call routine
/* e3ab */                   CMP.imm (0x3a);               // compare with ":"
/* e3ad */                   BCS.rel ("_e3b9");            // exit if>=
                                                           // page 0 initialisation table from $0080
                                                           // clear Cb if numeric
/* e3af */                   CMP.imm (0x20);               // compare with " "
/* e3b1 */                   BEQ.rel ("initat_e3a2");      // if " " go do next
/* e3b3 */                   SEC.imp ();                   // set carry for SBC
/* e3b4 */                   SBC.imm (0x30);               // subtract "0"
/* e3b6 */                   SEC.imp ();                   // set carry for SBC
/* e3b7 */                   SBC.imm (0xd0);               // subtract -"0"
                                                           // clear carry if byte = "0"-"9"
/* e3b9 */        _`_e3b9`;  RTS.imp ();

// ------------------------------------------------------- // spare bytes, not referenced
                                                           // 0.811635157
/* e3ba */  _`rndsed_e3ba`;  _.bytes(0x80, 0x4f, 0xc7, 0x52, 0x58);

// ------------------------------------------------------- // initialise BASIC RAM locations
/* e3bf */  _`initcz_e3bf`;  LDA.imm (0x4c);               // opcode for JMP
/* e3c1 */                   STA.zpg ("jmper+0_0054");     // save for functions vector jump
/* e3c3 */                   STA.abs ("usrpok_0310");      // save for USR() vector jump
                                                           // set USR() vector to illegal quantity error
/* e3c6 */                   LDA.imm (0x48);               // set USR() vector low byte
/* e3c8 */                   LDY.imm (0xb2);               // set USR() vector high byte
/* e3ca */                   STA.abs ("usradd+0_0311");    // save USR() vector low byte
/* e3cd */                   STY.abs ("usradd+1_0312");    // save USR() vector high byte
/* e3d0 */                   LDA.imm (0x91);               // set fixed to float vector low byte
/* e3d2 */                   LDY.imm (0xb3);               // set fixed to float vector high byte
/* e3d4 */                   STA.zpg ("adray2+0_0005");    // save fixed to float vector low byte
/* e3d6 */                   STY.zpg ("adray2+1_0006");    // save fixed to float vector high byte
/* e3d8 */                   LDA.imm (0xaa);               // set float to fixed vector low byte
/* e3da */                   LDY.imm (0xb1);               // set float to fixed vector high byte
/* e3dc */                   STA.zpg ("adray1+0_0003");    // save float to fixed vector low byte
/* e3de */                   STY.zpg ("adray1+1_0004");    // save float to fixed vector high byte
                                                           // copy the character get subroutine from $E3A2 to $0074
/* e3e0 */                   LDX.imm (0x1c);               // set the byte count
/* e3e2 */        _`_e3e2`;  LDA.abx ("initat_e3a2");      // get a byte from the table
/* e3e5 */                   STA.zpx (0x73);               // save the byte in page zero
/* e3e7 */                   DEX.imp ();                   // decrement the count
/* e3e8 */                   BPL.rel ("_e3e2");            // loop if not all done
                                                           // clear descriptors, strings, program area and mamory pointers
/* e3ea */                   LDA.imm (0x03);               // set the step size, collecting descriptors
/* e3ec */                   STA.zpg ("four6_0053");       // save the garbage collection step size
/* e3ee */                   LDA.imm (0x00);               // clear A
/* e3f0 */                   STA.zpg ("bits_0068");        // clear FAC1 overflow byte
/* e3f2 */                   STA.zpg ("channl_0013");      // clear the current I/O channel, flag default
/* e3f4 */                   STA.zpg ("lastpt+1_0018");    // clear the current descriptor stack item pointer high byte
/* e3f6 */                   LDX.imm (0x01);               // set X
/* e3f8 */                   STX.abs ("bstack+190_01fd");  // set the chain link pointer low byte
/* e3fb */                   STX.abs ("bstack+189_01fc");  // set the chain link pointer high byte
/* e3fe */                   LDX.imm (0x19);               // initial the value for descriptor stack
/* e400 */                   STX.zpg ("temppt_0016");      // set descriptor stack pointer
/* e402 */                   SEC.imp ();                   // set Cb = 1 to read the bottom of memory
/* e403 */                   JSR.abs ("membot_ff9c");      // read/set the bottom of memory
/* e406 */                   STX.zpg ("txttab+0_002b");    // save the start of memory low byte
/* e408 */                   STY.zpg ("txttab+1_002c");    // save the start of memory high byte
/* e40a */                   SEC.imp ();                   // set Cb = 1 to read the top of memory
/* e40b */                   JSR.abs ("memtop_ff99");      // read/set the top of memory
/* e40e */                   STX.zpg ("memsiz+0_0037");    // save the end of memory low byte
/* e410 */                   STY.zpg ("memsiz+1_0038");    // save the end of memory high byte
/* e412 */                   STX.zpg ("fretop+0_0033");    // set the bottom of string space low byte
/* e414 */                   STY.zpg ("fretop+1_0034");    // set the bottom of string space high byte
/* e416 */                   LDY.imm (0x00);               // clear the index
/* e418 */                   TYA.imp ();                   // clear the A
/* e419 */                   STA.iny ("txttab+0_002b");    // clear the the first byte of memory
/* e41b */                   INC.zpg ("txttab+0_002b");    // increment the start of memory low byte
/* e41d */                   BNE.rel ("_e421");            // if no rollover skip the high byte increment
/* e41f */                   INC.zpg ("txttab+1_002c");    // increment start of memory high byte
/* e421 */        _`_e421`;  RTS.imp ();

// ------------------------------------------------------- // print the start up message and initialise the memory pointers
/* e422 */  _`initms_e422`;  LDA.zpg ("txttab+0_002b");    // get the start of memory low byte
/* e424 */                   LDY.zpg ("txttab+1_002c");    // get the start of memory high byte
/* e426 */                   JSR.abs ("reason_a408");      // check available memory, do out of memory error if no room
/* e429 */                   LDA.imm (0x73);               // set "**** COMMODORE 64 BASIC V2 ****" pointer low byte
/* e42b */                   LDY.imm (0xe4);               // set "**** COMMODORE 64 BASIC V2 ****" pointer high byte
/* e42d */                   JSR.abs ("strout_ab1e");      // print a null terminated string
/* e430 */                   LDA.zpg ("memsiz+0_0037");    // get the end of memory low byte
/* e432 */                   SEC.imp ();                   // set carry for subtract
/* e433 */                   SBC.zpg ("txttab+0_002b");    // subtract the start of memory low byte
/* e435 */                   TAX.imp ();                   // copy the result to X
/* e436 */                   LDA.zpg ("memsiz+1_0038");    // get the end of memory high byte
/* e438 */                   SBC.zpg ("txttab+1_002c");    // subtract the start of memory high byte
/* e43a */                   JSR.abs ("linprt_bdcd");      // print XA as unsigned integer
/* e43d */                   LDA.imm (0x60);               // set " BYTES FREE" pointer low byte
/* e43f */                   LDY.imm (0xe4);               // set " BYTES FREE" pointer high byte
/* e441 */                   JSR.abs ("strout_ab1e");      // print a null terminated string
/* e444 */                   JMP.abs ("_a644");            // do NEW, CLEAR, RESTORE and return

// ------------------------------------------------------- // BASIC vectors, these are copied to RAM from $0300 onwards
/* e447 */   _`bvtrs_e447`;  _.bytes(0x8b, 0xe3);          // error message          $0300
/* e449 */                   _.bytes(0x83, 0xa4);          // BASIC warm start       $0302
/* e44b */                   _.bytes(0x7c, 0xa5);          // crunch BASIC tokens    $0304
/* e44d */                   _.bytes(0x1a, 0xa7);          // uncrunch BASIC tokens  $0306
/* e44f */                   _.bytes(0xe4, 0xa7);          // start new BASIC code   $0308
/* e451 */                   _.bytes(0x86, 0xae);          // get arithmetic element $030A

// ------------------------------------------------------- // initialise the BASIC vectors
/* e453 */   _`initv_e453`;  LDX.imm (0x0b);               // set byte count
/* e455 */        _`_e455`;  LDA.abx ("bvtrs_e447");       // get byte from table
/* e458 */                   STA.abx ("ierror+0_0300");    // save byte to RAM
/* e45b */                   DEX.imp ();                   // decrement index
/* e45c */                   BPL.rel ("_e455");            // loop if more to do
/* e45e */                   RTS.imp ();

// ------------------------------------------------------- // BASIC startup messages
                                                           // basic bytes free
/* e45f */                   _.bytes(0x00, 0x20, 0x42, 0x41, 0x53, 0x49, 0x43, 0x20);
/* e467 */                   _.bytes(0x42, 0x59, 0x54, 0x45, 0x53, 0x20, 0x46, 0x52);
/* e46f */                   _.bytes(0x45, 0x45, 0x0d, 0x00);
                                                           // (clr) **** commodore 64 basic v2 ****
/* e473 */                   _.bytes(0x93, 0x0d, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x2a);
                                                           // (cr) (cr) 64k ram system
/* e47b */                   _.bytes(0x2a, 0x2a, 0x20, 0x43, 0x4f, 0x4d, 0x4d, 0x4f);
/* e483 */                   _.bytes(0x44, 0x4f, 0x52, 0x45, 0x20, 0x36, 0x34, 0x20);
/* e48b */                   _.bytes(0x42, 0x41, 0x53, 0x49, 0x43, 0x20, 0x56, 0x32);
/* e493 */                   _.bytes(0x20, 0x2a, 0x2a, 0x2a, 0x2a, 0x0d, 0x0d, 0x20);
/* e49b */                   _.bytes(0x36, 0x34, 0x4b, 0x20, 0x52, 0x41, 0x4d, 0x20);
/* e4a3 */                   _.bytes(0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x20, 0x20);
/* e4ab */                   _.bytes(0x00);

// ------------------------------------------------------- // unused
/* e4ac */                   _.bytes(0x81);

// ------------------------------------------------------- // open channel for output
/* e4ad */        _`_e4ad`;  PHA.imp ();                   // save the flag byte
/* e4ae */                   JSR.abs ("chkout_ffc9");      // open channel for output
/* e4b1 */                   TAX.imp ();                   // copy the returned flag byte
/* e4b2 */                   PLA.imp ();                   // restore the alling flag byte
/* e4b3 */                   BCC.rel ("_e4b6");            // if there is no error skip copying the error flag
/* e4b5 */                   TXA.imp ();                   // else copy the error flag
/* e4b6 */        _`_e4b6`;  RTS.imp ();

// ------------------------------------------------------- // unused bytes
/* e4b7 */                   _.bytes(0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa);
/* e4bf */                   _.bytes(0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa);
/* e4c7 */                   _.bytes(0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa);
/* e4cf */                   _.bytes(0xaa, 0xaa, 0xaa, 0xaa);

// ------------------------------------------------------- // flag the RS232 start bit and set the parity
/* e4d3 */        _`_e4d3`;  STA.zpg ("rinone_00a9");      // save the start bit check flag, set start bit received
/* e4d5 */                   LDA.imm (0x01);               // set the initial parity state
/* e4d7 */                   STA.zpg ("riprty_00ab");      // save the receiver parity bit
/* e4d9 */                   RTS.imp ();

// ------------------------------------------------------- // save the current colour to the colour RAM
/* e4da */        _`_e4da`;  LDA.abs ("color_0286");       // get the current colour code
/* e4dd */                   STA.iny ("user+0_00f3");      // save it to the colour RAM
/* e4df */                   RTS.imp ();

// ------------------------------------------------------- // wait ~8.5 seconds for any key from the STOP key column
/* e4e0 */        _`_e4e0`;  ADC.imm (0x02);               // set the number of jiffies to wait
/* e4e2 */        _`_e4e2`;  LDY.zpg ("stkey_0091");       // read the stop key column
/* e4e4 */                   INY.imp ();                   // test for $FF, no keys pressed
/* e4e5 */                   BNE.rel ("_e4eb");            // if any keys were pressed just exit
/* e4e7 */                   CMP.zpg ("time+1_00a1");      // compare the wait time with the jiffy clock mid byte
/* e4e9 */                   BNE.rel ("_e4e2");            // if not there yet go wait some more
/* e4eb */        _`_e4eb`;  RTS.imp ();

// ------------------------------------------------------- // baud rate tables for PAL C64
                                                           // baud rate word is calculated from ..

                                                           // (system clock / baud rate) / 2 - 100

                                                           //     system clock
                                                           //     ------------
                                                           // PAL       985248 Hz
                                                           // NTSC     1022727 Hz
/* e4ec */                   _.bytes(0x19, 0x26);          //   50   baud   985300
/* e4ee */                   _.bytes(0x44, 0x19);          //   75   baud   985200
/* e4f0 */                   _.bytes(0x1a, 0x11);          //  110   baud   985160
/* e4f2 */                   _.bytes(0xe8, 0x0d);          //  134.5 baud   984540
/* e4f4 */                   _.bytes(0x70, 0x0c);          //  150   baud   985200
/* e4f6 */                   _.bytes(0x06, 0x06);          //  300   baud   985200
/* e4f8 */                   _.bytes(0xd1, 0x02);          //  600   baud   985200
/* e4fa */                   _.bytes(0x37, 0x01);          // 1200   baud   986400
/* e4fc */                   _.bytes(0xae, 0x00);          // 1800   baud   986400
/* e4fe */                   _.bytes(0x69, 0x00);          // 2400   baud   984000

// ------------------------------------------------------- // return the base address of the I/O devices
/* e500 */  _`iobase_e500`;  LDX.imm (0x00);               // get the I/O base address low byte
/* e502 */                   LDY.imm (0xdc);               // get the I/O base address high byte
/* e504 */                   RTS.imp ();

// ------------------------------------------------------- // return the x,y organization of the screen
/* e505 */  _`screen_e505`;  LDX.imm (0x28);               // get the x size
/* e507 */                   LDY.imm (0x19);               // get the y size
/* e509 */                   RTS.imp ();

// ------------------------------------------------------- // read/set the x,y cursor position
/* e50a */    _`plot_e50a`;  BCS.rel ("_e513");            // if read cursor go do read
/* e50c */                   STX.zpg ("tblx_00d6");        // save the cursor row
/* e50e */                   STY.zpg ("pntr_00d3");        // save the cursor column
/* e510 */                   JSR.abs ("_e56c");            // set the screen pointers for the cursor row, column
/* e513 */        _`_e513`;  LDX.zpg ("tblx_00d6");        // get the cursor row
/* e515 */                   LDY.zpg ("pntr_00d3");        // get the cursor column
/* e517 */                   RTS.imp ();

// ------------------------------------------------------- // initialise the screen and keyboard
/* e518 */   _`cint1_e518`;  JSR.abs ("_e5a0");            // initialise the vic chip
/* e51b */                   LDA.imm (0x00);               // clear A
/* e51d */                   STA.abs ("mode_0291");        // clear the shift mode switch
/* e520 */                   STA.zpg ("blnon_00cf");       // clear the cursor blink phase
/* e522 */                   LDA.imm (0x48);               // get the keyboard decode logic pointer low byte
/* e524 */                   STA.abs ("keylog+0_028f");    // save the keyboard decode logic pointer low byte
/* e527 */                   LDA.imm (0xeb);               // get the keyboard decode logic pointer high byte
/* e529 */                   STA.abs ("keylog+1_0290");    // save the keyboard decode logic pointer high byte
/* e52c */                   LDA.imm (0x0a);               // set the maximum size of the keyboard buffer
/* e52e */                   STA.abs ("xmax_0289");        // save the maximum size of the keyboard buffer
/* e531 */                   STA.abs ("delay_028c");       // save the repeat delay counter
/* e534 */                   LDA.imm (0x0e);               // set light blue
/* e536 */                   STA.abs ("color_0286");       // save the current colour code
/* e539 */                   LDA.imm (0x04);               // speed 4
/* e53b */                   STA.abs ("kount_028b");       // save the repeat speed counter
/* e53e */                   LDA.imm (0x0c);               // set the cursor flash timing
/* e540 */                   STA.zpg ("blnct_00cd");       // save the cursor timing countdown
/* e542 */                   STA.zpg ("blnsw_00cc");       // save the cursor enable, $00 = flash cursor

// ------------------------------------------------------- // clear the screen
/* e544 */        _`_e544`;  LDA.abs ("hibase_0288");      // get the screen memory page
/* e547 */                   ORA.imm (0x80);               // set the high bit, flag every line is a logical line start
/* e549 */                   TAY.imp ();                   // copy to Y
/* e54a */                   LDA.imm (0x00);               // clear the line start low byte
/* e54c */                   TAX.imp ();                   // clear the index
/* e54d */        _`_e54d`;  STY.zpx (0xd9);               // save the start of line X pointer high byte
/* e54f */                   CLC.imp ();                   // clear carry for add
/* e550 */                   ADC.imm (0x28);               // add the line length to the low byte
/* e552 */                   BCC.rel ("_e555");            // if no rollover skip the high byte increment
/* e554 */                   INY.imp ();                   // else increment the high byte
/* e555 */        _`_e555`;  INX.imp ();                   // increment the line index
/* e556 */                   CPX.imm (0x1a);               // compare it with the number of lines + 1
/* e558 */                   BNE.rel ("_e54d");            // loop if not all done
/* e55a */                   LDA.imm (0xff);               // set the end of table marker
/* e55c */                   STA.zpx (0xd9);               // mark the end of the table
/* e55e */                   LDX.imm (0x18);               // set the line count, 25 lines to do, 0 to 24
/* e560 */        _`_e560`;  JSR.abs ("_e9ff");            // clear screen line X
/* e563 */                   DEX.imp ();                   // decrement the count
/* e564 */                   BPL.rel ("_e560");            // loop if more to do

// ------------------------------------------------------- // home the cursor
/* e566 */        _`_e566`;  LDY.imm (0x00);               // clear Y
/* e568 */                   STY.zpg ("pntr_00d3");        // clear the cursor column
/* e56a */                   STY.zpg ("tblx_00d6");        // clear the cursor row

// ------------------------------------------------------- // set screen pointers for cursor row, column
/* e56c */        _`_e56c`;  LDX.zpg ("tblx_00d6");        // get the cursor row
/* e56e */                   LDA.zpg ("pntr_00d3");        // get the cursor column
/* e570 */        _`_e570`;  LDY.zpx (0xd9);               // get start of line X pointer high byte
/* e572 */                   BMI.rel ("_e57c");            // if it is the logical line start continue
/* e574 */                   CLC.imp ();                   // else clear carry for add
/* e575 */                   ADC.imm (0x28);               // add one line length
/* e577 */                   STA.zpg ("pntr_00d3");        // save the cursor column
/* e579 */                   DEX.imp ();                   // decrement the cursor row
/* e57a */                   BPL.rel ("_e570");            // loop, branch always
/* e57c */        _`_e57c`;  JSR.abs ("_e9f0");            // fetch a screen address
/* e57f */                   LDA.imm (0x27);               // set the line length
/* e581 */                   INX.imp ();                   // increment the cursor row
/* e582 */        _`_e582`;  LDY.zpx (0xd9);               // get the start of line X pointer high byte
/* e584 */                   BMI.rel ("_e58c");            // if logical line start exit
/* e586 */                   CLC.imp ();                   // else clear carry for add
/* e587 */                   ADC.imm (0x28);               // add one line length to the current line length
/* e589 */                   INX.imp ();                   // increment the cursor row
/* e58a */                   BPL.rel ("_e582");            // loop, branch always
/* e58c */        _`_e58c`;  STA.zpg ("lnmx_00d5");        // save current screen line length
/* e58e */                   JMP.abs ("_ea24");            // calculate the pointer to colour RAM and return
/* e591 */        _`_e591`;  CPX.zpg ("lxsp+0_00c9");      // compare it with the input cursor row
/* e593 */                   BEQ.rel ("_e598");            // if there just exit
/* e595 */                   JMP.abs ("_e6ed");            // else go ??
/* e598 */        _`_e598`;  RTS.imp ();

// ------------------------------------------------------- // orphan bytes ??
/* e599 */                   NOP.imp ();                   // huh
/* e59a */                   JSR.abs ("_e5a0");            // initialise the vic chip
/* e59d */                   JMP.abs ("_e566");            // home the cursor and return

// ------------------------------------------------------- // initialise the vic chip
/* e5a0 */        _`_e5a0`;  LDA.imm (0x03);               // set the screen as the output device
/* e5a2 */                   STA.zpg ("dflto_009a");       // save the output device number
/* e5a4 */                   LDA.imm (0x00);               // set the keyboard as the input device
/* e5a6 */                   STA.zpg ("dfltn_0099");       // save the input device number
/* e5a8 */                   LDX.imm (0x2f);               // set the count/index
/* e5aa */        _`_e5aa`;  LDA.abx ("_ecb8");            // get a vic ii chip initialisation value
/* e5ad */                   STA.abx ("_cfff");            // save it to the vic ii chip
/* e5b0 */                   DEX.imp ();                   // decrement the count/index
/* e5b1 */                   BNE.rel ("_e5aa");            // loop if more to do
/* e5b3 */                   RTS.imp ();

// ------------------------------------------------------- // input from the keyboard buffer
/* e5b4 */     _`lp2_e5b4`;  LDY.abs ("keyd+0_0277");      // get the current character from the buffer
/* e5b7 */                   LDX.imm (0x00);               // clear the index
/* e5b9 */        _`_e5b9`;  LDA.abx ("keyd+1_0278");      // get the next character,X from the buffer
/* e5bc */                   STA.abx ("keyd+0_0277");      // save it as the current character,X in the buffer
/* e5bf */                   INX.imp ();                   // increment the index
/* e5c0 */                   CPX.zpg ("ndx_00c6");         // compare it with the keyboard buffer index
/* e5c2 */                   BNE.rel ("_e5b9");            // loop if more to do
/* e5c4 */                   DEC.zpg ("ndx_00c6");         // decrement keyboard buffer index
/* e5c6 */                   TYA.imp ();                   // copy the key to A
/* e5c7 */                   CLI.imp ();                   // enable the interrupts
/* e5c8 */                   CLC.imp ();                   // flag got byte
/* e5c9 */                   RTS.imp ();

// ------------------------------------------------------- // write character and wait for key
/* e5ca */        _`_e5ca`;  JSR.abs ("_e716");            // output character

// ------------------------------------------------------- // wait for a key from the keyboard
/* e5cd */        _`_e5cd`;  LDA.zpg ("ndx_00c6");         // get the keyboard buffer index
/* e5cf */                   STA.zpg ("blnsw_00cc");       // cursor enable, $00 = flash cursor, $xx = no flash
/* e5d1 */                   STA.abs ("autodn_0292");      // screen scrolling flag, $00 = scroll, $xx = no scroll
                                                           // this disables both the cursor flash and the screen scroll
                                                           // while there are characters in the keyboard buffer
/* e5d4 */                   BEQ.rel ("_e5cd");            // loop if the buffer is empty
/* e5d6 */                   SEI.imp ();                   // disable the interrupts
/* e5d7 */                   LDA.zpg ("blnon_00cf");       // get the cursor blink phase
/* e5d9 */                   BEQ.rel ("_e5e7");            // if cursor phase skip the overwrite
                                                           // else it is the character phase
/* e5db */                   LDA.zpg ("gdbln_00ce");       // get the character under the cursor
/* e5dd */                   LDX.abs ("gdcol_0287");       // get the colour under the cursor
/* e5e0 */                   LDY.imm (0x00);               // clear Y
/* e5e2 */                   STY.zpg ("blnon_00cf");       // clear the cursor blink phase
/* e5e4 */                   JSR.abs ("_ea13");            // print character A and colour X
/* e5e7 */        _`_e5e7`;  JSR.abs ("lp2_e5b4");         // input from the keyboard buffer
/* e5ea */                   CMP.imm (0x83);               // compare with [SHIFT][RUN]
/* e5ec */                   BNE.rel ("_e5fe");            // if not [SHIFT][RUN] skip the buffer fill
                                                           // keys are [SHIFT][RUN] so put "LOAD",$0D,"RUN",$0D into
                                                           // the buffer
/* e5ee */                   LDX.imm (0x09);               // set the byte count
/* e5f0 */                   SEI.imp ();                   // disable the interrupts
/* e5f1 */                   STX.zpg ("ndx_00c6");         // set the keyboard buffer index
/* e5f3 */        _`_e5f3`;  LDA.abx ("_ece6");            // get byte from the auto load/run table
/* e5f6 */                   STA.abx ("sat+9_0276");       // save it to the keyboard buffer
/* e5f9 */                   DEX.imp ();                   // decrement the count/index
/* e5fa */                   BNE.rel ("_e5f3");            // loop while more to do
/* e5fc */                   BEQ.rel ("_e5cd");            // loop for the next key, branch always
                                                           // was not [SHIFT][RUN]
/* e5fe */        _`_e5fe`;  CMP.imm (0x0d);               // compare the key with [CR]
/* e600 */                   BNE.rel ("_e5ca");            // if not [CR] print the character and get the next key
                                                           // else it was [CR]
/* e602 */                   LDY.zpg ("lnmx_00d5");        // get the current screen line length
/* e604 */                   STY.zpg ("crsw_00d0");        // input from keyboard or screen, $xx = screen,
                                                           // $00 = keyboard
/* e606 */        _`_e606`;  LDA.iny ("pnt+0_00d1");       // get the character from the current screen line
/* e608 */                   CMP.imm (0x20);               // compare it with [SPACE]
/* e60a */                   BNE.rel ("_e60f");            // if not [SPACE] continue
/* e60c */                   DEY.imp ();                   // else eliminate the space, decrement end of input line
/* e60d */                   BNE.rel ("_e606");            // loop, branch always
/* e60f */        _`_e60f`;  INY.imp ();                   // increment past the last non space character on line
/* e610 */                   STY.zpg ("indx_00c8");        // save the input [EOL] pointer
/* e612 */                   LDY.imm (0x00);               // clear A
/* e614 */                   STY.abs ("autodn_0292");      // clear the screen scrolling flag, $00 = scroll
/* e617 */                   STY.zpg ("pntr_00d3");        // clear the cursor column
/* e619 */                   STY.zpg ("qtsw_00d4");        // clear the cursor quote flag, $xx = quote, $00 = no quote
/* e61b */                   LDA.zpg ("lxsp+0_00c9");      // get the input cursor row
/* e61d */                   BMI.rel ("_e63a");
/* e61f */                   LDX.zpg ("tblx_00d6");        // get the cursor row
/* e621 */                   JSR.abs ("_e591");            // find and set the pointers for the start of logical line
/* e624 */                   CPX.zpg ("lxsp+0_00c9");      // compare with input cursor row
/* e626 */                   BNE.rel ("_e63a");
/* e628 */                   LDA.zpg ("lxsp+1_00ca");      // get the input cursor column
/* e62a */                   STA.zpg ("pntr_00d3");        // save the cursor column
/* e62c */                   CMP.zpg ("indx_00c8");        // compare the cursor column with input [EOL] pointer
/* e62e */                   BCC.rel ("_e63a");            // if less, cursor is in line, go ??
/* e630 */                   BCS.rel ("_e65d");            // else the cursor is beyond the line end, branch always

// ------------------------------------------------------- // input from screen or keyboard
/* e632 */        _`_e632`;  TYA.imp ();                   // copy Y
/* e633 */                   PHA.imp ();                   // save Y
/* e634 */                   TXA.imp ();                   // copy X
/* e635 */                   PHA.imp ();                   // save X
/* e636 */                   LDA.zpg ("crsw_00d0");        // input from keyboard or screen, $xx = screen,
                                                           // $00 = keyboard
/* e638 */                   BEQ.rel ("_e5cd");            // if keyboard go wait for key
/* e63a */        _`_e63a`;  LDY.zpg ("pntr_00d3");        // get the cursor column
/* e63c */                   LDA.iny ("pnt+0_00d1");       // get character from the current screen line
/* e63e */                   STA.zpg ("schar_00d7");       // save temporary last character
/* e640 */                   AND.imm (0x3f);               // mask key bits
/* e642 */                   ASL.zpg ("schar_00d7");       // << temporary last character
/* e644 */                   BIT.zpg ("schar_00d7");       // test it
/* e646 */                   BPL.rel ("_e64a");            // branch if not [NO KEY]
/* e648 */                   ORA.imm (0x80);
/* e64a */        _`_e64a`;  BCC.rel ("_e650");
/* e64c */                   LDX.zpg ("qtsw_00d4");        // get the cursor quote flag, $xx = quote, $00 = no quote
/* e64e */                   BNE.rel ("_e654");            // if in quote mode go ??
/* e650 */        _`_e650`;  BVS.rel ("_e654");
/* e652 */                   ORA.imm (0x40);
/* e654 */        _`_e654`;  INC.zpg ("pntr_00d3");        // increment the cursor column
/* e656 */                   JSR.abs ("_e684");            // if open quote toggle the cursor quote flag
/* e659 */                   CPY.zpg ("indx_00c8");        // compare ?? with input [EOL] pointer
/* e65b */                   BNE.rel ("_e674");            // if not at line end go ??
/* e65d */        _`_e65d`;  LDA.imm (0x00);               // clear A
/* e65f */                   STA.zpg ("crsw_00d0");        // clear input from keyboard or screen, $xx = screen,
                                                           // $00 = keyboard
/* e661 */                   LDA.imm (0x0d);               // set character [CR]
/* e663 */                   LDX.zpg ("dfltn_0099");       // get the input device number
/* e665 */                   CPX.imm (0x03);               // compare the input device with the screen
/* e667 */                   BEQ.rel ("_e66f");            // if screen go ??
/* e669 */                   LDX.zpg ("dflto_009a");       // get the output device number
/* e66b */                   CPX.imm (0x03);               // compare the output device with the screen
/* e66d */                   BEQ.rel ("_e672");            // if screen go ??
/* e66f */        _`_e66f`;  JSR.abs ("_e716");            // output the character
/* e672 */        _`_e672`;  LDA.imm (0x0d);               // set character [CR]
/* e674 */        _`_e674`;  STA.zpg ("schar_00d7");       // save character
/* e676 */                   PLA.imp ();                   // pull X
/* e677 */                   TAX.imp ();                   // restore X
/* e678 */                   PLA.imp ();                   // pull Y
/* e679 */                   TAY.imp ();                   // restore Y
/* e67a */                   LDA.zpg ("schar_00d7");       // restore character
/* e67c */                   CMP.imm (0xde);
/* e67e */                   BNE.rel ("_e682");
/* e680 */                   LDA.imm (0xff);
/* e682 */        _`_e682`;  CLC.imp ();                   // flag ok
/* e683 */                   RTS.imp ();

// ------------------------------------------------------- // if open quote toggle cursor quote flag
/* e684 */        _`_e684`;  CMP.imm (0x22);               // comapre byte with "
/* e686 */                   BNE.rel ("_e690");            // exit if not "
/* e688 */                   LDA.zpg ("qtsw_00d4");        // get cursor quote flag, $xx = quote, $00 = no quote
/* e68a */                   EOR.imm (0x01);               // toggle it
/* e68c */                   STA.zpg ("qtsw_00d4");        // save cursor quote flag
/* e68e */                   LDA.imm (0x22);               // restore the "
/* e690 */        _`_e690`;  RTS.imp ();

// ------------------------------------------------------- // insert uppercase/graphic character
/* e691 */        _`_e691`;  ORA.imm (0x40);               // change to uppercase/graphic
/* e693 */        _`_e693`;  LDX.zpg ("rvs_00c7");         // get the reverse flag
/* e695 */                   BEQ.rel ("_e699");            // branch if not reverse
                                                           // else ..
                                                           // insert reversed character
/* e697 */        _`_e697`;  ORA.imm (0x80);               // reverse character
/* e699 */        _`_e699`;  LDX.zpg ("insrt_00d8");       // get the insert count
/* e69b */                   BEQ.rel ("_e69f");            // branch if none
/* e69d */                   DEC.zpg ("insrt_00d8");       // else decrement the insert count
/* e69f */        _`_e69f`;  LDX.abs ("color_0286");       // get the current colour code
/* e6a2 */                   JSR.abs ("_ea13");            // print character A and colour X
/* e6a5 */                   JSR.abs ("_e6b6");            // advance the cursor
                                                           // restore the registers, set the quote flag and exit
/* e6a8 */        _`_e6a8`;  PLA.imp ();                   // pull Y
/* e6a9 */                   TAY.imp ();                   // restore Y
/* e6aa */                   LDA.zpg ("insrt_00d8");       // get the insert count
/* e6ac */                   BEQ.rel ("_e6b0");            // skip quote flag clear if inserts to do
/* e6ae */                   LSR.zpg ("qtsw_00d4");        // clear cursor quote flag, $xx = quote, $00 = no quote
/* e6b0 */        _`_e6b0`;  PLA.imp ();                   // pull X
/* e6b1 */                   TAX.imp ();                   // restore X
/* e6b2 */                   PLA.imp ();                   // restore A
/* e6b3 */                   CLC.imp ();
/* e6b4 */                   CLI.imp ();                   // enable the interrupts
/* e6b5 */                   RTS.imp ();

// ------------------------------------------------------- // advance the cursor
/* e6b6 */        _`_e6b6`;  JSR.abs ("_e8b3");            // test for line increment
/* e6b9 */                   INC.zpg ("pntr_00d3");        // increment the cursor column
/* e6bb */                   LDA.zpg ("lnmx_00d5");        // get current screen line length
/* e6bd */                   CMP.zpg ("pntr_00d3");        // compare ?? with the cursor column
/* e6bf */                   BCS.rel ("_e700");            // exit if line length >= cursor column
/* e6c1 */                   CMP.imm (0x4f);               // compare with max length
/* e6c3 */                   BEQ.rel ("_e6f7");            // if at max clear column, back cursor up and do newline
/* e6c5 */                   LDA.abs ("autodn_0292");      // get the autoscroll flag
/* e6c8 */                   BEQ.rel ("_e6cd");            // branch if autoscroll on
/* e6ca */                   JMP.abs ("_e967");            // else open space on screen
/* e6cd */        _`_e6cd`;  LDX.zpg ("tblx_00d6");        // get the cursor row
/* e6cf */                   CPX.imm (0x19);               // compare with max + 1
/* e6d1 */                   BCC.rel ("_e6da");            // if less than max + 1 go add this row to the current
                                                           // logical line
/* e6d3 */                   JSR.abs ("_e8ea");            // else scroll the screen
/* e6d6 */                   DEC.zpg ("tblx_00d6");        // decrement the cursor row
/* e6d8 */                   LDX.zpg ("tblx_00d6");        // get the cursor row
                                                           // add this row to the current logical line
/* e6da */        _`_e6da`;  ASL.zpx (0xd9);               // shift start of line X pointer high byte
/* e6dc */                   LSR.zpx (0xd9);               // shift start of line X pointer high byte back,
                                                           // make next screen line start of logical line, increment line length and set pointers
                                                           // clear b7, start of logical line
/* e6de */                   INX.imp ();                   // increment screen row
/* e6df */                   LDA.zpx (0xd9);               // get start of line X pointer high byte
/* e6e1 */                   ORA.imm (0x80);               // mark as start of logical line
/* e6e3 */                   STA.zpx (0xd9);               // set start of line X pointer high byte
/* e6e5 */                   DEX.imp ();                   // restore screen row
/* e6e6 */                   LDA.zpg ("lnmx_00d5");        // get current screen line length
                                                           // add one line length and set the pointers for the start of the line
/* e6e8 */                   CLC.imp ();                   // clear carry for add
/* e6e9 */                   ADC.imm (0x28);               // add one line length
/* e6eb */                   STA.zpg ("lnmx_00d5");        // save current screen line length
/* e6ed */        _`_e6ed`;  LDA.zpx (0xd9);               // get start of line X pointer high byte
/* e6ef */                   BMI.rel ("_e6f4");            // exit loop if start of logical line
/* e6f1 */                   DEX.imp ();                   // else back up one line
/* e6f2 */                   BNE.rel ("_e6ed");            // loop if not on first line
/* e6f4 */        _`_e6f4`;  JMP.abs ("_e9f0");            // fetch a screen address
/* e6f7 */        _`_e6f7`;  DEC.zpg ("tblx_00d6");        // decrement the cursor row
/* e6f9 */                   JSR.abs ("_e87c");            // do newline
/* e6fc */                   LDA.imm (0x00);               // clear A
/* e6fe */                   STA.zpg ("pntr_00d3");        // clear the cursor column
/* e700 */        _`_e700`;  RTS.imp ();

// ------------------------------------------------------- // back onto the previous line if possible
/* e701 */        _`_e701`;  LDX.zpg ("tblx_00d6");        // get the cursor row
/* e703 */                   BNE.rel ("_e70b");            // branch if not top row
/* e705 */                   STX.zpg ("pntr_00d3");        // clear cursor column
/* e707 */                   PLA.imp ();                   // dump return address low byte
/* e708 */                   PLA.imp ();                   // dump return address high byte
/* e709 */                   BNE.rel ("_e6a8");            // restore registers, set quote flag and exit, branch always
/* e70b */        _`_e70b`;  DEX.imp ();                   // decrement the cursor row
/* e70c */                   STX.zpg ("tblx_00d6");        // save the cursor row
/* e70e */                   JSR.abs ("_e56c");            // set the screen pointers for cursor row, column
/* e711 */                   LDY.zpg ("lnmx_00d5");        // get current screen line length
/* e713 */                   STY.zpg ("pntr_00d3");        // save the cursor column
/* e715 */                   RTS.imp ();

// ------------------------------------------------------- // output a character to the screen
/* e716 */        _`_e716`;  PHA.imp ();                   // save character
/* e717 */                   STA.zpg ("schar_00d7");       // save temporary last character
/* e719 */                   TXA.imp ();                   // copy X
/* e71a */                   PHA.imp ();                   // save X
/* e71b */                   TYA.imp ();                   // copy Y
/* e71c */                   PHA.imp ();                   // save Y
/* e71d */                   LDA.imm (0x00);               // clear A
/* e71f */                   STA.zpg ("crsw_00d0");        // clear input from keyboard or screen, $xx = screen,
                                                           // $00 = keyboard
/* e721 */                   LDY.zpg ("pntr_00d3");        // get cursor column
/* e723 */                   LDA.zpg ("schar_00d7");       // restore last character
/* e725 */                   BPL.rel ("_e72a");            // branch if unshifted
/* e727 */                   JMP.abs ("_e7d4");            // do shifted characters and return
/* e72a */        _`_e72a`;  CMP.imm (0x0d);               // compare with [CR]
/* e72c */                   BNE.rel ("_e731");            // branch if not [CR]
/* e72e */                   JMP.abs ("_e891");            // else output [CR] and return
/* e731 */        _`_e731`;  CMP.imm (0x20);               // compare with [SPACE]
/* e733 */                   BCC.rel ("_e745");            // branch if < [SPACE], not a printable character
/* e735 */                   CMP.imm (0x60);
/* e737 */                   BCC.rel ("_e73d");            // branch if $20 to $5F
                                                           // character is $60 or greater
/* e739 */                   AND.imm (0xdf);               // conversion of PETSCII character to screen code
/* e73b */                   BNE.rel ("_e73f");            // branch always
                                                           // character is $20 to $5F
/* e73d */        _`_e73d`;  AND.imm (0x3f);               // conversion of PETSCII character to screen code
/* e73f */        _`_e73f`;  JSR.abs ("_e684");            // if open quote toggle cursor direct/programmed flag
/* e742 */                   JMP.abs ("_e693");
                                                           // character was < [SPACE] so is a control character
                                                           // of some sort
/* e745 */        _`_e745`;  LDX.zpg ("insrt_00d8");       // get the insert count
/* e747 */                   BEQ.rel ("_e74c");            // if no characters to insert continue
/* e749 */                   JMP.abs ("_e697");            // insert reversed character
/* e74c */        _`_e74c`;  CMP.imm (0x14);               // compare the character with [INSERT]/[DELETE]
/* e74e */                   BNE.rel ("_e77e");            // if not [INSERT]/[DELETE] go ??
/* e750 */                   TYA.imp ();
/* e751 */                   BNE.rel ("_e759");
/* e753 */                   JSR.abs ("_e701");            // back onto the previous line if possible
/* e756 */                   JMP.abs ("_e773");
/* e759 */        _`_e759`;  JSR.abs ("_e8a1");            // test for line decrement
                                                           // now close up the line
/* e75c */                   DEY.imp ();                   // decrement index to previous character
/* e75d */                   STY.zpg ("pntr_00d3");        // save the cursor column
/* e75f */                   JSR.abs ("_ea24");            // calculate the pointer to colour RAM
/* e762 */        _`_e762`;  INY.imp ();                   // increment index to next character
/* e763 */                   LDA.iny ("pnt+0_00d1");       // get character from current screen line
/* e765 */                   DEY.imp ();                   // decrement index to previous character
/* e766 */                   STA.iny ("pnt+0_00d1");       // save character to current screen line
/* e768 */                   INY.imp ();                   // increment index to next character
/* e769 */                   LDA.iny ("user+0_00f3");      // get colour RAM byte
/* e76b */                   DEY.imp ();                   // decrement index to previous character
/* e76c */                   STA.iny ("user+0_00f3");      // save colour RAM byte
/* e76e */                   INY.imp ();                   // increment index to next character
/* e76f */                   CPY.zpg ("lnmx_00d5");        // compare with current screen line length
/* e771 */                   BNE.rel ("_e762");            // loop if not there yet
/* e773 */        _`_e773`;  LDA.imm (0x20);               // set [SPACE]
/* e775 */                   STA.iny ("pnt+0_00d1");       // clear last character on current screen line
/* e777 */                   LDA.abs ("color_0286");       // get the current colour code
/* e77a */                   STA.iny ("user+0_00f3");      // save to colour RAM
/* e77c */                   BPL.rel ("_e7cb");            // branch always
/* e77e */        _`_e77e`;  LDX.zpg ("qtsw_00d4");        // get cursor quote flag, $xx = quote, $00 = no quote
/* e780 */                   BEQ.rel ("_e785");            // branch if not quote mode
/* e782 */                   JMP.abs ("_e697");            // insert reversed character
/* e785 */        _`_e785`;  CMP.imm (0x12);               // compare with [RVS ON]
/* e787 */                   BNE.rel ("_e78b");            // if not [RVS ON] skip setting the reverse flag
/* e789 */                   STA.zpg ("rvs_00c7");         // else set the reverse flag
/* e78b */        _`_e78b`;  CMP.imm (0x13);               // compare with [CLR HOME]
/* e78d */                   BNE.rel ("_e792");            // if not [CLR HOME] continue
/* e78f */                   JSR.abs ("_e566");            // home the cursor
/* e792 */        _`_e792`;  CMP.imm (0x1d);               // compare with [CURSOR RIGHT]
/* e794 */                   BNE.rel ("_e7ad");            // if not [CURSOR RIGHT] go ??
/* e796 */                   INY.imp ();                   // increment the cursor column
/* e797 */                   JSR.abs ("_e8b3");            // test for line increment
/* e79a */                   STY.zpg ("pntr_00d3");        // save the cursor column
/* e79c */                   DEY.imp ();                   // decrement the cursor column
/* e79d */                   CPY.zpg ("lnmx_00d5");        // compare cursor column with current screen line length
/* e79f */                   BCC.rel ("_e7aa");            // exit if less
                                                           // else the cursor column is >= the current screen line
                                                           // length so back onto the current line and do a newline
/* e7a1 */                   DEC.zpg ("tblx_00d6");        // decrement the cursor row
/* e7a3 */                   JSR.abs ("_e87c");            // do newline
/* e7a6 */                   LDY.imm (0x00);               // clear cursor column
/* e7a8 */        _`_e7a8`;  STY.zpg ("pntr_00d3");        // save the cursor column
/* e7aa */        _`_e7aa`;  JMP.abs ("_e6a8");            // restore the registers, set the quote flag and exit
/* e7ad */        _`_e7ad`;  CMP.imm (0x11);               // compare with [CURSOR DOWN]
/* e7af */                   BNE.rel ("_e7ce");            // if not [CURSOR DOWN] go ??
/* e7b1 */                   CLC.imp ();                   // clear carry for add
/* e7b2 */                   TYA.imp ();                   // copy the cursor column
/* e7b3 */                   ADC.imm (0x28);               // add one line
/* e7b5 */                   TAY.imp ();                   // copy back to Y
/* e7b6 */                   INC.zpg ("tblx_00d6");        // increment the cursor row
/* e7b8 */                   CMP.zpg ("lnmx_00d5");        // compare cursor column with current screen line length
/* e7ba */                   BCC.rel ("_e7a8");            // if less go save cursor column and exit
/* e7bc */                   BEQ.rel ("_e7a8");            // if equal go save cursor column and exit
                                                           // else the cursor has moved beyond the end of this line
                                                           // so back it up until it's on the start of the logical line
/* e7be */                   DEC.zpg ("tblx_00d6");        // decrement the cursor row
/* e7c0 */        _`_e7c0`;  SBC.imm (0x28);               // subtract one line
/* e7c2 */                   BCC.rel ("_e7c8");            // if on previous line exit the loop
/* e7c4 */                   STA.zpg ("pntr_00d3");        // else save the cursor column
/* e7c6 */                   BNE.rel ("_e7c0");            // loop if not at the start of the line
/* e7c8 */        _`_e7c8`;  JSR.abs ("_e87c");            // do newline
/* e7cb */        _`_e7cb`;  JMP.abs ("_e6a8");            // restore the registers, set the quote flag and exit
/* e7ce */        _`_e7ce`;  JSR.abs ("_e8cb");            // set the colour code
/* e7d1 */                   JMP.abs ("_ec44");            // go check for special character codes
/* e7d4 */        _`_e7d4`;  AND.imm (0x7f);               // mask 0xxx xxxx, clear b7
/* e7d6 */                   CMP.imm (0x7f);               // was it $FF before the mask
/* e7d8 */                   BNE.rel ("_e7dc");            // branch if not
/* e7da */                   LDA.imm (0x5e);               // else make it $5E
/* e7dc */        _`_e7dc`;  CMP.imm (0x20);               // compare the character with [SPACE]
/* e7de */                   BCC.rel ("_e7e3");            // if < [SPACE] go ??
/* e7e0 */                   JMP.abs ("_e691");            // insert uppercase/graphic character and return
                                                           // character was $80 to $9F and is now $00 to $1F
/* e7e3 */        _`_e7e3`;  CMP.imm (0x0d);               // compare with [CR]
/* e7e5 */                   BNE.rel ("_e7ea");            // if not [CR] continue
/* e7e7 */                   JMP.abs ("_e891");            // else output [CR] and return
                                                           // was not [CR]
/* e7ea */        _`_e7ea`;  LDX.zpg ("qtsw_00d4");        // get the cursor quote flag, $xx = quote, $00 = no quote
/* e7ec */                   BNE.rel ("_e82d");            // branch if quote mode
/* e7ee */                   CMP.imm (0x14);               // compare with [INSERT DELETE]
/* e7f0 */                   BNE.rel ("_e829");            // if not [INSERT DELETE] go ??
/* e7f2 */                   LDY.zpg ("lnmx_00d5");        // get current screen line length
/* e7f4 */                   LDA.iny ("pnt+0_00d1");       // get character from current screen line
/* e7f6 */                   CMP.imm (0x20);               // compare the character with [SPACE]
/* e7f8 */                   BNE.rel ("_e7fe");            // if not [SPACE] continue
/* e7fa */                   CPY.zpg ("pntr_00d3");        // compare the current column with the cursor column
/* e7fc */                   BNE.rel ("_e805");            // if not cursor column go open up space on line
/* e7fe */        _`_e7fe`;  CPY.imm (0x4f);               // compare current column with max line length
/* e800 */                   BEQ.rel ("_e826");            // if at line end just exit
/* e802 */                   JSR.abs ("_e965");            // else open up a space on the screen
                                                           // now open up space on the line to insert a character
/* e805 */        _`_e805`;  LDY.zpg ("lnmx_00d5");        // get current screen line length
/* e807 */                   JSR.abs ("_ea24");            // calculate the pointer to colour RAM
/* e80a */        _`_e80a`;  DEY.imp ();                   // decrement the index to previous character
/* e80b */                   LDA.iny ("pnt+0_00d1");       // get the character from the current screen line
/* e80d */                   INY.imp ();                   // increment the index to next character
/* e80e */                   STA.iny ("pnt+0_00d1");       // save the character to the current screen line
/* e810 */                   DEY.imp ();                   // decrement the index to previous character
/* e811 */                   LDA.iny ("user+0_00f3");      // get the current screen line colour RAM byte
/* e813 */                   INY.imp ();                   // increment the index to next character
/* e814 */                   STA.iny ("user+0_00f3");      // save the current screen line colour RAM byte
/* e816 */                   DEY.imp ();                   // decrement the index to the previous character
/* e817 */                   CPY.zpg ("pntr_00d3");        // compare the index with the cursor column
/* e819 */                   BNE.rel ("_e80a");            // loop if not there yet
/* e81b */                   LDA.imm (0x20);               // set [SPACE]
/* e81d */                   STA.iny ("pnt+0_00d1");       // clear character at cursor position on current screen line
/* e81f */                   LDA.abs ("color_0286");       // get current colour code
/* e822 */                   STA.iny ("user+0_00f3");      // save to cursor position on current screen line colour RAM
/* e824 */                   INC.zpg ("insrt_00d8");       // increment insert count
/* e826 */        _`_e826`;  JMP.abs ("_e6a8");            // restore the registers, set the quote flag and exit
/* e829 */        _`_e829`;  LDX.zpg ("insrt_00d8");       // get the insert count
/* e82b */                   BEQ.rel ("_e832");            // branch if no insert space
/* e82d */        _`_e82d`;  ORA.imm (0x40);               // change to uppercase/graphic
/* e82f */                   JMP.abs ("_e697");            // insert reversed character
/* e832 */        _`_e832`;  CMP.imm (0x11);               // compare with [CURSOR UP]
/* e834 */                   BNE.rel ("_e84c");            // branch if not [CURSOR UP]
/* e836 */                   LDX.zpg ("tblx_00d6");        // get the cursor row
/* e838 */                   BEQ.rel ("_e871");            // if on the top line go restore the registers, set the
                                                           // quote flag and exit
/* e83a */                   DEC.zpg ("tblx_00d6");        // decrement the cursor row
/* e83c */                   LDA.zpg ("pntr_00d3");        // get the cursor column
/* e83e */                   SEC.imp ();                   // set carry for subtract
/* e83f */                   SBC.imm (0x28);               // subtract one line length
/* e841 */                   BCC.rel ("_e847");            // branch if stepped back to previous line
/* e843 */                   STA.zpg ("pntr_00d3");        // else save the cursor column ..
/* e845 */                   BPL.rel ("_e871");            // .. and exit, branch always
/* e847 */        _`_e847`;  JSR.abs ("_e56c");            // set the screen pointers for cursor row, column ..
/* e84a */                   BNE.rel ("_e871");            // .. and exit, branch always
/* e84c */        _`_e84c`;  CMP.imm (0x12);               // compare with [RVS OFF]
/* e84e */                   BNE.rel ("_e854");            // if not [RVS OFF] continue
/* e850 */                   LDA.imm (0x00);               // else clear A
/* e852 */                   STA.zpg ("rvs_00c7");         // clear the reverse flag
/* e854 */        _`_e854`;  CMP.imm (0x1d);               // compare with [CURSOR LEFT]
/* e856 */                   BNE.rel ("_e86a");            // if not [CURSOR LEFT] go ??
/* e858 */                   TYA.imp ();                   // copy the cursor column
/* e859 */                   BEQ.rel ("_e864");            // if at start of line go back onto the previous line
/* e85b */                   JSR.abs ("_e8a1");            // test for line decrement
/* e85e */                   DEY.imp ();                   // decrement the cursor column
/* e85f */                   STY.zpg ("pntr_00d3");        // save the cursor column
/* e861 */                   JMP.abs ("_e6a8");            // restore the registers, set the quote flag and exit
/* e864 */        _`_e864`;  JSR.abs ("_e701");            // back onto the previous line if possible
/* e867 */                   JMP.abs ("_e6a8");            // restore the registers, set the quote flag and exit
/* e86a */        _`_e86a`;  CMP.imm (0x13);               // compare with [CLR]
/* e86c */                   BNE.rel ("_e874");            // if not [CLR] continue
/* e86e */                   JSR.abs ("_e544");            // clear the screen
/* e871 */        _`_e871`;  JMP.abs ("_e6a8");            // restore the registers, set the quote flag and exit
/* e874 */        _`_e874`;  ORA.imm (0x80);               // restore b7, colour can only be black, cyan, magenta
                                                           // or yellow
/* e876 */                   JSR.abs ("_e8cb");            // set the colour code
/* e879 */                   JMP.abs ("_ec4f");            // go check for special character codes except fro switch
                                                           // to lower case

// ------------------------------------------------------- // do newline
/* e87c */        _`_e87c`;  LSR.zpg ("lxsp+0_00c9");      // shift >> input cursor row
/* e87e */                   LDX.zpg ("tblx_00d6");        // get the cursor row
/* e880 */        _`_e880`;  INX.imp ();                   // increment the row
/* e881 */                   CPX.imm (0x19);               // compare it with last row + 1
/* e883 */                   BNE.rel ("_e888");            // if not last row + 1 skip the screen scroll
/* e885 */                   JSR.abs ("_e8ea");            // else scroll the screen
/* e888 */        _`_e888`;  LDA.zpx (0xd9);               // get start of line X pointer high byte
/* e88a */                   BPL.rel ("_e880");            // loop if not start of logical line
/* e88c */                   STX.zpg ("tblx_00d6");        // save the cursor row
/* e88e */                   JMP.abs ("_e56c");            // set the screen pointers for cursor row, column and return

// ------------------------------------------------------- // output [CR]
/* e891 */        _`_e891`;  LDX.imm (0x00);               // clear X
/* e893 */                   STX.zpg ("insrt_00d8");       // clear the insert count
/* e895 */                   STX.zpg ("rvs_00c7");         // clear the reverse flag
/* e897 */                   STX.zpg ("qtsw_00d4");        // clear the cursor quote flag, $xx = quote, $00 = no quote
/* e899 */                   STX.zpg ("pntr_00d3");        // save the cursor column
/* e89b */                   JSR.abs ("_e87c");            // do newline
/* e89e */                   JMP.abs ("_e6a8");            // restore the registers, set the quote flag and exit

// ------------------------------------------------------- // test for line decrement
/* e8a1 */        _`_e8a1`;  LDX.imm (0x02);               // set the count
/* e8a3 */                   LDA.imm (0x00);               // set the column
/* e8a5 */        _`_e8a5`;  CMP.zpg ("pntr_00d3");        // compare the column with the cursor column
/* e8a7 */                   BEQ.rel ("_e8b0");            // if at the start of the line go decrement the cursor row
                                                           // and exit
/* e8a9 */                   CLC.imp ();                   // else clear carry for add
/* e8aa */                   ADC.imm (0x28);               // increment to next line
/* e8ac */                   DEX.imp ();                   // decrement loop count
/* e8ad */                   BNE.rel ("_e8a5");            // loop if more to test
/* e8af */                   RTS.imp ();
/* e8b0 */        _`_e8b0`;  DEC.zpg ("tblx_00d6");        // else decrement the cursor row
/* e8b2 */                   RTS.imp ();

// ------------------------------------------------------- // test for line increment

                                                           // if at end of the line, but not at end of the last line, increment the cursor row
/* e8b3 */        _`_e8b3`;  LDX.imm (0x02);               // set the count
/* e8b5 */                   LDA.imm (0x27);               // set the column
/* e8b7 */        _`_e8b7`;  CMP.zpg ("pntr_00d3");        // compare the column with the cursor column
/* e8b9 */                   BEQ.rel ("_e8c2");            // if at end of line test and possibly increment cursor row
/* e8bb */                   CLC.imp ();                   // else clear carry for add
/* e8bc */                   ADC.imm (0x28);               // increment to the next line
/* e8be */                   DEX.imp ();                   // decrement the loop count
/* e8bf */                   BNE.rel ("_e8b7");            // loop if more to test
/* e8c1 */                   RTS.imp ();
                                                           // cursor is at end of line
/* e8c2 */        _`_e8c2`;  LDX.zpg ("tblx_00d6");        // get the cursor row
/* e8c4 */                   CPX.imm (0x19);               // compare it with the end of the screen
/* e8c6 */                   BEQ.rel ("_e8ca");            // if at the end of screen just exit
/* e8c8 */                   INC.zpg ("tblx_00d6");        // else increment the cursor row
/* e8ca */        _`_e8ca`;  RTS.imp ();

// ------------------------------------------------------- // set the colour code. enter with the colour character in A. if A does not contain a
                                                           // colour character this routine exits without changing the colour
/* e8cb */        _`_e8cb`;  LDX.imm (0x0f);
                                                           // set the colour code count
/* e8cd */        _`_e8cd`;  CMP.abx ("_e8da");            // compare the character with a table code
/* e8d0 */                   BEQ.rel ("_e8d6");            // if a match go save the colour and exit
/* e8d2 */                   DEX.imp ();                   // else decrement the index
/* e8d3 */                   BPL.rel ("_e8cd");            // loop if more to do
/* e8d5 */                   RTS.imp ();
/* e8d6 */        _`_e8d6`;  STX.abs ("color_0286");       // save the current colour code
/* e8d9 */                   RTS.imp ();

// ------------------------------------------------------- // ASCII colour code table
                                                           // CHR$()  colour
                                                           // ------  ------
/* e8da */        _`_e8da`;  _.bytes(0x90);                //  144    black
/* e8db */                   _.bytes(0x05);                //    5    white 
/* e8dc */                   _.bytes(0x1c);                //   28    red 
/* e8dd */                   _.bytes(0x9f);                //  159    cyan
/* e8de */                   _.bytes(0x9c);                //  156    purple
/* e8df */                   _.bytes(0x1e);                //   30    green
/* e8e0 */                   _.bytes(0x1f);                //   31    blue
/* e8e1 */                   _.bytes(0x9e);                //  158    yellow
/* e8e2 */                   _.bytes(0x81);                //  129    orange
/* e8e3 */                   _.bytes(0x95);                //  149    brown
/* e8e4 */                   _.bytes(0x96);                //  150    light red
/* e8e5 */                   _.bytes(0x97);                //  151    dark grey
/* e8e6 */                   _.bytes(0x98);                //  152    medium grey
/* e8e7 */                   _.bytes(0x99);                //  153    light green
/* e8e8 */                   _.bytes(0x9a);                //  154    light blue
/* e8e9 */                   _.bytes(0x9b);                //  155    light grey

// ------------------------------------------------------- // scroll the screen
/* e8ea */        _`_e8ea`;  LDA.zpg ("sal+0_00ac");       // copy the tape buffer start pointer
/* e8ec */                   PHA.imp ();                   // save it
/* e8ed */                   LDA.zpg ("sal+1_00ad");       // copy the tape buffer start pointer
/* e8ef */                   PHA.imp ();                   // save it
/* e8f0 */                   LDA.zpg ("eal+0_00ae");       // copy the tape buffer end pointer
/* e8f2 */                   PHA.imp ();                   // save it
/* e8f3 */                   LDA.zpg ("eal+1_00af");       // copy the tape buffer end pointer
/* e8f5 */                   PHA.imp ();                   // save it
/* e8f6 */        _`_e8f6`;  LDX.imm (0xff);               // set to -1 for pre increment loop
/* e8f8 */                   DEC.zpg ("tblx_00d6");        // decrement the cursor row
/* e8fa */                   DEC.zpg ("lxsp+0_00c9");      // decrement the input cursor row
/* e8fc */                   DEC.abs ("tlnidx_02a5");      // decrement the screen row marker
/* e8ff */        _`_e8ff`;  INX.imp ();                   // increment the line number
/* e900 */                   JSR.abs ("_e9f0");            // fetch a screen address, set the start of line X
/* e903 */                   CPX.imm (0x18);               // compare with last line
/* e905 */                   BCS.rel ("_e913");            // branch if >= $16
/* e907 */                   LDA.abx (0xecf1);             // get the start of the next line pointer low byte
/* e90a */                   STA.zpg ("sal+0_00ac");       // save the next line pointer low byte
/* e90c */                   LDA.zpx (0xda);               // get the start of the next line pointer high byte
/* e90e */                   JSR.abs ("_e9c8");            // shift the screen line up
/* e911 */                   BMI.rel ("_e8ff");            // loop, branch always
/* e913 */        _`_e913`;  JSR.abs ("_e9ff");            // clear screen line X
                                                           // now shift up the start of logical line bits
/* e916 */                   LDX.imm (0x00);               // clear index
/* e918 */        _`_e918`;  LDA.zpx (0xd9);               // get the start of line X pointer high byte
/* e91a */                   AND.imm (0x7f);               // clear the line X start of logical line bit
/* e91c */                   LDY.zpx (0xda);               // get the start of the next line pointer high byte
/* e91e */                   BPL.rel ("_e922");            // if next line is not a start of line skip the start set
/* e920 */                   ORA.imm (0x80);               // set line X start of logical line bit
/* e922 */        _`_e922`;  STA.zpx (0xd9);               // set start of line X pointer high byte
/* e924 */                   INX.imp ();                   // increment line number
/* e925 */                   CPX.imm (0x18);               // compare with last line
/* e927 */                   BNE.rel ("_e918");            // loop if not last line
/* e929 */                   LDA.zpg ("ldtb1+24_00f1");    // get start of last line pointer high byte
/* e92b */                   ORA.imm (0x80);               // mark as start of logical line
/* e92d */                   STA.zpg ("ldtb1+24_00f1");    // set start of last line pointer high byte
/* e92f */                   LDA.zpg ("ldtb1+0_00d9");     // get start of first line pointer high byte
/* e931 */                   BPL.rel ("_e8f6");            // if not start of logical line loop back and
                                                           // scroll the screen up another line
/* e933 */                   INC.zpg ("tblx_00d6");        // increment the cursor row
/* e935 */                   INC.abs ("tlnidx_02a5");      // increment screen row marker
/* e938 */                   LDA.imm (0x7f);               // set keyboard column c7
/* e93a */                   STA.abs ("ciapra_dc00");      // save VIA 1 DRA, keyboard column drive
/* e93d */                   LDA.abs ("ciaprb_dc01");      // read VIA 1 DRB, keyboard row port
/* e940 */                   CMP.imm (0xfb);               // compare with row r2 active, [CTL]
/* e942 */                   PHP.imp ();                   // save status
/* e943 */                   LDA.imm (0x7f);               // set keyboard column c7
/* e945 */                   STA.abs ("ciapra_dc00");      // save VIA 1 DRA, keyboard column drive
/* e948 */                   PLP.imp ();                   // restore status
/* e949 */                   BNE.rel ("_e956");            // skip delay if ??
                                                           // first time round the inner loop X will be $16
/* e94b */                   LDY.imm (0x00);               // clear delay outer loop count, do this 256 times
/* e94d */        _`_e94d`;  NOP.imp ();                   // waste cycles
/* e94e */                   DEX.imp ();                   // decrement inner loop count
/* e94f */                   BNE.rel ("_e94d");            // loop if not all done
/* e951 */                   DEY.imp ();                   // decrement outer loop count
/* e952 */                   BNE.rel ("_e94d");            // loop if not all done
/* e954 */                   STY.zpg ("ndx_00c6");         // clear the keyboard buffer index
/* e956 */        _`_e956`;  LDX.zpg ("tblx_00d6");        // get the cursor row
                                                           // restore the tape buffer pointers and exit
/* e958 */        _`_e958`;  PLA.imp ();                   // pull tape buffer end pointer
/* e959 */                   STA.zpg ("eal+1_00af");       // restore it
/* e95b */                   PLA.imp ();                   // pull tape buffer end pointer
/* e95c */                   STA.zpg ("eal+0_00ae");       // restore it
/* e95e */                   PLA.imp ();                   // pull tape buffer pointer
/* e95f */                   STA.zpg ("sal+1_00ad");       // restore it
/* e961 */                   PLA.imp ();                   // pull tape buffer pointer
/* e962 */                   STA.zpg ("sal+0_00ac");       // restore it
/* e964 */                   RTS.imp ();

// ------------------------------------------------------- // open up a space on the screen
/* e965 */        _`_e965`;  LDX.zpg ("tblx_00d6");        // get the cursor row
/* e967 */        _`_e967`;  INX.imp ();                   // increment the row
/* e968 */                   LDA.zpx (0xd9);               // get the start of line X pointer high byte
/* e96a */                   BPL.rel ("_e967");            // loop if not start of logical line
/* e96c */                   STX.abs ("tlnidx_02a5");      // save the screen row marker
/* e96f */                   CPX.imm (0x18);               // compare it with the last line
/* e971 */                   BEQ.rel ("_e981");            // if = last line go ??
/* e973 */                   BCC.rel ("_e981");            // if < last line go ??
                                                           // else it was > last line
/* e975 */                   JSR.abs ("_e8ea");            // scroll the screen
/* e978 */                   LDX.abs ("tlnidx_02a5");      // get the screen row marker
/* e97b */                   DEX.imp ();                   // decrement the screen row marker
/* e97c */                   DEC.zpg ("tblx_00d6");        // decrement the cursor row
/* e97e */                   JMP.abs ("_e6da");            // add this row to the current logical line and return
/* e981 */        _`_e981`;  LDA.zpg ("sal+0_00ac");       // copy tape buffer pointer
/* e983 */                   PHA.imp ();                   // save it
/* e984 */                   LDA.zpg ("sal+1_00ad");       // copy tape buffer pointer
/* e986 */                   PHA.imp ();                   // save it
/* e987 */                   LDA.zpg ("eal+0_00ae");       // copy tape buffer end pointer
/* e989 */                   PHA.imp ();                   // save it
/* e98a */                   LDA.zpg ("eal+1_00af");       // copy tape buffer end pointer
/* e98c */                   PHA.imp ();                   // save it
/* e98d */                   LDX.imm (0x19);               // set to end line + 1 for predecrement loop
/* e98f */        _`_e98f`;  DEX.imp ();                   // decrement the line number
/* e990 */                   JSR.abs ("_e9f0");            // fetch a screen address
/* e993 */                   CPX.abs ("tlnidx_02a5");      // compare it with the screen row marker
/* e996 */                   BCC.rel ("_e9a6");            // if < screen row marker go ??
/* e998 */                   BEQ.rel ("_e9a6");            // if = screen row marker go ??
/* e99a */                   LDA.abx (0xecef);             // else get the start of the previous line low byte from the
                                                           // ROM table
/* e99d */                   STA.zpg ("sal+0_00ac");       // save previous line pointer low byte
/* e99f */                   LDA.zpx (0xd8);               // get the start of the previous line pointer high byte
/* e9a1 */                   JSR.abs ("_e9c8");            // shift the screen line down
/* e9a4 */                   BMI.rel ("_e98f");            // loop, branch always
/* e9a6 */        _`_e9a6`;  JSR.abs ("_e9ff");            // clear screen line X
/* e9a9 */                   LDX.imm (0x17);
/* e9ab */        _`_e9ab`;  CPX.abs ("tlnidx_02a5");      // compare it with the screen row marker
/* e9ae */                   BCC.rel ("_e9bf");
/* e9b0 */                   LDA.zpx (0xda);
/* e9b2 */                   AND.imm (0x7f);
/* e9b4 */                   LDY.zpx (0xd9);               // get start of line X pointer high byte
/* e9b6 */                   BPL.rel ("_e9ba");
/* e9b8 */                   ORA.imm (0x80);
/* e9ba */        _`_e9ba`;  STA.zpx (0xda);
/* e9bc */                   DEX.imp ();
/* e9bd */                   BNE.rel ("_e9ab");
/* e9bf */        _`_e9bf`;  LDX.abs ("tlnidx_02a5");      // get the screen row marker
/* e9c2 */                   JSR.abs ("_e6da");            // add this row to the current logical line
/* e9c5 */                   JMP.abs ("_e958");            // restore the tape buffer pointers and exit

// ------------------------------------------------------- // shift screen line up/down
/* e9c8 */        _`_e9c8`;  AND.imm (0x03);               // mask 0000 00xx, line memory page
/* e9ca */                   ORA.abs ("hibase_0288");      // OR with screen memory page
/* e9cd */                   STA.zpg ("sal+1_00ad");       // save next/previous line pointer high byte
/* e9cf */                   JSR.abs ("_e9e0");            // calculate pointers to screen lines colour RAM
/* e9d2 */                   LDY.imm (0x27);               // set the column count
/* e9d4 */        _`_e9d4`;  LDA.iny ("sal+0_00ac");       // get character from next/previous screen line
/* e9d6 */                   STA.iny ("pnt+0_00d1");       // save character to current screen line
/* e9d8 */                   LDA.iny ("eal+0_00ae");       // get colour from next/previous screen line colour RAM
/* e9da */                   STA.iny ("user+0_00f3");      // save colour to current screen line colour RAM
/* e9dc */                   DEY.imp ();                   // decrement column index/count
/* e9dd */                   BPL.rel ("_e9d4");            // loop if more to do
/* e9df */                   RTS.imp ();

// ------------------------------------------------------- // calculate pointers to screen lines colour RAM
/* e9e0 */        _`_e9e0`;  JSR.abs ("_ea24");            // calculate the pointer to the current screen line colour
                                                           // RAM
/* e9e3 */                   LDA.zpg ("sal+0_00ac");       // get the next screen line pointer low byte
/* e9e5 */                   STA.zpg ("eal+0_00ae");       // save the next screen line colour RAM pointer low byte
/* e9e7 */                   LDA.zpg ("sal+1_00ad");       // get the next screen line pointer high byte
/* e9e9 */                   AND.imm (0x03);               // mask 0000 00xx, line memory page
/* e9eb */                   ORA.imm (0xd8);               // set  1101 01xx, colour memory page
/* e9ed */                   STA.zpg ("eal+1_00af");       // save the next screen line colour RAM pointer high byte
/* e9ef */                   RTS.imp ();

// ------------------------------------------------------- // fetch a screen address
/* e9f0 */        _`_e9f0`;  LDA.abx ("_ecf0");            // get the start of line low byte from the ROM table
/* e9f3 */                   STA.zpg ("pnt+0_00d1");       // set the current screen line pointer low byte
/* e9f5 */                   LDA.zpx (0xd9);               // get the start of line high byte from the RAM table
/* e9f7 */                   AND.imm (0x03);               // mask 0000 00xx, line memory page
/* e9f9 */                   ORA.abs ("hibase_0288");      // OR with the screen memory page
/* e9fc */                   STA.zpg ("pnt+1_00d2");       // save the current screen line pointer high byte
/* e9fe */                   RTS.imp ();

// ------------------------------------------------------- // clear screen line X
/* e9ff */        _`_e9ff`;  LDY.imm (0x27);               // set number of columns to clear
/* ea01 */                   JSR.abs ("_e9f0");            // fetch a screen address
/* ea04 */                   JSR.abs ("_ea24");            // calculate the pointer to colour RAM
/* ea07 */        _`_ea07`;  JSR.abs ("_e4da");            // save the current colour to the colour RAM
/* ea0a */                   LDA.imm (0x20);               // set [SPACE]
/* ea0c */                   STA.iny ("pnt+0_00d1");       // clear character in current screen line
/* ea0e */                   DEY.imp ();                   // decrement index
/* ea0f */                   BPL.rel ("_ea07");            // loop if more to do
/* ea11 */                   RTS.imp ();

// ------------------------------------------------------- // orphan byte
/* ea12 */                   NOP.imp ();                   // unused

// ------------------------------------------------------- // print character A and colour X
/* ea13 */        _`_ea13`;  TAY.imp ();                   // copy the character
/* ea14 */                   LDA.imm (0x02);               // count to $02, usually $14 ??
/* ea16 */                   STA.zpg ("blnct_00cd");       // save the cursor countdown
/* ea18 */                   JSR.abs ("_ea24");            // calculate the pointer to colour RAM
/* ea1b */                   TYA.imp ();                   // get the character back

// ------------------------------------------------------- // save the character and colour to the screen @ the cursor
/* ea1c */        _`_ea1c`;  LDY.zpg ("pntr_00d3");        // get the cursor column
/* ea1e */                   STA.iny ("pnt+0_00d1");       // save the character from current screen line
/* ea20 */                   TXA.imp ();                   // copy the colour to A
/* ea21 */                   STA.iny ("user+0_00f3");      // save to colour RAM
/* ea23 */                   RTS.imp ();

// ------------------------------------------------------- // calculate the pointer to colour RAM
/* ea24 */        _`_ea24`;  LDA.zpg ("pnt+0_00d1");       // get current screen line pointer low byte
/* ea26 */                   STA.zpg ("user+0_00f3");      // save pointer to colour RAM low byte
/* ea28 */                   LDA.zpg ("pnt+1_00d2");       // get current screen line pointer high byte
/* ea2a */                   AND.imm (0x03);               // mask 0000 00xx, line memory page
/* ea2c */                   ORA.imm (0xd8);               // set  1101 01xx, colour memory page
/* ea2e */                   STA.zpg ("user+1_00f4");      // save pointer to colour RAM high byte
/* ea30 */                   RTS.imp ();

// ------------------------------------------------------- // IRQ vector
/* ea31 */                   JSR.abs ("udtim_ffea");       // increment the real time clock
/* ea34 */                   LDA.zpg ("blnsw_00cc");       // get the cursor enable, $00 = flash cursor
/* ea36 */                   BNE.rel ("_ea61");            // if flash not enabled skip the flash
/* ea38 */                   DEC.zpg ("blnct_00cd");       // decrement the cursor timing countdown
/* ea3a */                   BNE.rel ("_ea61");            // if not counted out skip the flash
/* ea3c */                   LDA.imm (0x14);               // set the flash count
/* ea3e */                   STA.zpg ("blnct_00cd");       // save the cursor timing countdown
/* ea40 */                   LDY.zpg ("pntr_00d3");        // get the cursor column
/* ea42 */                   LSR.zpg ("blnon_00cf");       // shift b0 cursor blink phase into carry
/* ea44 */                   LDX.abs ("gdcol_0287");       // get the colour under the cursor
/* ea47 */                   LDA.iny ("pnt+0_00d1");       // get the character from current screen line
/* ea49 */                   BCS.rel ("_ea5c");            // branch if cursor phase b0 was 1
/* ea4b */                   INC.zpg ("blnon_00cf");       // set the cursor blink phase to 1
/* ea4d */                   STA.zpg ("gdbln_00ce");       // save the character under the cursor
/* ea4f */                   JSR.abs ("_ea24");            // calculate the pointer to colour RAM
/* ea52 */                   LDA.iny ("user+0_00f3");      // get the colour RAM byte
/* ea54 */                   STA.abs ("gdcol_0287");       // save the colour under the cursor
/* ea57 */                   LDX.abs ("color_0286");       // get the current colour code
/* ea5a */                   LDA.zpg ("gdbln_00ce");       // get the character under the cursor
/* ea5c */        _`_ea5c`;  EOR.imm (0x80);               // toggle b7 of character under cursor
/* ea5e */                   JSR.abs ("_ea1c");            // save the character and colour to the screen @ the cursor
/* ea61 */        _`_ea61`;  LDA.zpg ("r6510_0001");       // read the 6510 I/O port
/* ea63 */                   AND.imm (0x10);               // mask 000x 0000, the cassette switch sense
/* ea65 */                   BEQ.rel ("_ea71");            // if the cassette sense is low skip the motor stop
                                                           // the cassette sense was high, the switch was open, so turn
                                                           // off the motor and clear the interlock
/* ea67 */                   LDY.imm (0x00);               // clear Y
/* ea69 */                   STY.zpg ("cas1_00c0");        // clear the tape motor interlock
/* ea6b */                   LDA.zpg ("r6510_0001");       // read the 6510 I/O port
/* ea6d */                   ORA.imm (0x20);               // mask xxxx xx1x, turn off the motor
/* ea6f */                   BNE.rel ("_ea79");            // go save the port value, branch always
                                                           // the cassette sense was low so turn the motor on, perhaps
/* ea71 */        _`_ea71`;  LDA.zpg ("cas1_00c0");        // get the tape motor interlock
/* ea73 */                   BNE.rel ("_ea7b");            // if the cassette interlock <> 0 don't turn on motor
/* ea75 */                   LDA.zpg ("r6510_0001");       // read the 6510 I/O port
/* ea77 */                   AND.imm (0x1f);               // mask xxxx xx0x, turn on the motor
/* ea79 */        _`_ea79`;  STA.zpg ("r6510_0001");       // save the 6510 I/O port
/* ea7b */        _`_ea7b`;  JSR.abs ("scnkey_ea87");      // scan the keyboard
/* ea7e */                   LDA.abs ("ciaicr_dc0d");      // read VIA 1 ICR, clear the timer interrupt flag
/* ea81 */                   PLA.imp ();                   // pull Y
/* ea82 */                   TAY.imp ();                   // restore Y
/* ea83 */                   PLA.imp ();                   // pull X
/* ea84 */                   TAX.imp ();                   // restore X
/* ea85 */                   PLA.imp ();                   // restore A
/* ea86 */                   RTI.imp ();

// ------------------------------------------------------- // scan keyboard performs the following ..

                                                           // 1) check if key pressed, if not then exit the routine

                                                           // 2) init I/O ports of VIA ?? for keyboard scan and set pointers to decode table 1.
                                                           // clear the character counter

                                                           // 3) set one line of port B low and test for a closed key on port A by shifting the
                                                           // byte read from the port. if the carry is clear then a key is closed so save the
                                                           // count which is incremented on each shift. check for shift/stop/cbm keys and
                                                           // flag if closed

                                                           // 4) repeat step 3 for the whole matrix

                                                           // 5) evaluate the SHIFT/CTRL/C= keys, this may change the decode table selected

                                                           // 6) use the key count saved in step 3 as an index into the table selected in step 5

                                                           // 7) check for key repeat operation

                                                           // 8) save the decoded key to the buffer if first press or repeat
                                                           // scan the keyboard
/* ea87 */  _`scnkey_ea87`;  LDA.imm (0x00);               // clear A
/* ea89 */                   STA.abs ("shflag_028d");      // clear the keyboard shift/control/c= flag
/* ea8c */                   LDY.imm (0x40);               // set no key
/* ea8e */                   STY.zpg ("sfdx_00cb");        // save which key
/* ea90 */                   STA.abs ("ciapra_dc00");      // clear VIA 1 DRA, keyboard column drive
/* ea93 */                   LDX.abs ("ciaprb_dc01");      // read VIA 1 DRB, keyboard row port
/* ea96 */                   CPX.imm (0xff);               // compare with all bits set
/* ea98 */                   BEQ.rel ("_eafb");            // if no key pressed clear current key and exit (does
                                                           // further BEQ to $EBBA)
/* ea9a */                   TAY.imp ();                   // clear the key count
/* ea9b */                   LDA.imm (0x81);               // get the decode table low byte
/* ea9d */                   STA.zpg ("keytab+0_00f5");    // save the keyboard pointer low byte
/* ea9f */                   LDA.imm (0xeb);               // get the decode table high byte
/* eaa1 */                   STA.zpg ("keytab+1_00f6");    // save the keyboard pointer high byte
/* eaa3 */                   LDA.imm (0xfe);               // set column 0 low
/* eaa5 */                   STA.abs ("ciapra_dc00");      // save VIA 1 DRA, keyboard column drive
/* eaa8 */        _`_eaa8`;  LDX.imm (0x08);               // set the row count
/* eaaa */                   PHA.imp ();                   // save the column
/* eaab */        _`_eaab`;  LDA.abs ("ciaprb_dc01");      // read VIA 1 DRB, keyboard row port
/* eaae */                   CMP.abs ("ciaprb_dc01");      // compare it with itself
/* eab1 */                   BNE.rel ("_eaab");            // loop if changing
/* eab3 */        _`_eab3`;  LSR.acc ();                   // shift row to Cb
/* eab4 */                   BCS.rel ("_eacc");            // if no key closed on this row go do next row
/* eab6 */                   PHA.imp ();                   // save row
/* eab7 */                   LDA.iny ("keytab+0_00f5");    // get character from decode table
/* eab9 */                   CMP.imm (0x05);               // compare with $05, there is no $05 key but the control
                                                           // keys are all less than $05
/* eabb */                   BCS.rel ("_eac9");            // if not shift/control/c=/stop go save key count
                                                           // else was shift/control/c=/stop key
/* eabd */                   CMP.imm (0x03);               // compare with $03, stop
/* eabf */                   BEQ.rel ("_eac9");            // if stop go save key count and continue
                                                           // character is $01 - shift, $02 - c= or $04 - control
/* eac1 */                   ORA.abs ("shflag_028d");      // OR it with the keyboard shift/control/c= flag
/* eac4 */                   STA.abs ("shflag_028d");      // save the keyboard shift/control/c= flag
/* eac7 */                   BPL.rel ("_eacb");            // skip save key, branch always
/* eac9 */        _`_eac9`;  STY.zpg ("sfdx_00cb");        // save key count
/* eacb */        _`_eacb`;  PLA.imp ();                   // restore row
/* eacc */        _`_eacc`;  INY.imp ();                   // increment key count
/* eacd */                   CPY.imm (0x41);               // compare with max+1
/* eacf */                   BCS.rel ("_eadc");            // exit loop if >= max+1
                                                           // else still in matrix
/* ead1 */                   DEX.imp ();                   // decrement row count
/* ead2 */                   BNE.rel ("_eab3");            // loop if more rows to do
/* ead4 */                   SEC.imp ();                   // set carry for keyboard column shift
/* ead5 */                   PLA.imp ();                   // restore the column
/* ead6 */                   ROL.acc ();                   // shift the keyboard column
/* ead7 */                   STA.abs ("ciapra_dc00");      // save VIA 1 DRA, keyboard column drive
/* eada */                   BNE.rel ("_eaa8");            // loop for next column, branch always
/* eadc */        _`_eadc`;  PLA.imp ();                   // dump the saved column
/* eadd */                   JMP.ind ("keylog+0_028f");    // evaluate the SHIFT/CTRL/C= keys, $EBDC
                                                           // key decoding continues here after the SHIFT/CTRL/C= keys are evaluated
/* eae0 */        _`_eae0`;  LDY.zpg ("sfdx_00cb");        // get saved key count
/* eae2 */                   LDA.iny ("keytab+0_00f5");    // get character from decode table
/* eae4 */                   TAX.imp ();                   // copy character to X
/* eae5 */                   CPY.zpg ("lstx_00c5");        // compare key count with last key count
/* eae7 */                   BEQ.rel ("_eaf0");            // if this key = current key, key held, go test repeat
/* eae9 */                   LDY.imm (0x10);               // set the repeat delay count
/* eaeb */                   STY.abs ("delay_028c");       // save the repeat delay count
/* eaee */                   BNE.rel ("_eb26");            // go save key to buffer and exit, branch always
/* eaf0 */        _`_eaf0`;  AND.imm (0x7f);               // clear b7
/* eaf2 */                   BIT.abs ("rptflg_028a");      // test key repeat
/* eaf5 */                   BMI.rel ("_eb0d");            // if repeat all go ??
/* eaf7 */                   BVS.rel ("_eb42");            // if repeat none go ??
/* eaf9 */                   CMP.imm (0x7f);               // compare with end marker
/* eafb */        _`_eafb`;  BEQ.rel ("_eb26");            // if $00/end marker go save key to buffer and exit
/* eafd */                   CMP.imm (0x14);               // compare with [INSERT]/[DELETE]
/* eaff */                   BEQ.rel ("_eb0d");            // if [INSERT]/[DELETE] go test for repeat
/* eb01 */                   CMP.imm (0x20);               // compare with [SPACE]
/* eb03 */                   BEQ.rel ("_eb0d");            // if [SPACE] go test for repeat
/* eb05 */                   CMP.imm (0x1d);               // compare with [CURSOR RIGHT]
/* eb07 */                   BEQ.rel ("_eb0d");            // if [CURSOR RIGHT] go test for repeat
/* eb09 */                   CMP.imm (0x11);               // compare with [CURSOR DOWN]
/* eb0b */                   BNE.rel ("_eb42");            // if not [CURSOR DOWN] just exit
                                                           // was one of the cursor movement keys, insert/delete
                                                           // key or the space bar so always do repeat tests
/* eb0d */        _`_eb0d`;  LDY.abs ("delay_028c");       // get the repeat delay counter
/* eb10 */                   BEQ.rel ("_eb17");            // if delay expired go ??
/* eb12 */                   DEC.abs ("delay_028c");       // else decrement repeat delay counter
/* eb15 */                   BNE.rel ("_eb42");            // if delay not expired go ??
                                                           // repeat delay counter has expired
/* eb17 */        _`_eb17`;  DEC.abs ("kount_028b");       // decrement the repeat speed counter
/* eb1a */                   BNE.rel ("_eb42");            // branch if repeat speed count not expired
/* eb1c */                   LDY.imm (0x04);               // set for 4/60ths of a second
/* eb1e */                   STY.abs ("kount_028b");       // save the repeat speed counter
/* eb21 */                   LDY.zpg ("ndx_00c6");         // get the keyboard buffer index
/* eb23 */                   DEY.imp ();                   // decrement it
/* eb24 */                   BPL.rel ("_eb42");            // if the buffer isn't empty just exit
                                                           // else repeat the key immediately
                                                           // possibly save the key to the keyboard buffer. if there was no key pressed or the key
                                                           // was not found during the scan (possibly due to key bounce) then X will be $FF here
/* eb26 */        _`_eb26`;  LDY.zpg ("sfdx_00cb");        // get the key count
/* eb28 */                   STY.zpg ("lstx_00c5");        // save it as the current key count
/* eb2a */                   LDY.abs ("shflag_028d");      // get the keyboard shift/control/c= flag
/* eb2d */                   STY.abs ("lstshf_028e");      // save it as last keyboard shift pattern
/* eb30 */                   CPX.imm (0xff);               // compare the character with the table end marker or no key
/* eb32 */                   BEQ.rel ("_eb42");            // if it was the table end marker or no key just exit
/* eb34 */                   TXA.imp ();                   // copy the character to A
/* eb35 */                   LDX.zpg ("ndx_00c6");         // get the keyboard buffer index
/* eb37 */                   CPX.abs ("xmax_0289");        // compare it with the keyboard buffer size
/* eb3a */                   BCS.rel ("_eb42");            // if the buffer is full just exit
/* eb3c */                   STA.abx ("keyd+0_0277");      // save the character to the keyboard buffer
/* eb3f */                   INX.imp ();                   // increment the index
/* eb40 */                   STX.zpg ("ndx_00c6");         // save the keyboard buffer index
/* eb42 */        _`_eb42`;  LDA.imm (0x7f);               // enable column 7 for the stop key
/* eb44 */                   STA.abs ("ciapra_dc00");      // save VIA 1 DRA, keyboard column drive
/* eb47 */                   RTS.imp ();

// ------------------------------------------------------- // evaluate the SHIFT/CTRL/C= keys
/* eb48 */                   LDA.abs ("shflag_028d");      // get the keyboard shift/control/c= flag
/* eb4b */                   CMP.imm (0x03);               // compare with [SHIFT][C=]
/* eb4d */                   BNE.rel ("_eb64");            // if not [SHIFT][C=] go ??
/* eb4f */                   CMP.abs ("lstshf_028e");      // compare with last
/* eb52 */                   BEQ.rel ("_eb42");            // exit if still the same
/* eb54 */                   LDA.abs ("mode_0291");        // get the shift mode switch $00 = enabled, $80 = locked
/* eb57 */                   BMI.rel ("_eb76");            // if locked continue keyboard decode
                                                           // toggle text mode
/* eb59 */                   LDA.abs ("vmcsb_d018");       // get the start of character memory address
/* eb5c */                   EOR.imm (0x02);               // toggle address b1
/* eb5e */                   STA.abs ("vmcsb_d018");       // save the start of character memory address
/* eb61 */                   JMP.abs ("_eb76");            // continue the keyboard decode
                                                           // select keyboard table
/* eb64 */        _`_eb64`;  ASL.acc ();                   // << 1
/* eb65 */                   CMP.imm (0x08);               // compare with [CTRL]
/* eb67 */                   BCC.rel ("_eb6b");            // if [CTRL] is not pressed skip the index change
/* eb69 */                   LDA.imm (0x06);               // else [CTRL] was pressed so make the index = $06
/* eb6b */        _`_eb6b`;  TAX.imp ();                   // copy the index to X
/* eb6c */                   LDA.abx ("_eb79");            // get the decode table pointer low byte
/* eb6f */                   STA.zpg ("keytab+0_00f5");    // save the decode table pointer low byte
/* eb71 */                   LDA.abx (0xeb7a);             // get the decode table pointer high byte
/* eb74 */                   STA.zpg ("keytab+1_00f6");    // save the decode table pointer high byte
/* eb76 */        _`_eb76`;  JMP.abs ("_eae0");            // continue the keyboard decode

// ------------------------------------------------------- // table addresses
/* eb79 */        _`_eb79`;  _.bytes(0x81, 0xeb);          // standard
/* eb7b */                   _.bytes(0xc2, 0xeb);          // shift
/* eb7d */                   _.bytes(0x03, 0xec);          // commodore
/* eb7f */                   _.bytes(0x78, 0xec);          // control

// ------------------------------------------------------- // standard keyboard table
/* eb81 */                   _.bytes(0x14, 0x0d, 0x1d, 0x88, 0x85, 0x86, 0x87, 0x11);
/* eb89 */                   _.bytes(0x33, 0x57, 0x41, 0x34, 0x5a, 0x53, 0x45, 0x01);
/* eb91 */                   _.bytes(0x35, 0x52, 0x44, 0x36, 0x43, 0x46, 0x54, 0x58);
/* eb99 */                   _.bytes(0x37, 0x59, 0x47, 0x38, 0x42, 0x48, 0x55, 0x56);
/* eba1 */                   _.bytes(0x39, 0x49, 0x4a, 0x30, 0x4d, 0x4b, 0x4f, 0x4e);
/* eba9 */                   _.bytes(0x2b, 0x50, 0x4c, 0x2d, 0x2e, 0x3a, 0x40, 0x2c);
/* ebb1 */                   _.bytes(0x5c, 0x2a, 0x3b, 0x13, 0x01, 0x3d, 0x5e, 0x2f);
/* ebb9 */                   _.bytes(0x31, 0x5f, 0x04, 0x32, 0x20, 0x02, 0x51, 0x03);
/* ebc1 */                   _.bytes(0xff);
// ------------------------------------------------------- // shifted keyboard table
/* ebc2 */                   _.bytes(0x94, 0x8d, 0x9d, 0x8c, 0x89, 0x8a, 0x8b, 0x91);
/* ebca */                   _.bytes(0x23, 0xd7, 0xc1, 0x24, 0xda, 0xd3, 0xc5, 0x01);
/* ebd2 */                   _.bytes(0x25, 0xd2, 0xc4, 0x26, 0xc3, 0xc6, 0xd4, 0xd8);
/* ebda */                   _.bytes(0x27, 0xd9, 0xc7, 0x28, 0xc2, 0xc8, 0xd5, 0xd6);
/* ebe2 */                   _.bytes(0x29, 0xc9, 0xca, 0x30, 0xcd, 0xcb, 0xcf, 0xce);
/* ebea */                   _.bytes(0xdb, 0xd0, 0xcc, 0xdd, 0x3e, 0x5b, 0xba, 0x3c);
/* ebf2 */                   _.bytes(0xa9, 0xc0, 0x5d, 0x93, 0x01, 0x3d, 0xde, 0x3f);
/* ebfa */                   _.bytes(0x21, 0x5f, 0x04, 0x22, 0xa0, 0x02, 0xd1, 0x83);
/* ec02 */                   _.bytes(0xff);
// ------------------------------------------------------- // CBM key keyboard table
/* ec03 */                   _.bytes(0x94, 0x8d, 0x9d, 0x8c, 0x89, 0x8a, 0x8b, 0x91);
/* ec0b */                   _.bytes(0x96, 0xb3, 0xb0, 0x97, 0xad, 0xae, 0xb1, 0x01);
/* ec13 */                   _.bytes(0x98, 0xb2, 0xac, 0x99, 0xbc, 0xbb, 0xa3, 0xbd);
/* ec1b */                   _.bytes(0x9a, 0xb7, 0xa5, 0x9b, 0xbf, 0xb4, 0xb8, 0xbe);
/* ec23 */                   _.bytes(0x29, 0xa2, 0xb5, 0x30, 0xa7, 0xa1, 0xb9, 0xaa);
/* ec2b */                   _.bytes(0xa6, 0xaf, 0xb6, 0xdc, 0x3e, 0x5b, 0xa4, 0x3c);
/* ec33 */                   _.bytes(0xa8, 0xdf, 0x5d, 0x93, 0x01, 0x3d, 0xde, 0x3f);
/* ec3b */                   _.bytes(0x81, 0x5f, 0x04, 0x95, 0xa0, 0x02, 0xab, 0x83);
/* ec43 */                   _.bytes(0xff);

// ------------------------------------------------------- // check for special character codes
/* ec44 */        _`_ec44`;  CMP.imm (0x0e);               // compare with [SWITCH TO LOWER CASE]
/* ec46 */                   BNE.rel ("_ec4f");            // if not [SWITCH TO LOWER CASE] skip the switch
/* ec48 */                   LDA.abs ("vmcsb_d018");       // get the start of character memory address
/* ec4b */                   ORA.imm (0x02);               // mask xxxx xx1x, set lower case characters
/* ec4d */                   BNE.rel ("_ec58");            // go save the new value, branch always
                                                           // check for special character codes except fro switch to lower case
/* ec4f */        _`_ec4f`;  CMP.imm (0x8e);               // compare with [SWITCH TO UPPER CASE]
/* ec51 */                   BNE.rel ("_ec5e");            // if not [SWITCH TO UPPER CASE] go do the [SHIFT]+[C=] key
                                                           // check
/* ec53 */                   LDA.abs ("vmcsb_d018");       // get the start of character memory address
/* ec56 */                   AND.imm (0xfd);               // mask xxxx xx0x, set upper case characters
/* ec58 */        _`_ec58`;  STA.abs ("vmcsb_d018");       // save the start of character memory address
/* ec5b */        _`_ec5b`;  JMP.abs ("_e6a8");            // restore the registers, set the quote flag and exit
                                                           // do the [SHIFT]+[C=] key check
/* ec5e */        _`_ec5e`;  CMP.imm (0x08);               // compare with disable [SHIFT][C=]
/* ec60 */                   BNE.rel ("_ec69");            // if not disable [SHIFT][C=] skip the set
/* ec62 */                   LDA.imm (0x80);               // set to lock shift mode switch
/* ec64 */                   ORA.abs ("mode_0291");        // OR it with the shift mode switch
/* ec67 */                   BMI.rel ("_ec72");            // go save the value, branch always
/* ec69 */        _`_ec69`;  CMP.imm (0x09);               // compare with enable [SHIFT][C=]
/* ec6b */                   BNE.rel ("_ec5b");            // exit if not enable [SHIFT][C=]
/* ec6d */                   LDA.imm (0x7f);               // set to unlock shift mode switch
/* ec6f */                   AND.abs ("mode_0291");        // AND it with the shift mode switch
/* ec72 */        _`_ec72`;  STA.abs ("mode_0291");        // save the shift mode switch $00 = enabled, $80 = locked
/* ec75 */                   JMP.abs ("_e6a8");            // restore the registers, set the quote flag and exit

// ------------------------------------------------------- // control keyboard table
/* ec78 */                   _.bytes(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff);
/* ec80 */                   _.bytes(0x1c, 0x17, 0x01, 0x9f, 0x1a, 0x13, 0x05, 0xff);
/* ec88 */                   _.bytes(0x9c, 0x12, 0x04, 0x1e, 0x03, 0x06, 0x14, 0x18);
/* ec90 */                   _.bytes(0x1f, 0x19, 0x07, 0x9e, 0x02, 0x08, 0x15, 0x16);
/* ec98 */                   _.bytes(0x12, 0x09, 0x0a, 0x92, 0x0d, 0x0b, 0x0f, 0x0e);
/* eca0 */                   _.bytes(0xff, 0x10, 0x0c, 0xff, 0xff, 0x1b, 0x00, 0xff);
/* eca8 */                   _.bytes(0x1c, 0xff, 0x1d, 0xff, 0xff, 0x1f, 0x1e, 0xff);
/* ecb0 */                   _.bytes(0x90, 0x06, 0xff, 0x05, 0xff, 0xff, 0x11, 0xff);
/* ecb8 */        _`_ecb8`;  _.bytes(0xff);

// ------------------------------------------------------- // vic ii chip initialisation values
/* ecb9 */                   _.bytes(0x00, 0x00);          // sprite 0 x,y
/* ecbb */                   _.bytes(0x00, 0x00);          // sprite 1 x,y 
/* ecbd */                   _.bytes(0x00, 0x00);          // sprite 2 x,y 
/* ecbf */                   _.bytes(0x00, 0x00);          // sprite 3 x,y
/* ecc1 */                   _.bytes(0x00, 0x00);          // sprite 4 x,y 
/* ecc3 */                   _.bytes(0x00, 0x00);          // sprite 5 x,y 
/* ecc5 */                   _.bytes(0x00, 0x00);          // sprite 6 x,y 
/* ecc7 */                   _.bytes(0x00, 0x00);          // sprite 7 x,y
/* ecc9 */                   _.bytes(0x00);                // sprites 0 to 7 x bit 8
/* ecca */                   _.bytes(0x9b);                // enable screen, enable 25 rows
                                                           // vertical fine scroll and control
                                                           // bit function
                                                           // --- -------
                                                           //  7  raster compare bit 8
                                                           //  6  1 = enable extended color text mode
                                                           //  5  1 = enable bitmap graphics mode
                                                           //  4  1 = enable screen, 0 = blank screen
                                                           //  3  1 = 25 row display, 0 = 24 row display
                                                           // 2-0 vertical scroll count
/* eccb */                   _.bytes(0x37);                // raster compare
/* eccc */                   _.bytes(0x00);                // light pen x
/* eccd */                   _.bytes(0x00);                // light pen y
/* ecce */                   _.bytes(0x00);                // sprite 0 to 7 enable
/* eccf */                   _.bytes(0x08);                // enable 40 column display
                                                           // horizontal fine scroll and control
                                                           // bit function
                                                           // --- -------
                                                           // 7-6 unused
                                                           //  5  1 = vic reset, 0 = vic on
                                                           //  4  1 = enable multicolor mode
                                                           //  3  1 = 40 column display, 0 = 38 column display
                                                           // 2-0 horizontal scroll count
/* ecd0 */                   _.bytes(0x00);                // sprite 0 to 7 y expand
/* ecd1 */                   _.bytes(0x14);                // memory control
                                                           // bit function
                                                           // --- -------
                                                           // 7-4 video matrix base address
                                                           // 3-1 character data base address
                                                           //  0  unused
/* ecd2 */                   _.bytes(0x0f);                // clear all interrupts
                                                           // interrupt flags
                                                           //  7 1 = interrupt
                                                           // 6-4 unused
                                                           //  3  1 = light pen interrupt
                                                           //  2  1 = sprite to sprite collision interrupt
                                                           //  1  1 = sprite to foreground collision interrupt
                                                           //  0  1 = raster compare interrupt
/* ecd3 */                   _.bytes(0x00);                // all vic IRQs disabeld
                                                           // IRQ enable
                                                           // bit function
                                                           // --- -------
                                                           // 7-4 unused
                                                           //  3  1 = enable light pen
                                                           //  2  1 = enable sprite to sprite collision
                                                           //  1  1 = enable sprite to foreground collision
                                                           //  0  1 = enable raster compare
/* ecd4 */                   _.bytes(0x00);                // sprite 0 to 7 foreground priority
/* ecd5 */                   _.bytes(0x00);                // sprite 0 to 7 multicolour
/* ecd6 */                   _.bytes(0x00);                // sprite 0 to 7 x expand
/* ecd7 */                   _.bytes(0x00);                // sprite 0 to 7 sprite collision
/* ecd8 */                   _.bytes(0x00);                // sprite 0 to 7 foreground collision
/* ecd9 */                   _.bytes(0x0e);                // border colour
/* ecda */                   _.bytes(0x06);                // background colour 0
/* ecdb */                   _.bytes(0x01);                // background colour 1
/* ecdc */                   _.bytes(0x02);                // background colour 2
/* ecdd */                   _.bytes(0x03);                // background colour 3
/* ecde */                   _.bytes(0x04);                // sprite multicolour 0
/* ecdf */                   _.bytes(0x00);                // sprite multicolour 1
/* ece0 */                   _.bytes(0x01);                // sprite 0 colour
/* ece1 */                   _.bytes(0x02);                // sprite 1 colour
/* ece2 */                   _.bytes(0x03);                // sprite 2 colour
/* ece3 */                   _.bytes(0x04);                // sprite 3 colour
/* ece4 */                   _.bytes(0x05);                // sprite 4 colour
/* ece5 */                   _.bytes(0x06);                // sprite 5 colour
/* ece6 */        _`_ece6`;  _.bytes(0x07);                // sprite 6 colour
                                                           // sprite 7 colour is actually the first character of "LOAD" ($4C)

// ------------------------------------------------------- // keyboard buffer for auto load/run
/* ece7 */                   _.bytes(0x4c, 0x4f, 0x41);    // 'load (cr) run (cr)'
/* ecea */                   _.bytes(0x44, 0x0d, 0x52, 0x55, 0x4e, 0x0d);

// ------------------------------------------------------- // low bytes of screen line addresses
/* ecf0 */        _`_ecf0`;  _.bytes(0x00, 0x28, 0x50, 0x78, 0xa0, 0xc8, 0xf0, 0x18);
/* ecf8 */                   _.bytes(0x40, 0x68, 0x90, 0xb8, 0xe0, 0x08, 0x30, 0x58);
/* ed00 */                   _.bytes(0x80, 0xa8, 0xd0, 0xf8, 0x20, 0x48, 0x70, 0x98);
/* ed08 */                   _.bytes(0xc0);

// ------------------------------------------------------- // command serial bus device to TALK
/* ed09 */    _`talk_ed09`;  ORA.imm (0x40);               // OR with the TALK command
/* ed0b */                   _.bytes(0x2c);                // makes next line BIT $2009

// ------------------------------------------------------- // command devices on the serial bus to LISTEN
/* ed0c */  _`listen_ed0c`;  ORA.imm (0x20);               // OR with the LISTEN command
/* ed0e */                   JSR.abs ("_f0a4");            // check RS232 bus idle

// ------------------------------------------------------- // send a control character
/* ed11 */        _`_ed11`;  PHA.imp ();                   // save device address
/* ed12 */                   BIT.zpg ("c3po_0094");        // test deferred character flag
/* ed14 */                   BPL.rel ("_ed20");            // if no defered character continue
/* ed16 */                   SEC.imp ();                   // else flag EOI
/* ed17 */                   ROR.zpg ("tsfcnt_00a3");      // rotate into EOI flag byte
/* ed19 */                   JSR.abs ("_ed40");            // Tx byte on serial bus
/* ed1c */                   LSR.zpg ("c3po_0094");        // clear deferred character flag
/* ed1e */                   LSR.zpg ("tsfcnt_00a3");      // clear EOI flag
/* ed20 */        _`_ed20`;  PLA.imp ();                   // restore the device address

// ------------------------------------------------------- // defer a command
/* ed21 */                   STA.zpg ("bsour_0095");       // save as serial defered character
/* ed23 */                   SEI.imp ();                   // disable the interrupts
/* ed24 */                   JSR.abs ("_ee97");            // set the serial data out high
/* ed27 */                   CMP.imm (0x3f);               // compare read byte with $3F
/* ed29 */                   BNE.rel ("_ed2e");            // branch if not $3F, this branch will always be taken as
                                                           // after VIA 2's PCR is read it is ANDed with $DF, so the
                                                           // result can never be $3F ??
/* ed2b */                   JSR.abs ("_ee85");            // set the serial clock out high
/* ed2e */        _`_ed2e`;  LDA.abs ("ci2pra_dd00");      // read VIA 2 DRA, serial port and video address
/* ed31 */                   ORA.imm (0x08);               // mask xxxx 1xxx, set serial ATN low
/* ed33 */                   STA.abs ("ci2pra_dd00");      // save VIA 2 DRA, serial port and video address
                                                           // if the code drops through to here the serial clock is low and the serial data has been
                                                           // released so the following code will have no effect apart from delaying the first byte
                                                           // by 1ms
                                                           // set the serial clk/data, wait and Tx byte on the serial bus
/* ed36 */        _`_ed36`;  SEI.imp ();                   // disable the interrupts
/* ed37 */                   JSR.abs ("_ee8e");            // set the serial clock out low
/* ed3a */                   JSR.abs ("_ee97");            // set the serial data out high
/* ed3d */                   JSR.abs ("_eeb3");            // 1ms delay

// ------------------------------------------------------- // Tx byte on serial bus
/* ed40 */        _`_ed40`;  SEI.imp ();                   // disable the interrupts
/* ed41 */                   JSR.abs ("_ee97");            // set the serial data out high
/* ed44 */                   JSR.abs ("_eea9");            // get the serial data status in Cb
/* ed47 */                   BCS.rel ("_edad");            // if the serial data is high go do 'device not present'
/* ed49 */                   JSR.abs ("_ee85");            // set the serial clock out high
/* ed4c */                   BIT.zpg ("tsfcnt_00a3");      // test the EOI flag
/* ed4e */                   BPL.rel ("_ed5a");            // if not EOI go ??
                                                           // I think this is the EOI sequence so the serial clock has been released and the serial
                                                           // data is being held low by the peripheral. first up wait for the serial data to rise
/* ed50 */        _`_ed50`;  JSR.abs ("_eea9");            // get the serial data status in Cb
/* ed53 */                   BCC.rel ("_ed50");            // loop if the data is low
                                                           // now the data is high, EOI is signalled by waiting for at least 200us without pulling
                                                           // the serial clock line low again. the listener should respond by pulling the serial
                                                           // data line low
/* ed55 */        _`_ed55`;  JSR.abs ("_eea9");            // get the serial data status in Cb
/* ed58 */                   BCS.rel ("_ed55");            // loop if the data is high
                                                           // the serial data has gone low ending the EOI sequence, now just wait for the serial
                                                           // data line to go high again or, if this isn't an EOI sequence, just wait for the serial
                                                           // data to go high the first time
/* ed5a */        _`_ed5a`;  JSR.abs ("_eea9");            // get the serial data status in Cb
/* ed5d */                   BCC.rel ("_ed5a");            // loop if the data is low
                                                           // serial data is high now pull the clock low, preferably within 60us
/* ed5f */                   JSR.abs ("_ee8e");            // set the serial clock out low
                                                           // now the C64 has to send the eight bits, LSB first. first it sets the serial data line
                                                           // to reflect the bit in the byte, then it sets the serial clock to high. The serial
                                                           // clock is left high for 26 cycles, 23us on a PAL Vic, before it is again pulled low
                                                           // and the serial data is allowed high again
/* ed62 */                   LDA.imm (0x08);               // eight bits to do
/* ed64 */                   STA.zpg ("cntdn_00a5");       // set serial bus bit count
/* ed66 */        _`_ed66`;  LDA.abs ("ci2pra_dd00");      // read VIA 2 DRA, serial port and video address
/* ed69 */                   CMP.abs ("ci2pra_dd00");      // compare it with itself
/* ed6c */                   BNE.rel ("_ed66");            // if changed go try again
/* ed6e */                   ASL.acc ();                   // shift the serial data into Cb
/* ed6f */                   BCC.rel ("_edb0");            // if the serial data is low go do serial bus timeout
/* ed71 */                   ROR.zpg ("bsour_0095");       // rotate the transmit byte
/* ed73 */                   BCS.rel ("_ed7a");            // if the bit = 1 go set the serial data out high
/* ed75 */                   JSR.abs ("_eea0");            // else set the serial data out low
/* ed78 */                   BNE.rel ("_ed7d");            // continue, branch always
/* ed7a */        _`_ed7a`;  JSR.abs ("_ee97");            // set the serial data out high
/* ed7d */        _`_ed7d`;  JSR.abs ("_ee85");            // set the serial clock out high
/* ed80 */                   NOP.imp ();                   // waste ..
/* ed81 */                   NOP.imp ();                   // .. a ..
/* ed82 */                   NOP.imp ();                   // .. cycle ..
/* ed83 */                   NOP.imp ();                   // .. or two
/* ed84 */                   LDA.abs ("ci2pra_dd00");      // read VIA 2 DRA, serial port and video address
/* ed87 */                   AND.imm (0xdf);               // mask xx0x xxxx, set the serial data out high
/* ed89 */                   ORA.imm (0x10);               // mask xxx1 xxxx, set the serial clock out low
/* ed8b */                   STA.abs ("ci2pra_dd00");      // save VIA 2 DRA, serial port and video address
/* ed8e */                   DEC.zpg ("cntdn_00a5");       // decrement the serial bus bit count
/* ed90 */                   BNE.rel ("_ed66");            // loop if not all done
                                                           // now all eight bits have been sent it's up to the peripheral to signal the byte was
                                                           // received by pulling the serial data low. this should be done within one milisecond
/* ed92 */                   LDA.imm (0x04);               // wait for up to about 1ms
/* ed94 */                   STA.abs ("timbhi_dc07");      // save VIA 1 timer B high byte
/* ed97 */                   LDA.imm (0x19);               // load timer B, timer B single shot, start timer B
/* ed99 */                   STA.abs ("ciacrb_dc0f");      // save VIA 1 CRB
/* ed9c */                   LDA.abs ("ciaicr_dc0d");      // read VIA 1 ICR
/* ed9f */        _`_ed9f`;  LDA.abs ("ciaicr_dc0d");      // read VIA 1 ICR
/* eda2 */                   AND.imm (0x02);               // mask 0000 00x0, timer A interrupt
/* eda4 */                   BNE.rel ("_edb0");            // if timer A interrupt go do serial bus timeout
/* eda6 */                   JSR.abs ("_eea9");            // get the serial data status in Cb
/* eda9 */                   BCS.rel ("_ed9f");            // if the serial data is high go wait some more
/* edab */                   CLI.imp ();                   // enable the interrupts
/* edac */                   RTS.imp ();
                                                           // device not present
/* edad */        _`_edad`;  LDA.imm (0x80);               // error $80, device not present
/* edaf */                   _.bytes(0x2c);                // makes next line BIT $03A9
                                                           // timeout on serial bus
/* edb0 */        _`_edb0`;  LDA.imm (0x03);               // error $03, read timeout, write timeout
/* edb2 */        _`_edb2`;  JSR.abs ("_fe1c");            // OR into the serial status byte
/* edb5 */                   CLI.imp ();                   // enable the interrupts
/* edb6 */                   CLC.imp ();                   // clear for branch
/* edb7 */                   BCC.rel ("_ee03");            // ATN high, delay, clock high then data high, branch always

// ------------------------------------------------------- // send secondary address after LISTEN
/* edb9 */  _`second_edb9`;  STA.zpg ("bsour_0095");       // save the defered Tx byte
/* edbb */                   JSR.abs ("_ed36");            // set the serial clk/data, wait and Tx the byte

// ------------------------------------------------------- // set serial ATN high
/* edbe */        _`_edbe`;  LDA.abs ("ci2pra_dd00");      // read VIA 2 DRA, serial port and video address
/* edc1 */                   AND.imm (0xf7);               // mask xxxx 0xxx, set serial ATN high
/* edc3 */                   STA.abs ("ci2pra_dd00");      // save VIA 2 DRA, serial port and video address
/* edc6 */                   RTS.imp ();

// ------------------------------------------------------- // send secondary address after TALK
/* edc7 */    _`tksa_edc7`;  STA.zpg ("bsour_0095");       // save the defered Tx byte
/* edc9 */                   JSR.abs ("_ed36");            // set the serial clk/data, wait and Tx the byte

// ------------------------------------------------------- // wait for the serial bus end after send
                                                           // return address from patch 6
/* edcc */        _`_edcc`;  SEI.imp ();                   // disable the interrupts
/* edcd */                   JSR.abs ("_eea0");            // set the serial data out low
/* edd0 */                   JSR.abs ("_edbe");            // set serial ATN high
/* edd3 */                   JSR.abs ("_ee85");            // set the serial clock out high
/* edd6 */        _`_edd6`;  JSR.abs ("_eea9");            // get the serial data status in Cb
/* edd9 */                   BMI.rel ("_edd6");            // loop if the clock is high
/* eddb */                   CLI.imp ();                   // enable the interrupts
/* eddc */                   RTS.imp ();

// ------------------------------------------------------- // output a byte to the serial bus
/* eddd */   _`ciout_eddd`;  BIT.zpg ("c3po_0094");        // test the deferred character flag
/* eddf */                   BMI.rel ("_ede6");            // if there is a defered character go send it
/* ede1 */                   SEC.imp ();                   // set carry
/* ede2 */                   ROR.zpg ("c3po_0094");        // shift into the deferred character flag
/* ede4 */                   BNE.rel ("_edeb");            // save the byte and exit, branch always
/* ede6 */        _`_ede6`;  PHA.imp ();                   // save the byte
/* ede7 */                   JSR.abs ("_ed40");            // Tx byte on serial bus
/* edea */                   PLA.imp ();                   // restore the byte
/* edeb */        _`_edeb`;  STA.zpg ("bsour_0095");       // save the defered Tx byte
/* eded */                   CLC.imp ();                   // flag ok
/* edee */                   RTS.imp ();

// ------------------------------------------------------- // command serial bus to UNTALK
/* edef */   _`untlk_edef`;  SEI.imp ();                   // disable the interrupts
/* edf0 */                   JSR.abs ("_ee8e");            // set the serial clock out low
/* edf3 */                   LDA.abs ("ci2pra_dd00");      // read VIA 2 DRA, serial port and video address
/* edf6 */                   ORA.imm (0x08);               // mask xxxx 1xxx, set the serial ATN low
/* edf8 */                   STA.abs ("ci2pra_dd00");      // save VIA 2 DRA, serial port and video address
/* edfb */                   LDA.imm (0x5f);               // set the UNTALK command
/* edfd */                   _.bytes(0x2c);                // makes next line BIT $3FA9

// ------------------------------------------------------- // command serial bus to UNLISTEN
/* edfe */   _`unlsn_edfe`;  LDA.imm (0x3f);               // set the UNLISTEN command
/* ee00 */                   JSR.abs ("_ed11");            // send a control character
/* ee03 */        _`_ee03`;  JSR.abs ("_edbe");            // set serial ATN high
                                                           // 1ms delay, clock high then data high
/* ee06 */        _`_ee06`;  TXA.imp ();                   // save the device number
/* ee07 */                   LDX.imm (0x0a);               // short delay
/* ee09 */        _`_ee09`;  DEX.imp ();                   // decrement the count
/* ee0a */                   BNE.rel ("_ee09");            // loop if not all done
/* ee0c */                   TAX.imp ();                   // restore the device number
/* ee0d */                   JSR.abs ("_ee85");            // set the serial clock out high
/* ee10 */                   JMP.abs ("_ee97");            // set the serial data out high and return

// ------------------------------------------------------- // input a byte from the serial bus
/* ee13 */   _`acptr_ee13`;  SEI.imp ();                   // disable the interrupts
/* ee14 */                   LDA.imm (0x00);               // set 0 bits to do, will flag EOI on timeour
/* ee16 */                   STA.zpg ("cntdn_00a5");       // save the serial bus bit count
/* ee18 */                   JSR.abs ("_ee85");            // set the serial clock out high
/* ee1b */        _`_ee1b`;  JSR.abs ("_eea9");            // get the serial data status in Cb
/* ee1e */                   BPL.rel ("_ee1b");            // loop if the serial clock is low
/* ee20 */        _`_ee20`;  LDA.imm (0x01);               // set the timeout count high byte
/* ee22 */                   STA.abs ("timbhi_dc07");      // save VIA 1 timer B high byte
/* ee25 */                   LDA.imm (0x19);               // load timer B, timer B single shot, start timer B
/* ee27 */                   STA.abs ("ciacrb_dc0f");      // save VIA 1 CRB
/* ee2a */                   JSR.abs ("_ee97");            // set the serial data out high
/* ee2d */                   LDA.abs ("ciaicr_dc0d");      // read VIA 1 ICR
/* ee30 */        _`_ee30`;  LDA.abs ("ciaicr_dc0d");      // read VIA 1 ICR
/* ee33 */                   AND.imm (0x02);               // mask 0000 00x0, timer A interrupt
/* ee35 */                   BNE.rel ("_ee3e");            // if timer A interrupt go ??
/* ee37 */                   JSR.abs ("_eea9");            // get the serial data status in Cb
/* ee3a */                   BMI.rel ("_ee30");            // loop if the serial clock is low
/* ee3c */                   BPL.rel ("_ee56");            // else go set 8 bits to do, branch always
                                                           // timer A timed out
/* ee3e */        _`_ee3e`;  LDA.zpg ("cntdn_00a5");       // get the serial bus bit count
/* ee40 */                   BEQ.rel ("_ee47");            // if not already EOI then go flag EOI
/* ee42 */                   LDA.imm (0x02);               // else error $02, read timeour
/* ee44 */                   JMP.abs ("_edb2");            // set the serial status and exit
/* ee47 */        _`_ee47`;  JSR.abs ("_eea0");            // set the serial data out low
/* ee4a */                   JSR.abs ("_ee85");            // set the serial clock out high
/* ee4d */                   LDA.imm (0x40);               // set EOI
/* ee4f */                   JSR.abs ("_fe1c");            // OR into the serial status byte
/* ee52 */                   INC.zpg ("cntdn_00a5");       // increment the serial bus bit count, do error on the next
                                                           // timeout
/* ee54 */                   BNE.rel ("_ee20");            // go try again, branch always
/* ee56 */        _`_ee56`;  LDA.imm (0x08);               // set 8 bits to do
/* ee58 */                   STA.zpg ("cntdn_00a5");       // save the serial bus bit count
/* ee5a */        _`_ee5a`;  LDA.abs ("ci2pra_dd00");      // read VIA 2 DRA, serial port and video address
/* ee5d */                   CMP.abs ("ci2pra_dd00");      // compare it with itself
/* ee60 */                   BNE.rel ("_ee5a");            // if changing go try again
/* ee62 */                   ASL.acc ();                   // shift the serial data into the carry
/* ee63 */                   BPL.rel ("_ee5a");            // loop while the serial clock is low
/* ee65 */                   ROR.zpg ("tbtcnt_00a4");      // shift the data bit into the receive byte
/* ee67 */        _`_ee67`;  LDA.abs ("ci2pra_dd00");      // read VIA 2 DRA, serial port and video address
/* ee6a */                   CMP.abs ("ci2pra_dd00");      // compare it with itself
/* ee6d */                   BNE.rel ("_ee67");            // if changing go try again
/* ee6f */                   ASL.acc ();                   // shift the serial data into the carry
/* ee70 */                   BMI.rel ("_ee67");            // loop while the serial clock is high
/* ee72 */                   DEC.zpg ("cntdn_00a5");       // decrement the serial bus bit count
/* ee74 */                   BNE.rel ("_ee5a");            // loop if not all done
/* ee76 */                   JSR.abs ("_eea0");            // set the serial data out low
/* ee79 */                   BIT.zpg ("status_0090");      // test the serial status byte
/* ee7b */                   BVC.rel ("_ee80");            // if EOI not set skip the bus end sequence
/* ee7d */                   JSR.abs ("_ee06");            // 1ms delay, clock high then data high
/* ee80 */        _`_ee80`;  LDA.zpg ("tbtcnt_00a4");      // get the receive byte
/* ee82 */                   CLI.imp ();                   // enable the interrupts
/* ee83 */                   CLC.imp ();                   // flag ok
/* ee84 */                   RTS.imp ();

// ------------------------------------------------------- // set the serial clock out high
/* ee85 */        _`_ee85`;  LDA.abs ("ci2pra_dd00");      // read VIA 2 DRA, serial port and video address
/* ee88 */                   AND.imm (0xef);               // mask xxx0 xxxx, set serial clock out high
/* ee8a */                   STA.abs ("ci2pra_dd00");      // save VIA 2 DRA, serial port and video address
/* ee8d */                   RTS.imp ();

// ------------------------------------------------------- // set the serial clock out low
/* ee8e */        _`_ee8e`;  LDA.abs ("ci2pra_dd00");      // read VIA 2 DRA, serial port and video address
/* ee91 */                   ORA.imm (0x10);               // mask xxx1 xxxx, set serial clock out low
/* ee93 */                   STA.abs ("ci2pra_dd00");      // save VIA 2 DRA, serial port and video address
/* ee96 */                   RTS.imp ();

// ------------------------------------------------------- // set the serial data out high
/* ee97 */        _`_ee97`;  LDA.abs ("ci2pra_dd00");      // read VIA 2 DRA, serial port and video address
/* ee9a */                   AND.imm (0xdf);               // mask xx0x xxxx, set serial data out high
/* ee9c */                   STA.abs ("ci2pra_dd00");      // save VIA 2 DRA, serial port and video address
/* ee9f */                   RTS.imp ();

// ------------------------------------------------------- // set the serial data out low
/* eea0 */        _`_eea0`;  LDA.abs ("ci2pra_dd00");      // read VIA 2 DRA, serial port and video address
/* eea3 */                   ORA.imm (0x20);               // mask xx1x xxxx, set serial data out low
/* eea5 */                   STA.abs ("ci2pra_dd00");      // save VIA 2 DRA, serial port and video address
/* eea8 */                   RTS.imp ();

// ------------------------------------------------------- // get the serial data status in Cb
/* eea9 */        _`_eea9`;  LDA.abs ("ci2pra_dd00");      // read VIA 2 DRA, serial port and video address
/* eeac */                   CMP.abs ("ci2pra_dd00");      // compare it with itself
/* eeaf */                   BNE.rel ("_eea9");            // if changing got try again
/* eeb1 */                   ASL.acc ();                   // shift the serial data into Cb
/* eeb2 */                   RTS.imp ();

// ------------------------------------------------------- // 1ms delay
/* eeb3 */        _`_eeb3`;  TXA.imp ();                   // save X
/* eeb4 */                   LDX.imm (0xb8);               // set the loop count
/* eeb6 */        _`_eeb6`;  DEX.imp ();                   // decrement the loop count
/* eeb7 */                   BNE.rel ("_eeb6");            // loop if more to do
/* eeb9 */                   TAX.imp ();                   // restore X
/* eeba */                   RTS.imp ();

// ------------------------------------------------------- // RS232 Tx NMI routine
/* eebb */        _`_eebb`;  LDA.zpg ("bitts_00b4");       // get RS232 bit count
/* eebd */                   BEQ.rel ("_ef06");            // if zero go setup next RS232 Tx byte and return
/* eebf */                   BMI.rel ("_ef00");            // if -ve go do stop bit(s)
                                                           // else bit count is non zero and +ve
/* eec1 */                   LSR.zpg ("rodata_00b6");      // shift RS232 output byte buffer
/* eec3 */                   LDX.imm (0x00);               // set $00 for bit = 0
/* eec5 */                   BCC.rel ("_eec8");            // branch if bit was 0
/* eec7 */                   DEX.imp ();                   // set $FF for bit = 1
/* eec8 */        _`_eec8`;  TXA.imp ();                   // copy bit to A
/* eec9 */                   EOR.zpg ("roprty_00bd");      // EOR with RS232 parity byte
/* eecb */                   STA.zpg ("roprty_00bd");      // save RS232 parity byte
/* eecd */                   DEC.zpg ("bitts_00b4");       // decrement RS232 bit count
/* eecf */                   BEQ.rel ("_eed7");            // if RS232 bit count now zero go do parity bit
                                                           // save bit and exit
/* eed1 */        _`_eed1`;  TXA.imp ();                   // copy bit to A
/* eed2 */                   AND.imm (0x04);               // mask 0000 0x00, RS232 Tx DATA bit
/* eed4 */                   STA.zpg ("nxtbit_00b5");      // save the next RS232 data bit to send
/* eed6 */                   RTS.imp ();

// ------------------------------------------------------- // do RS232 parity bit, enters with RS232 bit count = 0
/* eed7 */        _`_eed7`;  LDA.imm (0x20);               // mask 00x0 0000, parity enable bit
/* eed9 */                   BIT.abs ("m51cdr_0294");      // test the pseudo 6551 command register
/* eedc */                   BEQ.rel ("_eef2");            // if parity disabled go ??
/* eede */                   BMI.rel ("_eefc");            // if fixed mark or space parity go ??
/* eee0 */                   BVS.rel ("_eef6");            // if even parity go ??
                                                           // else odd parity
/* eee2 */                   LDA.zpg ("roprty_00bd");      // get RS232 parity byte
/* eee4 */                   BNE.rel ("_eee7");            // if parity not zero leave parity bit = 0
/* eee6 */        _`_eee6`;  DEX.imp ();                   // make parity bit = 1
/* eee7 */        _`_eee7`;  DEC.zpg ("bitts_00b4");       // decrement RS232 bit count, 1 stop bit
/* eee9 */                   LDA.abs ("m51ctr_0293");      // get pseudo 6551 control register
/* eeec */                   BPL.rel ("_eed1");            // if 1 stop bit save parity bit and exit
                                                           // else two stop bits ..
/* eeee */                   DEC.zpg ("bitts_00b4");       // decrement RS232 bit count, 2 stop bits
/* eef0 */                   BNE.rel ("_eed1");            // save bit and exit, branch always
                                                           // parity is disabled so the parity bit becomes the first,
                                                           // and possibly only, stop bit. to do this increment the bit
                                                           // count which effectively decrements the stop bit count.
/* eef2 */        _`_eef2`;  INC.zpg ("bitts_00b4");       // increment RS232 bit count, = -1 stop bit
/* eef4 */                   BNE.rel ("_eee6");            // set stop bit = 1 and exit
                                                           // do even parity
/* eef6 */        _`_eef6`;  LDA.zpg ("roprty_00bd");      // get RS232 parity byte
/* eef8 */                   BEQ.rel ("_eee7");            // if parity zero leave parity bit = 0
/* eefa */                   BNE.rel ("_eee6");            // else make parity bit = 1, branch always
                                                           // fixed mark or space parity
/* eefc */        _`_eefc`;  BVS.rel ("_eee7");            // if fixed space parity leave parity bit = 0
/* eefe */                   BVC.rel ("_eee6");            // else fixed mark parity make parity bit = 1, branch always
                                                           // decrement stop bit count, set stop bit = 1 and exit. $FF is one stop bit, $FE is two
                                                           // stop bits
/* ef00 */        _`_ef00`;  INC.zpg ("bitts_00b4");       // decrement RS232 bit count
/* ef02 */                   LDX.imm (0xff);               // set stop bit = 1
/* ef04 */                   BNE.rel ("_eed1");            // save stop bit and exit, branch always

// ------------------------------------------------------- // setup next RS232 Tx byte
/* ef06 */        _`_ef06`;  LDA.abs ("m51cdr_0294");      // read the 6551 pseudo command register
/* ef09 */                   LSR.acc ();                   // handshake bit inot Cb
/* ef0a */                   BCC.rel ("_ef13");            // if 3 line interface go ??
/* ef0c */                   BIT.abs ("ci2prb_dd01");      // test VIA 2 DRB, RS232 port
/* ef0f */                   BPL.rel ("_ef2e");            // if DSR = 0 set DSR signal not present and exit
/* ef11 */                   BVC.rel ("_ef31");            // if CTS = 0 set CTS signal not present and exit
                                                           // was 3 line interface
/* ef13 */        _`_ef13`;  LDA.imm (0x00);               // clear A
/* ef15 */                   STA.zpg ("roprty_00bd");      // clear the RS232 parity byte
/* ef17 */                   STA.zpg ("nxtbit_00b5");      // clear the RS232 next bit to send
/* ef19 */                   LDX.abs ("bitnum_0298");      // get the number of bits to be sent/received
/* ef1c */                   STX.zpg ("bitts_00b4");       // set the RS232 bit count
/* ef1e */                   LDY.abs ("rodbs_029d");       // get the index to the Tx buffer start
/* ef21 */                   CPY.abs ("rodbe_029e");       // compare it with the index to the Tx buffer end
/* ef24 */                   BEQ.rel ("_ef39");            // if all done go disable T?? interrupt and return
/* ef26 */                   LDA.iny ("robuf+0_00f9");     // else get a byte from the buffer
/* ef28 */                   STA.zpg ("rodata_00b6");      // save it to the RS232 output byte buffer
/* ef2a */                   INC.abs ("rodbs_029d");       // increment the index to the Tx buffer start
/* ef2d */                   RTS.imp ();

// ------------------------------------------------------- // set DSR signal not present
/* ef2e */        _`_ef2e`;  LDA.imm (0x40);               // set DSR signal not present
/* ef30 */                   _.bytes(0x2c);                // makes next line BIT $10A9

// ------------------------------------------------------- // set CTS signal not present
/* ef31 */        _`_ef31`;  LDA.imm (0x10);               // set CTS signal not present
/* ef33 */                   ORA.abs ("rsstat_0297");      // OR it with the RS232 status register
/* ef36 */                   STA.abs ("rsstat_0297");      // save the RS232 status register

// ------------------------------------------------------- // disable timer A interrupt
/* ef39 */        _`_ef39`;  LDA.imm (0x01);               // disable timer A interrupt

// ------------------------------------------------------- // set VIA 2 ICR from A
/* ef3b */        _`_ef3b`;  STA.abs ("ci2icr_dd0d");      // save VIA 2 ICR
/* ef3e */                   EOR.abs ("enabl_02a1");       // EOR with the RS-232 interrupt enable byte
/* ef41 */                   ORA.imm (0x80);               // set the interrupts enable bit
/* ef43 */                   STA.abs ("enabl_02a1");       // save the RS-232 interrupt enable byte
/* ef46 */                   STA.abs ("ci2icr_dd0d");      // save VIA 2 ICR
/* ef49 */                   RTS.imp ();

// ------------------------------------------------------- // compute bit count
/* ef4a */        _`_ef4a`;  LDX.imm (0x09);               // set bit count to 9, 8 data + 1 stop bit
/* ef4c */                   LDA.imm (0x20);               // mask for 8/7 data bits
/* ef4e */                   BIT.abs ("m51ctr_0293");      // test pseudo 6551 control register
/* ef51 */                   BEQ.rel ("_ef54");            // branch if 8 bits
/* ef53 */                   DEX.imp ();                   // else decrement count for 7 data bits
/* ef54 */        _`_ef54`;  BVC.rel ("_ef58");            // branch if 7 bits
/* ef56 */                   DEX.imp ();                   // else decrement count ..
/* ef57 */                   DEX.imp ();                   // .. for 5 data bits
/* ef58 */        _`_ef58`;  RTS.imp ();

// ------------------------------------------------------- // RS232 Rx NMI
/* ef59 */        _`_ef59`;  LDX.zpg ("rinone_00a9");      // get start bit check flag
/* ef5b */                   BNE.rel ("_ef90");            // if no start bit received go ??
/* ef5d */                   DEC.zpg ("bitci_00a8");       // decrement receiver bit count in
/* ef5f */                   BEQ.rel ("_ef97");            // if the byte is complete go add it to the buffer
/* ef61 */                   BMI.rel ("_ef70");
/* ef63 */                   LDA.zpg ("inbit_00a7");       // get the RS232 received data bit
/* ef65 */                   EOR.zpg ("riprty_00ab");      // EOR with the receiver parity bit
/* ef67 */                   STA.zpg ("riprty_00ab");      // save the receiver parity bit
/* ef69 */                   LSR.zpg ("inbit_00a7");       // shift the RS232 received data bit
/* ef6b */                   ROR.zpg ("ridata_00aa");
/* ef6d */        _`_ef6d`;  RTS.imp ();
/* ef6e */        _`_ef6e`;  DEC.zpg ("bitci_00a8");       // decrement receiver bit count in
/* ef70 */        _`_ef70`;  LDA.zpg ("inbit_00a7");       // get the RS232 received data bit
/* ef72 */                   BEQ.rel ("_efdb");
/* ef74 */                   LDA.abs ("m51ctr_0293");      // get pseudo 6551 control register
/* ef77 */                   ASL.acc ();                   // shift the stop bit flag to Cb
/* ef78 */                   LDA.imm (0x01);               // + 1
/* ef7a */                   ADC.zpg ("bitci_00a8");       // add receiver bit count in
/* ef7c */                   BNE.rel ("_ef6d");            // exit, branch always

// ------------------------------------------------------- // setup to receive an RS232 bit
/* ef7e */        _`_ef7e`;  LDA.imm (0x90);               // enable FLAG interrupt
/* ef80 */                   STA.abs ("ci2icr_dd0d");      // save VIA 2 ICR
/* ef83 */                   ORA.abs ("enabl_02a1");       // OR with the RS-232 interrupt enable byte
/* ef86 */                   STA.abs ("enabl_02a1");       // save the RS-232 interrupt enable byte
/* ef89 */                   STA.zpg ("rinone_00a9");      // set start bit check flag, set no start bit received
/* ef8b */                   LDA.imm (0x02);               // disable timer B interrupt
/* ef8d */                   JMP.abs ("_ef3b");            // set VIA 2 ICR from A and return

// ------------------------------------------------------- // no RS232 start bit received
/* ef90 */        _`_ef90`;  LDA.zpg ("inbit_00a7");       // get the RS232 received data bit
/* ef92 */                   BNE.rel ("_ef7e");            // if ?? go setup to receive an RS232 bit and return
/* ef94 */                   JMP.abs ("_e4d3");            // flag the RS232 start bit and set the parity

// ------------------------------------------------------- // received a whole byte, add it to the buffer
/* ef97 */        _`_ef97`;  LDY.abs ("ridbe_029b");       // get index to Rx buffer end
/* ef9a */                   INY.imp ();                   // increment index
/* ef9b */                   CPY.abs ("ridbs_029c");       // compare with index to Rx buffer start
/* ef9e */                   BEQ.rel ("_efca");            // if buffer full go do Rx overrun error
/* efa0 */                   STY.abs ("ridbe_029b");       // save index to Rx buffer end
/* efa3 */                   DEY.imp ();                   // decrement index
/* efa4 */                   LDA.zpg ("ridata_00aa");      // get assembled byte
/* efa6 */                   LDX.abs ("bitnum_0298");      // get bit count
/* efa9 */        _`_efa9`;  CPX.imm (0x09);               // compare with byte + stop
/* efab */                   BEQ.rel ("_efb1");            // branch if all nine bits received
/* efad */                   LSR.acc ();                   // else shift byte
/* efae */                   INX.imp ();                   // increment bit count
/* efaf */                   BNE.rel ("_efa9");            // loop, branch always
/* efb1 */        _`_efb1`;  STA.iny ("ribuf+0_00f7");     // save received byte to Rx buffer
/* efb3 */                   LDA.imm (0x20);               // mask 00x0 0000, parity enable bit
/* efb5 */                   BIT.abs ("m51cdr_0294");      // test the pseudo 6551 command register
/* efb8 */                   BEQ.rel ("_ef6e");            // branch if parity disabled
/* efba */                   BMI.rel ("_ef6d");            // branch if mark or space parity
/* efbc */                   LDA.zpg ("inbit_00a7");       // get the RS232 received data bit
/* efbe */                   EOR.zpg ("riprty_00ab");      // EOR with the receiver parity bit
/* efc0 */                   BEQ.rel ("_efc5");
/* efc2 */                   BVS.rel ("_ef6d");            // if ?? just exit
/* efc4 */                   _.bytes(0x2c);                // makes next line BIT $A650
/* efc5 */        _`_efc5`;  BVC.rel ("_ef6d");            // if ?? just exit
/* efc7 */                   LDA.imm (0x01);               // set Rx parity error
/* efc9 */                   _.bytes(0x2c);                // makes next line BIT $04A9
/* efca */        _`_efca`;  LDA.imm (0x04);               // set Rx overrun error
/* efcc */                   _.bytes(0x2c);                // makes next line BIT $80A9
/* efcd */        _`_efcd`;  LDA.imm (0x80);               // set Rx break error
/* efcf */                   _.bytes(0x2c);                // makes next line BIT $02A9
/* efd0 */        _`_efd0`;  LDA.imm (0x02);               // set Rx frame error
/* efd2 */                   ORA.abs ("rsstat_0297");      // OR it with the RS232 status byte
/* efd5 */                   STA.abs ("rsstat_0297");      // save the RS232 status byte
/* efd8 */                   JMP.abs ("_ef7e");            // setup to receive an RS232 bit and return
/* efdb */        _`_efdb`;  LDA.zpg ("ridata_00aa");
/* efdd */                   BNE.rel ("_efd0");            // if ?? do frame error
/* efdf */                   BEQ.rel ("_efcd");            // else do break error, branch always

// ------------------------------------------------------- // open RS232 channel for output
/* efe1 */        _`_efe1`;  STA.zpg ("dflto_009a");       // save the output device number
/* efe3 */                   LDA.abs ("m51cdr_0294");      // read the pseudo 6551 command register
/* efe6 */                   LSR.acc ();                   // shift handshake bit to carry
/* efe7 */                   BCC.rel ("_f012");            // if 3 line interface go ??
/* efe9 */                   LDA.imm (0x02);               // mask 0000 00x0, RTS out
/* efeb */                   BIT.abs ("ci2prb_dd01");      // test VIA 2 DRB, RS232 port
/* efee */                   BPL.rel ("_f00d");            // if DSR = 0 set DSR not present and exit
/* eff0 */                   BNE.rel ("_f012");            // if RTS = 1 just exit
/* eff2 */        _`_eff2`;  LDA.abs ("enabl_02a1");       // get the RS-232 interrupt enable byte
/* eff5 */                   AND.imm (0x02);               // mask 0000 00x0, timer B interrupt
/* eff7 */                   BNE.rel ("_eff2");            // loop while the timer B interrupt is enebled
/* eff9 */        _`_eff9`;  BIT.abs ("ci2prb_dd01");      // test VIA 2 DRB, RS232 port
/* effc */                   BVS.rel ("_eff9");            // loop while CTS high
/* effe */                   LDA.abs ("ci2prb_dd01");      // read VIA 2 DRB, RS232 port
/* f001 */                   ORA.imm (0x02);               // mask xxxx xx1x, set RTS high
/* f003 */                   STA.abs ("ci2prb_dd01");      // save VIA 2 DRB, RS232 port
/* f006 */        _`_f006`;  BIT.abs ("ci2prb_dd01");      // test VIA 2 DRB, RS232 port
/* f009 */                   BVS.rel ("_f012");            // exit if CTS high
/* f00b */                   BMI.rel ("_f006");            // loop while DSR high
                                                           // set no DSR and exit
/* f00d */        _`_f00d`;  LDA.imm (0x40);               // set DSR signal not present
/* f00f */                   STA.abs ("rsstat_0297");      // save the RS232 status register
/* f012 */        _`_f012`;  CLC.imp ();                   // flag ok
/* f013 */                   RTS.imp ();

// ------------------------------------------------------- // send byte to the RS232 buffer
/* f014 */        _`_f014`;  JSR.abs ("_f028");            // setup for RS232 transmit
                                                           // send byte to the RS232 buffer, no setup
/* f017 */        _`_f017`;  LDY.abs ("rodbe_029e");       // get index to Tx buffer end
/* f01a */                   INY.imp ();                   // + 1
/* f01b */                   CPY.abs ("rodbs_029d");       // compare with index to Tx buffer start
/* f01e */                   BEQ.rel ("_f014");            // loop while buffer full
/* f020 */                   STY.abs ("rodbe_029e");       // set index to Tx buffer end
/* f023 */                   DEY.imp ();                   // index to available buffer byte
/* f024 */                   LDA.zpg ("ptr1_009e");        // read the RS232 character buffer
/* f026 */                   STA.iny ("robuf+0_00f9");     // save the byte to the buffer

// ------------------------------------------------------- // setup for RS232 transmit
/* f028 */        _`_f028`;  LDA.abs ("enabl_02a1");       // get the RS-232 interrupt enable byte
/* f02b */                   LSR.acc ();                   // shift the enable bit to Cb
/* f02c */                   BCS.rel ("_f04c");            // if interrupts are enabled just exit
/* f02e */                   LDA.imm (0x10);               // start timer A
/* f030 */                   STA.abs ("ci2cra_dd0e");      // save VIA 2 CRA
/* f033 */                   LDA.abs ("baudof+0_0299");    // get the baud rate bit time low byte
/* f036 */                   STA.abs ("ti2alo_dd04");      // save VIA 2 timer A low byte
/* f039 */                   LDA.abs ("baudof+1_029a");    // get the baud rate bit time high byte
/* f03c */                   STA.abs ("ti2ahi_dd05");      // save VIA 2 timer A high byte
/* f03f */                   LDA.imm (0x81);               // enable timer A interrupt
/* f041 */                   JSR.abs ("_ef3b");            // set VIA 2 ICR from A
/* f044 */                   JSR.abs ("_ef06");            // setup next RS232 Tx byte
/* f047 */                   LDA.imm (0x11);               // load timer A, start timer A
/* f049 */                   STA.abs ("ci2cra_dd0e");      // save VIA 2 CRA
/* f04c */        _`_f04c`;  RTS.imp ();

// ------------------------------------------------------- // input from RS232 buffer
/* f04d */        _`_f04d`;  STA.zpg ("dfltn_0099");       // save the input device number
/* f04f */                   LDA.abs ("m51cdr_0294");      // get pseudo 6551 command register
/* f052 */                   LSR.acc ();                   // shift the handshake bit to Cb
/* f053 */                   BCC.rel ("_f07d");            // if 3 line interface go ??
/* f055 */                   AND.imm (0x08);               // mask the duplex bit, pseudo 6551 command is >> 1
/* f057 */                   BEQ.rel ("_f07d");            // if full duplex go ??
/* f059 */                   LDA.imm (0x02);               // mask 0000 00x0, RTS out
/* f05b */                   BIT.abs ("ci2prb_dd01");      // test VIA 2 DRB, RS232 port
/* f05e */                   BPL.rel ("_f00d");            // if DSR = 0 set no DSR and exit
/* f060 */                   BEQ.rel ("_f084");            // if RTS = 0 just exit
/* f062 */        _`_f062`;  LDA.abs ("enabl_02a1");       // get the RS-232 interrupt enable byte
/* f065 */                   LSR.acc ();                   // shift the timer A interrupt enable bit to Cb
/* f066 */                   BCS.rel ("_f062");            // loop while the timer A interrupt is enabled
/* f068 */                   LDA.abs ("ci2prb_dd01");      // read VIA 2 DRB, RS232 port
/* f06b */                   AND.imm (0xfd);               // mask xxxx xx0x, clear RTS out
/* f06d */                   STA.abs ("ci2prb_dd01");      // save VIA 2 DRB, RS232 port
/* f070 */        _`_f070`;  LDA.abs ("ci2prb_dd01");      // read VIA 2 DRB, RS232 port
/* f073 */                   AND.imm (0x04);               // mask xxxx x1xx, DTR in
/* f075 */                   BEQ.rel ("_f070");            // loop while DTR low
/* f077 */        _`_f077`;  LDA.imm (0x90);               // enable the FLAG interrupt
/* f079 */                   CLC.imp ();                   // flag ok
/* f07a */                   JMP.abs ("_ef3b");            // set VIA 2 ICR from A and return
/* f07d */        _`_f07d`;  LDA.abs ("enabl_02a1");       // get the RS-232 interrupt enable byte
/* f080 */                   AND.imm (0x12);               // mask 000x 00x0
/* f082 */                   BEQ.rel ("_f077");            // if FLAG or timer B bits set go enable the FLAG inetrrupt
/* f084 */        _`_f084`;  CLC.imp ();                   // flag ok
/* f085 */                   RTS.imp ();

// ------------------------------------------------------- // get byte from RS232 buffer
/* f086 */        _`_f086`;  LDA.abs ("rsstat_0297");      // get the RS232 status register
/* f089 */                   LDY.abs ("ridbs_029c");       // get index to Rx buffer start
/* f08c */                   CPY.abs ("ridbe_029b");       // compare with index to Rx buffer end
/* f08f */                   BEQ.rel ("_f09c");            // return null if buffer empty
/* f091 */                   AND.imm (0xf7);               // clear the Rx buffer empty bit
/* f093 */                   STA.abs ("rsstat_0297");      // save the RS232 status register
/* f096 */                   LDA.iny ("ribuf+0_00f7");     // get byte from Rx buffer
/* f098 */                   INC.abs ("ridbs_029c");       // increment index to Rx buffer start
/* f09b */                   RTS.imp ();
/* f09c */        _`_f09c`;  ORA.imm (0x08);               // set the Rx buffer empty bit
/* f09e */                   STA.abs ("rsstat_0297");      // save the RS232 status register
/* f0a1 */                   LDA.imm (0x00);               // return null
/* f0a3 */                   RTS.imp ();

// ------------------------------------------------------- // check RS232 bus idle
/* f0a4 */        _`_f0a4`;  PHA.imp ();                   // save A
/* f0a5 */                   LDA.abs ("enabl_02a1");       // get the RS-232 interrupt enable byte
/* f0a8 */                   BEQ.rel ("_f0bb");            // if no interrupts enabled just exit
/* f0aa */        _`_f0aa`;  LDA.abs ("enabl_02a1");       // get the RS-232 interrupt enable byte
/* f0ad */                   AND.imm (0x03);               // mask 0000 00xx, the error bits
/* f0af */                   BNE.rel ("_f0aa");            // if there are errors loop
/* f0b1 */                   LDA.imm (0x10);               // disable FLAG interrupt
/* f0b3 */                   STA.abs ("ci2icr_dd0d");      // save VIA 2 ICR
/* f0b6 */                   LDA.imm (0x00);               // clear A
/* f0b8 */                   STA.abs ("enabl_02a1");       // clear the RS-232 interrupt enable byte
/* f0bb */        _`_f0bb`;  PLA.imp ();                   // restore A
/* f0bc */                   RTS.imp ();

// ------------------------------------------------------- // kernel I/O messages
                                                           // I/O ERROR #
/* f0bd */        _`_f0bd`;  _.bytes(0x0d, 0x49, 0x2f, 0x4f, 0x20, 0x45, 0x52, 0x52);
/* f0c5 */                   _.bytes(0x4f, 0x52, 0x20, 0xa3);
                                                           // SEARCHING
/* f0c9 */                   _.bytes(0x0d, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x49);
/* f0d1 */                   _.bytes(0x4e, 0x47, 0xa0);
/* f0d4 */                   _.bytes(0x46, 0x4f, 0x52, 0xa0);
                                                           // PRESS PLAY ON TAPE
/* f0d8 */                   _.bytes(0x0d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x20, 0x50);
/* f0e0 */                   _.bytes(0x4c, 0x41, 0x59, 0x20, 0x4f, 0x4e, 0x20, 0x54);
/* f0e8 */                   _.bytes(0x41, 0x50, 0xc5);
                                                           // PRESS RECORD & PLAY ON TAPE
/* f0eb */                   _.bytes(0x50, 0x52, 0x45, 0x53, 0x53, 0x20, 0x52, 0x45);
/* f0f3 */                   _.bytes(0x43, 0x4f, 0x52, 0x44, 0x20, 0x26, 0x20, 0x50);
/* f0fb */                   _.bytes(0x4c, 0x41, 0x59, 0x20, 0x4f, 0x4e, 0x20, 0x54);
/* f103 */                   _.bytes(0x41, 0x50, 0xc5);
                                                           // LOADING
/* f106 */                   _.bytes(0x0d, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0xc7);
                                                           // SAVING
/* f10e */                   _.bytes(0x0d, 0x53, 0x41, 0x56, 0x49, 0x4e, 0x47, 0xa0);
                                                           // VERIFYING
/* f116 */                   _.bytes(0x0d, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x49);
/* f11e */                   _.bytes(0x4e, 0xc7);
                                                           // FOUND
/* f120 */                   _.bytes(0x0d, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0xa0);
                                                           // OK
/* f127 */                   _.bytes(0x0d, 0x4f, 0x4b, 0x8d);

// ------------------------------------------------------- // display control I/O message if in direct mode
/* f12b */        _`_f12b`;  BIT.zpg ("msgflg_009d");      // test message mode flag
/* f12d */                   BPL.rel ("_f13c");            // exit if control messages off
                                                           // display kernel I/O message
/* f12f */        _`_f12f`;  LDA.aby ("_f0bd");            // get byte from message table
/* f132 */                   PHP.imp ();                   // save status
/* f133 */                   AND.imm (0x7f);               // clear b7
/* f135 */                   JSR.abs ("chrout_ffd2");      // output character to channel
/* f138 */                   INY.imp ();                   // increment index
/* f139 */                   PLP.imp ();                   // restore status
/* f13a */                   BPL.rel ("_f12f");            // loop if not end of message
/* f13c */        _`_f13c`;  CLC.imp ();
/* f13d */                   RTS.imp ();

// ------------------------------------------------------- // get character from the input device
/* f13e */   _`getin_f13e`;  LDA.zpg ("dfltn_0099");       // get the input device number
/* f140 */                   BNE.rel ("_f14a");            // if not the keyboard go handle other devices
                                                           // the input device was the keyboard
/* f142 */                   LDA.zpg ("ndx_00c6");         // get the keyboard buffer index
/* f144 */                   BEQ.rel ("_f155");            // if the buffer is empty go flag no byte and return
/* f146 */                   SEI.imp ();                   // disable the interrupts
/* f147 */                   JMP.abs ("lp2_e5b4");         // get input from the keyboard buffer and return
                                                           // the input device was not the keyboard
/* f14a */        _`_f14a`;  CMP.imm (0x02);               // compare the device with the RS232 device
/* f14c */                   BNE.rel ("_f166");            // if not the RS232 device go ??
                                                           // the input device is the RS232 device
/* f14e */        _`_f14e`;  STY.zpg ("xsav_0097");        // save Y
/* f150 */                   JSR.abs ("_f086");            // get a byte from RS232 buffer
/* f153 */                   LDY.zpg ("xsav_0097");        // restore Y
/* f155 */        _`_f155`;  CLC.imp ();                   // flag no error
/* f156 */                   RTS.imp ();

// ------------------------------------------------------- // input a character from channel
/* f157 */   _`chrin_f157`;  LDA.zpg ("dfltn_0099");       // get the input device number
/* f159 */                   BNE.rel ("_f166");            // if not the keyboard continue
                                                           // the input device was the keyboard
/* f15b */                   LDA.zpg ("pntr_00d3");        // get the cursor column
/* f15d */                   STA.zpg ("lxsp+1_00ca");      // set the input cursor column
/* f15f */                   LDA.zpg ("tblx_00d6");        // get the cursor row
/* f161 */                   STA.zpg ("lxsp+0_00c9");      // set the input cursor row
/* f163 */                   JMP.abs ("_e632");            // input from screen or keyboard
                                                           // the input device was not the keyboard
/* f166 */        _`_f166`;  CMP.imm (0x03);               // compare device number with screen
/* f168 */                   BNE.rel ("_f173");            // if not screen continue
                                                           // the input device was the screen
/* f16a */                   STA.zpg ("crsw_00d0");        // input from keyboard or screen, $xx = screen,
                                                           // $00 = keyboard
/* f16c */                   LDA.zpg ("lnmx_00d5");        // get current screen line length
/* f16e */                   STA.zpg ("indx_00c8");        // save input [EOL] pointer
/* f170 */                   JMP.abs ("_e632");            // input from screen or keyboard
                                                           // the input device was not the screen
/* f173 */        _`_f173`;  BCS.rel ("_f1ad");            // if input device > screen go do IEC devices
                                                           // the input device was < screen
/* f175 */                   CMP.imm (0x02);               // compare the device with the RS232 device
/* f177 */                   BEQ.rel ("_f1b8");            // if RS232 device go get a byte from the RS232 device
                                                           // only the tape device left ..
/* f179 */                   STX.zpg ("xsav_0097");        // save X
/* f17b */                   JSR.abs ("_f199");            // get a byte from tape
/* f17e */                   BCS.rel ("_f196");            // if error just exit
/* f180 */                   PHA.imp ();                   // save the byte
/* f181 */                   JSR.abs ("_f199");            // get the next byte from tape
/* f184 */                   BCS.rel ("_f193");            // if error just exit
/* f186 */                   BNE.rel ("_f18d");            // if end reached ??
/* f188 */                   LDA.imm (0x40);               // set EOI
/* f18a */                   JSR.abs ("_fe1c");            // OR into the serial status byte
/* f18d */        _`_f18d`;  DEC.zpg ("bufpnt_00a6");      // decrement tape buffer index
/* f18f */                   LDX.zpg ("xsav_0097");        // restore X
/* f191 */                   PLA.imp ();                   // restore the saved byte
/* f192 */                   RTS.imp ();
/* f193 */        _`_f193`;  TAX.imp ();                   // copy the error byte
/* f194 */                   PLA.imp ();                   // dump the saved byte
/* f195 */                   TXA.imp ();                   // restore error byte
/* f196 */        _`_f196`;  LDX.zpg ("xsav_0097");        // restore X
/* f198 */                   RTS.imp ();

// ------------------------------------------------------- // get byte from tape
/* f199 */        _`_f199`;  JSR.abs ("_f80d");            // bump tape pointer
/* f19c */                   BNE.rel ("_f1a9");            // if not end get next byte and exit
/* f19e */                   JSR.abs ("_f841");            // initiate tape read
/* f1a1 */                   BCS.rel ("_f1b4");            // exit if error flagged
/* f1a3 */                   LDA.imm (0x00);               // clear A
/* f1a5 */                   STA.zpg ("bufpnt_00a6");      // clear tape buffer index
/* f1a7 */                   BEQ.rel ("_f199");            // loop, branch always
/* f1a9 */        _`_f1a9`;  LDA.iny ("tape1+0_00b2");     // get next byte from buffer
/* f1ab */                   CLC.imp ();                   // flag no error
/* f1ac */                   RTS.imp ();
                                                           // input device was serial bus
/* f1ad */        _`_f1ad`;  LDA.zpg ("status_0090");      // get the serial status byte
/* f1af */                   BEQ.rel ("_f1b5");            // if no errors flagged go input byte and return
/* f1b1 */        _`_f1b1`;  LDA.imm (0x0d);               // else return [EOL]
/* f1b3 */        _`_f1b3`;  CLC.imp ();                   // flag no error
/* f1b4 */        _`_f1b4`;  RTS.imp ();
/* f1b5 */        _`_f1b5`;  JMP.abs ("acptr_ee13");       // input byte from serial bus and return
                                                           // input device was RS232 device
/* f1b8 */        _`_f1b8`;  JSR.abs ("_f14e");            // get byte from RS232 device
/* f1bb */                   BCS.rel ("_f1b4");            // branch if error, this doesn't get taken as the last
                                                           // instruction in the get byte from RS232 device routine
                                                           // is CLC ??
/* f1bd */                   CMP.imm (0x00);               // compare with null
/* f1bf */                   BNE.rel ("_f1b3");            // exit if not null
/* f1c1 */                   LDA.abs ("rsstat_0297");      // get the RS232 status register
/* f1c4 */                   AND.imm (0x60);               // mask 0xx0 0000, DSR detected and ??
/* f1c6 */                   BNE.rel ("_f1b1");            // if ?? return null
/* f1c8 */                   BEQ.rel ("_f1b8");            // else loop, branch always

// ------------------------------------------------------- // output character to channel
/* f1ca */  _`chrout_f1ca`;  PHA.imp ();                   // save the character to output
/* f1cb */                   LDA.zpg ("dflto_009a");       // get the output device number
/* f1cd */                   CMP.imm (0x03);               // compare the output device with the screen
/* f1cf */                   BNE.rel ("_f1d5");            // if not the screen go ??
/* f1d1 */                   PLA.imp ();                   // else restore the output character
/* f1d2 */                   JMP.abs ("_e716");            // go output the character to the screen
/* f1d5 */        _`_f1d5`;  BCC.rel ("_f1db");            // if < screen go ??
/* f1d7 */                   PLA.imp ();                   // else restore the output character
/* f1d8 */                   JMP.abs ("ciout_eddd");       // go output the character to the serial bus
/* f1db */        _`_f1db`;  LSR.acc ();                   // shift b0 of the device into Cb
/* f1dc */                   PLA.imp ();                   // restore the output character

// ------------------------------------------------------- // output the character to the cassette or RS232 device
/* f1dd */        _`_f1dd`;  STA.zpg ("ptr1_009e");        // save the character to the character buffer
/* f1df */                   TXA.imp ();                   // copy X
/* f1e0 */                   PHA.imp ();                   // save X
/* f1e1 */                   TYA.imp ();                   // copy Y
/* f1e2 */                   PHA.imp ();                   // save Y
/* f1e3 */                   BCC.rel ("_f208");            // if Cb is clear it must be the RS232 device
                                                           // output the character to the cassette
/* f1e5 */                   JSR.abs ("_f80d");            // bump the tape pointer
/* f1e8 */                   BNE.rel ("_f1f8");            // if not end save next byte and exit
/* f1ea */                   JSR.abs ("_f864");            // initiate tape write
/* f1ed */                   BCS.rel ("_f1fd");            // exit if error
/* f1ef */                   LDA.imm (0x02);               // set data block type ??
/* f1f1 */                   LDY.imm (0x00);               // clear index
/* f1f3 */                   STA.iny ("tape1+0_00b2");     // save type to buffer ??
/* f1f5 */                   INY.imp ();                   // increment index
/* f1f6 */                   STY.zpg ("bufpnt_00a6");      // save tape buffer index
/* f1f8 */        _`_f1f8`;  LDA.zpg ("ptr1_009e");        // restore character from character buffer
/* f1fa */                   STA.iny ("tape1+0_00b2");     // save to buffer
/* f1fc */        _`_f1fc`;  CLC.imp ();                   // flag no error
/* f1fd */        _`_f1fd`;  PLA.imp ();                   // pull Y
/* f1fe */                   TAY.imp ();                   // restore Y
/* f1ff */                   PLA.imp ();                   // pull X
/* f200 */                   TAX.imp ();                   // restore X
/* f201 */                   LDA.zpg ("ptr1_009e");        // get the character from the character buffer
/* f203 */                   BCC.rel ("_f207");            // exit if no error
/* f205 */                   LDA.imm (0x00);               // else clear A
/* f207 */        _`_f207`;  RTS.imp ();
                                                           // output the character to the RS232 device
/* f208 */        _`_f208`;  JSR.abs ("_f017");            // send byte to the RS232 buffer, no setup
/* f20b */                   JMP.abs ("_f1fc");            // do no error exit

// ------------------------------------------------------- // open channel for input
/* f20e */   _`chkin_f20e`;  JSR.abs ("_f30f");            // find a file
/* f211 */                   BEQ.rel ("_f216");            // if the file is open continue
/* f213 */                   JMP.abs ("_f701");            // else do 'file not open' error and return
/* f216 */        _`_f216`;  JSR.abs ("_f31f");            // set file details from table,X
/* f219 */                   LDA.zpg ("fa_00ba");          // get the device number
/* f21b */                   BEQ.rel ("_f233");            // if the device was the keyboard save the device #, flag
                                                           // ok and exit
/* f21d */                   CMP.imm (0x03);               // compare the device number with the screen
/* f21f */                   BEQ.rel ("_f233");            // if the device was the screen save the device #, flag ok
                                                           // and exit
/* f221 */                   BCS.rel ("_f237");            // if the device was a serial bus device go ??
/* f223 */                   CMP.imm (0x02);               // else compare the device with the RS232 device
/* f225 */                   BNE.rel ("_f22a");            // if not the RS232 device continue
/* f227 */                   JMP.abs ("_f04d");            // else go get input from the RS232 buffer and return
/* f22a */        _`_f22a`;  LDX.zpg ("sa_00b9");          // get the secondary address
/* f22c */                   CPX.imm (0x60);
/* f22e */                   BEQ.rel ("_f233");
/* f230 */                   JMP.abs ("_f70a");            // go do 'not input file' error and return
/* f233 */        _`_f233`;  STA.zpg ("dfltn_0099");       // save the input device number
/* f235 */                   CLC.imp ();                   // flag ok
/* f236 */                   RTS.imp ();
                                                           // the device was a serial bus device
/* f237 */        _`_f237`;  TAX.imp ();                   // copy device number to X
/* f238 */                   JSR.abs ("talk_ed09");        // command serial bus device to TALK
/* f23b */                   LDA.zpg ("sa_00b9");          // get the secondary address
/* f23d */                   BPL.rel ("_f245");
/* f23f */                   JSR.abs ("_edcc");            // wait for the serial bus end after send
/* f242 */                   JMP.abs ("_f248");
/* f245 */        _`_f245`;  JSR.abs ("tksa_edc7");        // send secondary address after TALK
/* f248 */        _`_f248`;  TXA.imp ();                   // copy device back to A
/* f249 */                   BIT.zpg ("status_0090");      // test the serial status byte
/* f24b */                   BPL.rel ("_f233");            // if device present save device number and exit
/* f24d */                   JMP.abs ("_f707");            // do 'device not present' error and return

// ------------------------------------------------------- // open channel for output
/* f250 */  _`chkout_f250`;  JSR.abs ("_f30f");            // find a file
/* f253 */                   BEQ.rel ("_f258");            // if file found continue
/* f255 */                   JMP.abs ("_f701");            // else do 'file not open' error and return
/* f258 */        _`_f258`;  JSR.abs ("_f31f");            // set file details from table,X
/* f25b */                   LDA.zpg ("fa_00ba");          // get the device number
/* f25d */                   BNE.rel ("_f262");            // if the device is not the keyboard go ??
/* f25f */        _`_f25f`;  JMP.abs ("_f70d");            // go do 'not output file' error and return
/* f262 */        _`_f262`;  CMP.imm (0x03);               // compare the device with the screen
/* f264 */                   BEQ.rel ("_f275");            // if the device is the screen go save output the output
                                                           // device number and exit
/* f266 */                   BCS.rel ("_f279");            // if > screen then go handle a serial bus device
/* f268 */                   CMP.imm (0x02);               // compare the device with the RS232 device
/* f26a */                   BNE.rel ("_f26f");            // if not the RS232 device then it must be the tape device
/* f26c */                   JMP.abs ("_efe1");            // else go open RS232 channel for output
                                                           // open a tape channel for output
/* f26f */        _`_f26f`;  LDX.zpg ("sa_00b9");          // get the secondary address
/* f271 */                   CPX.imm (0x60);
/* f273 */                   BEQ.rel ("_f25f");            // if ?? do not output file error and return
/* f275 */        _`_f275`;  STA.zpg ("dflto_009a");       // save the output device number
/* f277 */                   CLC.imp ();                   // flag ok
/* f278 */                   RTS.imp ();
/* f279 */        _`_f279`;  TAX.imp ();                   // copy the device number
/* f27a */                   JSR.abs ("listen_ed0c");      // command devices on the serial bus to LISTEN
/* f27d */                   LDA.zpg ("sa_00b9");          // get the secondary address
/* f27f */                   BPL.rel ("_f286");            // if address to send go ??
/* f281 */                   JSR.abs ("_edbe");            // else set serial ATN high
/* f284 */                   BNE.rel ("_f289");            // go ??, branch always
/* f286 */        _`_f286`;  JSR.abs ("second_edb9");      // send secondary address after LISTEN
/* f289 */        _`_f289`;  TXA.imp ();                   // copy device number back to A
/* f28a */                   BIT.zpg ("status_0090");      // test the serial status byte
/* f28c */                   BPL.rel ("_f275");            // if the device is present go save the output device number
                                                           // and exit
/* f28e */                   JMP.abs ("_f707");            // else do 'device not present error' and return

// ------------------------------------------------------- // close a specified logical file
/* f291 */   _`close_f291`;  JSR.abs ("_f314");            // find file A
/* f294 */                   BEQ.rel ("_f298");            // if file found go close it
/* f296 */                   CLC.imp ();                   // else the file was closed so just flag ok
/* f297 */                   RTS.imp ();
                                                           // file found so close it
/* f298 */        _`_f298`;  JSR.abs ("_f31f");            // set file details from table,X
/* f29b */                   TXA.imp ();                   // copy file index to A
/* f29c */                   PHA.imp ();                   // save file index
/* f29d */                   LDA.zpg ("fa_00ba");          // get the device number
/* f29f */                   BEQ.rel ("_f2f1");            // if it is the keyboard go restore the index and close the
                                                           // file
/* f2a1 */                   CMP.imm (0x03);               // compare the device number with the screen
/* f2a3 */                   BEQ.rel ("_f2f1");            // if it is the screen go restore the index and close the
                                                           // file
/* f2a5 */                   BCS.rel ("_f2ee");            // if > screen go do serial bus device close
/* f2a7 */                   CMP.imm (0x02);               // compare the device with the RS232 device
/* f2a9 */                   BNE.rel ("_f2c8");            // if not the RS232 device go ??
                                                           // else close RS232 device
/* f2ab */                   PLA.imp ();                   // restore file index
/* f2ac */                   JSR.abs ("_f2f2");            // close file index X
/* f2af */                   JSR.abs ("_f483");            // initialise RS232 output
/* f2b2 */                   JSR.abs ("_fe27");            // read the top of memory
/* f2b5 */                   LDA.zpg ("ribuf+1_00f8");     // get the RS232 input buffer pointer high byte
/* f2b7 */                   BEQ.rel ("_f2ba");            // if no RS232 input buffer go ??
/* f2b9 */                   INY.imp ();                   // else reclaim RS232 input buffer memory
/* f2ba */        _`_f2ba`;  LDA.zpg ("robuf+1_00fa");     // get the RS232 output buffer pointer high byte
/* f2bc */                   BEQ.rel ("_f2bf");            // if no RS232 output buffer skip the reclaim
/* f2be */                   INY.imp ();                   // else reclaim the RS232 output buffer memory
/* f2bf */        _`_f2bf`;  LDA.imm (0x00);               // clear A
/* f2c1 */                   STA.zpg ("ribuf+1_00f8");     // clear the RS232 input buffer pointer high byte
/* f2c3 */                   STA.zpg ("robuf+1_00fa");     // clear the RS232 output buffer pointer high byte
/* f2c5 */                   JMP.abs ("_f47d");            // go set the top of memory to F0xx
                                                           // is not the RS232 device
/* f2c8 */        _`_f2c8`;  LDA.zpg ("sa_00b9");          // get the secondary address
/* f2ca */                   AND.imm (0x0f);               // mask the device #
/* f2cc */                   BEQ.rel ("_f2f1");            // if ?? restore index and close file
/* f2ce */                   JSR.abs ("_f7d0");            // get tape buffer start pointer in XY
/* f2d1 */                   LDA.imm (0x00);               // character $00
/* f2d3 */                   SEC.imp ();                   // flag the tape device
/* f2d4 */                   JSR.abs ("_f1dd");            // output the character to the cassette or RS232 device
/* f2d7 */                   JSR.abs ("_f864");            // initiate tape write
/* f2da */                   BCC.rel ("_f2e0");
/* f2dc */                   PLA.imp ();
/* f2dd */                   LDA.imm (0x00);
/* f2df */                   RTS.imp ();
/* f2e0 */        _`_f2e0`;  LDA.zpg ("sa_00b9");          // get the secondary address
/* f2e2 */                   CMP.imm (0x62);
/* f2e4 */                   BNE.rel ("_f2f1");            // if not ?? restore index and close file
/* f2e6 */                   LDA.imm (0x05);               // set logical end of the tape
/* f2e8 */                   JSR.abs ("_f76a");            // write tape header
/* f2eb */                   JMP.abs ("_f2f1");            // restore index and close file

// ------------------------------------------------------- // serial bus device close
/* f2ee */        _`_f2ee`;  JSR.abs ("_f642");            // close serial bus device
/* f2f1 */        _`_f2f1`;  PLA.imp ();                   // restore file index

// ------------------------------------------------------- // close file index X
/* f2f2 */        _`_f2f2`;  TAX.imp ();                   // copy index to file to close
/* f2f3 */                   DEC.zpg ("ldtnd_0098");       // decrement the open file count
/* f2f5 */                   CPX.zpg ("ldtnd_0098");       // compare the index with the open file count
/* f2f7 */                   BEQ.rel ("_f30d");            // exit if equal, last entry was closing file
                                                           // else entry was not last in list so copy last table entry
                                                           // file details over the details of the closing one
/* f2f9 */                   LDY.zpg ("ldtnd_0098");       // get the open file count as index
/* f2fb */                   LDA.aby ("lat+0_0259");       // get last+1 logical file number from logical file table
/* f2fe */                   STA.abx ("lat+0_0259");       // save logical file number over closed file
/* f301 */                   LDA.aby ("fat+0_0263");       // get last+1 device number from device number table
/* f304 */                   STA.abx ("fat+0_0263");       // save device number over closed file
/* f307 */                   LDA.aby ("sat+0_026d");       // get last+1 secondary address from secondary address table
/* f30a */                   STA.abx ("sat+0_026d");       // save secondary address over closed file
/* f30d */        _`_f30d`;  CLC.imp ();                   // flag ok
/* f30e */                   RTS.imp ();

// ------------------------------------------------------- // find a file
/* f30f */        _`_f30f`;  LDA.imm (0x00);               // clear A
/* f311 */                   STA.zpg ("status_0090");      // clear the serial status byte
/* f313 */                   TXA.imp ();                   // copy the logical file number to A

// ------------------------------------------------------- // find file A
/* f314 */        _`_f314`;  LDX.zpg ("ldtnd_0098");       // get the open file count
/* f316 */        _`_f316`;  DEX.imp ();                   // decrememnt the count to give the index
/* f317 */                   BMI.rel ("_f32e");            // if no files just exit
/* f319 */                   CMP.abx ("lat+0_0259");       // compare the logical file number with the table logical
                                                           // file number
/* f31c */                   BNE.rel ("_f316");            // if no match go try again
/* f31e */                   RTS.imp ();

// ------------------------------------------------------- // set file details from table,X
/* f31f */        _`_f31f`;  LDA.abx ("lat+0_0259");       // get logical file from logical file table
/* f322 */                   STA.zpg ("la_00b8");          // save the logical file
/* f324 */                   LDA.abx ("fat+0_0263");       // get device number from device number table
/* f327 */                   STA.zpg ("fa_00ba");          // save the device number
/* f329 */                   LDA.abx ("sat+0_026d");       // get secondary address from secondary address table
/* f32c */                   STA.zpg ("sa_00b9");          // save the secondary address
/* f32e */        _`_f32e`;  RTS.imp ();

// ------------------------------------------------------- // close all channels and files
/* f32f */   _`clall_f32f`;  LDA.imm (0x00);               // clear A
/* f331 */                   STA.zpg ("ldtnd_0098");       // clear the open file count

// ------------------------------------------------------- // close input and output channels
/* f333 */  _`clrchn_f333`;  LDX.imm (0x03);               // set the screen device
/* f335 */                   CPX.zpg ("dflto_009a");       // compare the screen with the output device number
/* f337 */                   BCS.rel ("_f33c");            // if <= screen skip the serial bus unlisten
/* f339 */                   JSR.abs ("unlsn_edfe");       // else command the serial bus to UNLISTEN
/* f33c */        _`_f33c`;  CPX.zpg ("dfltn_0099");       // compare the screen with the input device number
/* f33e */                   BCS.rel ("_f343");            // if <= screen skip the serial bus untalk
/* f340 */                   JSR.abs ("untlk_edef");       // else command the serial bus to UNTALK
/* f343 */        _`_f343`;  STX.zpg ("dflto_009a");       // save the screen as the output device number
/* f345 */                   LDA.imm (0x00);               // set the keyboard as the input device
/* f347 */                   STA.zpg ("dfltn_0099");       // save the input device number
/* f349 */                   RTS.imp ();

// ------------------------------------------------------- // open a logical file
/* f34a */    _`open_f34a`;  LDX.zpg ("la_00b8");          // get the logical file
/* f34c */                   BNE.rel ("_f351");            // if there is a file continue
/* f34e */                   JMP.abs ("_f70a");            // else do 'not input file error' and return
/* f351 */        _`_f351`;  JSR.abs ("_f30f");            // find a file
/* f354 */                   BNE.rel ("_f359");            // if file not found continue
/* f356 */                   JMP.abs ("_f6fe");            // else do 'file already open' error and return
/* f359 */        _`_f359`;  LDX.zpg ("ldtnd_0098");       // get the open file count
/* f35b */                   CPX.imm (0x0a);               // compare it with the maximum + 1
/* f35d */                   BCC.rel ("_f362");            // if less than maximum + 1 go open the file
/* f35f */                   JMP.abs ("_f6fb");            // else do 'too many files error' and return
/* f362 */        _`_f362`;  INC.zpg ("ldtnd_0098");       // increment the open file count
/* f364 */                   LDA.zpg ("la_00b8");          // get the logical file
/* f366 */                   STA.abx ("lat+0_0259");       // save it to the logical file table
/* f369 */                   LDA.zpg ("sa_00b9");          // get the secondary address
/* f36b */                   ORA.imm (0x60);               // OR with the OPEN CHANNEL command
/* f36d */                   STA.zpg ("sa_00b9");          // save the secondary address
/* f36f */                   STA.abx ("sat+0_026d");       // save it to the secondary address table
/* f372 */                   LDA.zpg ("fa_00ba");          // get the device number
/* f374 */                   STA.abx ("fat+0_0263");       // save it to the device number table
/* f377 */                   BEQ.rel ("_f3d3");            // if it is the keyboard go do the ok exit
/* f379 */                   CMP.imm (0x03);               // compare the device number with the screen
/* f37b */                   BEQ.rel ("_f3d3");            // if it is the screen go do the ok exit
/* f37d */                   BCC.rel ("_f384");            // if tape or RS232 device go ??
                                                           // else it is a serial bus device
/* f37f */                   JSR.abs ("_f3d5");            // send the secondary address and filename
/* f382 */                   BCC.rel ("_f3d3");            // go do ok exit, branch always
/* f384 */        _`_f384`;  CMP.imm (0x02);
/* f386 */                   BNE.rel ("_f38b");
/* f388 */                   JMP.abs ("_f409");            // go open RS232 device and return
/* f38b */        _`_f38b`;  JSR.abs ("_f7d0");            // get tape buffer start pointer in XY
/* f38e */                   BCS.rel ("_f393");            // if >= $0200 go ??
/* f390 */                   JMP.abs ("_f713");            // else do 'illegal device number' and return
/* f393 */        _`_f393`;  LDA.zpg ("sa_00b9");          // get the secondary address
/* f395 */                   AND.imm (0x0f);
/* f397 */                   BNE.rel ("_f3b8");
/* f399 */                   JSR.abs ("_f817");            // wait for PLAY
/* f39c */                   BCS.rel ("_f3d4");            // exit if STOP was pressed
/* f39e */                   JSR.abs ("_f5af");            // print "Searching..."
/* f3a1 */                   LDA.zpg ("fnlen_00b7");       // get file name length
/* f3a3 */                   BEQ.rel ("_f3af");            // if null file name just go find header
/* f3a5 */                   JSR.abs ("_f7ea");            // find specific tape header
/* f3a8 */                   BCC.rel ("_f3c2");            // branch if no error
/* f3aa */                   BEQ.rel ("_f3d4");            // exit if ??
/* f3ac */        _`_f3ac`;  JMP.abs ("_f704");            // do file not found error and return
/* f3af */        _`_f3af`;  JSR.abs ("_f72c");            // find tape header, exit with header in buffer
/* f3b2 */                   BEQ.rel ("_f3d4");            // exit if end of tape found
/* f3b4 */                   BCC.rel ("_f3c2");
/* f3b6 */                   BCS.rel ("_f3ac");
/* f3b8 */        _`_f3b8`;  JSR.abs ("_f838");            // wait for PLAY/RECORD
/* f3bb */                   BCS.rel ("_f3d4");            // exit if STOP was pressed
/* f3bd */                   LDA.imm (0x04);               // set data file header
/* f3bf */                   JSR.abs ("_f76a");            // write tape header
/* f3c2 */        _`_f3c2`;  LDA.imm (0xbf);
/* f3c4 */                   LDY.zpg ("sa_00b9");          // get the secondary address
/* f3c6 */                   CPY.imm (0x60);
/* f3c8 */                   BEQ.rel ("_f3d1");
/* f3ca */                   LDY.imm (0x00);               // clear index
/* f3cc */                   LDA.imm (0x02);
/* f3ce */                   STA.iny ("tape1+0_00b2");     // save to tape buffer
/* f3d0 */                   TYA.imp ();                   // clear A
/* f3d1 */        _`_f3d1`;  STA.zpg ("bufpnt_00a6");      // save tape buffer index
/* f3d3 */        _`_f3d3`;  CLC.imp ();                   // flag ok
/* f3d4 */        _`_f3d4`;  RTS.imp ();

// ------------------------------------------------------- // send secondary address and filename
/* f3d5 */        _`_f3d5`;  LDA.zpg ("sa_00b9");          // get the secondary address
/* f3d7 */                   BMI.rel ("_f3d3");            // ok exit if -ve
/* f3d9 */                   LDY.zpg ("fnlen_00b7");       // get file name length
/* f3db */                   BEQ.rel ("_f3d3");            // ok exit if null
/* f3dd */                   LDA.imm (0x00);               // clear A
/* f3df */                   STA.zpg ("status_0090");      // clear the serial status byte
/* f3e1 */                   LDA.zpg ("fa_00ba");          // get the device number
/* f3e3 */                   JSR.abs ("listen_ed0c");      // command devices on the serial bus to LISTEN
/* f3e6 */                   LDA.zpg ("sa_00b9");          // get the secondary address
/* f3e8 */                   ORA.imm (0xf0);               // OR with the OPEN command
/* f3ea */                   JSR.abs ("second_edb9");      // send secondary address after LISTEN
/* f3ed */                   LDA.zpg ("status_0090");      // get the serial status byte
/* f3ef */                   BPL.rel ("_f3f6");            // if device present skip the 'device not present' error
/* f3f1 */                   PLA.imp ();                   // else dump calling address low byte
/* f3f2 */                   PLA.imp ();                   // dump calling address high byte
/* f3f3 */                   JMP.abs ("_f707");            // do 'device not present' error and return
/* f3f6 */        _`_f3f6`;  LDA.zpg ("fnlen_00b7");       // get file name length
/* f3f8 */                   BEQ.rel ("_f406");            // branch if null name
/* f3fa */                   LDY.imm (0x00);               // clear index
/* f3fc */        _`_f3fc`;  LDA.iny ("fnadr+0_00bb");     // get file name byte
/* f3fe */                   JSR.abs ("ciout_eddd");       // output byte to serial bus
/* f401 */                   INY.imp ();                   // increment index
/* f402 */                   CPY.zpg ("fnlen_00b7");       // compare with file name length
/* f404 */                   BNE.rel ("_f3fc");            // loop if not all done
/* f406 */        _`_f406`;  JMP.abs ("_f654");            // command serial bus to UNLISTEN and return

// ------------------------------------------------------- // open RS232 device
/* f409 */        _`_f409`;  JSR.abs ("_f483");            // initialise RS232 output
/* f40c */                   STY.abs ("rsstat_0297");      // save the RS232 status register
/* f40f */        _`_f40f`;  CPY.zpg ("fnlen_00b7");       // compare with file name length
/* f411 */                   BEQ.rel ("_f41d");            // exit loop if done
/* f413 */                   LDA.iny ("fnadr+0_00bb");     // get file name byte
/* f415 */                   STA.aby ("m51ctr_0293");      // copy to 6551 register set
/* f418 */                   INY.imp ();                   // increment index
/* f419 */                   CPY.imm (0x04);               // compare with $04
/* f41b */                   BNE.rel ("_f40f");            // loop if not to 4 yet
/* f41d */        _`_f41d`;  JSR.abs ("_ef4a");            // compute bit count
/* f420 */                   STX.abs ("bitnum_0298");      // save bit count
/* f423 */                   LDA.abs ("m51ctr_0293");      // get pseudo 6551 control register
/* f426 */                   AND.imm (0x0f);               // mask 0000 xxxx, baud rate
/* f428 */                   BEQ.rel ("_f446");            // if zero skip the baud rate setup
/* f42a */                   ASL.acc ();                   // * 2 bytes per entry
/* f42b */                   TAX.imp ();                   // copy to the index
/* f42c */                   LDA.abs ("tvsflg_02a6");      // get the PAL/NTSC flag
/* f42f */                   BNE.rel ("_f43a");            // if PAL go set PAL timing
/* f431 */                   LDY.abx ("_fec1");            // get the NTSC baud rate value high byte
/* f434 */                   LDA.abx ("_fec0");            // get the NTSC baud rate value low byte
/* f437 */                   JMP.abs ("_f440");            // go save the baud rate values
/* f43a */        _`_f43a`;  LDY.abx ("_e4eb");            // get the PAL baud rate value high byte
/* f43d */                   LDA.abx (0xe4ea);             // get the PAL baud rate value low byte
/* f440 */        _`_f440`;  STY.abs ("m51ajb+1_0296");    // save the nonstandard bit timing high byte
/* f443 */                   STA.abs ("m51ajb+0_0295");    // save the nonstandard bit timing low byte
/* f446 */        _`_f446`;  LDA.abs ("m51ajb+0_0295");    // get the nonstandard bit timing low byte
/* f449 */                   ASL.acc ();                   // * 2
/* f44a */                   JSR.abs ("_ff2e");
/* f44d */                   LDA.abs ("m51cdr_0294");      // read the pseudo 6551 command register
/* f450 */                   LSR.acc ();                   // shift the X line/3 line bit into Cb
/* f451 */                   BCC.rel ("_f45c");            // if 3 line skip the DRS test
/* f453 */                   LDA.abs ("ci2prb_dd01");      // read VIA 2 DRB, RS232 port
/* f456 */                   ASL.acc ();                   // shift DSR in into Cb
/* f457 */                   BCS.rel ("_f45c");            // if DSR present skip the error set
/* f459 */                   JSR.abs ("_f00d");            // set no DSR
/* f45c */        _`_f45c`;  LDA.abs ("ridbe_029b");       // get index to Rx buffer end
/* f45f */                   STA.abs ("ridbs_029c");       // set index to Rx buffer start, clear Rx buffer
/* f462 */                   LDA.abs ("rodbe_029e");       // get index to Tx buffer end
/* f465 */                   STA.abs ("rodbs_029d");       // set index to Tx buffer start, clear Tx buffer
/* f468 */                   JSR.abs ("_fe27");            // read the top of memory
/* f46b */                   LDA.zpg ("ribuf+1_00f8");     // get the RS232 input buffer pointer high byte
/* f46d */                   BNE.rel ("_f474");            // if buffer already set skip the save
/* f46f */                   DEY.imp ();                   // decrement top of memory high byte, 256 byte buffer
/* f470 */                   STY.zpg ("ribuf+1_00f8");     // save the RS232 input buffer pointer high byte
/* f472 */                   STX.zpg ("ribuf+0_00f7");     // save the RS232 input buffer pointer low byte
/* f474 */        _`_f474`;  LDA.zpg ("robuf+1_00fa");     // get the RS232 output buffer pointer high byte
/* f476 */                   BNE.rel ("_f47d");            // if ?? go set the top of memory to F0xx
/* f478 */                   DEY.imp ();
/* f479 */                   STY.zpg ("robuf+1_00fa");     // save the RS232 output buffer pointer high byte
/* f47b */                   STX.zpg ("robuf+0_00f9");     // save the RS232 output buffer pointer low byte

// ------------------------------------------------------- // set the top of memory to F0xx
/* f47d */        _`_f47d`;  SEC.imp ();                   // read the top of memory
/* f47e */                   LDA.imm (0xf0);               // set $F000
/* f480 */                   JMP.abs ("_fe2d");            // set the top of memory and return

// ------------------------------------------------------- // initialise RS232 output
/* f483 */        _`_f483`;  LDA.imm (0x7f);               // disable all interrupts
/* f485 */                   STA.abs ("ci2icr_dd0d");      // save VIA 2 ICR
/* f488 */                   LDA.imm (0x06);               // set RS232 DTR output, RS232 RTS output
/* f48a */                   STA.abs ("c2ddrb_dd03");      // save VIA 2 DDRB, RS232 port
/* f48d */                   STA.abs ("ci2prb_dd01");      // save VIA 2 DRB, RS232 port
/* f490 */                   LDA.imm (0x04);               // mask xxxx x1xx, set RS232 Tx DATA high
/* f492 */                   ORA.abs ("ci2pra_dd00");      // OR it with VIA 2 DRA, serial port and video address
/* f495 */                   STA.abs ("ci2pra_dd00");      // save VIA 2 DRA, serial port and video address
/* f498 */                   LDY.imm (0x00);               // clear Y
/* f49a */                   STY.abs ("enabl_02a1");       // clear the RS-232 interrupt enable byte
/* f49d */                   RTS.imp ();

// ------------------------------------------------------- // load RAM from a device
/* f49e */    _`load_f49e`;  STX.zpg ("memuss+0_00c3");    // set kernal setup pointer low byte
/* f4a0 */                   STY.zpg ("memuss+1_00c4");    // set kernal setup pointer high byte
/* f4a2 */                   JMP.ind ("iload+0_0330");     // do LOAD vector, usually points to $F4A5

// ------------------------------------------------------- // load
/* f4a5 */                   STA.zpg ("verck_0093");       // save load/verify flag
/* f4a7 */                   LDA.imm (0x00);               // clear A
/* f4a9 */                   STA.zpg ("status_0090");      // clear the serial status byte
/* f4ab */                   LDA.zpg ("fa_00ba");          // get the device number
/* f4ad */                   BNE.rel ("_f4b2");            // if not the keyboard continue
                                                           // do 'illegal device number'
/* f4af */        _`_f4af`;  JMP.abs ("_f713");            // else do 'illegal device number' and return
/* f4b2 */        _`_f4b2`;  CMP.imm (0x03);
/* f4b4 */                   BEQ.rel ("_f4af");
/* f4b6 */                   BCC.rel ("_f533");
/* f4b8 */                   LDY.zpg ("fnlen_00b7");       // get file name length
/* f4ba */                   BNE.rel ("_f4bf");            // if not null name go ??
/* f4bc */                   JMP.abs ("_f710");            // else do 'missing file name' error and return
/* f4bf */        _`_f4bf`;  LDX.zpg ("sa_00b9");          // get the secondary address
/* f4c1 */                   JSR.abs ("_f5af");            // print "Searching..."
/* f4c4 */                   LDA.imm (0x60);
/* f4c6 */                   STA.zpg ("sa_00b9");          // save the secondary address
/* f4c8 */                   JSR.abs ("_f3d5");            // send secondary address and filename
/* f4cb */                   LDA.zpg ("fa_00ba");          // get the device number
/* f4cd */                   JSR.abs ("talk_ed09");        // command serial bus device to TALK
/* f4d0 */                   LDA.zpg ("sa_00b9");          // get the secondary address
/* f4d2 */                   JSR.abs ("tksa_edc7");        // send secondary address after TALK
/* f4d5 */                   JSR.abs ("acptr_ee13");       // input byte from serial bus
/* f4d8 */                   STA.zpg ("eal+0_00ae");       // save program start address low byte
/* f4da */                   LDA.zpg ("status_0090");      // get the serial status byte
/* f4dc */                   LSR.acc ();                   // shift time out read ..
/* f4dd */                   LSR.acc ();                   // .. into carry bit
/* f4de */                   BCS.rel ("_f530");            // if timed out go do file not found error and return
/* f4e0 */                   JSR.abs ("acptr_ee13");       // input byte from serial bus
/* f4e3 */                   STA.zpg ("eal+1_00af");       // save program start address high byte
/* f4e5 */                   TXA.imp ();                   // copy secondary address
/* f4e6 */                   BNE.rel ("_f4f0");            // load location not set in LOAD call, so continue with the
                                                           // load
/* f4e8 */                   LDA.zpg ("memuss+0_00c3");    // get the load address low byte
/* f4ea */                   STA.zpg ("eal+0_00ae");       // save the program start address low byte
/* f4ec */                   LDA.zpg ("memuss+1_00c4");    // get the load address high byte
/* f4ee */                   STA.zpg ("eal+1_00af");       // save the program start address high byte
/* f4f0 */        _`_f4f0`;  JSR.abs ("_f5d2");
/* f4f3 */        _`_f4f3`;  LDA.imm (0xfd);               // mask xxxx xx0x, clear time out read bit
/* f4f5 */                   AND.zpg ("status_0090");      // mask the serial status byte
/* f4f7 */                   STA.zpg ("status_0090");      // set the serial status byte
/* f4f9 */                   JSR.abs ("stop_ffe1");        // scan stop key, return Zb = 1 = [STOP]
/* f4fc */                   BNE.rel ("_f501");            // if not [STOP] go ??
/* f4fe */                   JMP.abs ("_f633");            // else close the serial bus device and flag stop
/* f501 */        _`_f501`;  JSR.abs ("acptr_ee13");       // input byte from serial bus
/* f504 */                   TAX.imp ();                   // copy byte
/* f505 */                   LDA.zpg ("status_0090");      // get the serial status byte
/* f507 */                   LSR.acc ();                   // shift time out read ..
/* f508 */                   LSR.acc ();                   // .. into carry bit
/* f509 */                   BCS.rel ("_f4f3");            // if timed out go try again
/* f50b */                   TXA.imp ();                   // copy received byte back
/* f50c */                   LDY.zpg ("verck_0093");       // get load/verify flag
/* f50e */                   BEQ.rel ("_f51c");            // if load go load
                                                           // else is verify
/* f510 */                   LDY.imm (0x00);               // clear index
/* f512 */                   CMP.iny ("eal+0_00ae");       // compare byte with previously loaded byte
/* f514 */                   BEQ.rel ("_f51e");            // if match go ??
/* f516 */                   LDA.imm (0x10);               // flag read error
/* f518 */                   JSR.abs ("_fe1c");            // OR into the serial status byte
/* f51b */                   _.bytes(0x2c);                // makes next line BIT $AE91
/* f51c */        _`_f51c`;  STA.iny ("eal+0_00ae");       // save byte to memory
/* f51e */        _`_f51e`;  INC.zpg ("eal+0_00ae");       // increment save pointer low byte
/* f520 */                   BNE.rel ("_f524");            // if no rollover go ??
/* f522 */                   INC.zpg ("eal+1_00af");       // else increment save pointer high byte
/* f524 */        _`_f524`;  BIT.zpg ("status_0090");      // test the serial status byte
/* f526 */                   BVC.rel ("_f4f3");            // loop if not end of file
                                                           // close file and exit
/* f528 */                   JSR.abs ("untlk_edef");       // command serial bus to UNTALK
/* f52b */                   JSR.abs ("_f642");            // close serial bus device
/* f52e */                   BCC.rel ("_f5a9");            // if ?? go flag ok and exit
/* f530 */        _`_f530`;  JMP.abs ("_f704");            // do file not found error and return

// ------------------------------------------------------- // ??
/* f533 */        _`_f533`;  LSR.acc ();
/* f534 */                   BCS.rel ("_f539");
/* f536 */                   JMP.abs ("_f713");            // else do 'illegal device number' and return
/* f539 */        _`_f539`;  JSR.abs ("_f7d0");            // get tape buffer start pointer in XY
/* f53c */                   BCS.rel ("_f541");            // if ??
/* f53e */                   JMP.abs ("_f713");            // else do 'illegal device number' and return
/* f541 */        _`_f541`;  JSR.abs ("_f817");            // wait for PLAY
/* f544 */                   BCS.rel ("_f5ae");            // exit if STOP was pressed
/* f546 */                   JSR.abs ("_f5af");            // print "Searching..."
/* f549 */        _`_f549`;  LDA.zpg ("fnlen_00b7");       // get file name length
/* f54b */                   BEQ.rel ("_f556");
/* f54d */                   JSR.abs ("_f7ea");            // find specific tape header
/* f550 */                   BCC.rel ("_f55d");            // if no error continue
/* f552 */                   BEQ.rel ("_f5ae");            // exit if ??
/* f554 */                   BCS.rel ("_f530");            // , branch always
/* f556 */        _`_f556`;  JSR.abs ("_f72c");            // find tape header, exit with header in buffer
/* f559 */                   BEQ.rel ("_f5ae");            // exit if ??
/* f55b */                   BCS.rel ("_f530");
/* f55d */        _`_f55d`;  LDA.zpg ("status_0090");      // get the serial status byte
/* f55f */                   AND.imm (0x10);               // mask 000x 0000, read error
/* f561 */                   SEC.imp ();                   // flag fail
/* f562 */                   BNE.rel ("_f5ae");            // if read error just exit
/* f564 */                   CPX.imm (0x01);
/* f566 */                   BEQ.rel ("_f579");
/* f568 */                   CPX.imm (0x03);
/* f56a */                   BNE.rel ("_f549");
/* f56c */        _`_f56c`;  LDY.imm (0x01);
/* f56e */                   LDA.iny ("tape1+0_00b2");
/* f570 */                   STA.zpg ("memuss+0_00c3");
/* f572 */                   INY.imp ();
/* f573 */                   LDA.iny ("tape1+0_00b2");
/* f575 */                   STA.zpg ("memuss+1_00c4");
/* f577 */                   BCS.rel ("_f57d");
/* f579 */        _`_f579`;  LDA.zpg ("sa_00b9");          // get the secondary address
/* f57b */                   BNE.rel ("_f56c");
/* f57d */        _`_f57d`;  LDY.imm (0x03);
/* f57f */                   LDA.iny ("tape1+0_00b2");
/* f581 */                   LDY.imm (0x01);
/* f583 */                   SBC.iny ("tape1+0_00b2");
/* f585 */                   TAX.imp ();
/* f586 */                   LDY.imm (0x04);
/* f588 */                   LDA.iny ("tape1+0_00b2");
/* f58a */                   LDY.imm (0x02);
/* f58c */                   SBC.iny ("tape1+0_00b2");
/* f58e */                   TAY.imp ();
/* f58f */                   CLC.imp ();
/* f590 */                   TXA.imp ();
/* f591 */                   ADC.zpg ("memuss+0_00c3");
/* f593 */                   STA.zpg ("eal+0_00ae");
/* f595 */                   TYA.imp ();
/* f596 */                   ADC.zpg ("memuss+1_00c4");
/* f598 */                   STA.zpg ("eal+1_00af");
/* f59a */                   LDA.zpg ("memuss+0_00c3");
/* f59c */                   STA.zpg ("stal+0_00c1");      // set I/O start addresses low byte
/* f59e */                   LDA.zpg ("memuss+1_00c4");
/* f5a0 */                   STA.zpg ("stal+1_00c2");      // set I/O start addresses high byte
/* f5a2 */                   JSR.abs ("_f5d2");            // display "LOADING" or "VERIFYING"
/* f5a5 */                   JSR.abs ("_f84a");            // do the tape read
/* f5a8 */                   _.bytes(0x24);                // makes next line BIT $18, keep the error flag in Cb
/* f5a9 */        _`_f5a9`;  CLC.imp ();                   // flag ok
/* f5aa */                   LDX.zpg ("eal+0_00ae");       // get the LOAD end pointer low byte
/* f5ac */                   LDY.zpg ("eal+1_00af");       // get the LOAD end pointer high byte
/* f5ae */        _`_f5ae`;  RTS.imp ();

// ------------------------------------------------------- // print "Searching..."
/* f5af */        _`_f5af`;  LDA.zpg ("msgflg_009d");      // get message mode flag
/* f5b1 */                   BPL.rel ("_f5d1");            // exit if control messages off
/* f5b3 */                   LDY.imm (0x0c);
                                                           // index to "SEARCHING "
/* f5b5 */                   JSR.abs ("_f12f");            // display kernel I/O message
/* f5b8 */                   LDA.zpg ("fnlen_00b7");       // get file name length
/* f5ba */                   BEQ.rel ("_f5d1");            // exit if null name
/* f5bc */                   LDY.imm (0x17);
                                                           // else index to "FOR "
/* f5be */                   JSR.abs ("_f12f");            // display kernel I/O message

// ------------------------------------------------------- // print file name
/* f5c1 */        _`_f5c1`;  LDY.zpg ("fnlen_00b7");       // get file name length
/* f5c3 */                   BEQ.rel ("_f5d1");            // exit if null file name
/* f5c5 */                   LDY.imm (0x00);               // clear index
/* f5c7 */        _`_f5c7`;  LDA.iny ("fnadr+0_00bb");     // get file name byte
/* f5c9 */                   JSR.abs ("chrout_ffd2");      // output character to channel
/* f5cc */                   INY.imp ();                   // increment index
/* f5cd */                   CPY.zpg ("fnlen_00b7");       // compare with file name length
/* f5cf */                   BNE.rel ("_f5c7");            // loop if more to do
/* f5d1 */        _`_f5d1`;  RTS.imp ();

// ------------------------------------------------------- // display "LOADING" or "VERIFYING"
/* f5d2 */        _`_f5d2`;  LDY.imm (0x49);
                                                           // point to "LOADING"
/* f5d4 */                   LDA.zpg ("verck_0093");       // get load/verify flag
/* f5d6 */                   BEQ.rel ("_f5da");            // branch if load
/* f5d8 */                   LDY.imm (0x59);
                                                           // point to "VERIFYING"
/* f5da */        _`_f5da`;  JMP.abs ("_f12b");            // display kernel I/O message if in direct mode and return

// ------------------------------------------------------- // save RAM to device, A = index to start address, XY = end address low/high
/* f5dd */    _`save_f5dd`;  STX.zpg ("eal+0_00ae");       // save end address low byte
/* f5df */                   STY.zpg ("eal+1_00af");       // save end address high byte
/* f5e1 */                   TAX.imp ();                   // copy index to start pointer
/* f5e2 */                   LDA.zpx (0x00);               // get start address low byte
/* f5e4 */                   STA.zpg ("stal+0_00c1");      // set I/O start addresses low byte
/* f5e6 */                   LDA.zpx (0x01);               // get start address high byte
/* f5e8 */                   STA.zpg ("stal+1_00c2");      // set I/O start addresses high byte
/* f5ea */                   JMP.ind ("isave+0_0332");     // go save, usually points to $F685

// ------------------------------------------------------- // save
/* f5ed */                   LDA.zpg ("fa_00ba");          // get the device number
/* f5ef */                   BNE.rel ("_f5f4");            // if not keyboard go ??
                                                           // else ..
/* f5f1 */        _`_f5f1`;  JMP.abs ("_f713");            // else do 'illegal device number' and return
/* f5f4 */        _`_f5f4`;  CMP.imm (0x03);               // compare device number with screen
/* f5f6 */                   BEQ.rel ("_f5f1");            // if screen do illegal device number and return
/* f5f8 */                   BCC.rel ("_f659");            // branch if < screen
                                                           // is greater than screen so is serial bus
/* f5fa */                   LDA.imm (0x61);               // set secondary address to $01
                                                           // when a secondary address is to be sent to a device on
                                                           // the serial bus the address must first be ORed with $60
/* f5fc */                   STA.zpg ("sa_00b9");          // save the secondary address
/* f5fe */                   LDY.zpg ("fnlen_00b7");       // get the file name length
/* f600 */                   BNE.rel ("_f605");            // if filename not null continue
/* f602 */                   JMP.abs ("_f710");            // else do 'missing file name' error and return
/* f605 */        _`_f605`;  JSR.abs ("_f3d5");            // send secondary address and filename
/* f608 */                   JSR.abs ("_f68f");            // print saving <file name>
/* f60b */                   LDA.zpg ("fa_00ba");          // get the device number
/* f60d */                   JSR.abs ("listen_ed0c");      // command devices on the serial bus to LISTEN
/* f610 */                   LDA.zpg ("sa_00b9");          // get the secondary address
/* f612 */                   JSR.abs ("second_edb9");      // send secondary address after LISTEN
/* f615 */                   LDY.imm (0x00);               // clear index
/* f617 */                   JSR.abs ("_fb8e");            // copy I/O start address to buffer address
/* f61a */                   LDA.zpg ("sal+0_00ac");       // get buffer address low byte
/* f61c */                   JSR.abs ("ciout_eddd");       // output byte to serial bus
/* f61f */                   LDA.zpg ("sal+1_00ad");       // get buffer address high byte
/* f621 */                   JSR.abs ("ciout_eddd");       // output byte to serial bus
/* f624 */        _`_f624`;  JSR.abs ("_fcd1");            // check read/write pointer, return Cb = 1 if pointer >= end
/* f627 */                   BCS.rel ("_f63f");            // go do UNLISTEN if at end
/* f629 */                   LDA.iny ("sal+0_00ac");       // get byte from buffer
/* f62b */                   JSR.abs ("ciout_eddd");       // output byte to serial bus
/* f62e */                   JSR.abs ("stop_ffe1");        // scan stop key
/* f631 */                   BNE.rel ("_f63a");            // if stop not pressed go increment pointer and loop for next
                                                           // else ..
                                                           // close the serial bus device and flag stop
/* f633 */        _`_f633`;  JSR.abs ("_f642");            // close serial bus device
/* f636 */                   LDA.imm (0x00);
/* f638 */                   SEC.imp ();                   // flag stop
/* f639 */                   RTS.imp ();
/* f63a */        _`_f63a`;  JSR.abs ("_fcdb");            // increment read/write pointer
/* f63d */                   BNE.rel ("_f624");            // loop, branch always
/* f63f */        _`_f63f`;  JSR.abs ("unlsn_edfe");       // command serial bus to UNLISTEN
                                                           // close serial bus device
/* f642 */        _`_f642`;  BIT.zpg ("sa_00b9");          // test the secondary address
/* f644 */                   BMI.rel ("_f657");            // if already closed just exit
/* f646 */                   LDA.zpg ("fa_00ba");          // get the device number
/* f648 */                   JSR.abs ("listen_ed0c");      // command devices on the serial bus to LISTEN
/* f64b */                   LDA.zpg ("sa_00b9");          // get the secondary address
/* f64d */                   AND.imm (0xef);               // mask the channel number
/* f64f */                   ORA.imm (0xe0);               // OR with the CLOSE command
/* f651 */                   JSR.abs ("second_edb9");      // send secondary address after LISTEN
/* f654 */        _`_f654`;  JSR.abs ("unlsn_edfe");       // command serial bus to UNLISTEN
/* f657 */        _`_f657`;  CLC.imp ();                   // flag ok
/* f658 */                   RTS.imp ();
/* f659 */        _`_f659`;  LSR.acc ();
/* f65a */                   BCS.rel ("_f65f");            // if not RS232 device ??
/* f65c */                   JMP.abs ("_f713");            // else do 'illegal device number' and return
/* f65f */        _`_f65f`;  JSR.abs ("_f7d0");            // get tape buffer start pointer in XY
/* f662 */                   BCC.rel ("_f5f1");            // if < $0200 do illegal device number and return
/* f664 */                   JSR.abs ("_f838");            // wait for PLAY/RECORD
/* f667 */                   BCS.rel ("_f68e");            // exit if STOP was pressed
/* f669 */                   JSR.abs ("_f68f");            // print saving <file name>
/* f66c */                   LDX.imm (0x03);               // set header for a non relocatable program file
/* f66e */                   LDA.zpg ("sa_00b9");          // get the secondary address
/* f670 */                   AND.imm (0x01);               // mask non relocatable bit
/* f672 */                   BNE.rel ("_f676");            // if non relocatable program go ??
/* f674 */                   LDX.imm (0x01);               // else set header for a relocatable program file
/* f676 */        _`_f676`;  TXA.imp ();                   // copy header type to A
/* f677 */                   JSR.abs ("_f76a");            // write tape header
/* f67a */                   BCS.rel ("_f68e");            // exit if error
/* f67c */                   JSR.abs ("_f867");            // do tape write, 20 cycle count
/* f67f */                   BCS.rel ("_f68e");            // exit if error
/* f681 */                   LDA.zpg ("sa_00b9");          // get the secondary address
/* f683 */                   AND.imm (0x02);               // mask end of tape flag
/* f685 */                   BEQ.rel ("_f68d");            // if not end of tape go ??
/* f687 */                   LDA.imm (0x05);               // else set logical end of the tape
/* f689 */                   JSR.abs ("_f76a");            // write tape header
/* f68c */                   _.bytes(0x24);                // makes next line BIT $18 so Cb is not changed
/* f68d */        _`_f68d`;  CLC.imp ();                   // flag ok
/* f68e */        _`_f68e`;  RTS.imp ();

// ------------------------------------------------------- // print saving <file name>
/* f68f */        _`_f68f`;  LDA.zpg ("msgflg_009d");      // get message mode flag
/* f691 */                   BPL.rel ("_f68e");            // exit if control messages off
/* f693 */                   LDY.imm (0x51);
                                                           // index to "SAVING "
/* f695 */                   JSR.abs ("_f12f");            // display kernel I/O message
/* f698 */                   JMP.abs ("_f5c1");            // print file name and return

// ------------------------------------------------------- // increment the real time clock
/* f69b */   _`udtim_f69b`;  LDX.imm (0x00);               // clear X
/* f69d */                   INC.zpg ("time+2_00a2");      // increment the jiffy clock low byte
/* f69f */                   BNE.rel ("_f6a7");            // if no rollover ??
/* f6a1 */                   INC.zpg ("time+1_00a1");      // increment the jiffy clock mid byte
/* f6a3 */                   BNE.rel ("_f6a7");            // branch if no rollover
/* f6a5 */                   INC.zpg ("time+0_00a0");      // increment the jiffy clock high byte
                                                           // now subtract a days worth of jiffies from current count
                                                           // and remember only the Cb result
/* f6a7 */        _`_f6a7`;  SEC.imp ();                   // set carry for subtract
/* f6a8 */                   LDA.zpg ("time+2_00a2");      // get the jiffy clock low byte
/* f6aa */                   SBC.imm (0x01);               // subtract $4F1A01 low byte
/* f6ac */                   LDA.zpg ("time+1_00a1");      // get the jiffy clock mid byte
/* f6ae */                   SBC.imm (0x1a);               // subtract $4F1A01 mid byte
/* f6b0 */                   LDA.zpg ("time+0_00a0");      // get the jiffy clock high byte
/* f6b2 */                   SBC.imm (0x4f);               // subtract $4F1A01 high byte
/* f6b4 */                   BCC.rel ("_f6bc");            // if less than $4F1A01 jiffies skip the clock reset
                                                           // else ..
/* f6b6 */                   STX.zpg ("time+0_00a0");      // clear the jiffy clock high byte
/* f6b8 */                   STX.zpg ("time+1_00a1");      // clear the jiffy clock mid byte
/* f6ba */                   STX.zpg ("time+2_00a2");      // clear the jiffy clock low byte
                                                           // this is wrong, there are $4F1A00 jiffies in a day so
                                                           // the reset to zero should occur when the value reaches
                                                           // $4F1A00 and not $4F1A01. this would give an extra jiffy
                                                           // every day and a possible TI value of 24:00:00
/* f6bc */        _`_f6bc`;  LDA.abs ("ciaprb_dc01");      // read VIA 1 DRB, keyboard row port
/* f6bf */                   CMP.abs ("ciaprb_dc01");      // compare it with itself
/* f6c2 */                   BNE.rel ("_f6bc");            // loop if changing
/* f6c4 */                   TAX.imp ();
/* f6c5 */                   BMI.rel ("_f6da");
/* f6c7 */                   LDX.imm (0xbd);               // set c6
/* f6c9 */                   STX.abs ("ciapra_dc00");      // save VIA 1 DRA, keyboard column drive
/* f6cc */        _`_f6cc`;  LDX.abs ("ciaprb_dc01");      // read VIA 1 DRB, keyboard row port
/* f6cf */                   CPX.abs ("ciaprb_dc01");      // compare it with itself
/* f6d2 */                   BNE.rel ("_f6cc");            // loop if changing
/* f6d4 */                   STA.abs ("ciapra_dc00");      // save VIA 1 DRA, keyboard column drive
/* f6d7 */                   INX.imp ();
/* f6d8 */                   BNE.rel ("_f6dc");
/* f6da */        _`_f6da`;  STA.zpg ("stkey_0091");       // save the stop key column
/* f6dc */        _`_f6dc`;  RTS.imp ();

// ------------------------------------------------------- // read the real time clock
/* f6dd */   _`rdtim_f6dd`;  SEI.imp ();                   // disable the interrupts
/* f6de */                   LDA.zpg ("time+2_00a2");      // get the jiffy clock low byte
/* f6e0 */                   LDX.zpg ("time+1_00a1");      // get the jiffy clock mid byte
/* f6e2 */                   LDY.zpg ("time+0_00a0");      // get the jiffy clock high byte

// ------------------------------------------------------- // set the real time clock
/* f6e4 */  _`settim_f6e4`;  SEI.imp ();                   // disable the interrupts
/* f6e5 */                   STA.zpg ("time+2_00a2");      // save the jiffy clock low byte
/* f6e7 */                   STX.zpg ("time+1_00a1");      // save the jiffy clock mid byte
/* f6e9 */                   STY.zpg ("time+0_00a0");      // save the jiffy clock high byte
/* f6eb */                   CLI.imp ();                   // enable the interrupts
/* f6ec */                   RTS.imp ();

// ------------------------------------------------------- // scan the stop key, return Zb = 1 = [STOP]
/* f6ed */    _`stop_f6ed`;  LDA.zpg ("stkey_0091");       // read the stop key column
/* f6ef */                   CMP.imm (0x7f);               // compare with [STP] down
/* f6f1 */                   BNE.rel ("_f6fa");            // if not [STP] or not just [STP] exit
                                                           // just [STP] was pressed
/* f6f3 */                   PHP.imp ();                   // save status
/* f6f4 */                   JSR.abs ("clrchn_ffcc");      // close input and output channels
/* f6f7 */                   STA.zpg ("ndx_00c6");         // save the keyboard buffer index
/* f6f9 */                   PLP.imp ();                   // restore status
/* f6fa */        _`_f6fa`;  RTS.imp ();

// ------------------------------------------------------- // file error messages
/* f6fb */        _`_f6fb`;  LDA.imm (0x01);               // 'too many files' error
/* f6fd */                   _.bytes(0x2c);                // makes next line BIT $02A9
/* f6fe */        _`_f6fe`;  LDA.imm (0x02);               // 'file already open' error
/* f700 */                   _.bytes(0x2c);                // makes next line BIT $03A9
/* f701 */        _`_f701`;  LDA.imm (0x03);               // 'file not open' error
/* f703 */                   _.bytes(0x2c);                // makes next line BIT $04A9
/* f704 */        _`_f704`;  LDA.imm (0x04);               // 'file not found' error
/* f706 */                   _.bytes(0x2c);                // makes next line BIT $05A9
/* f707 */        _`_f707`;  LDA.imm (0x05);               // 'device not present' error
/* f709 */                   _.bytes(0x2c);                // makes next line BIT $06A9
/* f70a */        _`_f70a`;  LDA.imm (0x06);               // 'not input file' error
/* f70c */                   _.bytes(0x2c);                // makes next line BIT $07A9
/* f70d */        _`_f70d`;  LDA.imm (0x07);               // 'not output file' error
/* f70f */                   _.bytes(0x2c);                // makes next line BIT $08A9
/* f710 */        _`_f710`;  LDA.imm (0x08);               // 'missing file name' error
/* f712 */                   _.bytes(0x2c);                // makes next line BIT $09A9
/* f713 */        _`_f713`;  LDA.imm (0x09);               // do 'illegal device number'
/* f715 */                   PHA.imp ();                   // save the error #
/* f716 */                   JSR.abs ("clrchn_ffcc");      // close input and output channels
/* f719 */                   LDY.imm (0x00);
                                                           // index to "I/O ERROR #"
/* f71b */                   BIT.zpg ("msgflg_009d");      // test message mode flag
/* f71d */                   BVC.rel ("_f729");            // exit if kernal messages off
/* f71f */                   JSR.abs ("_f12f");            // display kernel I/O message
/* f722 */                   PLA.imp ();                   // restore error #
/* f723 */                   PHA.imp ();                   // copy error #
/* f724 */                   ORA.imm (0x30);               // convert to ASCII
/* f726 */                   JSR.abs ("chrout_ffd2");      // output character to channel
/* f729 */        _`_f729`;  PLA.imp ();                   // pull error number
/* f72a */                   SEC.imp ();                   // flag error
/* f72b */                   RTS.imp ();

// ------------------------------------------------------- // find the tape header, exit with header in buffer
/* f72c */        _`_f72c`;  LDA.zpg ("verck_0093");       // get load/verify flag
/* f72e */                   PHA.imp ();                   // save load/verify flag
/* f72f */                   JSR.abs ("_f841");            // initiate tape read
/* f732 */                   PLA.imp ();                   // restore load/verify flag
/* f733 */                   STA.zpg ("verck_0093");       // save load/verify flag
/* f735 */                   BCS.rel ("_f769");            // exit if error
/* f737 */                   LDY.imm (0x00);               // clear the index
/* f739 */                   LDA.iny ("tape1+0_00b2");     // read first byte from tape buffer
/* f73b */                   CMP.imm (0x05);               // compare with logical end of the tape
/* f73d */                   BEQ.rel ("_f769");            // if end of the tape exit
/* f73f */                   CMP.imm (0x01);               // compare with header for a relocatable program file
/* f741 */                   BEQ.rel ("_f74b");            // if program file header go ??
/* f743 */                   CMP.imm (0x03);               // compare with header for a non relocatable program file
/* f745 */                   BEQ.rel ("_f74b");            // if program file header go  ??
/* f747 */                   CMP.imm (0x04);               // compare with data file header
/* f749 */                   BNE.rel ("_f72c");            // if data file loop to find the tape header
                                                           // was a program file header
/* f74b */        _`_f74b`;  TAX.imp ();                   // copy header type
/* f74c */                   BIT.zpg ("msgflg_009d");      // get message mode flag
/* f74e */                   BPL.rel ("_f767");            // exit if control messages off
/* f750 */                   LDY.imm (0x63);
                                                           // index to "FOUND "
/* f752 */                   JSR.abs ("_f12f");            // display kernel I/O message
/* f755 */                   LDY.imm (0x05);               // index to the tape filename
/* f757 */        _`_f757`;  LDA.iny ("tape1+0_00b2");     // get byte from tape buffer
/* f759 */                   JSR.abs ("chrout_ffd2");      // output character to channel
/* f75c */                   INY.imp ();                   // increment the index
/* f75d */                   CPY.imm (0x15);               // compare it with end+1
/* f75f */                   BNE.rel ("_f757");            // loop if more to do
/* f761 */                   LDA.zpg ("time+1_00a1");      // get the jiffy clock mid byte
/* f763 */                   JSR.abs ("_e4e0");            // wait ~8.5 seconds for any key from the STOP key column
/* f766 */                   NOP.imp ();                   // waste cycles
/* f767 */        _`_f767`;  CLC.imp ();                   // flag no error
/* f768 */                   DEY.imp ();                   // decrement the index
/* f769 */        _`_f769`;  RTS.imp ();

// ------------------------------------------------------- // write the tape header
/* f76a */        _`_f76a`;  STA.zpg ("ptr1_009e");        // save header type
/* f76c */                   JSR.abs ("_f7d0");            // get tape buffer start pointer in XY
/* f76f */                   BCC.rel ("_f7cf");            // if < $0200 just exit ??
/* f771 */                   LDA.zpg ("stal+1_00c2");      // get I/O start address high byte
/* f773 */                   PHA.imp ();                   // save it
/* f774 */                   LDA.zpg ("stal+0_00c1");      // get I/O start address low byte
/* f776 */                   PHA.imp ();                   // save it
/* f777 */                   LDA.zpg ("eal+1_00af");       // get tape end address high byte
/* f779 */                   PHA.imp ();                   // save it
/* f77a */                   LDA.zpg ("eal+0_00ae");       // get tape end address low byte
/* f77c */                   PHA.imp ();                   // save it
/* f77d */                   LDY.imm (0xbf);               // index to header end
/* f77f */                   LDA.imm (0x20);               // clear byte, [SPACE]
/* f781 */        _`_f781`;  STA.iny ("tape1+0_00b2");     // clear header byte
/* f783 */                   DEY.imp ();                   // decrement index
/* f784 */                   BNE.rel ("_f781");            // loop if more to do
/* f786 */                   LDA.zpg ("ptr1_009e");        // get the header type back
/* f788 */                   STA.iny ("tape1+0_00b2");     // write it to header
/* f78a */                   INY.imp ();                   // increment the index
/* f78b */                   LDA.zpg ("stal+0_00c1");      // get the I/O start address low byte
/* f78d */                   STA.iny ("tape1+0_00b2");     // write it to header
/* f78f */                   INY.imp ();                   // increment the index
/* f790 */                   LDA.zpg ("stal+1_00c2");      // get the I/O start address high byte
/* f792 */                   STA.iny ("tape1+0_00b2");     // write it to header
/* f794 */                   INY.imp ();                   // increment the index
/* f795 */                   LDA.zpg ("eal+0_00ae");       // get the tape end address low byte
/* f797 */                   STA.iny ("tape1+0_00b2");     // write it to header
/* f799 */                   INY.imp ();                   // increment the index
/* f79a */                   LDA.zpg ("eal+1_00af");       // get the tape end address high byte
/* f79c */                   STA.iny ("tape1+0_00b2");     // write it to header
/* f79e */                   INY.imp ();                   // increment the index
/* f79f */                   STY.zpg ("ptr2_009f");        // save the index
/* f7a1 */                   LDY.imm (0x00);               // clear Y
/* f7a3 */                   STY.zpg ("ptr1_009e");        // clear the name index
/* f7a5 */        _`_f7a5`;  LDY.zpg ("ptr1_009e");        // get name index
/* f7a7 */                   CPY.zpg ("fnlen_00b7");       // compare with file name length
/* f7a9 */                   BEQ.rel ("_f7b7");            // if all done exit the loop
/* f7ab */                   LDA.iny ("fnadr+0_00bb");     // get file name byte
/* f7ad */                   LDY.zpg ("ptr2_009f");        // get buffer index
/* f7af */                   STA.iny ("tape1+0_00b2");     // save file name byte to buffer
/* f7b1 */                   INC.zpg ("ptr1_009e");        // increment file name index
/* f7b3 */                   INC.zpg ("ptr2_009f");        // increment tape buffer index
/* f7b5 */                   BNE.rel ("_f7a5");            // loop, branch always
/* f7b7 */        _`_f7b7`;  JSR.abs ("_f7d7");            // set tape buffer start and end pointers
/* f7ba */                   LDA.imm (0x69);               // set write lead cycle count
/* f7bc */                   STA.zpg ("riprty_00ab");      // save write lead cycle count
/* f7be */                   JSR.abs ("_f86b");            // do tape write, no cycle count set
/* f7c1 */                   TAY.imp ();
/* f7c2 */                   PLA.imp ();                   // pull tape end address low byte
/* f7c3 */                   STA.zpg ("eal+0_00ae");       // restore it
/* f7c5 */                   PLA.imp ();                   // pull tape end address high byte
/* f7c6 */                   STA.zpg ("eal+1_00af");       // restore it
/* f7c8 */                   PLA.imp ();                   // pull I/O start addresses low byte
/* f7c9 */                   STA.zpg ("stal+0_00c1");      // restore it
/* f7cb */                   PLA.imp ();                   // pull I/O start addresses high byte
/* f7cc */                   STA.zpg ("stal+1_00c2");      // restore it
/* f7ce */                   TYA.imp ();
/* f7cf */        _`_f7cf`;  RTS.imp ();

// ------------------------------------------------------- // get the tape buffer start pointer
/* f7d0 */        _`_f7d0`;  LDX.zpg ("tape1+0_00b2");     // get tape buffer start pointer low byte
/* f7d2 */                   LDY.zpg ("tape1+1_00b3");     // get tape buffer start pointer high byte
/* f7d4 */                   CPY.imm (0x02);               // compare high byte with $02xx
/* f7d6 */                   RTS.imp ();

// ------------------------------------------------------- // set the tape buffer start and end pointers
/* f7d7 */        _`_f7d7`;  JSR.abs ("_f7d0");            // get tape buffer start pointer in XY
/* f7da */                   TXA.imp ();                   // copy tape buffer start pointer low byte
/* f7db */                   STA.zpg ("stal+0_00c1");      // save as I/O address pointer low byte
/* f7dd */                   CLC.imp ();                   // clear carry for add
/* f7de */                   ADC.imm (0xc0);               // add buffer length low byte
/* f7e0 */                   STA.zpg ("eal+0_00ae");       // save tape buffer end pointer low byte
/* f7e2 */                   TYA.imp ();                   // copy tape buffer start pointer high byte
/* f7e3 */                   STA.zpg ("stal+1_00c2");      // save as I/O address pointer high byte
/* f7e5 */                   ADC.imm (0x00);               // add buffer length high byte
/* f7e7 */                   STA.zpg ("eal+1_00af");       // save tape buffer end pointer high byte
/* f7e9 */                   RTS.imp ();

// ------------------------------------------------------- // find specific tape header
/* f7ea */        _`_f7ea`;  JSR.abs ("_f72c");            // find tape header, exit with header in buffer
/* f7ed */                   BCS.rel ("_f80c");            // just exit if error
/* f7ef */                   LDY.imm (0x05);               // index to name
/* f7f1 */                   STY.zpg ("ptr2_009f");        // save as tape buffer index
/* f7f3 */                   LDY.imm (0x00);               // clear Y
/* f7f5 */                   STY.zpg ("ptr1_009e");        // save as name buffer index
/* f7f7 */        _`_f7f7`;  CPY.zpg ("fnlen_00b7");       // compare with file name length
/* f7f9 */                   BEQ.rel ("_f80b");            // ok exit if match
/* f7fb */                   LDA.iny ("fnadr+0_00bb");     // get file name byte
/* f7fd */                   LDY.zpg ("ptr2_009f");        // get index to tape buffer
/* f7ff */                   CMP.iny ("tape1+0_00b2");     // compare with tape header name byte
/* f801 */                   BNE.rel ("_f7ea");            // if no match go get next header
/* f803 */                   INC.zpg ("ptr1_009e");        // else increment name buffer index
/* f805 */                   INC.zpg ("ptr2_009f");        // increment tape buffer index
/* f807 */                   LDY.zpg ("ptr1_009e");        // get name buffer index
/* f809 */                   BNE.rel ("_f7f7");            // loop, branch always
/* f80b */        _`_f80b`;  CLC.imp ();                   // flag ok
/* f80c */        _`_f80c`;  RTS.imp ();

// ------------------------------------------------------- // bump tape pointer
/* f80d */        _`_f80d`;  JSR.abs ("_f7d0");            // get tape buffer start pointer in XY
/* f810 */                   INC.zpg ("bufpnt_00a6");      // increment tape buffer index
/* f812 */                   LDY.zpg ("bufpnt_00a6");      // get tape buffer index
/* f814 */                   CPY.imm (0xc0);               // compare with buffer length
/* f816 */                   RTS.imp ();

// ------------------------------------------------------- // wait for PLAY
/* f817 */        _`_f817`;  JSR.abs ("_f82e");            // return cassette sense in Zb
/* f81a */                   BEQ.rel ("_f836");            // if switch closed just exit
                                                           // cassette switch was open
/* f81c */                   LDY.imm (0x1b);
                                                           // index to "PRESS PLAY ON TAPE"
/* f81e */        _`_f81e`;  JSR.abs ("_f12f");            // display kernel I/O message
/* f821 */        _`_f821`;  JSR.abs ("_f8d0");            // scan stop key and flag abort if pressed
                                                           // note if STOP was pressed the return is to the
                                                           // routine that called this one and not here
/* f824 */                   JSR.abs ("_f82e");            // return cassette sense in Zb
/* f827 */                   BNE.rel ("_f821");            // loop if the cassette switch is open
/* f829 */                   LDY.imm (0x6a);
                                                           // index to "OK"
/* f82b */                   JMP.abs ("_f12f");            // display kernel I/O message and return

// ------------------------------------------------------- // return cassette sense in Zb
/* f82e */        _`_f82e`;  LDA.imm (0x10);               // set the mask for the cassette switch
/* f830 */                   BIT.zpg ("r6510_0001");       // test the 6510 I/O port
/* f832 */                   BNE.rel ("_f836");            // branch if cassette sense high
/* f834 */                   BIT.zpg ("r6510_0001");       // test the 6510 I/O port
/* f836 */        _`_f836`;  CLC.imp ();
/* f837 */                   RTS.imp ();

// ------------------------------------------------------- // wait for PLAY/RECORD
/* f838 */        _`_f838`;  JSR.abs ("_f82e");            // return the cassette sense in Zb
/* f83b */                   BEQ.rel ("_f836");            // exit if switch closed
                                                           // cassette switch was open
/* f83d */                   LDY.imm (0x2e);
                                                           // index to "PRESS RECORD & PLAY ON TAPE"
/* f83f */                   BNE.rel ("_f81e");            // display message and wait for switch, branch always

// ------------------------------------------------------- // initiate a tape read
/* f841 */        _`_f841`;  LDA.imm (0x00);               // clear A
/* f843 */                   STA.zpg ("status_0090");      // clear serial status byte
/* f845 */                   STA.zpg ("verck_0093");       // clear the load/verify flag
/* f847 */                   JSR.abs ("_f7d7");            // set the tape buffer start and end pointers
/* f84a */        _`_f84a`;  JSR.abs ("_f817");            // wait for PLAY
/* f84d */                   BCS.rel ("_f86e");            // exit if STOP was pressed, uses a further BCS at the
                                                           // target address to reach final target at $F8DC
/* f84f */                   SEI.imp ();                   // disable interrupts
/* f850 */                   LDA.imm (0x00);               // clear A
/* f852 */                   STA.zpg ("ridata_00aa");
/* f854 */                   STA.zpg ("bitts_00b4");
/* f856 */                   STA.zpg ("cmp0+0_00b0");      // clear tape timing constant min byte
/* f858 */                   STA.zpg ("ptr1_009e");        // clear tape pass 1 error log/char buffer
/* f85a */                   STA.zpg ("ptr2_009f");        // clear tape pass 2 error log corrected
/* f85c */                   STA.zpg ("dpsw_009c");        // clear byte received flag
/* f85e */                   LDA.imm (0x90);               // enable CA1 interrupt ??
/* f860 */                   LDX.imm (0x0e);               // set index for tape read vector
/* f862 */                   BNE.rel ("_f875");            // go do tape read/write, branch always

// ------------------------------------------------------- // initiate a tape write
/* f864 */        _`_f864`;  JSR.abs ("_f7d7");            // set tape buffer start and end pointers
                                                           // do tape write, 20 cycle count
/* f867 */        _`_f867`;  LDA.imm (0x14);               // set write lead cycle count
/* f869 */                   STA.zpg ("riprty_00ab");      // save write lead cycle count
                                                           // do tape write, no cycle count set
/* f86b */        _`_f86b`;  JSR.abs ("_f838");            // wait for PLAY/RECORD
/* f86e */        _`_f86e`;  BCS.rel ("_f8dc");            // if STOPped clear save IRQ address and exit
/* f870 */                   SEI.imp ();                   // disable interrupts
/* f871 */                   LDA.imm (0x82);               // enable ?? interrupt
/* f873 */                   LDX.imm (0x08);               // set index for tape write tape leader vector

// ------------------------------------------------------- // tape read/write
/* f875 */        _`_f875`;  LDY.imm (0x7f);               // disable all interrupts
/* f877 */                   STY.abs ("ciaicr_dc0d");      // save VIA 1 ICR, disable all interrupts
/* f87a */                   STA.abs ("ciaicr_dc0d");      // save VIA 1 ICR, enable interrupts according to A
                                                           // check RS232 bus idle
/* f87d */                   LDA.abs ("ciacra_dc0e");      // read VIA 1 CRA
/* f880 */                   ORA.imm (0x19);               // load timer B, timer B single shot, start timer B
/* f882 */                   STA.abs ("ciacrb_dc0f");      // save VIA 1 CRB
/* f885 */                   AND.imm (0x91);               // mask x00x 000x, TOD clock, load timer A, start timer A
/* f887 */                   STA.abs ("todsns_02a2");      // save VIA 1 CRB shadow copy
/* f88a */                   JSR.abs ("_f0a4");
/* f88d */                   LDA.abs ("scroly_d011");      // read the vertical fine scroll and control register
/* f890 */                   AND.imm (0xef);               // mask xxx0 xxxx, blank the screen
/* f892 */                   STA.abs ("scroly_d011");      // save the vertical fine scroll and control register
/* f895 */                   LDA.abs ("cinv+0_0314");      // get IRQ vector low byte
/* f898 */                   STA.abs ("irqtmp+0_029f");    // save IRQ vector low byte
/* f89b */                   LDA.abs ("cinv+1_0315");      // get IRQ vector high byte
/* f89e */                   STA.abs ("irqtmp+1_02a0");    // save IRQ vector high byte
/* f8a1 */                   JSR.abs ("_fcbd");            // set the tape vector
/* f8a4 */                   LDA.imm (0x02);               // set copies count. the first copy is the load copy, the
                                                           // second copy is the verify copy
/* f8a6 */                   STA.zpg ("fsblk_00be");       // save copies count
/* f8a8 */                   JSR.abs ("_fb97");            // new tape byte setup
/* f8ab */                   LDA.zpg ("r6510_0001");       // read the 6510 I/O port
/* f8ad */                   AND.imm (0x1f);               // mask 000x xxxx, cassette motor on ??
/* f8af */                   STA.zpg ("r6510_0001");       // save the 6510 I/O port
/* f8b1 */                   STA.zpg ("cas1_00c0");        // set the tape motor interlock
                                                           // 326656 cycle delay, allow tape motor speed to stabilise
/* f8b3 */                   LDX.imm (0xff);               // outer loop count
/* f8b5 */        _`_f8b5`;  LDY.imm (0xff);               // inner loop count
/* f8b7 */        _`_f8b7`;  DEY.imp ();                   // decrement inner loop count
/* f8b8 */                   BNE.rel ("_f8b7");            // loop if more to do
/* f8ba */                   DEX.imp ();                   // decrement outer loop count
/* f8bb */                   BNE.rel ("_f8b5");            // loop if more to do
/* f8bd */                   CLI.imp ();                   // enable tape interrupts
/* f8be */        _`_f8be`;  LDA.abs ("irqtmp+1_02a0");    // get saved IRQ high byte
/* f8c1 */                   CMP.abs ("cinv+1_0315");      // compare with the current IRQ high byte
/* f8c4 */                   CLC.imp ();                   // flag ok
/* f8c5 */                   BEQ.rel ("_f8dc");            // if tape write done go clear saved IRQ address and exit
/* f8c7 */                   JSR.abs ("_f8d0");            // scan stop key and flag abort if pressed
                                                           // note if STOP was pressed the return is to the
                                                           // routine that called this one and not here
/* f8ca */                   JSR.abs ("_f6bc");            // increment real time clock
/* f8cd */                   JMP.abs ("_f8be");            // loop

// ------------------------------------------------------- // scan stop key and flag abort if pressed
/* f8d0 */        _`_f8d0`;  JSR.abs ("stop_ffe1");        // scan stop key
/* f8d3 */                   CLC.imp ();                   // flag no stop
/* f8d4 */                   BNE.rel ("_f8e1");            // exit if no stop
/* f8d6 */                   JSR.abs ("_fc93");            // restore everything for STOP
/* f8d9 */                   SEC.imp ();                   // flag stopped
/* f8da */                   PLA.imp ();                   // dump return address low byte
/* f8db */                   PLA.imp ();                   // dump return address high byte

// ------------------------------------------------------- // clear saved IRQ address
/* f8dc */        _`_f8dc`;  LDA.imm (0x00);               // clear A
/* f8de */                   STA.abs ("irqtmp+1_02a0");    // clear saved IRQ address high byte
/* f8e1 */        _`_f8e1`;  RTS.imp ();

// ------------------------------------------------------- // # set timing
/* f8e2 */        _`_f8e2`;  STX.zpg ("cmp0+1_00b1");      // save tape timing constant max byte
/* f8e4 */                   LDA.zpg ("cmp0+0_00b0");      // get tape timing constant min byte
/* f8e6 */                   ASL.acc ();                   // *2
/* f8e7 */                   ASL.acc ();                   // *4
/* f8e8 */                   CLC.imp ();                   // clear carry for add
/* f8e9 */                   ADC.zpg ("cmp0+0_00b0");      // add tape timing constant min byte *5
/* f8eb */                   CLC.imp ();                   // clear carry for add
/* f8ec */                   ADC.zpg ("cmp0+1_00b1");      // add tape timing constant max byte
/* f8ee */                   STA.zpg ("cmp0+1_00b1");      // save tape timing constant max byte
/* f8f0 */                   LDA.imm (0x00);
/* f8f2 */                   BIT.zpg ("cmp0+0_00b0");      // test tape timing constant min byte
/* f8f4 */                   BMI.rel ("_f8f7");            // branch if b7 set
/* f8f6 */                   ROL.acc ();                   // else shift carry into ??
/* f8f7 */        _`_f8f7`;  ASL.zpg ("cmp0+1_00b1");      // shift tape timing constant max byte
/* f8f9 */                   ROL.acc ();
/* f8fa */                   ASL.zpg ("cmp0+1_00b1");      // shift tape timing constant max byte
/* f8fc */                   ROL.acc ();
/* f8fd */                   TAX.imp ();
/* f8fe */        _`_f8fe`;  LDA.abs ("timblo_dc06");      // get VIA 1 timer B low byte
/* f901 */                   CMP.imm (0x16);               // compare with ??
/* f903 */                   BCC.rel ("_f8fe");            // loop if less
/* f905 */                   ADC.zpg ("cmp0+1_00b1");      // add tape timing constant max byte
/* f907 */                   STA.abs ("timalo_dc04");      // save VIA 1 timer A low byte
/* f90a */                   TXA.imp ();
/* f90b */                   ADC.abs ("timbhi_dc07");      // add VIA 1 timer B high byte
/* f90e */                   STA.abs ("timahi_dc05");      // save VIA 1 timer A high byte
/* f911 */                   LDA.abs ("todsns_02a2");      // read VIA 1 CRB shadow copy
/* f914 */                   STA.abs ("ciacra_dc0e");      // save VIA 1 CRA
/* f917 */                   STA.abs ("td1irq_02a4");      // save VIA 1 CRA shadow copy
/* f91a */                   LDA.abs ("ciaicr_dc0d");      // read VIA 1 ICR
/* f91d */                   AND.imm (0x10);               // mask 000x 0000, FLAG interrupt
/* f91f */                   BEQ.rel ("_f92a");            // if no FLAG interrupt just exit
                                                           // else first call the IRQ routine
/* f921 */                   LDA.imm (0xf9);               // set the return address high byte
/* f923 */                   PHA.imp ();                   // push the return address high byte
/* f924 */                   LDA.imm (0x2a);               // set the return address low byte
/* f926 */                   PHA.imp ();                   // push the return address low byte
/* f927 */                   JMP.abs ("_ff43");            // save the status and do the IRQ routine
/* f92a */        _`_f92a`;  CLI.imp ();                   // enable interrupts
/* f92b */                   RTS.imp ();

// ------------------------------------------------------- // On Commodore computers, the streams consist of four kinds of symbols
                                                           // that denote different kinds of low-to-high-to-low transitions on the
                                                           // read or write signals of the Commodore cassette interface.

                                                           // A A break in the communications, or a pulse with very long cycle
                                                           //   time.

                                                           // B A short pulse, whose cycle time typically ranges from 296 to 424
                                                           //   microseconds, depending on the computer model.

                                                           // C A medium-length pulse, whose cycle time typically ranges from
                                                           //   440 to 576 microseconds, depending on the computer model.

                                                           // D A long pulse, whose cycle time typically ranges from 600 to 744
                                                           //   microseconds, depending on the computer model.

                                                           //  The actual interpretation of the serial data takes a little more work to explain.
                                                           // The typical ROM tape loader (and the turbo loaders) will initialize a timer with a
                                                           // specified value and start it counting down. If either the tape data changes or the
                                                           // timer runs out, an IRQ will occur. The loader will determine which condition caused
                                                           // the IRQ. If the tape data changed before the timer ran out, we have a short pulse,
                                                           // or a "0" bit. If the timer ran out first, we have a long pulse, or a "1" bit. Doing
                                                           // this continuously and we decode the entire file.
                                                           // read tape bits, IRQ routine
                                                           // read T2C which has been counting down from $FFFF. subtract this from $FFFF
/* f92c */        _`_f92c`;  LDX.abs ("timbhi_dc07");      // read VIA 1 timer B high byte
/* f92f */                   LDY.imm (0xff);               // set $FF
/* f931 */                   TYA.imp ();                   // A = $FF
/* f932 */                   SBC.abs ("timblo_dc06");      // subtract VIA 1 timer B low byte
/* f935 */                   CPX.abs ("timbhi_dc07");      // compare it with VIA 1 timer B high byte
/* f938 */                   BNE.rel ("_f92c");            // if timer low byte rolled over loop
/* f93a */                   STX.zpg ("cmp0+1_00b1");      // save tape timing constant max byte
/* f93c */                   TAX.imp ();                   // copy $FF - T2C_l
/* f93d */                   STY.abs ("timblo_dc06");      // save VIA 1 timer B low byte
/* f940 */                   STY.abs ("timbhi_dc07");      // save VIA 1 timer B high byte
/* f943 */                   LDA.imm (0x19);               // load timer B, timer B single shot, start timer B
/* f945 */                   STA.abs ("ciacrb_dc0f");      // save VIA 1 CRB
/* f948 */                   LDA.abs ("ciaicr_dc0d");      // read VIA 1 ICR
/* f94b */                   STA.abs ("trdtmp_02a3");      // save VIA 1 ICR shadow copy
/* f94e */                   TYA.imp ();                   // y = $FF
/* f94f */                   SBC.zpg ("cmp0+1_00b1");      // subtract tape timing constant max byte
                                                           // A = $FF - T2C_h
/* f951 */                   STX.zpg ("cmp0+1_00b1");      // save tape timing constant max byte
                                                           // $B1 = $FF - T2C_l
/* f953 */                   LSR.acc ();                   // A = $FF - T2C_h >> 1
/* f954 */                   ROR.zpg ("cmp0+1_00b1");      // shift tape timing constant max byte
                                                           // $B1 = $FF - T2C_l >> 1
/* f956 */                   LSR.acc ();                   // A = $FF - T2C_h >> 1
/* f957 */                   ROR.zpg ("cmp0+1_00b1");      // shift tape timing constant max byte
                                                           // $B1 = $FF - T2C_l >> 1
/* f959 */                   LDA.zpg ("cmp0+0_00b0");      // get tape timing constant min byte
/* f95b */                   CLC.imp ();                   // clear carry for add
/* f95c */                   ADC.imm (0x3c);
/* f95e */                   CMP.zpg ("cmp0+1_00b1");      // compare with tape timing constant max byte
                                                           // compare with ($FFFF - T2C) >> 2
/* f960 */                   BCS.rel ("_f9ac");            // branch if min + $3C >= ($FFFF - T2C) >> 2
                                                           // min + $3C < ($FFFF - T2C) >> 2
/* f962 */                   LDX.zpg ("dpsw_009c");        // get byte received flag
/* f964 */                   BEQ.rel ("_f969");            //  if not byte received ??
/* f966 */                   JMP.abs ("_fa60");            // store the tape character
/* f969 */        _`_f969`;  LDX.zpg ("tsfcnt_00a3");      // get EOI flag byte
/* f96b */                   BMI.rel ("_f988");
/* f96d */                   LDX.imm (0x00);
/* f96f */                   ADC.imm (0x30);
/* f971 */                   ADC.zpg ("cmp0+0_00b0");      // add tape timing constant min byte
/* f973 */                   CMP.zpg ("cmp0+1_00b1");      // compare with tape timing constant max byte
/* f975 */                   BCS.rel ("_f993");
/* f977 */                   INX.imp ();
/* f978 */                   ADC.imm (0x26);
/* f97a */                   ADC.zpg ("cmp0+0_00b0");      // add tape timing constant min byte
/* f97c */                   CMP.zpg ("cmp0+1_00b1");      // compare with tape timing constant max byte
/* f97e */                   BCS.rel ("_f997");
/* f980 */                   ADC.imm (0x2c);
/* f982 */                   ADC.zpg ("cmp0+0_00b0");      // add tape timing constant min byte
/* f984 */                   CMP.zpg ("cmp0+1_00b1");      // compare with tape timing constant max byte
/* f986 */                   BCC.rel ("_f98b");
/* f988 */        _`_f988`;  JMP.abs ("_fa10");
/* f98b */        _`_f98b`;  LDA.zpg ("bitts_00b4");       // get the bit count
/* f98d */                   BEQ.rel ("_f9ac");            // if all done go ??
/* f98f */                   STA.zpg ("bitci_00a8");       // save receiver bit count in
/* f991 */                   BNE.rel ("_f9ac");            // branch always
/* f993 */        _`_f993`;  INC.zpg ("rinone_00a9");      // increment ?? start bit check flag
/* f995 */                   BCS.rel ("_f999");
/* f997 */        _`_f997`;  DEC.zpg ("rinone_00a9");      // decrement ?? start bit check flag
/* f999 */        _`_f999`;  SEC.imp ();
/* f99a */                   SBC.imm (0x13);
/* f99c */                   SBC.zpg ("cmp0+1_00b1");      // subtract tape timing constant max byte
/* f99e */                   ADC.zpg ("svxt_0092");        // add timing constant for tape
/* f9a0 */                   STA.zpg ("svxt_0092");        // save timing constant for tape
/* f9a2 */                   LDA.zpg ("tbtcnt_00a4");      // get tape bit cycle phase
/* f9a4 */                   EOR.imm (0x01);
/* f9a6 */                   STA.zpg ("tbtcnt_00a4");      // save tape bit cycle phase
/* f9a8 */                   BEQ.rel ("_f9d5");
/* f9aa */                   STX.zpg ("schar_00d7");
/* f9ac */        _`_f9ac`;  LDA.zpg ("bitts_00b4");       // get the bit count
/* f9ae */                   BEQ.rel ("_f9d2");            // if all done go ??
/* f9b0 */                   LDA.abs ("trdtmp_02a3");      // read VIA 1 ICR shadow copy
/* f9b3 */                   AND.imm (0x01);               // mask 0000 000x, timer A interrupt enabled
/* f9b5 */                   BNE.rel ("_f9bc");            // if timer A is enabled go ??
/* f9b7 */                   LDA.abs ("td1irq_02a4");      // read VIA 1 CRA shadow copy
/* f9ba */                   BNE.rel ("_f9d2");            // if ?? just exit
/* f9bc */        _`_f9bc`;  LDA.imm (0x00);               // clear A
/* f9be */                   STA.zpg ("tbtcnt_00a4");      // clear the tape bit cycle phase
/* f9c0 */                   STA.abs ("td1irq_02a4");      // save VIA 1 CRA shadow copy
/* f9c3 */                   LDA.zpg ("tsfcnt_00a3");      // get EOI flag byte
/* f9c5 */                   BPL.rel ("_f9f7");
/* f9c7 */                   BMI.rel ("_f988");
/* f9c9 */        _`_f9c9`;  LDX.imm (0xa6);               // set timimg max byte
/* f9cb */                   JSR.abs ("_f8e2");            // set timing
/* f9ce */                   LDA.zpg ("prty_009b");
/* f9d0 */                   BNE.rel ("_f98b");
/* f9d2 */        _`_f9d2`;  JMP.abs ("_febc");            // restore registers and exit interrupt
/* f9d5 */        _`_f9d5`;  LDA.zpg ("svxt_0092");        // get timing constant for tape
/* f9d7 */                   BEQ.rel ("_f9e0");
/* f9d9 */                   BMI.rel ("_f9de");
/* f9db */                   DEC.zpg ("cmp0+0_00b0");      // decrement tape timing constant min byte
/* f9dd */                   _.bytes(0x2c);                // makes next line BIT $B0E6
/* f9de */        _`_f9de`;  INC.zpg ("cmp0+0_00b0");      // increment tape timing constant min byte
/* f9e0 */        _`_f9e0`;  LDA.imm (0x00);
/* f9e2 */                   STA.zpg ("svxt_0092");        // clear timing constant for tape
/* f9e4 */                   CPX.zpg ("schar_00d7");
/* f9e6 */                   BNE.rel ("_f9f7");
/* f9e8 */                   TXA.imp ();
/* f9e9 */                   BNE.rel ("_f98b");
/* f9eb */                   LDA.zpg ("rinone_00a9");      // get start bit check flag
/* f9ed */                   BMI.rel ("_f9ac");
/* f9ef */                   CMP.imm (0x10);
/* f9f1 */                   BCC.rel ("_f9ac");
/* f9f3 */                   STA.zpg ("syno_0096");        // save cassette block synchronization number
/* f9f5 */                   BCS.rel ("_f9ac");
/* f9f7 */        _`_f9f7`;  TXA.imp ();
/* f9f8 */                   EOR.zpg ("prty_009b");
/* f9fa */                   STA.zpg ("prty_009b");
/* f9fc */                   LDA.zpg ("bitts_00b4");
/* f9fe */                   BEQ.rel ("_f9d2");
/* fa00 */                   DEC.zpg ("tsfcnt_00a3");      // decrement EOI flag byte
/* fa02 */                   BMI.rel ("_f9c9");
/* fa04 */                   LSR.zpg ("schar_00d7");
/* fa06 */                   ROR.zpg ("mych_00bf");        // parity count
/* fa08 */                   LDX.imm (0xda);               // set timimg max byte
/* fa0a */                   JSR.abs ("_f8e2");            // set timing
/* fa0d */                   JMP.abs ("_febc");            // restore registers and exit interrupt
/* fa10 */        _`_fa10`;  LDA.zpg ("syno_0096");        // get cassette block synchronization number
/* fa12 */                   BEQ.rel ("_fa18");
/* fa14 */                   LDA.zpg ("bitts_00b4");
/* fa16 */                   BEQ.rel ("_fa1f");
/* fa18 */        _`_fa18`;  LDA.zpg ("tsfcnt_00a3");      // get EOI flag byte
/* fa1a */                   BMI.rel ("_fa1f");
/* fa1c */                   JMP.abs ("_f997");
/* fa1f */        _`_fa1f`;  LSR.zpg ("cmp0+1_00b1");      // shift tape timing constant max byte
/* fa21 */                   LDA.imm (0x93);
/* fa23 */                   SEC.imp ();
/* fa24 */                   SBC.zpg ("cmp0+1_00b1");      // subtract tape timing constant max byte
/* fa26 */                   ADC.zpg ("cmp0+0_00b0");      // add tape timing constant min byte
/* fa28 */                   ASL.acc ();
/* fa29 */                   TAX.imp ();                   // copy timimg high byte
/* fa2a */                   JSR.abs ("_f8e2");            // set timing
/* fa2d */                   INC.zpg ("dpsw_009c");
/* fa2f */                   LDA.zpg ("bitts_00b4");
/* fa31 */                   BNE.rel ("_fa44");
/* fa33 */                   LDA.zpg ("syno_0096");        // get cassette block synchronization number
/* fa35 */                   BEQ.rel ("_fa5d");
/* fa37 */                   STA.zpg ("bitci_00a8");       // save receiver bit count in
/* fa39 */                   LDA.imm (0x00);               // clear A
/* fa3b */                   STA.zpg ("syno_0096");        // clear cassette block synchronization number
/* fa3d */                   LDA.imm (0x81);               // enable timer A interrupt
/* fa3f */                   STA.abs ("ciaicr_dc0d");      // save VIA 1 ICR
/* fa42 */                   STA.zpg ("bitts_00b4");
/* fa44 */        _`_fa44`;  LDA.zpg ("syno_0096");        // get cassette block synchronization number
/* fa46 */                   STA.zpg ("nxtbit_00b5");
/* fa48 */                   BEQ.rel ("_fa53");
/* fa4a */                   LDA.imm (0x00);
/* fa4c */                   STA.zpg ("bitts_00b4");
/* fa4e */                   LDA.imm (0x01);               // disable timer A interrupt
/* fa50 */                   STA.abs ("ciaicr_dc0d");      // save VIA 1 ICR
/* fa53 */        _`_fa53`;  LDA.zpg ("mych_00bf");        // parity count
/* fa55 */                   STA.zpg ("roprty_00bd");      // save RS232 parity byte
/* fa57 */                   LDA.zpg ("bitci_00a8");       // get receiver bit count in
/* fa59 */                   ORA.zpg ("rinone_00a9");      // OR with start bit check flag
/* fa5b */                   STA.zpg ("rodata_00b6");
/* fa5d */        _`_fa5d`;  JMP.abs ("_febc");            // restore registers and exit interrupt

// ------------------------------------------------------- // # store character
/* fa60 */        _`_fa60`;  JSR.abs ("_fb97");            // new tape byte setup
/* fa63 */                   STA.zpg ("dpsw_009c");        // clear byte received flag
/* fa65 */                   LDX.imm (0xda);               // set timimg max byte
/* fa67 */                   JSR.abs ("_f8e2");            // set timing
/* fa6a */                   LDA.zpg ("fsblk_00be");       // get copies count
/* fa6c */                   BEQ.rel ("_fa70");
/* fa6e */                   STA.zpg ("inbit_00a7");       // save receiver input bit temporary storage
/* fa70 */        _`_fa70`;  LDA.imm (0x0f);
/* fa72 */                   BIT.zpg ("ridata_00aa");
/* fa74 */                   BPL.rel ("_fa8d");
/* fa76 */                   LDA.zpg ("nxtbit_00b5");
/* fa78 */                   BNE.rel ("_fa86");
/* fa7a */                   LDX.zpg ("fsblk_00be");       // get copies count
/* fa7c */                   DEX.imp ();
/* fa7d */                   BNE.rel ("_fa8a");            // if ?? restore registers and exit interrupt
/* fa7f */                   LDA.imm (0x08);               // set short block
/* fa81 */                   JSR.abs ("_fe1c");            // OR into serial status byte
/* fa84 */                   BNE.rel ("_fa8a");            // restore registers and exit interrupt, branch always
/* fa86 */        _`_fa86`;  LDA.imm (0x00);
/* fa88 */                   STA.zpg ("ridata_00aa");
/* fa8a */        _`_fa8a`;  JMP.abs ("_febc");            // restore registers and exit interrupt
/* fa8d */        _`_fa8d`;  BVS.rel ("_fac0");
/* fa8f */                   BNE.rel ("_faa9");
/* fa91 */                   LDA.zpg ("nxtbit_00b5");
/* fa93 */                   BNE.rel ("_fa8a");
/* fa95 */                   LDA.zpg ("rodata_00b6");
/* fa97 */                   BNE.rel ("_fa8a");
/* fa99 */                   LDA.zpg ("inbit_00a7");       // get receiver input bit temporary storage
/* fa9b */                   LSR.acc ();
/* fa9c */                   LDA.zpg ("roprty_00bd");      // get RS232 parity byte
/* fa9e */                   BMI.rel ("_faa3");
/* faa0 */                   BCC.rel ("_faba");
/* faa2 */                   CLC.imp ();
/* faa3 */        _`_faa3`;  BCS.rel ("_faba");
/* faa5 */                   AND.imm (0x0f);
/* faa7 */                   STA.zpg ("ridata_00aa");
/* faa9 */        _`_faa9`;  DEC.zpg ("ridata_00aa");
/* faab */                   BNE.rel ("_fa8a");
/* faad */                   LDA.imm (0x40);
/* faaf */                   STA.zpg ("ridata_00aa");
/* fab1 */                   JSR.abs ("_fb8e");            // copy I/O start address to buffer address
/* fab4 */                   LDA.imm (0x00);
/* fab6 */                   STA.zpg ("riprty_00ab");
/* fab8 */                   BEQ.rel ("_fa8a");
/* faba */        _`_faba`;  LDA.imm (0x80);
/* fabc */                   STA.zpg ("ridata_00aa");
/* fabe */                   BNE.rel ("_fa8a");            // restore registers and exit interrupt, branch always
/* fac0 */        _`_fac0`;  LDA.zpg ("nxtbit_00b5");
/* fac2 */                   BEQ.rel ("_face");
/* fac4 */                   LDA.imm (0x04);
/* fac6 */                   JSR.abs ("_fe1c");            // OR into serial status byte
/* fac9 */                   LDA.imm (0x00);
/* facb */                   JMP.abs ("_fb4a");
/* face */        _`_face`;  JSR.abs ("_fcd1");            // check read/write pointer, return Cb = 1 if pointer >= end
/* fad1 */                   BCC.rel ("_fad6");
/* fad3 */                   JMP.abs ("_fb48");
/* fad6 */        _`_fad6`;  LDX.zpg ("inbit_00a7");       // get receiver input bit temporary storage
/* fad8 */                   DEX.imp ();
/* fad9 */                   BEQ.rel ("_fb08");
/* fadb */                   LDA.zpg ("verck_0093");       // get load/verify flag
/* fadd */                   BEQ.rel ("_faeb");            // if load go ??
/* fadf */                   LDY.imm (0x00);               // clear index
/* fae1 */                   LDA.zpg ("roprty_00bd");      // get RS232 parity byte
/* fae3 */                   CMP.iny ("sal+0_00ac");
/* fae5 */                   BEQ.rel ("_faeb");
/* fae7 */                   LDA.imm (0x01);
/* fae9 */                   STA.zpg ("rodata_00b6");
/* faeb */        _`_faeb`;  LDA.zpg ("rodata_00b6");
/* faed */                   BEQ.rel ("_fb3a");
/* faef */                   LDX.imm (0x3d);
/* faf1 */                   CPX.zpg ("ptr1_009e");
/* faf3 */                   BCC.rel ("_fb33");
/* faf5 */                   LDX.zpg ("ptr1_009e");
/* faf7 */                   LDA.zpg ("sal+1_00ad");
/* faf9 */                   STA.abx ("bad+1_0101");
/* fafc */                   LDA.zpg ("sal+0_00ac");
/* fafe */                   STA.abx ("bad+0_0100");
/* fb01 */                   INX.imp ();
/* fb02 */                   INX.imp ();
/* fb03 */                   STX.zpg ("ptr1_009e");
/* fb05 */                   JMP.abs ("_fb3a");
/* fb08 */        _`_fb08`;  LDX.zpg ("ptr2_009f");
/* fb0a */                   CPX.zpg ("ptr1_009e");
/* fb0c */                   BEQ.rel ("_fb43");
/* fb0e */                   LDA.zpg ("sal+0_00ac");
/* fb10 */                   CMP.abx ("bad+0_0100");
/* fb13 */                   BNE.rel ("_fb43");
/* fb15 */                   LDA.zpg ("sal+1_00ad");
/* fb17 */                   CMP.abx ("bad+1_0101");
/* fb1a */                   BNE.rel ("_fb43");
/* fb1c */                   INC.zpg ("ptr2_009f");
/* fb1e */                   INC.zpg ("ptr2_009f");
/* fb20 */                   LDA.zpg ("verck_0093");       // get load/verify flag
/* fb22 */                   BEQ.rel ("_fb2f");            // if load ??
/* fb24 */                   LDA.zpg ("roprty_00bd");      // get RS232 parity byte
/* fb26 */                   LDY.imm (0x00);
/* fb28 */                   CMP.iny ("sal+0_00ac");
/* fb2a */                   BEQ.rel ("_fb43");
/* fb2c */                   INY.imp ();
/* fb2d */                   STY.zpg ("rodata_00b6");
/* fb2f */        _`_fb2f`;  LDA.zpg ("rodata_00b6");
/* fb31 */                   BEQ.rel ("_fb3a");
/* fb33 */        _`_fb33`;  LDA.imm (0x10);
/* fb35 */                   JSR.abs ("_fe1c");            // OR into serial status byte
/* fb38 */                   BNE.rel ("_fb43");
/* fb3a */        _`_fb3a`;  LDA.zpg ("verck_0093");       // get load/verify flag
/* fb3c */                   BNE.rel ("_fb43");            // if verify go ??
/* fb3e */                   TAY.imp ();
/* fb3f */                   LDA.zpg ("roprty_00bd");      // get RS232 parity byte
/* fb41 */                   STA.iny ("sal+0_00ac");
/* fb43 */        _`_fb43`;  JSR.abs ("_fcdb");            // increment read/write pointer
/* fb46 */                   BNE.rel ("_fb8b");            // restore registers and exit interrupt, branch always
/* fb48 */        _`_fb48`;  LDA.imm (0x80);
/* fb4a */        _`_fb4a`;  STA.zpg ("ridata_00aa");
/* fb4c */                   SEI.imp ();
/* fb4d */                   LDX.imm (0x01);               // disable timer A interrupt
/* fb4f */                   STX.abs ("ciaicr_dc0d");      // save VIA 1 ICR
/* fb52 */                   LDX.abs ("ciaicr_dc0d");      // read VIA 1 ICR
/* fb55 */                   LDX.zpg ("fsblk_00be");       // get copies count
/* fb57 */                   DEX.imp ();
/* fb58 */                   BMI.rel ("_fb5c");
/* fb5a */                   STX.zpg ("fsblk_00be");       // save copies count
/* fb5c */        _`_fb5c`;  DEC.zpg ("inbit_00a7");       // decrement receiver input bit temporary storage
/* fb5e */                   BEQ.rel ("_fb68");
/* fb60 */                   LDA.zpg ("ptr1_009e");
/* fb62 */                   BNE.rel ("_fb8b");            // if ?? restore registers and exit interrupt
/* fb64 */                   STA.zpg ("fsblk_00be");       // save copies count
/* fb66 */                   BEQ.rel ("_fb8b");            // restore registers and exit interrupt, branch always
/* fb68 */        _`_fb68`;  JSR.abs ("_fc93");            // restore everything for STOP
/* fb6b */                   JSR.abs ("_fb8e");            // copy I/O start address to buffer address
/* fb6e */                   LDY.imm (0x00);               // clear index
/* fb70 */                   STY.zpg ("riprty_00ab");      // clear checksum
/* fb72 */        _`_fb72`;  LDA.iny ("sal+0_00ac");       // get byte from buffer
/* fb74 */                   EOR.zpg ("riprty_00ab");      // XOR with checksum
/* fb76 */                   STA.zpg ("riprty_00ab");      // save new checksum
/* fb78 */                   JSR.abs ("_fcdb");            // increment read/write pointer
/* fb7b */                   JSR.abs ("_fcd1");            // check read/write pointer, return Cb = 1 if pointer >= end
/* fb7e */                   BCC.rel ("_fb72");            // loop if not at end
/* fb80 */                   LDA.zpg ("riprty_00ab");      // get computed checksum
/* fb82 */                   EOR.zpg ("roprty_00bd");      // compare with stored checksum ??
/* fb84 */                   BEQ.rel ("_fb8b");            // if checksum ok restore registers and exit interrupt
/* fb86 */                   LDA.imm (0x20);               // else set checksum error
/* fb88 */                   JSR.abs ("_fe1c");            // OR into the serial status byte
/* fb8b */        _`_fb8b`;  JMP.abs ("_febc");            // restore registers and exit interrupt

// ------------------------------------------------------- // copy I/O start address to buffer address
/* fb8e */        _`_fb8e`;  LDA.zpg ("stal+1_00c2");      // get I/O start address high byte
/* fb90 */                   STA.zpg ("sal+1_00ad");       // set buffer address high byte
/* fb92 */                   LDA.zpg ("stal+0_00c1");      // get I/O start address low byte
/* fb94 */                   STA.zpg ("sal+0_00ac");       // set buffer address low byte
/* fb96 */                   RTS.imp ();

// ------------------------------------------------------- // new tape byte setup
/* fb97 */        _`_fb97`;  LDA.imm (0x08);               // eight bits to do
/* fb99 */                   STA.zpg ("tsfcnt_00a3");      // set bit count
/* fb9b */                   LDA.imm (0x00);               // clear A
/* fb9d */                   STA.zpg ("tbtcnt_00a4");      // clear tape bit cycle phase
/* fb9f */                   STA.zpg ("bitci_00a8");       // clear start bit first cycle done flag
/* fba1 */                   STA.zpg ("prty_009b");        // clear byte parity
/* fba3 */                   STA.zpg ("rinone_00a9");      // clear start bit check flag, set no start bit yet
/* fba5 */                   RTS.imp ();

// ------------------------------------------------------- // send lsb from tape write byte to tape
                                                           // this routine tests the least significant bit in the tape write byte and sets VIA 2 T2
                                                           // depending on the state of the bit. if the bit is a 1 a time of $00B0 cycles is set, if
                                                           // the bot is a 0 a time of $0060 cycles is set. note that this routine does not shift the
                                                           // bits of the tape write byte but uses a copy of that byte, the byte itself is shifted
                                                           // elsewhere
/* fba6 */        _`_fba6`;  LDA.zpg ("roprty_00bd");      // get tape write byte
/* fba8 */                   LSR.acc ();                   // shift lsb into Cb
/* fba9 */                   LDA.imm (0x60);               // set time constant low byte for bit = 0
/* fbab */                   BCC.rel ("_fbaf");            // branch if bit was 0
                                                           // set time constant for bit = 1 and toggle tape
/* fbad */        _`_fbad`;  LDA.imm (0xb0);               // set time constant low byte for bit = 1
                                                           // write time constant and toggle tape
/* fbaf */        _`_fbaf`;  LDX.imm (0x00);               // set time constant high byte
                                                           // write time constant and toggle tape
/* fbb1 */        _`_fbb1`;  STA.abs ("timblo_dc06");      // save VIA 1 timer B low byte
/* fbb4 */                   STX.abs ("timbhi_dc07");      // save VIA 1 timer B high byte
/* fbb7 */                   LDA.abs ("ciaicr_dc0d");      // read VIA 1 ICR
/* fbba */                   LDA.imm (0x19);               // load timer B, timer B single shot, start timer B
/* fbbc */                   STA.abs ("ciacrb_dc0f");      // save VIA 1 CRB
/* fbbf */                   LDA.zpg ("r6510_0001");       // read the 6510 I/O port
/* fbc1 */                   EOR.imm (0x08);               // toggle tape out bit
/* fbc3 */                   STA.zpg ("r6510_0001");       // save the 6510 I/O port
/* fbc5 */                   AND.imm (0x08);               // mask tape out bit
/* fbc7 */                   RTS.imp ();

// ------------------------------------------------------- // flag block done and exit interrupt
/* fbc8 */        _`_fbc8`;  SEC.imp ();                   // set carry flag
/* fbc9 */                   ROR.zpg ("rodata_00b6");      // set buffer address high byte negative, flag all sync,
                                                           // data and checksum bytes written
/* fbcb */                   BMI.rel ("_fc09");            // restore registers and exit interrupt, branch always

// ------------------------------------------------------- // tape write IRQ routine
                                                           // this is the routine that writes the bits to the tape. it is called each time VIA 2 T2
                                                           // times out and checks if the start bit is done, if so checks if the data bits are done,
                                                           // if so it checks if the byte is done, if so it checks if the synchronisation bytes are
                                                           // done, if so it checks if the data bytes are done, if so it checks if the checksum byte
                                                           // is done, if so it checks if both the load and verify copies have been done, if so it
                                                           // stops the tape
/* fbcd */                   LDA.zpg ("bitci_00a8");       // get start bit first cycle done flag
/* fbcf */                   BNE.rel ("_fbe3");            // if first cycle done go do rest of byte
                                                           // each byte sent starts with two half cycles of $0110 ststem clocks and the whole block
                                                           // ends with two more such half cycles
/* fbd1 */                   LDA.imm (0x10);               // set first start cycle time constant low byte
/* fbd3 */                   LDX.imm (0x01);               // set first start cycle time constant high byte
/* fbd5 */                   JSR.abs ("_fbb1");            // write time constant and toggle tape
/* fbd8 */                   BNE.rel ("_fc09");            // if first half cycle go restore registers and exit
                                                           // interrupt
/* fbda */                   INC.zpg ("bitci_00a8");       // set start bit first start cycle done flag
/* fbdc */                   LDA.zpg ("rodata_00b6");      // get buffer address high byte
/* fbde */                   BPL.rel ("_fc09");            // if block not complete go restore registers and exit
                                                           // interrupt. the end of a block is indicated by the tape
                                                           // buffer high byte b7 being set to 1
/* fbe0 */                   JMP.abs ("_fc57");            // else do tape routine, block complete exit
                                                           // continue tape byte write. the first start cycle, both half cycles of it, is complete
                                                           // so the routine drops straight through to here
/* fbe3 */        _`_fbe3`;  LDA.zpg ("rinone_00a9");      // get start bit check flag
/* fbe5 */                   BNE.rel ("_fbf0");            // if the start bit is complete go send the byte bits
                                                           // after the two half cycles of $0110 ststem clocks the start bit is completed with two
                                                           // half cycles of $00B0 system clocks. this is the same as the first part of a 1 bit
/* fbe7 */                   JSR.abs ("_fbad");            // set time constant for bit = 1 and toggle tape
/* fbea */                   BNE.rel ("_fc09");            // if first half cycle go restore registers and exit
                                                           // interrupt
/* fbec */                   INC.zpg ("rinone_00a9");      // set start bit check flag
/* fbee */                   BNE.rel ("_fc09");            // restore registers and exit interrupt, branch always
                                                           // continue tape byte write. the start bit, both cycles of it, is complete so the routine
                                                           // drops straight through to here. now the cycle pairs for each bit, and the parity bit,
                                                           // are sent
/* fbf0 */        _`_fbf0`;  JSR.abs ("_fba6");            // send lsb from tape write byte to tape
/* fbf3 */                   BNE.rel ("_fc09");            // if first half cycle go restore registers and exit
                                                           // interrupt
                                                           // else two half cycles have been done
/* fbf5 */                   LDA.zpg ("tbtcnt_00a4");      // get tape bit cycle phase
/* fbf7 */                   EOR.imm (0x01);               // toggle b0
/* fbf9 */                   STA.zpg ("tbtcnt_00a4");      // save tape bit cycle phase
/* fbfb */                   BEQ.rel ("_fc0c");            // if bit cycle phase complete go setup for next bit
                                                           // each bit is written as two full cycles. a 1 is sent as a full cycle of $0160 system
                                                           // clocks then a full cycle of $00C0 system clocks. a 0 is sent as a full cycle of $00C0
                                                           // system clocks then a full cycle of $0160 system clocks. to do this each bit from the
                                                           // write byte is inverted during the second bit cycle phase. as the bit is inverted it
                                                           // is also added to the, one bit, parity count for this byte
/* fbfd */                   LDA.zpg ("roprty_00bd");      // get tape write byte
/* fbff */                   EOR.imm (0x01);               // invert bit being sent
/* fc01 */                   STA.zpg ("roprty_00bd");      // save tape write byte
/* fc03 */                   AND.imm (0x01);               // mask b0
/* fc05 */                   EOR.zpg ("prty_009b");        // EOR with tape write byte parity bit
/* fc07 */                   STA.zpg ("prty_009b");        // save tape write byte parity bit
/* fc09 */        _`_fc09`;  JMP.abs ("_febc");            // restore registers and exit interrupt
                                                           // the bit cycle phase is complete so shift out the just written bit and test for byte
                                                           // end
/* fc0c */        _`_fc0c`;  LSR.zpg ("roprty_00bd");      // shift bit out of tape write byte
/* fc0e */                   DEC.zpg ("tsfcnt_00a3");      // decrement tape write bit count
/* fc10 */                   LDA.zpg ("tsfcnt_00a3");      // get tape write bit count
/* fc12 */                   BEQ.rel ("_fc4e");            // if all the data bits have been written go setup for
                                                           // sending the parity bit next and exit the interrupt
/* fc14 */                   BPL.rel ("_fc09");            // if all the data bits are not yet sent just restore the
                                                           // registers and exit the interrupt
                                                           // do next tape byte
                                                           // the byte is complete. the start bit, data bits and parity bit have been written to
                                                           // the tape so setup for the next byte
/* fc16 */        _`_fc16`;  JSR.abs ("_fb97");            // new tape byte setup
/* fc19 */                   CLI.imp ();                   // enable the interrupts
/* fc1a */                   LDA.zpg ("cntdn_00a5");       // get cassette synchronization character count
/* fc1c */                   BEQ.rel ("_fc30");            // if synchronisation characters done go do block data
                                                           // at the start of each block sent to tape there are a number of synchronisation bytes
                                                           // that count down to the actual data. the commodore tape system saves two copies of all
                                                           // the tape data, the first is loaded and is indicated by the synchronisation bytes
                                                           // having b7 set, and the second copy is indicated by the synchronisation bytes having b7
                                                           // clear. the sequence goes $09, $08, ..... $02, $01, data bytes
/* fc1e */                   LDX.imm (0x00);               // clear X
/* fc20 */                   STX.zpg ("schar_00d7");       // clear checksum byte
/* fc22 */                   DEC.zpg ("cntdn_00a5");       // decrement cassette synchronization byte count
/* fc24 */                   LDX.zpg ("fsblk_00be");       // get cassette copies count
/* fc26 */                   CPX.imm (0x02);               // compare with load block indicator
/* fc28 */                   BNE.rel ("_fc2c");            // branch if not the load block
/* fc2a */                   ORA.imm (0x80);               // this is the load block so make the synchronisation count
                                                           // go $89, $88, ..... $82, $81
/* fc2c */        _`_fc2c`;  STA.zpg ("roprty_00bd");      // save the synchronisation byte as the tape write byte
/* fc2e */                   BNE.rel ("_fc09");            // restore registers and exit interrupt, branch always
                                                           // the synchronization bytes have been done so now check and do the actual block data
/* fc30 */        _`_fc30`;  JSR.abs ("_fcd1");            // check read/write pointer, return Cb = 1 if pointer >= end
/* fc33 */                   BCC.rel ("_fc3f");            // if not all done yet go get the byte to send
/* fc35 */                   BNE.rel ("_fbc8");            // if pointer > end go flag block done and exit interrupt
                                                           // else the block is complete, it only remains to write the
                                                           // checksum byte to the tape so setup for that
/* fc37 */                   INC.zpg ("sal+1_00ad");       // increment buffer pointer high byte, this means the block
                                                           // done branch will always be taken next time without having
                                                           // to worry about the low byte wrapping to zero
/* fc39 */                   LDA.zpg ("schar_00d7");       // get checksum byte
/* fc3b */                   STA.zpg ("roprty_00bd");      // save checksum as tape write byte
/* fc3d */                   BCS.rel ("_fc09");            // restore registers and exit interrupt, branch always
                                                           // the block isn't finished so get the next byte to write to tape
/* fc3f */        _`_fc3f`;  LDY.imm (0x00);               // clear index
/* fc41 */                   LDA.iny ("sal+0_00ac");       // get byte from buffer
/* fc43 */                   STA.zpg ("roprty_00bd");      // save as tape write byte
/* fc45 */                   EOR.zpg ("schar_00d7");       // XOR with checksum byte
/* fc47 */                   STA.zpg ("schar_00d7");       // save new checksum byte
/* fc49 */                   JSR.abs ("_fcdb");            // increment read/write pointer
/* fc4c */                   BNE.rel ("_fc09");            // restore registers and exit interrupt, branch always
                                                           // set parity as next bit and exit interrupt
/* fc4e */        _`_fc4e`;  LDA.zpg ("prty_009b");        // get parity bit
/* fc50 */                   EOR.imm (0x01);               // toggle it
/* fc52 */                   STA.zpg ("roprty_00bd");      // save as tape write byte
/* fc54 */        _`_fc54`;  JMP.abs ("_febc");            // restore registers and exit interrupt
                                                           // tape routine, block complete exit
/* fc57 */        _`_fc57`;  DEC.zpg ("fsblk_00be");       // decrement copies remaining to read/write
/* fc59 */                   BNE.rel ("_fc5e");            // branch if more to do
/* fc5b */                   JSR.abs ("_fcca");            // stop the cassette motor
/* fc5e */        _`_fc5e`;  LDA.imm (0x50);               // set tape write leader count
/* fc60 */                   STA.zpg ("inbit_00a7");       // save tape write leader count
/* fc62 */                   LDX.imm (0x08);               // set index for write tape leader vector
/* fc64 */                   SEI.imp ();                   // disable the interrupts
/* fc65 */                   JSR.abs ("_fcbd");            // set the tape vector
/* fc68 */                   BNE.rel ("_fc54");            // restore registers and exit interrupt, branch always

// ------------------------------------------------------- // write tape leader IRQ routine
/* fc6a */                   LDA.imm (0x78);               // set time constant low byte for bit = leader
/* fc6c */                   JSR.abs ("_fbaf");            // write time constant and toggle tape
/* fc6f */                   BNE.rel ("_fc54");            // if tape bit high restore registers and exit interrupt
/* fc71 */                   DEC.zpg ("inbit_00a7");       // decrement cycle count
/* fc73 */                   BNE.rel ("_fc54");            // if not all done restore registers and exit interrupt
/* fc75 */                   JSR.abs ("_fb97");            // new tape byte setup
/* fc78 */                   DEC.zpg ("riprty_00ab");      // decrement cassette leader count
/* fc7a */                   BPL.rel ("_fc54");            // if not all done restore registers and exit interrupt
/* fc7c */                   LDX.imm (0x0a);               // set index for tape write vector
/* fc7e */                   JSR.abs ("_fcbd");            // set the tape vector
/* fc81 */                   CLI.imp ();                   // enable the interrupts
/* fc82 */                   INC.zpg ("riprty_00ab");      // clear cassette leader counter, was $FF
/* fc84 */                   LDA.zpg ("fsblk_00be");       // get cassette block count
/* fc86 */                   BEQ.rel ("_fcb8");            // if all done restore everything for STOP and exit the
                                                           // interrupt
/* fc88 */                   JSR.abs ("_fb8e");            // copy I/O start address to buffer address
/* fc8b */                   LDX.imm (0x09);               // set nine synchronisation bytes
/* fc8d */                   STX.zpg ("cntdn_00a5");       // save cassette synchronization byte count
/* fc8f */                   STX.zpg ("rodata_00b6");
/* fc91 */                   BNE.rel ("_fc16");            // go do the next tape byte, branch always

// ------------------------------------------------------- // restore everything for STOP
/* fc93 */        _`_fc93`;  PHP.imp ();                   // save status
/* fc94 */                   SEI.imp ();                   // disable the interrupts
/* fc95 */                   LDA.abs ("scroly_d011");      // read the vertical fine scroll and control register
/* fc98 */                   ORA.imm (0x10);               // mask xxx1 xxxx, unblank the screen
/* fc9a */                   STA.abs ("scroly_d011");      // save the vertical fine scroll and control register
/* fc9d */                   JSR.abs ("_fcca");            // stop the cassette motor
/* fca0 */                   LDA.imm (0x7f);               // disable all interrupts
/* fca2 */                   STA.abs ("ciaicr_dc0d");      // save VIA 1 ICR
/* fca5 */                   JSR.abs ("_fddd");
/* fca8 */                   LDA.abs ("irqtmp+1_02a0");    // get saved IRQ vector high byte
/* fcab */                   BEQ.rel ("_fcb6");            // branch if null
/* fcad */                   STA.abs ("cinv+1_0315");      // restore IRQ vector high byte
/* fcb0 */                   LDA.abs ("irqtmp+0_029f");    // get saved IRQ vector low byte
/* fcb3 */                   STA.abs ("cinv+0_0314");      // restore IRQ vector low byte
/* fcb6 */        _`_fcb6`;  PLP.imp ();                   // restore status
/* fcb7 */                   RTS.imp ();

// ------------------------------------------------------- // reset vector
/* fcb8 */        _`_fcb8`;  JSR.abs ("_fc93");            // restore everything for STOP
/* fcbb */                   BEQ.rel ("_fc54");            // restore registers and exit interrupt, branch always

// ------------------------------------------------------- // set tape vector
/* fcbd */        _`_fcbd`;  LDA.abx (0xfd93);             // get tape IRQ vector low byte
/* fcc0 */                   STA.abs ("cinv+0_0314");      // set IRQ vector low byte
/* fcc3 */                   LDA.abx (0xfd94);             // get tape IRQ vector high byte
/* fcc6 */                   STA.abs ("cinv+1_0315");      // set IRQ vector high byte
/* fcc9 */                   RTS.imp ();

// ------------------------------------------------------- // stop the cassette motor
/* fcca */        _`_fcca`;  LDA.zpg ("r6510_0001");       // read the 6510 I/O port
/* fccc */                   ORA.imm (0x20);               // mask xxxx xx1x, turn the cassette motor off
/* fcce */                   STA.zpg ("r6510_0001");       // save the 6510 I/O port
/* fcd0 */                   RTS.imp ();

// ------------------------------------------------------- // check read/write pointer
                                                           // return Cb = 1 if pointer >= end
/* fcd1 */        _`_fcd1`;  SEC.imp ();                   // set carry for subtract
/* fcd2 */                   LDA.zpg ("sal+0_00ac");       // get buffer address low byte
/* fcd4 */                   SBC.zpg ("eal+0_00ae");       // subtract buffer end low byte
/* fcd6 */                   LDA.zpg ("sal+1_00ad");       // get buffer address high byte
/* fcd8 */                   SBC.zpg ("eal+1_00af");       // subtract buffer end high byte
/* fcda */                   RTS.imp ();

// ------------------------------------------------------- // increment read/write pointer
/* fcdb */        _`_fcdb`;  INC.zpg ("sal+0_00ac");       // increment buffer address low byte
/* fcdd */                   BNE.rel ("_fce1");            // branch if no overflow
/* fcdf */                   INC.zpg ("sal+1_00ad");       // increment buffer address low byte
/* fce1 */        _`_fce1`;  RTS.imp ();

// ------------------------------------------------------- // RESET, hardware reset starts here
/* fce2 */                   LDX.imm (0xff);               // set X for stack
/* fce4 */                   SEI.imp ();                   // disable the interrupts
/* fce5 */                   TXS.imp ();                   // clear stack
/* fce6 */                   CLD.imp ();                   // clear decimal mode
/* fce7 */                   JSR.abs ("_fd02");            // scan for autostart ROM at $8000
/* fcea */                   BNE.rel ("_fcef");            // if not there continue startup
/* fcec */                   JMP.ind ("_8000");            // else call ROM start code
/* fcef */        _`_fcef`;  STX.abs ("scrolx_d016");      // read the horizontal fine scroll and control register
/* fcf2 */                   JSR.abs ("ioinit_fda3");      // initialise SID, CIA and IRQ
/* fcf5 */                   JSR.abs ("ramtas_fd50");      // RAM test and find RAM end
/* fcf8 */                   JSR.abs ("restor_fd15");      // restore default I/O vectors
/* fcfb */                   JSR.abs ("cint_ff5b");        // initialise VIC and screen editor
/* fcfe */                   CLI.imp ();                   // enable the interrupts
/* fcff */                   JMP.ind ("restart_a000");     // execute BASIC

// ------------------------------------------------------- // scan for autostart ROM at $8000, returns Zb=1 if ROM found
/* fd02 */        _`_fd02`;  LDX.imm (0x05);               // five characters to test
/* fd04 */        _`_fd04`;  LDA.abx ("_fd0f");            // get test character
/* fd07 */                   CMP.abx ("_8003");            // compare wiith byte in ROM space
/* fd0a */                   BNE.rel ("_fd0f");            // exit if no match
/* fd0c */                   DEX.imp ();                   // decrement index
/* fd0d */                   BNE.rel ("_fd04");            // loop if not all done
/* fd0f */        _`_fd0f`;  RTS.imp ();
// ------------------------------------------------------- // autostart ROM signature
                                                           // 'CBM80’
/* fd10 */                   _.bytes(0xc3, 0xc2, 0xcd, 0x38, 0x30);

// ------------------------------------------------------- // restore default I/O vectors
/* fd15 */  _`restor_fd15`;  LDX.imm (0x30);               // pointer to vector table low byte
/* fd17 */                   LDY.imm (0xfd);               // pointer to vector table high byte
/* fd19 */                   CLC.imp ();                   // flag set vectors

// ------------------------------------------------------- // set/read vectored I/O from (XY), Cb = 1 to read, Cb = 0 to set
/* fd1a */  _`vector_fd1a`;  STX.zpg ("memuss+0_00c3");    // save pointer low byte
/* fd1c */                   STY.zpg ("memuss+1_00c4");    // save pointer high byte
/* fd1e */                   LDY.imm (0x1f);               // set byte count
/* fd20 */        _`_fd20`;  LDA.aby ("cinv+0_0314");      // read vector byte from vectors
/* fd23 */                   BCS.rel ("_fd27");            // branch if read vectors
/* fd25 */                   LDA.iny ("memuss+0_00c3");    // read vector byte from (XY)
/* fd27 */        _`_fd27`;  STA.iny ("memuss+0_00c3");    // save byte to (XY)
/* fd29 */                   STA.aby ("cinv+0_0314");      // save byte to vector
/* fd2c */                   DEY.imp ();                   // decrement index
/* fd2d */                   BPL.rel ("_fd20");            // loop if more to do
/* fd2f */                   RTS.imp ();
                                                           //  The above code works but it tries to write to the ROM. while this is usually harmless
                                                           //  systems that use flash ROM may suffer. Here is a version that makes the extra write
                                                           //  to RAM instead but is otherwise identical in function. ##

                                                           //  set/read vectored I/O from (XY), Cb = 1 to read, Cb = 0 to set

                                                           // STX $C3         ; save pointer low byte
                                                           // STY $C4         ; save pointer high byte
                                                           // LDY #$1F        ; set byte count
                                                           // LDA ($C3),Y     ; read vector byte from (XY)
                                                           // BCC $FD29       ; branch if set vectors

                                                           // LDA $0314,Y     ; else read vector byte from vectors
                                                           // STA ($C3),Y     ; save byte to (XY)
                                                           // STA $0314,Y     ; save byte to vector
                                                           // DEY             ; decrement index
                                                           // BPL $FD20       ; loop if more to do

                                                           // RTS

// ------------------------------------------------------- // kernal vectors
/* fd30 */                   _.bytes(0x31, 0xea);          // $0314 IRQ vector
/* fd32 */                   _.bytes(0x66, 0xfe);          // $0316 BRK vector
/* fd34 */                   _.bytes(0x47, 0xfe);          // $0318 NMI vector
/* fd36 */                   _.bytes(0x4a, 0xf3);          // $031A open a logical file
/* fd38 */                   _.bytes(0x91, 0xf2);          // $031C close a specified logical file
/* fd3a */                   _.bytes(0x0e, 0xf2);          // $031E open channel for input
/* fd3c */                   _.bytes(0x50, 0xf2);          // $0320 open channel for output
/* fd3e */                   _.bytes(0x33, 0xf3);          // $0322 close input and output channels
/* fd40 */                   _.bytes(0x57, 0xf1);          // $0324 input character from channel
/* fd42 */                   _.bytes(0xca, 0xf1);          // $0326 output character to channel
/* fd44 */                   _.bytes(0xed, 0xf6);          // $0328 scan stop key
/* fd46 */                   _.bytes(0x3e, 0xf1);          // $032A get character from the input device
/* fd48 */                   _.bytes(0x2f, 0xf3);          // $032C close all channels and files
/* fd4a */                   _.bytes(0x66, 0xfe);          // $032E user function
                                                           // Vector to user defined command, currently points to BRK.
                                                           // This appears to be a holdover from PET days, when the built-in machine language monitor
                                                           // would jump through the $032E vector when it encountered a command that it did not
                                                           // understand, allowing the user to add new commands to the monitor.
                                                           // Although this vector is initialized to point to the routine called by STOP/RESTORE and
                                                           // the BRK interrupt, and is updated by the kernal vector routine at $FD57, it no longer
                                                           // has any function.
/* fd4c */                   _.bytes(0xa5, 0xf4);          // $0330 load
/* fd4e */                   _.bytes(0xed, 0xf5);          // $0332 save

// ------------------------------------------------------- // test RAM and find RAM end
/* fd50 */  _`ramtas_fd50`;  LDA.imm (0x00);               // clear A
/* fd52 */                   TAY.imp ();                   // clear index
/* fd53 */        _`_fd53`;  STA.aby ("_0002");            // clear page 0, don't do $0000 or $0001
/* fd56 */                   STA.aby ("buf+0_0200");       // clear page 2
/* fd59 */                   STA.aby ("ierror+0_0300");    // clear page 3
/* fd5c */                   INY.imp ();                   // increment index
/* fd5d */                   BNE.rel ("_fd53");            // loop if more to do
/* fd5f */                   LDX.imm (0x3c);               // set cassette buffer pointer low byte
/* fd61 */                   LDY.imm (0x03);               // set cassette buffer pointer high byte
/* fd63 */                   STX.zpg ("tape1+0_00b2");     // save tape buffer start pointer low byte
/* fd65 */                   STY.zpg ("tape1+1_00b3");     // save tape buffer start pointer high byte
/* fd67 */                   TAY.imp ();                   // clear Y
/* fd68 */                   LDA.imm (0x03);               // set RAM test pointer high byte
/* fd6a */                   STA.zpg ("stal+1_00c2");      // save RAM test pointer high byte
/* fd6c */        _`_fd6c`;  INC.zpg ("stal+1_00c2");      // increment RAM test pointer high byte
/* fd6e */        _`_fd6e`;  LDA.iny ("stal+0_00c1");
/* fd70 */                   TAX.imp ();
/* fd71 */                   LDA.imm (0x55);
/* fd73 */                   STA.iny ("stal+0_00c1");
/* fd75 */                   CMP.iny ("stal+0_00c1");
/* fd77 */                   BNE.rel ("_fd88");
/* fd79 */                   ROL.acc ();
/* fd7a */                   STA.iny ("stal+0_00c1");
/* fd7c */                   CMP.iny ("stal+0_00c1");
/* fd7e */                   BNE.rel ("_fd88");
/* fd80 */                   TXA.imp ();
/* fd81 */                   STA.iny ("stal+0_00c1");
/* fd83 */                   INY.imp ();
/* fd84 */                   BNE.rel ("_fd6e");
/* fd86 */                   BEQ.rel ("_fd6c");
/* fd88 */        _`_fd88`;  TYA.imp ();
/* fd89 */                   TAX.imp ();
/* fd8a */                   LDY.zpg ("stal+1_00c2");
/* fd8c */                   CLC.imp ();
/* fd8d */                   JSR.abs ("_fe2d");            // set the top of memory
/* fd90 */                   LDA.imm (0x08);
/* fd92 */                   STA.abs ("memstr+1_0282");    // save the OS start of memory high byte
/* fd95 */                   LDA.imm (0x04);
/* fd97 */                   STA.abs ("hibase_0288");      // save the screen memory page
/* fd9a */                   RTS.imp ();

// ------------------------------------------------------- // tape IRQ vectors
/* fd9b */                   _.bytes(0x6a, 0xfc);          // $08 write tape leader IRQ routine
/* fd9d */                   _.bytes(0xcd, 0xfb);          // $0A tape write IRQ routine
/* fd9f */                   _.bytes(0x31, 0xea);          // $0C normal IRQ vector
/* fda1 */                   _.bytes(0x2c, 0xf9);          // $0E read tape bits IRQ routine

// ------------------------------------------------------- // initialise SID, CIA and IRQ
/* fda3 */  _`ioinit_fda3`;  LDA.imm (0x7f);               // disable all interrupts
/* fda5 */                   STA.abs ("ciaicr_dc0d");      // save VIA 1 ICR
/* fda8 */                   STA.abs ("ci2icr_dd0d");      // save VIA 2 ICR
/* fdab */                   STA.abs ("ciapra_dc00");      // save VIA 1 DRA, keyboard column drive
/* fdae */                   LDA.imm (0x08);               // set timer single shot
/* fdb0 */                   STA.abs ("ciacra_dc0e");      // save VIA 1 CRA
/* fdb3 */                   STA.abs ("ci2cra_dd0e");      // save VIA 2 CRA
/* fdb6 */                   STA.abs ("ciacrb_dc0f");      // save VIA 1 CRB
/* fdb9 */                   STA.abs ("ci2crb_dd0f");      // save VIA 2 CRB
/* fdbc */                   LDX.imm (0x00);               // set all inputs
/* fdbe */                   STX.abs ("ciddrb_dc03");      // save VIA 1 DDRB, keyboard row
/* fdc1 */                   STX.abs ("c2ddrb_dd03");      // save VIA 2 DDRB, RS232 port
/* fdc4 */                   STX.abs ("sigvol_d418");      // clear the volume and filter select register
/* fdc7 */                   DEX.imp ();                   // set X = $FF
/* fdc8 */                   STX.abs ("ciddra_dc02");      // save VIA 1 DDRA, keyboard column
/* fdcb */                   LDA.imm (0x07);               // DATA out high, CLK out high, ATN out high, RE232 Tx DATA
                                                           // high, video address 15 = 1, video address 14 = 1
/* fdcd */                   STA.abs ("ci2pra_dd00");      // save VIA 2 DRA, serial port and video address
/* fdd0 */                   LDA.imm (0x3f);               // set serial DATA input, serial CLK input
/* fdd2 */                   STA.abs ("c2ddra_dd02");      // save VIA 2 DDRA, serial port and video address
/* fdd5 */                   LDA.imm (0xe7);               // set 1110 0111, motor off, enable I/O, enable KERNAL,
                                                           // enable BASIC
/* fdd7 */                   STA.zpg ("r6510_0001");       // save the 6510 I/O port
/* fdd9 */                   LDA.imm (0x2f);               // set 0010 1111, 0 = input, 1 = output
/* fddb */                   STA.zpg ("d6510_0000");       // save the 6510 I/O port direction register
/* fddd */        _`_fddd`;  LDA.abs ("tvsflg_02a6");      // get the PAL/NTSC flag
/* fde0 */                   BEQ.rel ("_fdec");            // if NTSC go set NTSC timing
                                                           // else set PAL timing
/* fde2 */                   LDA.imm (0x25);
/* fde4 */                   STA.abs ("timalo_dc04");      // save VIA 1 timer A low byte
/* fde7 */                   LDA.imm (0x40);
/* fde9 */                   JMP.abs ("_fdf3");
/* fdec */        _`_fdec`;  LDA.imm (0x95);
/* fdee */                   STA.abs ("timalo_dc04");      // save VIA 1 timer A low byte
/* fdf1 */                   LDA.imm (0x42);
/* fdf3 */        _`_fdf3`;  STA.abs ("timahi_dc05");      // save VIA 1 timer A high byte
/* fdf6 */                   JMP.abs ("_ff6e");

// ------------------------------------------------------- // set filename
/* fdf9 */  _`setnam_fdf9`;  STA.zpg ("fnlen_00b7");       // set file name length
/* fdfb */                   STX.zpg ("fnadr+0_00bb");     // set file name pointer low byte
/* fdfd */                   STY.zpg ("fnadr+1_00bc");     // set file name pointer high byte
/* fdff */                   RTS.imp ();

// ------------------------------------------------------- // set logical, first and second addresses
/* fe00 */  _`setlfs_fe00`;  STA.zpg ("la_00b8");          // save the logical file
/* fe02 */                   STX.zpg ("fa_00ba");          // save the device number
/* fe04 */                   STY.zpg ("sa_00b9");          // save the secondary address
/* fe06 */                   RTS.imp ();

// ------------------------------------------------------- // read I/O status word
/* fe07 */  _`readst_fe07`;  LDA.zpg ("fa_00ba");          // get the device number
/* fe09 */                   CMP.imm (0x02);               // compare device with RS232 device
/* fe0b */                   BNE.rel ("_fe1a");            // if not RS232 device go ??
                                                           // get RS232 device status
/* fe0d */                   LDA.abs ("rsstat_0297");      // get the RS232 status register
/* fe10 */                   PHA.imp ();                   // save the RS232 status value
/* fe11 */                   LDA.imm (0x00);               // clear A
/* fe13 */                   STA.abs ("rsstat_0297");      // clear the RS232 status register
/* fe16 */                   PLA.imp ();                   // restore the RS232 status value
/* fe17 */                   RTS.imp ();

// ------------------------------------------------------- // control kernal messages
/* fe18 */  _`setmsg_fe18`;  STA.zpg ("msgflg_009d");      // set message mode flag
/* fe1a */        _`_fe1a`;  LDA.zpg ("status_0090");      // read the serial status byte

// ------------------------------------------------------- // OR into the serial status byte
/* fe1c */        _`_fe1c`;  ORA.zpg ("status_0090");      // OR with the serial status byte
/* fe1e */                   STA.zpg ("status_0090");      // save the serial status byte
/* fe20 */                   RTS.imp ();

// ------------------------------------------------------- // set timeout on serial bus
/* fe21 */  _`settmo_fe21`;  STA.abs ("timout_0285");      // save serial bus timeout flag
/* fe24 */                   RTS.imp ();

// ------------------------------------------------------- // read/set the top of memory, Cb = 1 to read, Cb = 0 to set
/* fe25 */  _`memtop_fe25`;  BCC.rel ("_fe2d");            // if Cb clear go set the top of memory

// ------------------------------------------------------- // read the top of memory
/* fe27 */        _`_fe27`;  LDX.abs ("memsiz+0_0283");    // get memory top low byte
/* fe2a */                   LDY.abs ("memsiz+1_0284");    // get memory top high byte

// ------------------------------------------------------- // set the top of memory
/* fe2d */        _`_fe2d`;  STX.abs ("memsiz+0_0283");    // set memory top low byte
/* fe30 */                   STY.abs ("memsiz+1_0284");    // set memory top high byte
/* fe33 */                   RTS.imp ();

// ------------------------------------------------------- // read/set the bottom of memory, Cb = 1 to read, Cb = 0 to set
/* fe34 */  _`membot_fe34`;  BCC.rel ("_fe3c");            // if Cb clear go set the bottom of memory
/* fe36 */                   LDX.abs ("memstr+0_0281");    // get the OS start of memory low byte
/* fe39 */                   LDY.abs ("memstr+1_0282");    // get the OS start of memory high byte
/* fe3c */        _`_fe3c`;  STX.abs ("memstr+0_0281");    // save the OS start of memory low byte
/* fe3f */                   STY.abs ("memstr+1_0282");    // save the OS start of memory high byte
/* fe42 */                   RTS.imp ();

// ------------------------------------------------------- // NMI vector
/* fe43 */                   SEI.imp ();                   // disable the interrupts
/* fe44 */                   JMP.ind ("nminv+0_0318");     // do NMI vector

// ------------------------------------------------------- // NMI handler
/* fe47 */                   PHA.imp ();                   // save A
/* fe48 */                   TXA.imp ();                   // copy X
/* fe49 */                   PHA.imp ();                   // save X
/* fe4a */                   TYA.imp ();                   // copy Y
/* fe4b */                   PHA.imp ();                   // save Y
/* fe4c */                   LDA.imm (0x7f);               // disable all interrupts
/* fe4e */                   STA.abs ("ci2icr_dd0d");      // save VIA 2 ICR
/* fe51 */                   LDY.abs ("ci2icr_dd0d");      // save VIA 2 ICR
/* fe54 */                   BMI.rel ("_fe72");
/* fe56 */                   JSR.abs ("_fd02");            // scan for autostart ROM at $8000
/* fe59 */                   BNE.rel ("_fe5e");            // branch if no autostart ROM
/* fe5b */                   JMP.ind ("_8002");            // else do autostart ROM break entry
/* fe5e */        _`_fe5e`;  JSR.abs ("_f6bc");            // increment real time clock
/* fe61 */                   JSR.abs ("stop_ffe1");        // scan stop key
/* fe64 */                   BNE.rel ("_fe72");            // if not [STOP] restore registers and exit interrupt

// ------------------------------------------------------- // user function default vector
                                                           // BRK handler
/* fe66 */                   JSR.abs ("restor_fd15");      // restore default I/O vectors
/* fe69 */                   JSR.abs ("ioinit_fda3");      // initialise SID, CIA and IRQ
/* fe6c */                   JSR.abs ("cint1_e518");       // initialise the screen and keyboard
/* fe6f */                   JMP.ind ("_a002");            // do BASIC break entry

// ------------------------------------------------------- // RS232 NMI routine
/* fe72 */        _`_fe72`;  TYA.imp ();
/* fe73 */                   AND.abs ("enabl_02a1");       // AND with the RS-232 interrupt enable byte
/* fe76 */                   TAX.imp ();
/* fe77 */                   AND.imm (0x01);
/* fe79 */                   BEQ.rel ("_fea3");
/* fe7b */                   LDA.abs ("ci2pra_dd00");      // read VIA 2 DRA, serial port and video address
/* fe7e */                   AND.imm (0xfb);               // mask xxxx x0xx, clear RS232 Tx DATA
/* fe80 */                   ORA.zpg ("nxtbit_00b5");      // OR in the RS232 transmit data bit
/* fe82 */                   STA.abs ("ci2pra_dd00");      // save VIA 2 DRA, serial port and video address
/* fe85 */                   LDA.abs ("enabl_02a1");       // get the RS-232 interrupt enable byte
/* fe88 */                   STA.abs ("ci2icr_dd0d");      // save VIA 2 ICR
/* fe8b */                   TXA.imp ();
/* fe8c */                   AND.imm (0x12);
/* fe8e */                   BEQ.rel ("_fe9d");
/* fe90 */                   AND.imm (0x02);
/* fe92 */                   BEQ.rel ("_fe9a");
/* fe94 */                   JSR.abs ("_fed6");
/* fe97 */                   JMP.abs ("_fe9d");
/* fe9a */        _`_fe9a`;  JSR.abs ("_ff07");
/* fe9d */        _`_fe9d`;  JSR.abs ("_eebb");
/* fea0 */                   JMP.abs ("_feb6");
/* fea3 */        _`_fea3`;  TXA.imp ();                   // get active interrupts back
/* fea4 */                   AND.imm (0x02);               // mask ?? interrupt
/* fea6 */                   BEQ.rel ("_feae");            // branch if not ?? interrupt
                                                           // was ?? interrupt
/* fea8 */                   JSR.abs ("_fed6");
/* feab */                   JMP.abs ("_feb6");
/* feae */        _`_feae`;  TXA.imp ();                   // get active interrupts back
/* feaf */                   AND.imm (0x10);               // mask CB1 interrupt, Rx data bit transition
/* feb1 */                   BEQ.rel ("_feb6");            // if no bit restore registers and exit interrupt
/* feb3 */                   JSR.abs ("_ff07");
/* feb6 */        _`_feb6`;  LDA.abs ("enabl_02a1");       // get the RS-232 interrupt enable byte
/* feb9 */                   STA.abs ("ci2icr_dd0d");      // save VIA 2 ICR
/* febc */        _`_febc`;  PLA.imp ();                   // pull Y
/* febd */                   TAY.imp ();                   // restore Y
/* febe */                   PLA.imp ();                   // pull X
/* febf */                   TAX.imp ();                   // restore X
/* fec0 */        _`_fec0`;  PLA.imp ();                   // restore A
/* fec1 */        _`_fec1`;  RTI.imp ();

// ------------------------------------------------------- // baud rate word is calculated from ..

                                                           // (system clock / baud rate) / 2 - 100

                                                           //     system clock
                                                           //     ------------
                                                           // PAL        985248 Hz
                                                           // NTSC     1022727 Hz
                                                           // baud rate tables for NTSC C64
/* fec2 */                   _.bytes(0xc1, 0x27);          //   50   baud   1027700
/* fec4 */                   _.bytes(0x3e, 0x1a);          //   75   baud   1022700
/* fec6 */                   _.bytes(0xc5, 0x11);          //  110   baud   1022780
/* fec8 */                   _.bytes(0x74, 0x0e);          //  134.5 baud   1022200
/* feca */                   _.bytes(0xed, 0x0c);          //  150   baud   1022700
/* fecc */                   _.bytes(0x45, 0x06);          //  300   baud   1023000
/* fece */                   _.bytes(0xf0, 0x02);          //  600   baud   1022400
/* fed0 */                   _.bytes(0x46, 0x01);          // 1200   baud   1022400
/* fed2 */                   _.bytes(0xb8, 0x00);          // 1800   baud   1022400
/* fed4 */                   _.bytes(0x71, 0x00);          // 2400   baud   1022400

// ------------------------------------------------------- // ??
/* fed6 */        _`_fed6`;  LDA.abs ("ci2prb_dd01");      // read VIA 2 DRB, RS232 port
/* fed9 */                   AND.imm (0x01);               // mask 0000 000x, RS232 Rx DATA
/* fedb */                   STA.zpg ("inbit_00a7");       // save the RS232 received data bit
/* fedd */                   LDA.abs ("ti2blo_dd06");      // get VIA 2 timer B low byte
/* fee0 */                   SBC.imm (0x1c);
/* fee2 */                   ADC.abs ("baudof+0_0299");
/* fee5 */                   STA.abs ("ti2blo_dd06");      // save VIA 2 timer B low byte
/* fee8 */                   LDA.abs ("ti2bhi_dd07");      // get VIA 2 timer B high byte
/* feeb */                   ADC.abs ("baudof+1_029a");
/* feee */                   STA.abs ("ti2bhi_dd07");      // save VIA 2 timer B high byte
/* fef1 */                   LDA.imm (0x11);               // set timer B single shot, start timer B
/* fef3 */                   STA.abs ("ci2crb_dd0f");      // save VIA 2 CRB
/* fef6 */                   LDA.abs ("enabl_02a1");       // get the RS-232 interrupt enable byte
/* fef9 */                   STA.abs ("ci2icr_dd0d");      // save VIA 2 ICR
/* fefc */                   LDA.imm (0xff);
/* fefe */                   STA.abs ("ti2blo_dd06");      // save VIA 2 timer B low byte
/* ff01 */                   STA.abs ("ti2bhi_dd07");      // save VIA 2 timer B high byte
/* ff04 */                   JMP.abs ("_ef59");
/* ff07 */        _`_ff07`;  LDA.abs ("m51ajb+0_0295");    // nonstandard bit timing low byte
/* ff0a */                   STA.abs ("ti2blo_dd06");      // save VIA 2 timer B low byte
/* ff0d */                   LDA.abs ("m51ajb+1_0296");    // nonstandard bit timing high byte
/* ff10 */                   STA.abs ("ti2bhi_dd07");      // save VIA 2 timer B high byte
/* ff13 */                   LDA.imm (0x11);               // set timer B single shot, start timer B
/* ff15 */                   STA.abs ("ci2crb_dd0f");      // save VIA 2 CRB
/* ff18 */                   LDA.imm (0x12);
/* ff1a */                   EOR.abs ("enabl_02a1");       // EOR with the RS-232 interrupt enable byte
/* ff1d */                   STA.abs ("enabl_02a1");       // save the RS-232 interrupt enable byte
/* ff20 */                   LDA.imm (0xff);
/* ff22 */                   STA.abs ("ti2blo_dd06");      // save VIA 2 timer B low byte
/* ff25 */                   STA.abs ("ti2bhi_dd07");      // save VIA 2 timer B high byte
/* ff28 */                   LDX.abs ("bitnum_0298");
/* ff2b */                   STX.zpg ("bitci_00a8");
/* ff2d */                   RTS.imp ();

// ------------------------------------------------------- // ??
/* ff2e */        _`_ff2e`;  TAX.imp ();
/* ff2f */                   LDA.abs ("m51ajb+1_0296");    // nonstandard bit timing high byte
/* ff32 */                   ROL.acc ();
/* ff33 */                   TAY.imp ();
/* ff34 */                   TXA.imp ();
/* ff35 */                   ADC.imm (0xc8);
/* ff37 */                   STA.abs ("baudof+0_0299");
/* ff3a */                   TYA.imp ();
/* ff3b */                   ADC.imm (0x00);               // add any carry
/* ff3d */                   STA.abs ("baudof+1_029a");
/* ff40 */                   RTS.imp ();

// ------------------------------------------------------- // unused bytes
/* ff41 */                   NOP.imp ();                   // waste cycles
/* ff42 */                   NOP.imp ();                   // waste cycles

// ------------------------------------------------------- // save the status and do the IRQ routine
/* ff43 */        _`_ff43`;  PHP.imp ();                   // save the processor status
/* ff44 */                   PLA.imp ();                   // pull the processor status
/* ff45 */                   AND.imm (0xef);               // mask xxx0 xxxx, clear the break bit
/* ff47 */                   PHA.imp ();                   // save the modified processor status

// ------------------------------------------------------- // IRQ vector
/* ff48 */                   PHA.imp ();                   // save A
/* ff49 */                   TXA.imp ();                   // copy X
/* ff4a */                   PHA.imp ();                   // save X
/* ff4b */                   TYA.imp ();                   // copy Y
/* ff4c */                   PHA.imp ();                   // save Y
/* ff4d */                   TSX.imp ();                   // copy stack pointer
/* ff4e */                   LDA.abx ("bad+4_0104");       // get stacked status register
/* ff51 */                   AND.imm (0x10);               // mask BRK flag
/* ff53 */                   BEQ.rel ("_ff58");            // branch if not BRK
/* ff55 */                   JMP.ind ("cbinv+0_0316");     // else do BRK vector (iBRK)
/* ff58 */        _`_ff58`;  JMP.ind ("cinv+0_0314");      // do IRQ vector (iIRQ)

// ------------------------------------------------------- // initialise VIC and screen editor
/* ff5b */    _`cint_ff5b`;  JSR.abs ("cint1_e518");       // initialise the screen and keyboard
/* ff5e */        _`_ff5e`;  LDA.abs ("raster_d012");      // read the raster compare register
/* ff61 */                   BNE.rel ("_ff5e");            // loop if not raster line $00
/* ff63 */                   LDA.abs ("vicirq_d019");      // read the vic interrupt flag register
/* ff66 */                   AND.imm (0x01);               // mask the raster compare flag
/* ff68 */                   STA.abs ("tvsflg_02a6");      // save the PAL/NTSC flag
/* ff6b */                   JMP.abs ("_fddd");

// ------------------------------------------------------- // ??
/* ff6e */        _`_ff6e`;  LDA.imm (0x81);               // enable timer A interrupt
/* ff70 */                   STA.abs ("ciaicr_dc0d");      // save VIA 1 ICR
/* ff73 */                   LDA.abs ("ciacra_dc0e");      // read VIA 1 CRA
/* ff76 */                   AND.imm (0x80);               // mask x000 0000, TOD clock
/* ff78 */                   ORA.imm (0x11);               // mask xxx1 xxx1, load timer A, start timer A
/* ff7a */                   STA.abs ("ciacra_dc0e");      // save VIA 1 CRA
/* ff7d */                   JMP.abs ("_ee8e");            // set the serial clock out low and return

// ------------------------------------------------------- // unused
/* ff80 */                   _.bytes(0x03);

// ------------------------------------------------------- // initialise VIC and screen editor
/* ff81 */    _`cint_ff81`;  JMP.abs ("cint_ff5b");        // initialise VIC and screen editor

// ------------------------------------------------------- // initialise SID, CIA and IRQ, unused
/* ff84 */  _`ioinit_ff84`;  JMP.abs ("ioinit_fda3");      // initialise SID, CIA and IRQ

// ------------------------------------------------------- // RAM test and find RAM end
/* ff87 */  _`ramtas_ff87`;  JMP.abs ("ramtas_fd50");      // RAM test and find RAM end

// ------------------------------------------------------- // restore default I/O vectors
                                                           // this routine restores the default values of all system vectors used in KERNAL and
                                                           // BASIC routines and interrupts.
/* ff8a */  _`restor_ff8a`;  JMP.abs ("restor_fd15");      // restore default I/O vectors

// ------------------------------------------------------- // read/set vectored I/O
                                                           // this routine manages all system vector jump addresses stored in RAM. Calling this
                                                           // routine with the carry bit set will store the current contents of the RAM vectors
                                                           // in a list pointed to by the X and Y registers. When this routine is called with
                                                           // the carry bit clear, the user list pointed to by the X and Y registers is copied
                                                           // to the system RAM vectors.
                                                           // NOTE: This routine requires caution in its use. The best way to use it is to first
                                                           // read the entire vector contents into the user area, alter the desired vectors and
                                                           // then copy the contents back to the system vectors.
/* ff8d */  _`vector_ff8d`;  JMP.abs ("vector_fd1a");      // read/set vectored I/O

// ------------------------------------------------------- // control kernal messages
                                                           // this routine controls the printing of error and control messages by the KERNAL.
                                                           // Either print error messages or print control messages can be selected by setting
                                                           // the accumulator when the routine is called.
                                                           // FILE NOT FOUND is an example of an error message. PRESS PLAY ON CASSETTE is an
                                                           // example of a control message.
                                                           // bits 6 and 7 of this value determine where the message will come from. If bit 7
                                                           // is set one of the error messages from the KERNAL will be printed. If bit 6 is set
                                                           // a control message will be printed.
/* ff90 */  _`setmsg_ff90`;  JMP.abs ("setmsg_fe18");      // control kernal messages

// ------------------------------------------------------- // send secondary address after LISTEN
                                                           // this routine is used to send a secondary address to an I/O device after a call to
                                                           // the LISTEN routine is made and the device commanded to LISTEN. The routine cannot
                                                           // be used to send a secondary address after a call to the TALK routine.
                                                           // A secondary address is usually used to give set-up information to a device before
                                                           // I/O operations begin.
                                                           // When a secondary address is to be sent to a device on the serial bus the address
                                                           // must first be ORed with $60.
/* ff93 */  _`second_ff93`;  JMP.abs ("second_edb9");      // send secondary address after LISTEN

// ------------------------------------------------------- // send secondary address after TALK
                                                           // this routine transmits a secondary address on the serial bus for a TALK device.
                                                           // This routine must be called with a number between 4 and 31 in the accumulator.
                                                           // The routine will send this number as a secondary address command over the serial
                                                           // bus. This routine can only be called after a call to the TALK routine. It will
                                                           // not work after a LISTEN.
/* ff96 */    _`tksa_ff96`;  JMP.abs ("tksa_edc7");        // send secondary address after TALK

// ------------------------------------------------------- // read/set the top of memory
                                                           // this routine is used to read and set the top of RAM. When this routine is called
                                                           // with the carry bit set the pointer to the top of RAM will be loaded into XY. When
                                                           // this routine is called with the carry bit clear XY will be saved as the top of
                                                           // memory pointer changing the top of memory.
/* ff99 */  _`memtop_ff99`;  JMP.abs ("memtop_fe25");      // read/set the top of memory

// ------------------------------------------------------- // read/set the bottom of memory
                                                           // this routine is used to read and set the bottom of RAM. When this routine is
                                                           // called with the carry bit set the pointer to the bottom of RAM will be loaded
                                                           // into XY. When this routine is called with the carry bit clear XY will be saved as
                                                           // the bottom of memory pointer changing the bottom of memory.
/* ff9c */  _`membot_ff9c`;  JMP.abs ("membot_fe34");      // read/set the bottom of memory

// ------------------------------------------------------- // scan the keyboard
                                                           // this routine will scan the keyboard and check for pressed keys. It is the same
                                                           // routine called by the interrupt handler. If a key is down, its ASCII value is
                                                           // placed in the keyboard queue.
/* ff9f */  _`scnkey_ff9f`;  JMP.abs ("scnkey_ea87");      // scan keyboard

// ------------------------------------------------------- // set timeout on serial bus
                                                           // this routine sets the timeout flag for the serial bus. When the timeout flag is
                                                           // set, the computer will wait for a device on the serial port for 64 milliseconds.
                                                           // If the device does not respond to the computer's DAV signal within that time the
                                                           // computer will recognize an error condition and leave the handshake sequence. When
                                                           // this routine is called and the accumulator contains a 0 in bit 7, timeouts are
                                                           // enabled. A 1 in bit 7 will disable the timeouts.
                                                           // NOTE: The the timeout feature is used to communicate that a disk file is not found
                                                           // on an attempt to OPEN a file.
/* ffa2 */  _`settmo_ffa2`;  JMP.abs ("settmo_fe21");      // set timeout on serial bus

// ------------------------------------------------------- // input byte from serial bus

                                                           // this routine reads a byte of data from the serial bus using full handshaking. the
                                                           // data is returned in the accumulator. before using this routine the TALK routine,
                                                           // $FFB4, must have been called first to command the device on the serial bus to
                                                           // send data on the bus. if the input device needs a secondary command it must be sent
                                                           // by using the TKSA routine, $FF96, before calling this routine.

                                                           // errors are returned in the status word which can be read by calling the READST
                                                           // routine, $FFB7.
/* ffa5 */   _`acptr_ffa5`;  JMP.abs ("acptr_ee13");       // input byte from serial bus

// ------------------------------------------------------- // output a byte to serial bus
                                                           // this routine is used to send information to devices on the serial bus. A call to
                                                           // this routine will put a data byte onto the serial bus using full handshaking.
                                                           // Before this routine is called the LISTEN routine, $FFB1, must be used to
                                                           // command a device on the serial bus to get ready to receive data.
                                                           // the accumulator is loaded with a byte to output as data on the serial bus. A
                                                           // device must be listening or the status word will return a timeout. This routine
                                                           // always buffers one character. So when a call to the UNLISTEN routine, $FFAE,
                                                           // is made to end the data transmission, the buffered character is sent with EOI
                                                           // set. Then the UNLISTEN command is sent to the device.
/* ffa8 */   _`ciout_ffa8`;  JMP.abs ("ciout_eddd");       // output byte to serial bus

// ------------------------------------------------------- // command serial bus to UNTALK
                                                           // this routine will transmit an UNTALK command on the serial bus. All devices
                                                           // previously set to TALK will stop sending data when this command is received.
/* ffab */   _`untlk_ffab`;  JMP.abs ("untlk_edef");       // command serial bus to UNTALK

// ------------------------------------------------------- // command serial bus to UNLISTEN
                                                           // this routine commands all devices on the serial bus to stop receiving data from
                                                           // the computer. Calling this routine results in an UNLISTEN command being transmitted
                                                           // on the serial bus. Only devices previously commanded to listen will be affected.
                                                           // This routine is normally used after the computer is finished sending data to
                                                           // external devices. Sending the UNLISTEN will command the listening devices to get
                                                           // off the serial bus so it can be used for other purposes.
/* ffae */   _`unlsn_ffae`;  JMP.abs ("unlsn_edfe");       // command serial bus to UNLISTEN

// ------------------------------------------------------- // command devices on the serial bus to LISTEN
                                                           // this routine will command a device on the serial bus to receive data. The
                                                           // accumulator must be loaded with a device number between 4 and 31 before calling
                                                           // this routine. LISTEN convert this to a listen address then transmit this data as
                                                           // a command on the serial bus. The specified device will then go into listen mode
                                                           // and be ready to accept information.
/* ffb1 */  _`listen_ffb1`;  JMP.abs ("listen_ed0c");      // command devices on the serial bus to LISTEN

// ------------------------------------------------------- // command serial bus device to TALK
                                                           // to use this routine the accumulator must first be loaded with a device number
                                                           // between 4 and 30. When called this routine converts this device number to a talk
                                                           // address. Then this data is transmitted as a command on the Serial bus.
/* ffb4 */    _`talk_ffb4`;  JMP.abs ("talk_ed09");        // command serial bus device to TALK

// ------------------------------------------------------- // read I/O status word
                                                           // this routine returns the current status of the I/O device in the accumulator. The
                                                           // routine is usually called after new communication to an I/O device. The routine
                                                           // will give information about device status, or errors that have occurred during the
                                                           // I/O operation.
/* ffb7 */  _`readst_ffb7`;  JMP.abs ("readst_fe07");      // read I/O status word

// ------------------------------------------------------- // set logical, first and second addresses
                                                           // this routine will set the logical file number, device address, and secondary
                                                           // address, command number, for other KERNAL routines.
                                                           // the logical file number is used by the system as a key to the file table created
                                                           // by the OPEN file routine. Device addresses can range from 0 to 30. The following
                                                           // codes are used by the computer to stand for the following CBM devices:
                                                           // ADDRESS DEVICE
                                                           // ======= ======
                                                           //  0      Keyboard
                                                           //  1      Cassette #1
                                                           //  2      RS-232C device
                                                           //  3      CRT display
                                                           //  4      Serial bus printer
                                                           //  8      CBM Serial bus disk drive
                                                           // device numbers of four or greater automatically refer to devices on the serial
                                                           // bus.
                                                           // a command to the device is sent as a secondary address on the serial bus after
                                                           // the device number is sent during the serial attention handshaking sequence. If
                                                           // no secondary address is to be sent Y should be set to $FF.
/* ffba */  _`setlfs_ffba`;  JMP.abs ("setlfs_fe00");      // set logical, first and second addresses

// ------------------------------------------------------- // set the filename
                                                           // this routine is used to set up the file name for the OPEN, SAVE, or LOAD routines.
                                                           // The accumulator must be loaded with the length of the file and XY with the pointer
                                                           // to file name, X being th low byte. The address can be any valid memory address in
                                                           // the system where a string of characters for the file name is stored. If no file
                                                           // name desired the accumulator must be set to 0, representing a zero file length,
                                                           // in that case  XY may be set to any memory address.
/* ffbd */  _`setnam_ffbd`;  JMP.abs ("setnam_fdf9");      // set the filename

// ------------------------------------------------------- // open a logical file
                                                           // this routine is used to open a logical file. Once the logical file is set up it
                                                           // can be used for input/output operations. Most of the I/O KERNAL routines call on
                                                           // this routine to create the logical files to operate on. No arguments need to be
                                                           // set up to use this routine, but both the SETLFS, $FFBA, and SETNAM, $FFBD,
                                                           // KERNAL routines must be called before using this routine.
/* ffc0 */    _`open_ffc0`;  JMP.ind ("iopen+0_031a");     // do open a logical file

// ------------------------------------------------------- // close a specified logical file
                                                           // this routine is used to close a logical file after all I/O operations have been
                                                           // completed on that file. This routine is called after the accumulator is loaded
                                                           // with the logical file number to be closed, the same number used when the file was
                                                           // opened using the OPEN routine.
/* ffc3 */   _`close_ffc3`;  JMP.ind ("iclose+0_031c");    // do close a specified logical file

// ------------------------------------------------------- // open channel for input
                                                           // any logical file that has already been opened by the OPEN routine, $FFC0, can be
                                                           // defined as an input channel by this routine. the device on the channel must be an
                                                           // input device or an error will occur and the routine will abort.

                                                           // if you are getting data from anywhere other than the keyboard, this routine must be
                                                           // called before using either the CHRIN routine, $FFCF, or the GETIN routine,
                                                           // $FFE4. if you are getting data from the keyboard and no other input channels are
                                                           // open then the calls to this routine and to the OPEN routine, $FFC0, are not needed.

                                                           // when used with a device on the serial bus this routine will automatically send the
                                                           // listen address specified by the OPEN routine, $FFC0, and any secondary address.

                                                           // possible errors are:

                                                           // 3 : file not open
                                                           // 5 : device not present
                                                           // 6 : file is not an input file
/* ffc6 */   _`chkin_ffc6`;  JMP.ind ("ichkin+0_031e");    // do open channel for input

// ------------------------------------------------------- // open channel for output
                                                           // any logical file that has already been opened by the OPEN routine, $FFC0, can be
                                                           // defined as an output channel by this routine the device on the channel must be an
                                                           // output device or an error will occur and the routine will abort.

                                                           // if you are sending data to anywhere other than the screen this routine must be
                                                           // called before using the CHROUT routine, $FFD2. if you are sending data to the
                                                           // screen and no other output channels are open then the calls to this routine and to
                                                           // the OPEN routine, $FFC0, are not needed.

                                                           // when used with a device on the serial bus this routine will automatically send the
                                                           // listen address specified by the OPEN routine, $FFC0, and any secondary address.

                                                           // possible errors are:

                                                           // 3 : file not open
                                                           // 5 : device not present
                                                           // 7 : file is not an output file
/* ffc9 */  _`chkout_ffc9`;  JMP.ind ("ickout+0_0320");    // do open channel for output

// ------------------------------------------------------- // close input and output channels
                                                           // this routine is called to clear all open channels and restore the I/O channels to
                                                           // their original default values. It is usually called after opening other I/O
                                                           // channels and using them for input/output operations. The default input device is
                                                           // 0, the keyboard. The default output device is 3, the screen.
                                                           // If one of the channels to be closed is to the serial port, an UNTALK signal is sent
                                                           // first to clear the input channel or an UNLISTEN is sent to clear the output channel.
                                                           // By not calling this routine and leaving listener(s) active on the serial bus,
                                                           // several devices can receive the same data from the VIC at the same time. One way to
                                                           // take advantage of this would be to command the printer to TALK and the disk to
                                                           // LISTEN. This would allow direct printing of a disk file.
/* ffcc */  _`clrchn_ffcc`;  JMP.ind ("iclrch+0_0322");    // do close input and output channels

// ------------------------------------------------------- // input character from channel
                                                           // this routine will get a byte of data from the channel already set up as the input
                                                           // channel by the CHKIN routine, $FFC6.

                                                           // If CHKIN, $FFC6, has not been used to define another input channel the data is
                                                           // expected to be from the keyboard. the data byte is returned in the accumulator. the
                                                           // channel remains open after the call.

                                                           // input from the keyboard is handled in a special way. first, the cursor is turned on
                                                           // and it will blink until a carriage return is typed on the keyboard. all characters
                                                           // on the logical line, up to 80 characters, will be stored in the BASIC input buffer.
                                                           // then the characters can be returned one at a time by calling this routine once for
                                                           // each character. when the carriage return is returned the entire line has been
                                                           // processed. the next time this routine is called the whole process begins again.
/* ffcf */   _`chrin_ffcf`;  JMP.ind ("ibasin+0_0324");    // do input character from channel

// ------------------------------------------------------- // output character to channel
                                                           // this routine will output a character to an already opened channel. Use the OPEN
                                                           // routine, $FFC0, and the CHKOUT routine, $FFC9, to set up the output channel
                                                           // before calling this routine. If these calls are omitted, data will be sent to the
                                                           // default output device, device 3, the screen. The data byte to be output is loaded
                                                           // into the accumulator, and this routine is called. The data is then sent to the
                                                           // specified output device. The channel is left open after the call.
                                                           // NOTE: Care must be taken when using routine to send data to a serial device since
                                                           // data will be sent to all open output channels on the bus. Unless this is desired,
                                                           // all open output channels on the serial bus other than the actually intended
                                                           // destination channel must be closed by a call to the KERNAL close channel routine.
/* ffd2 */  _`chrout_ffd2`;  JMP.ind ("ibsout+0_0326");    // do output character to channel

// ------------------------------------------------------- // load RAM from a device
                                                           // this routine will load data bytes from any input device directly into the memory
                                                           // of the computer. It can also be used for a verify operation comparing data from a
                                                           // device with the data already in memory, leaving the data stored in RAM unchanged.
                                                           // The accumulator must be set to 0 for a load operation or 1 for a verify. If the
                                                           // input device was OPENed with a secondary address of 0 the header information from
                                                           // device will be ignored. In this case XY must contain the starting address for the
                                                           // load. If the device was addressed with a secondary address of 1 or 2 the data will
                                                           // load into memory starting at the location specified by the header. This routine
                                                           // returns the address of the highest RAM location which was loaded.
                                                           // Before this routine can be called, the SETLFS, $FFBA, and SETNAM, $FFBD,
                                                           // routines must be called.
/* ffd5 */    _`load_ffd5`;  JMP.abs ("load_f49e");        // load RAM from a device

// ------------------------------------------------------- // save RAM to a device
                                                           // this routine saves a section of memory. Memory is saved from an indirect address
                                                           // on page 0 specified by A, to the address stored in XY, to a logical file. The
                                                           // SETLFS, $FFBA, and SETNAM, $FFBD, routines must be used before calling this
                                                           // routine. However, a file name is not required to SAVE to device 1, the cassette.
                                                           // Any attempt to save to other devices without using a file name results in an error.
                                                           // NOTE: device 0, the keyboard, and device 3, the screen, cannot be SAVEd to. If
                                                           // the attempt is made, an error will occur, and the SAVE stopped.
/* ffd8 */    _`save_ffd8`;  JMP.abs ("save_f5dd");        // save RAM to device

// ------------------------------------------------------- // set the real time clock
                                                           // the system clock is maintained by an interrupt routine that updates the clock
                                                           // every 1/60th of a second. The clock is three bytes long which gives the capability
                                                           // to count from zero up to 5,184,000 jiffies - 24 hours plus one jiffy. At that point
                                                           // the clock resets to zero. Before calling this routine to set the clock the new time,
                                                           // in jiffies, should be in YXA, the accumulator containing the most significant byte.
/* ffdb */  _`settim_ffdb`;  JMP.abs ("settim_f6e4");      // set real time clock

// ------------------------------------------------------- // read the real time clock
                                                           // this routine returns the time, in jiffies, in AXY. The accumulator contains the
                                                           // most significant byte.
/* ffde */   _`rdtim_ffde`;  JMP.abs ("rdtim_f6dd");       // read real time clock

// ------------------------------------------------------- // scan the stop key
                                                           // if the STOP key on the keyboard is pressed when this routine is called the Z flag
                                                           // will be set. All other flags remain unchanged. If the STOP key is not pressed then
                                                           // the accumulator will contain a byte representing the last row of the keyboard scan.
                                                           // The user can also check for certain other keys this way.
/* ffe1 */    _`stop_ffe1`;  JMP.ind ("istop+0_0328");     // do scan stop key

// ------------------------------------------------------- // get character from input device
                                                           // in practice this routine operates identically to the CHRIN routine, $FFCF,
                                                           // for all devices except for the keyboard. If the keyboard is the current input
                                                           // device this routine will get one character from the keyboard buffer. It depends
                                                           // on the IRQ routine to read the keyboard and put characters into the buffer.
                                                           // If the keyboard buffer is empty the value returned in the accumulator will be zero.
/* ffe4 */   _`getin_ffe4`;  JMP.ind ("igetin+0_032a");    // do get character from input device

// ------------------------------------------------------- // close all channels and files
                                                           // this routine closes all open files. When this routine is called, the pointers into
                                                           // the open file table are reset, closing all files. Also the routine automatically
                                                           // resets the I/O channels.
/* ffe7 */   _`clall_ffe7`;  JMP.ind ("iclall+0_032c");    // do close all channels and files

// ------------------------------------------------------- // increment real time clock
                                                           // this routine updates the system clock. Normally this routine is called by the
                                                           // normal KERNAL interrupt routine every 1/60th of a second. If the user program
                                                           // processes its own interrupts this routine must be called to update the time. Also,
                                                           // the STOP key routine must be called if the stop key is to remain functional.
/* ffea */   _`udtim_ffea`;  JMP.abs ("udtim_f69b");       // increment real time clock

// ------------------------------------------------------- // return X,Y organization of screen
                                                           // this routine returns the x,y organisation of the screen in X,Y
/* ffed */  _`screen_ffed`;  JMP.abs ("screen_e505");      // return X,Y organization of screen

// ------------------------------------------------------- // read/set X,Y cursor position
                                                           // this routine, when called with the carry flag set, loads the current position of
                                                           // the cursor on the screen into the X and Y registers. X is the column number of
                                                           // the cursor location and Y is the row number of the cursor. A call with the carry
                                                           // bit clear moves the cursor to the position determined by the X and Y registers.
/* fff0 */    _`plot_fff0`;  JMP.abs ("plot_e50a");        // read/set X,Y cursor position

// ------------------------------------------------------- // return the base address of the I/O devices
                                                           // this routine will set XY to the address of the memory section where the memory
                                                           // mapped I/O devices are located. This address can then be used with an offset to
                                                           // access the memory mapped I/O devices in the computer.
/* fff3 */  _`iobase_fff3`;  JMP.abs ("iobase_e500");      // return the base address of the I/O devices

// ------------------------------------------------------- //
                                                           // RRBY
/* fff6 */                   _.bytes(0x52, 0x52, 0x42, 0x59);

// ------------------------------------------------------- // hardware vectors
/* fffa */                   _.bytes(0x43, 0xfe);          // NMI Vektor
/* fffc */                   _.bytes(0xe2, 0xfc);          // RESET Vektor
/* fffe */                   _.bytes(0x48, 0xff);          // IRQ Vektor
  }
));


/***/ }),

/***/ "./src/target/rom/skipRamTest.js":
/*!***************************************!*\
  !*** ./src/target/rom/skipRamTest.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _tools_assembler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tools/assembler */ "./src/tools/assembler.js");
/* harmony import */ var _kernal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./kernal */ "./src/target/rom/kernal.js");
/*
   skipRamTest - exports a patched Kernal that skips the RAM test on boot, just
   to speed up the dev builds.
*/




const KERNAL_START = 0xe000;
const PATCH_START  = 0xfd67;

const patch = (0,_tools_assembler__WEBPACK_IMPORTED_MODULE_0__.assemble)(
  PATCH_START,
  ({ LDA, STA, JMP, _ }) => {

    _.label(0xa000, "memtop");

    LDA.imm (_.l`memtop`);
    STA.abs (0x283);        // store memory top low byte
    LDA.imm (_.h`memtop`);
    STA.abs (0x284);        // store memory top low byte
    JMP.abs (0xfd90);       // first instruction after RAM test
  }
);

const patchedKernal = [..._kernal__WEBPACK_IMPORTED_MODULE_1__["default"]];

for (let i = 0; i < patch.length; i++) {
  patchedKernal[i + PATCH_START - KERNAL_START] = patch[i];
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (patchedKernal);


/***/ }),

/***/ "./src/target/runloop.js":
/*!*******************************!*\
  !*** ./src/target/runloop.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attach: () => (/* binding */ attach)
/* harmony export */ });
/* harmony import */ var _tools_romLocations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tools/romLocations */ "./src/tools/romLocations.js");
/*
   runloop: performs operations like tick, serialize and deserialize on the
   target system as a whole, and runs the simulation in a time-throttled loop,
   with an optional hook for breakpoints
*/



// Node.js doesn't have `performance` loaded by default. Not that we make use
// of it in that version, but the runloop expects it to be there.
if (!globalThis.performance) {
  globalThis.performance = { now: () => 0 };
}

// How many frames to run for a single frames-per-second sample
const FRAMES_PER_WAYPOINT = 50;

// Bound by attach
let c64;

// configure by setDevices
let wires;
let cpu;
let vic;
let cias;
let sid;
let tape;

let state;
let masterStop = false;
let frameStop  = false;

function attach(nascentC64) {
  c64 = nascentC64;

  wires = c64.wires;
  cpu   = c64.cpu;
  vic   = c64.vic;
  cias  = c64.cias;
  sid   = c64.sid;
  tape  = c64.tape;

  reset();

  c64.runloop = {
    // Control
    run,
    stop,
    stopAfterFrame,
    isRunning,
    type,
    untilPc,
    reset,
    serialize,
    deserialize,
    // Debug
    getState,
  };
}

function reset() {
  state = {
    cycle: 0,
  };
  
  c64.wires.reset();
  c64.ram  .reset();
  c64.vic  .reset();
  c64.sid  .reset(); 
  c64.cpu  .reset();
  c64.cias .reset();
  c64.tape .reset();

  if (c64.hooks.setTitle) {
    c64.hooks.setTitle("");
  }
}

function getState() {
  return state;
}

function stop() {
  masterStop = true;
}

function stopAfterFrame() {
  frameStop = true;
}

function isRunning() {
  return !masterStop;
}

let timer;

function run(profile) {

  // Apply default run profile
  profile = {
    tick: () => false,
    fps: 50,
    ...profile,
  }

  let resolveBreakPromise;
  const breakPromise = new Promise(resolve => { resolveBreakPromise = resolve; });

  if (timer !== undefined) {
    masterStop = true;
    clearInterval(timer);
  }

  masterStop = false;
  frameStop  = false;

  const cleanUpOnBreak = () => {
    clearInterval(timer);
    if (c64.hooks.didStop) c64.hooks.didStop();
    timer = undefined;
    resolveBreakPromise();
  };

  let timeAtWaypoint = performance.now();
  let framesSinceWaypoint = 0;

  timer = setInterval(
    () => {
      try {
        // We'll loop for one video frame at a time. That is,
        // 312 rows of 63 cycles per row
        // (Which would be different if we support NTSC in future)
        for (let i = 0; i < (63 * 312); i++) {
          state.cycle++;

          cpu .tick();
          vic .tick();
          cias.tick();
          sid .tick();
          tape.tick();

          if (masterStop || profile.tick()) {
            cleanUpOnBreak();
            break;
          }
        }

        // Frames-per-second counter
        if (++framesSinceWaypoint === FRAMES_PER_WAYPOINT) {
          const now = performance.now();

          if (c64.hooks.updateFps) {
            c64.hooks.updateFps(
              Math.round((1000 * FRAMES_PER_WAYPOINT) / (now - timeAtWaypoint))
            );
          }

          timeAtWaypoint = now;
          framesSinceWaypoint = 0;
        }

        // Frame stop
        if (frameStop) cleanUpOnBreak();
      }
      catch (e) {
        console.error("Caught exception:", e);
        cleanUpOnBreak();
      }
    },
    1000 / profile.fps
  );

  if (c64.hooks.didStart) c64.hooks.didStart();

  return breakPromise;
}

async function untilPc(pc, fast = false) {

  const regs = c64.cpu.getState();

  if (pc === undefined) {
    // TODO: throw instead?
    console.error("Missing argument: PC address");
    return;
  }

  // If the PC was currently at the address we were waiting for,
  // advance past it. You want to be able to call this function
  // multple times to re-run.
  await run({
    tick: () => regs.pc !== pc,
  });

  const profile = {
    tick: () => regs.pc === pc,
  };

  if (fast) profile.fps = Infinity;

  return run(profile);
}

function type(str) {
  let bufLen = c64.wires.cpuRead(_tools_romLocations__WEBPACK_IMPORTED_MODULE_0__.KEYBOARD_BUFFER_INDEX);

  for (let char of str) {

    if (bufLen >= _tools_romLocations__WEBPACK_IMPORTED_MODULE_0__.KEYBOARD_BUFFER_LENGTH) {
      throw new Error("Overflow for Kernal keyboard buffer");
    }

    c64.wires.cpuWrite(_tools_romLocations__WEBPACK_IMPORTED_MODULE_0__.KEYBOARD_BUFFER_ADDR + bufLen, char.charCodeAt(0));
    c64.wires.cpuWrite(_tools_romLocations__WEBPACK_IMPORTED_MODULE_0__.KEYBOARD_BUFFER_INDEX, ++bufLen);
  }
}

function serialize() {
  return JSON.stringify(
    {
      version: {
        creator: "viciious",
        major: 0,
        minor: 1,
      },
      runloop: JSON.stringify(state),
      wires:   c64.wires.serialize(),
      ram:     c64.ram  .serialize(),
      vic:     c64.vic  .serialize(),
      sid:     c64.sid  .serialize(),
      cpu:     c64.cpu  .serialize(),
      cias:    c64.cias .serialize(),
      tape:    c64.tape .serialize(),
    }
  );
}

function deserialize(json) {
  const obj = JSON.parse(json);

  state = JSON.parse(obj.runloop);

  c64.wires.deserialize(obj.wires);
  c64.ram  .deserialize(obj.ram  );
  c64.vic  .deserialize(obj.vic  );
  c64.sid  .deserialize(obj.sid  );
  c64.cpu  .deserialize(obj.cpu  );
  c64.cias .deserialize(obj.cias );
  c64.tape .deserialize(obj.tape );
}


/***/ }),

/***/ "./src/target/sid.js":
/*!***************************!*\
  !*** ./src/target/sid.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attach: () => (/* binding */ attach)
/* harmony export */ });
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../debug */ "./src/debug.js");
/* harmony import */ var _sid_diag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sid_diag */ "./src/target/sid_diag.js");
/*
   sid: emulates the 6581 (SID) sound synthesizer

   This emulation is a pretty minimal implementation of the SID. It relies on a
   network of OscillatorNode nodes on the host side to actually do the sound
   synthesis. This is quirky for an emulator: it has the advantage that if the
   emulation is paused or slow, the sound will continue without stuttering a
   buffer loop; but it has manifest limitations.

   Essentially, this code is just emulating the ADSR envelope generator (and
   certainly has bugs in doing so), and hands everything else off to the host.

   As for those limitations:

   - no synchronization functionality (as in voice control registers bit 1)
   - voice 3 waveform output is noise only (which likely is its main purpose)
   - no timing accuracy within a frame. The core loop of the emulator runs a
     frame's worth of simulation in one go, then waits for a timeout to cue the
     next frame of simulation. As SID register writes are sent to the host as
     soon as they're encountered, this effectively means that sound commands
     are batched instead of staggered in real time. Since most sound commands
     are triggered from a 50 or 60Hz interrupt anyways, this isn't a big
     problem. But samples, on the other hand, will get badly distorted
     temporally. (Not that the host has a good way of playing them back, with
     the OscillatorNode network, even if timing could be guaranteed).
*/



// Just for diagnostics


// For pre-generating exponential attack/decay curves
const ASYMPTOTE = 1.1;

// 1000 CPU cycles (= 1ms) per ADSR consideration tick
const CYCLES_PER_ADSR_TICK = 100;

// So tick duration is about 1ms
const MS_PER_ADSR_TICK = (1 / 1e6) * CYCLES_PER_ADSR_TICK * 1000;

function getMultiplier(asymptote, steps) {
  // Returns the multiplier you'd need for an attack multiplier,
  // For an upside-down exponential signal that would approach `asymptote`,
  // and would reach 1.0 after `steps` steps.

  // That is, for y = (asymptote).(multiplier)^x,
  // this returns multiplier

  return (Math.E ** (Math.log((asymptote - 1) / asymptote) / steps));
}

const attackMultiplierForDuration = [
     2,
     8,
    16,
    24,
    38,
    56,
    68,
    80,
   100,
   240,
   500,
   800,
  1000,
  3000,
  5000,
  8000,
].map(
  ms => getMultiplier(ASYMPTOTE, ms / MS_PER_ADSR_TICK)
);

const decayMultiplierForDuration = [
      6,
     24,
     48,
     72,
    114,
    168,
    204,
    240,
    300,
    750,
   1500,
   2400,
   3000,
   9000,
  15000,
  24000,
].map(
  ms => getMultiplier(ASYMPTOTE, ms / MS_PER_ADSR_TICK)
);

let state;

// Bound by attach
let regWriteToHost = () => {};
let setVolumeToHost = () => {};

function toBridge(adsr) {
  // Sanity-checking assertions
  if (
    (adsr.voice !== 0) &&
    (adsr.voice !== 1) &&
    (adsr.voice !== 2)
  ) debugger;

  if (adsr.value !== adsr.value) debugger;

  setVolumeToHost(adsr.voice, adsr.value);
}


const initialAdsr = {
  phase: "off",
  value: 0,

  curveScale: 1,
  multiplier: 0,

  attackDuration: 0,
  decayDuration: 0,
  sustainVolume: 0,
  releaseDuration: 0,
};

function reset() {
  state = {
    regs: new Uint8Array(0x20),
    adsr: [
      { ...initialAdsr, voice: 0 },
      { ...initialAdsr, voice: 1 },
      { ...initialAdsr, voice: 2 },
    ],
    cyclesUntilAdsrTick: CYCLES_PER_ADSR_TICK,
  };

  // TODO: should we tell the bridge to reset things too, or should we
  // rely on the bridge getting its own reset?
}

function tick_adsr(adsr) {

  // NaN auditing
  if (adsr.value !== adsr.value) debugger;

  switch (adsr.phase) {

    case "off":
      // Do nothing
      // toBridge(adsr);     // JUST FOR ILLUSTRATION
      break;

    case "attack":
      {
        let value;

        // curve here I think is always offset 0 scale 1

        value = adsr.value;

        value = 1 - value;
        value += (ASYMPTOTE - 1);

        value *= adsr.multiplier;

        value -= (ASYMPTOTE - 1);
        value = 1 - value;

        value = Math.min(value, 1);

        if (value === 1) {
          adsr.phase = "decay";
          adsr.multiplier = decayMultiplierForDuration[adsr.decayDuration];
          adsr.curveOffset = adsr.sustainVolume;
          adsr.curveScale = 1 - adsr.sustainVolume;

          if (!adsr.curveScale) adsr.curveScale = 0.001; // TODO! To avoid a NaN, but...
        }

        adsr.value = value;
        toBridge(adsr);
      }

      break;

    case "decay":
      {
        let value;

        value = adsr.value;

        // curve is:
        //    offset = sustain volume)
        //    scale  = 1 - sustain volume

        value -= adsr.curveOffset;
        value /= adsr.curveScale;
        value += (ASYMPTOTE - 1);
        value *= adsr.multiplier;
        value -= (ASYMPTOTE - 1);
        value *= adsr.curveScale;
        value += adsr.curveOffset;

        value = Math.max(value, adsr.curveOffset);

        if (value === adsr.curveOffset) {
          adsr.phase = "sustain";
          // no parameters needed for that one
        }

        adsr.value = value;
        // console.log("value =", value);
        toBridge(adsr);
      }
      break;

    case "sustain":
      // do nothing
      // toBridge(adsr);     // JUST FOR ILLUSTRATION
      break;

    case "release":

      // curve is:
      //    offset = 0
      //    scale  = sustain volume

      {
        let value = adsr.value;

        value /= adsr.curveScale;
        value += (ASYMPTOTE - 1);
        value *= adsr.multiplier;
        value -= (ASYMPTOTE - 1);
        value *= adsr.curveScale;

        value = Math.max(value, 0);    // times voice value

        if (!value) {
          adsr.phase = "off";
        }

        adsr.value = value;

        toBridge(adsr);
      }
      break;
  }
}

function stop(adsr) {
  adsr.phase = "off";
  adsr.value = 0;
  toBridge(adsr);
}

function keyon(adsr) {
  adsr.phase = "attack";
  adsr.multiplier = attackMultiplierForDuration[adsr.attackDuration];

  tick_adsr(adsr);

  // Let's not set value. We could be pumping it.
  // toBridge(adsr);
}

function keyoff(adsr) {
  adsr.phase = "release";
  adsr.multiplier = decayMultiplierForDuration[adsr.releaseDuration];
  adsr.curveScale = adsr.sustainVolume;
  if (!adsr.curveScale) adsr.curveScale = 0.001; // TODO! To avoid a NaN, but...
}


function tick() {

  if (!state.cyclesUntilAdsrTick--) {
    state.cyclesUntilAdsrTick = CYCLES_PER_ADSR_TICK;
    tick_adsr(state.adsr[0]);
    tick_adsr(state.adsr[1]);
    tick_adsr(state.adsr[2]);

    // diag(c64, state);
  }
}

function read_d400_d7ff(addr) {
  const reg = addr & 0x1f;

  switch (reg) {

    case 0x19:
    case 0x1a:
      (0,_debug__WEBPACK_IMPORTED_MODULE_0__.unimplementedWarning)("paddles");
      return 0xff; // verified
      break;

    case 0x1b:
      (0,_debug__WEBPACK_IMPORTED_MODULE_0__.unimplementedWarning)("voice 3 waveform output");
      // We can't give them waveform data, because we don't have it. But
      // chances are they're using white noise as a random number generator
      // (eg. for the smoke-fades in Master of the Lamps' title screen). So
      // let's just give return random numbers...
      return (Math.random() * 256) & 0xff;
      
    case 0x1c:
      (0,_debug__WEBPACK_IMPORTED_MODULE_0__.unimplementedWarning)("voice 3 ADSR output");
      break;
  }

  // Verified on real hardware that you really do get zero here
  return 0x00;
}

function write_d400_d7ff(addr, byte) {
  
  const reg = addr & 0x1f;
  const voice = Math.floor(reg / 7);

  switch (reg) {

    case 0x04:      // $d404: Voice 1 control register
    case 0x0b:      // $d40b: Voice 2 control register
    case 0x12:      // $d412: Voice 3 control register
      {
        const adsr = state.adsr[voice];

        if (byte & 0x8) {
          stop(adsr);
        }
        else {
          if (byte & 0x1) keyon(adsr);
          else            keyoff(adsr);
        }
      }
      break;

    case 0x05:      // $d405: Voice 1 attack and decay length
    case 0x0c:      // $d40c: Voice 2 attack and decay length
    case 0x13:      // $d413: Voice 3 attack and decay length

      // Do we do these? Yes, we do these all the time.
      // if (state.adsr[voice].phase === "attack") debugger;
      // if (state.adsr[voice].phase === "decay") debugger;

      // Store as a code
      state.adsr[voice]. decayDuration = byte & 0xf;
      state.adsr[voice].attackDuration = byte >> 4;
      break;

    case 0x06:      // $d406: Voice 1 sustain volume and release length
    case 0x0d:      // $d40d: Voice 2 sustain volume and release length
    case 0x14:      // $d414: Voice 3 sustain volume and release length

      // Store as a code
      state.adsr[voice].releaseDuration = byte & 0xf;

      // Store as a ratio
      state.adsr[voice].sustainVolume = (byte >> 4) / 15;
      break;

    case 0x18:      // $d414: Master volume, filter modes, voice 3 disable
      break;

    case 0x1b:      // $d41b: Voice 3 waveform output
    case 0x1c:      // $d41b: Voice 3 ADSR output
      break;
  }

  state.regs[reg] = byte;
  regWriteToHost(reg, byte);
}

function serialize() {
  return JSON.stringify(state);
}

function deserialize(json) {
  state = JSON.parse(json);

  // This has not been carefully considered, but, dare I say it, seems to work.
  // The runloop's reset function doesn't currently reset all of the host
  // devices. Should it?
  for (let reg = 0; reg <= 0x18; reg++) {
    regWriteToHost(reg, state.regs[reg]);
  }

  toBridge(state.adsr[0]);
  toBridge(state.adsr[1]);
  toBridge(state.adsr[2]);
}

// hookups...

let c64;

function attach(nascentC64) {
  c64 = nascentC64;

  regWriteToHost  = c64.audio.onRegWrite;
  setVolumeToHost = c64.audio.setVoiceVolume;

  c64.sid = {
    // Control
    tick,
    reset,
    serialize,
    deserialize,
    // MMIO
    read_d400_d7ff,
    write_d400_d7ff,
  };

  reset();
}


/***/ }),

/***/ "./src/target/sid_diag.js":
/*!********************************!*\
  !*** ./src/target/sid_diag.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   diag: () => (/* binding */ diag)
/* harmony export */ });
/* harmony import */ var _tools_c64FontCodePoints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tools/c64FontCodePoints */ "./src/tools/c64FontCodePoints.js");
/*
   For debugging only - prints, into C64 screen memory, diagnostic info about
   what the virtual SID is doing.
*/



const    LEFT_COLUMN = 7;
const ROWS_PER_VOICE = 7;

const    FREQ_ROW = 1;
const     PWM_ROW = 1;
const CONTROL_ROW = 2;
const    ADSR_ROW = 3;
const     BAR_ROW = 5;

const  FILTER_ROW = 21;
const  VOLUME_ROW = 22;

const seq = [
  0x20,         // space
  0x65,         // 2 left
  0x61,         // even
  0x67 | 0x80,  // 2 right, inverted
];

let getRunloopState;
let cpuWrite;
let state;

function writeChar(row, col, char) {
  const offset = (row * 40) + col;

  cpuWrite( 0x400 + offset, char);
  cpuWrite(0xd800 + offset, 1);
}

function writeX(row, col, nybble) {
  writeChar(row, col, _tools_c64FontCodePoints__WEBPACK_IMPORTED_MODULE_0__.hexDigitToC64FontCodePoint[nybble]);
}

function writeXx(row, col, byte) {
  writeChar(row, col + 0, _tools_c64FontCodePoints__WEBPACK_IMPORTED_MODULE_0__.hexDigitToC64FontCodePoint[byte >> 4]);
  writeChar(row, col + 1, _tools_c64FontCodePoints__WEBPACK_IMPORTED_MODULE_0__.hexDigitToC64FontCodePoint[byte & 0xf]);
}

function writeStr(row, col, str) {
  str = str.toUpperCase();

  for (let i = 0; i < str.length; i++) {
    writeChar(row, col + i, str.charCodeAt(i) - 0x40)
  }
}

function writeBit(row, col, char, condition) {
  writeChar(row, col, (0,_tools_c64FontCodePoints__WEBPACK_IMPORTED_MODULE_0__.charToC64FontCodePoint)(char) + (condition ? 0x80 : 0));
}

function showAdsrState(voice) {
  const row = ADSR_ROW + (voice * ROWS_PER_VOICE);
  const phase = state.adsr[voice].phase;

  writeBit(row, LEFT_COLUMN - 5 + 0, "a", phase === "attack" );
  writeBit(row, LEFT_COLUMN - 5 + 1, "d", phase === "decay"  );
  writeBit(row, LEFT_COLUMN - 5 + 2, "s", phase === "sustain");
  writeBit(row, LEFT_COLUMN - 5 + 3, "r", phase === "release");

  const ad = state.regs[(voice * 7) + 5];
  const sr = state.regs[(voice * 7) + 6];

  writeX(row, LEFT_COLUMN + 0, ad >> 4);
  writeX(row, LEFT_COLUMN + 1, ad & 0xf);

  writeX(row, LEFT_COLUMN + 2, sr >> 4);
  writeX(row, LEFT_COLUMN + 3, sr & 0xf);
}

function envelopeBar(voice) {
  const row = BAR_ROW + (voice * ROWS_PER_VOICE);
  const length = Math.floor(state.adsr[voice].value * 40);

  for (let i = 0; i < 40; i++) {
    writeChar(row, i, 0x20 + (i < length ? 0x80 : 0));
  }

  const subChar = (state.adsr[voice].value * 40) - length;

  if (subChar) {
    writeChar(row, length, seq[Math.floor(subChar * seq.length)]);
  }
}

function showFreq(voice) {
  const row = FREQ_ROW + (ROWS_PER_VOICE * voice);

  writeStr(row, LEFT_COLUMN - 5, "freq");
  writeXx (row, LEFT_COLUMN + 0, state.regs[(voice * 7) + 1]);
  writeXx (row, LEFT_COLUMN + 2, state.regs[(voice * 7) + 0]);
}

function showPwm(voice) {
  const row = PWM_ROW + (ROWS_PER_VOICE * voice);

  writeStr(row,20, "pwm");
  writeXx(row, 25, state.regs[(voice * 7) + 3]);
  writeXx(row, 27, state.regs[(voice * 7) + 2]);
}

function showControl(voice) {
  const row = CONTROL_ROW + (ROWS_PER_VOICE * voice);
  const byte = state.regs[(voice * 7) + 4];

  writeStr(row, LEFT_COLUMN - 5, "ctrl");

  writeBit(row, LEFT_COLUMN + 0,  "V", byte & 0x01);
  writeBit(row, LEFT_COLUMN + 2,  "S", byte & 0x02);
  writeBit(row, LEFT_COLUMN + 3,  "R", byte & 0x04);
  writeBit(row, LEFT_COLUMN + 5,  "D", byte & 0x08);
  writeBit(row, LEFT_COLUMN + 7,  "T", byte & 0x10);
  writeBit(row, LEFT_COLUMN + 8,  "S", byte & 0x20);
  writeBit(row, LEFT_COLUMN + 9,  "R", byte & 0x40);
  writeBit(row, LEFT_COLUMN + 10, "N", byte & 0x80);
}

function showFilter() {
  const row = FILTER_ROW;
  const d417 = state.regs[0x17];
  const d418 = state.regs[0x18];

  writeStr(row, LEFT_COLUMN - 5, "fltr");

  writeBit(row, LEFT_COLUMN + 0, "1", d417 & 0x01);
  writeBit(row, LEFT_COLUMN + 1, "2", d417 & 0x02);
  writeBit(row, LEFT_COLUMN + 2, "3", d417 & 0x04);
  writeBit(row, LEFT_COLUMN + 3, "E", d417 & 0x08);

  // Resonance
  writeX(row, LEFT_COLUMN + 5, d417 >> 4);

  writeBit(row, LEFT_COLUMN + 7,  "L", d418 & 0x10);
  writeBit(row, LEFT_COLUMN + 8,  "B", d418 & 0x20);
  writeBit(row, LEFT_COLUMN + 9,  "H", d418 & 0x40);
  writeBit(row, LEFT_COLUMN + 10, "3", d418 & 0x80);
}

function showVolume() {
  const row = VOLUME_ROW;
  const d418 = state.regs[0x18];

  writeStr(row, LEFT_COLUMN - 4, "vol");
  writeX  (row, LEFT_COLUMN + 0, d418 & 0xf);
}

function showCycle() {
  const cycleStr = String(getRunloopState().cycle);

  Array.from(cycleStr).forEach(
    (digit, index) => {
      writeChar(23, 39 - cycleStr.length + index, (0,_tools_c64FontCodePoints__WEBPACK_IMPORTED_MODULE_0__.charToC64FontCodePoint)(digit));
    }
  );
}

function diag(c64, sidState) {
  getRunloopState = c64.runloop.getState;
  cpuWrite        = c64.wires.cpuWrite;
  state           = sidState;

  // Clear the screen
  for (let i = 0; i < 1000; i++) {
    cpuWrite(0x400 + i, 0x20);
  }

  // Per-voice registers
  for (let voice = 0; voice < 3; voice++) {
    envelopeBar(voice);
    showAdsrState(voice);
    showFreq(voice);
    showPwm(voice);
    showControl(voice);
  }

  // SID-wide registers
  showFilter();
  showVolume();
  showCycle();
}


/***/ }),

/***/ "./src/target/tape.js":
/*!****************************!*\
  !*** ./src/target/tape.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attach: () => (/* binding */ attach)
/* harmony export */ });
/*
   tape: emulates a 1530 'Datasette' cassette deck

   Basically just feeds .tap file format data into the CIA1. Does not support
   saving.

   References:

   - http://wav-prg.sourceforge.net/tape.html
   - http://unusedino.de/ec64/technical/formats/tap.html
*/


// Bound by attach
let raiseTapeInterrupt;
let c64; // but do we need it?

let state;

function setTapeMotor(isOn) {
  state.motorEnabled = isOn;
}

function scheduleNextInterrupt() {
  // We're using the .tap file format as-is to peel off the interrupt timings.
  // (Minus the header, which got stripped off by the ingestor)

  // TODO: bounds check for the image
  const val = state.image[state.imageOffset++];

  if (val === 0) {
    state.ticksUntilInterrupt  = state.image[state.imageOffset++];
    state.ticksUntilInterrupt |= state.image[state.imageOffset++] << 8;
    state.ticksUntilInterrupt |= state.image[state.imageOffset++] << 16;
  }

  else state.ticksUntilInterrupt = val * 8;
}

function tick() {
  if (state.playPressed && state.motorEnabled) {

    if (state.ticksUntilInterrupt) state.ticksUntilInterrupt--;
    else {
      raiseTapeInterrupt();
      scheduleNextInterrupt();
    }
  }
}


function attach(nascentC64) {
  c64 = nascentC64;
  raiseTapeInterrupt = c64.wires.raiseTapeInterrupt;

  reset();

  c64.tape = {
    // Control
    tick,
    reset,
    serialize,
    deserialize,
    // TODO: what did we call this section again?
    setTapeMotor,
    isAnyButtonPressed,

    setImage,
    pressPlay,
    pressStop,
  };
}

function reset() {
  state = {
    ticksUntilInterrupt: Infinity,
    image: null,
    imageOffset: 0,
    playPressed: false,
    motorEnabled: false,
  };
}

function serialize() {
  // TODO
  // (If this gets supported in future, expect the snapshot files to get huge)
}

function deserialize() {
  // TODO
}

function isAnyButtonPressed() {
  return state.playPressed;
}

function setImage(bytes) {
  state.image = bytes;
  state.imageOffset = 0;

  // Schedule an interrupt; it won't actually happen unless the play button's
  // pressed and the motor's enabled.
  scheduleNextInterrupt();
}

function pressPlay() {
  state.playPressed = true;
}

function pressStop() {
  state.playPressed = false;
}


/***/ }),

/***/ "./src/target/vic.js":
/*!***************************!*\
  !*** ./src/target/vic.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attach: () => (/* binding */ attach)
/* harmony export */ });
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../debug */ "./src/debug.js");
/* harmony import */ var _tools_palettes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tools/palettes */ "./src/tools/palettes.js");
/*
   vic: emulates the 6569 (VIC-II; PAL) graphics processor

   ...a big proof-of-concept that grew to encompass all of the chip's
   functionality, and really needs to be re-done. In particular, its timing
   is just placeholder, and it doesn't try stun the CPU for bad lines (the BA
   line) so raster-stable routines aren't going to work, to say nothing of
   tricks like DMA delay.

   (We're a little loose with terminology too)

   The Vic simulation takes by far the bulk of the emulation time, which we'd
   expect given how much work it does compared to the CPU. But still, it's ripe
   for optimization.

   References:

   †1 http://www.zimmers.net/cbmpics/cbm/c64/vic-ii.txt
   †2 sta64 memory map: https://sta.c64.org/cbm64mem.html
    - http://unusedino.de/ec64/technical/project64/mapping_c64.html 
*/




// Bound by attach
let c64;
let vicRead;
let setVicIrq;
let setPixel;
let blit;

let state = {};
const config = {
  ignoreSprSprCollisions: false,
  ignoreSprBgCollisions:  false,
  scopeSprites:           false,
  scopeBackground:        false,
  scopeCollision:         false,
  scopeColorRam:          false,
};

const specialStateValues = [
  ["charBuffer",       Uint8Array,  40    ],
  ["colorBuffer",      Uint8Array,  40    ],
  ["bgRgbQueue",       Uint32Array, 8     ],
  ["bgMaskQueue",      Uint8Array,  8     ],
  ["bgCollisionQueue", Uint8Array,  8     ],
  ["color",            Uint8Array,  0x400 ],
];

// Timing constants (PAL)

const     BORDER_OFF_LINE_25_ROWS = 51;
const     BORDER_OFF_LINE_24_ROWS = 55;
const      BORDER_ON_LINE_25_ROWS = 251;
const      BORDER_ON_LINE_24_ROWS = 247;

const            LAST_RASTER_LINE = 311;

// The first cycle within a line on which character pointer is read
const CHAR_FETCH_CYCLE = 16;

function attach(nascentC64) {
  c64 = nascentC64;

  vicRead   = c64.wires.vicRead;
  setVicIrq = c64.wires.setVicIrq;
  setPixel  = c64.video.setPixel;
  blit      = c64.video.blit;

  c64.vic = {
    // Control
    tick,
    reset,
    serialize,
    deserialize,
    // MMIO
    read_d000_d3ff,
    read_d800_dbff,
    write_d000_d3ff,
    write_d800_dbff,
    // Scopes
    setIgnoreSprBgCol,
    setIgnoreSprSprCol,
    setScope,
    // Gimmicks
    showStatic,
  };

  reset();
}

function reset() {

  const makeDefaultSprite = () => ({
    x:       0,         // $d000, $d002, $d004, ..., with $d010
    y:       0,         // $d001, $d003, $d005, ...
    x2h:     false,     // $d017
    x2w:     false,     // $d01d
    color:   0,         // $d027, $d028, $d029, ...
    mcm:     0,         // $d01c
    behind:  false,     // $d01b
    enabled: false,     // $d015

    // sequence for next scanline:

    colorQueue:     new Array(48),
    maskQueue:      new Array(48),
    collisionQueue: new Array(48),

    xStart: undefined,
    xEnd:   undefined,
  });

  state = {
    cyclesUntilRasterInc: 62,
    cycleOfLine: 0,
    lineOfRaster: 0,
    dflag: true,                // top/bottom border
    vflag: true,                // left/right border
    badline: 0,                 // just for dev

    raster: 0,                  // $d011-2 read
    rasterIrq: 0,               // $d011-2 write
    memorySetup: 0,             // $d018
    interruptStatus: 0,         // $d019, but not but 7 (derive that from irq)
    interruptControl: 0,        // $d01a
    irq: false,                 // derived from interruptStatus and interruptControl

    xscroll: 0,                 // $d016
    yscroll: 0,                 // $d011

    fortyColumns:   true,       // $d016
    twentyFiveRows: true,       // $d011
    displayEnable:  true,       // $d011

    // These are all 4-bit color codes:
    borderColor:            0,  // $d020
    backgroundColor:        0,  // $d021
    extraBgColor1:          0,  // $d022
    extraBgColor2:          0,  // $d023
    extraBgColor3:          0,  // $d024
    spriteMulticolorColor0: 0,  // $d025
    spriteMulticolorColor1: 0,  // $d026

    // Screen modes
    multicolor: false,          // $d016
    bitmap:     false,          // $d011
    extendedBg: false,          // $d011

    // Collisions
    sprSprCol: 0,               // $d01e
    sprBgCol:  0,               // $d01f

    charBuffer:  new Uint8Array(40),
    colorBuffer: new Uint8Array(40),

    // The 'sequencers' of the background pixels (char/bitmap)
    bgQueuePos:       0,
    bgRgbQueue:       new Uint32Array(8),
    bgMaskQueue:      new Uint8Array(8),
    bgCollisionQueue: new Uint8Array(8),

    nextCharCode: 0,
    nextBgByte:   0,
    nextFgCol:    0,

    // Color RAM
    color: new Uint8Array(0x400), // see $d800. Only one nybble per address

    sprites: [
      makeDefaultSprite(),
      makeDefaultSprite(),
      makeDefaultSprite(),
      makeDefaultSprite(),
      makeDefaultSprite(),
      makeDefaultSprite(),
      makeDefaultSprite(),
      makeDefaultSprite(),
    ],

    // Gimmicks
    static: false,
  };
}

function onNewLine() {

  // state.lineOfRaster has been updated

  const lineOfChar = (state.raster - state.yscroll) & 0x7;
  state.badline = lineOfChar === 7;

  if (state.twentyFiveRows) {
    if      (state.lineOfRaster === BORDER_OFF_LINE_25_ROWS) state.dflag = false;
    else if (state.lineOfRaster ===  BORDER_ON_LINE_25_ROWS) state.dflag = true;
  }
  else {
    if      (state.lineOfRaster === BORDER_OFF_LINE_24_ROWS) state.dflag = false;
    else if (state.lineOfRaster ===  BORDER_ON_LINE_24_ROWS) state.dflag = true;
  }

  if (state.lineOfRaster > LAST_RASTER_LINE) {
    state.lineOfRaster = 0;
    blit();
    if (c64.hooks.onFrameEnd) c64.hooks.onFrameEnd();
  }
}

function loadNextBgByte() {

  let indexOfCharBuffer = state.cycleOfLine - 17;

  if (state.bitmap) {

    let char = state.charBuffer[indexOfCharBuffer];

    // rows are 8 lines. We should formalize the terminology.
    const row = Math.floor((state.raster - state.yscroll + 3 - BORDER_OFF_LINE_25_ROWS) / 8);
    const lineOfChar = (state.raster - state.yscroll) & 0x7;

    const bitmapMemBase = ((state.memorySetup & 0b1000) >> 3) * 0x2000;

    let bmByte = vicRead(
      bitmapMemBase +
      (((row * 40) + indexOfCharBuffer) * 8) + lineOfChar
    );

    // nextFgCol only necessary in bitmap mode
    state.nextCharCode = char;
    state.nextBgByte   = bmByte;
    state.nextFgCol    = state.colorBuffer[indexOfCharBuffer] & 0xf;
    return;
  }

  else {

    let char = state.charBuffer[indexOfCharBuffer];
    const fgColor = state.colorBuffer[indexOfCharBuffer] & 0xf;

    // In extended background color mode, the most significant three bits of the
    // character code will determine the background color instead of the
    // character shape.
    let charShapeBase = (state.extendedBg ? (char & 0b00111111) : char) * 8;

    let charByte;
    const lineOfChar = (state.raster - state.yscroll) & 0x7;


    let charMemBase = ((state.memorySetup & 0b1110) >> 1) * 0x800;

    charByte = vicRead(charMemBase + (charShapeBase + lineOfChar));

    state.nextCharCode = char;
    state.nextBgByte   = charByte;
    state.nextFgCol    = state.colorBuffer[indexOfCharBuffer] & 0xf;
  }
}

function loadBgQueues() {

  let rgbPalette = (
    config.scopeSprites ||
    config.scopeCollision
  )
    ? _tools_palettes__WEBPACK_IMPORTED_MODULE_1__.grayscalePalette
    : _tools_palettes__WEBPACK_IMPORTED_MODULE_1__.systemPalette
  ;

  let charByte = state.nextBgByte;
  let fgColor = state.nextFgCol;

  if (config.scopeColorRam) {
    rgbPalette = _tools_palettes__WEBPACK_IMPORTED_MODULE_1__.colorColorPalettes[fgColor];
  }

  state.bgQueuePos = 0;

  // Illegal modes
  if (state.extendedBg && (state.multicolor || state.bitmap)) {

    if (config.scopeBackground) {
      rgbPalette = _tools_palettes__WEBPACK_IMPORTED_MODULE_1__.highlightPalettes[
        (state.multicolor ? 0b100 : 0) |
        (state.extendedBg ? 0b010 : 0) |
        (state.bitmap     ? 0b001 : 0)
      ];
    }

    state.bgRgbQueue      .fill(rgbPalette[0]);  // color code 0 being black
    state.bgMaskQueue     .fill(0);
    state.bgCollisionQueue.fill(0);
    return;
  }

  if (state.bitmap) {
    
    if (state.multicolor) {

      if (config.scopeBackground) rgbPalette = _tools_palettes__WEBPACK_IMPORTED_MODULE_1__.highlightPalettes[0b101];

      const palette = [
        state.backgroundColor,
        state.nextCharCode >> 4,
        state.nextCharCode & 0xf,
        fgColor & 0xf,
      ];

      let nextBgByte = state.nextBgByte;

      for (let x = 0; x < 4; x++) {

        const index     = (nextBgByte & 0b11000000) >> 6;
        const colorCode = palette[index];
        const rgbCode   = rgbPalette[colorCode];

        state.bgRgbQueue[(2 * x) + 0] = rgbCode;
        state.bgRgbQueue[(2 * x) + 1] = rgbCode;

        state.bgMaskQueue[(2 * x) + 0] = index > 0;
        state.bgMaskQueue[(2 * x) + 1] = index > 0;

        state.bgCollisionQueue[(2 * x) + 0] = index > 1;
        state.bgCollisionQueue[(2 * x) + 1] = index > 1;

        nextBgByte <<= 2;
      }
    }
    else {

      if (config.scopeBackground) rgbPalette = _tools_palettes__WEBPACK_IMPORTED_MODULE_1__.highlightPalettes[0b001];

      const col0 = state.nextCharCode & 0xf;
      const col1 = state.nextCharCode >> 4;

      const rgbCol0 = rgbPalette[col0];
      const rgbCol1 = rgbPalette[col1];

      let nextBgByte = state.nextBgByte;

      for (let x = 0; x < 8; x++) {

        state.bgRgbQueue[x] = (nextBgByte & 0b10000000) ? rgbCol1 : rgbCol0;
        state.bgMaskQueue[x] = state.bgCollisionQueue[x] = (nextBgByte & 0b10000000) ? 1 : 0;

        nextBgByte <<= 1;
      }
    }

    return;
  }

  if (state.extendedBg) {

    if (config.scopeBackground) rgbPalette = _tools_palettes__WEBPACK_IMPORTED_MODULE_1__.highlightPalettes[0b010];

    let bgColor;

    if      (state.nextCharCode < 64)  bgColor = state.backgroundColor;
    else if (state.nextCharCode < 128) bgColor = state.extraBgColor1;
    else if (state.nextCharCode < 192) bgColor = state.extraBgColor2;
    else                               bgColor = state.extraBgColor3;

    for (let x = 0; x < 8; x++) {

      const colorCode = (charByte & 0b10000000) ? fgColor : bgColor;
      state.bgRgbQueue[x] = rgbPalette[colorCode];

      // TODO: I'm presuming here. Check this.
      state.bgMaskQueue[x] = state.bgCollisionQueue[x] = (charByte & 0b10000000) ? 1 : 0;

      charByte <<= 1;
    }
  }

  else if (state.multicolor && (fgColor > 7)) {

    if (config.scopeBackground) rgbPalette = _tools_palettes__WEBPACK_IMPORTED_MODULE_1__.highlightPalettes[0b100];

    const palette = [
      state.backgroundColor,
      state.extraBgColor1,
      state.extraBgColor2,
      fgColor & 0x7,
    ];

    for (let x = 0; x < 4; x++) {

      let index = (charByte & 0b11000000) >> 6;

      const colorCode = palette[index];
      const rgbCode = rgbPalette[colorCode];

      state.bgRgbQueue[(2 * x) + 0] = rgbCode;
      state.bgRgbQueue[(2 * x) + 1] = rgbCode;

      state.bgMaskQueue[(2 * x) + 0] = index > 0;
      state.bgMaskQueue[(2 * x) + 1] = index > 0;

      state.bgCollisionQueue[(2 * x) + 0] = index > 1;
      state.bgCollisionQueue[(2 * x) + 1] = index > 1;

      charByte <<= 2;
    }
  }

  else {
    // Regular, no-color-tricks background mode

    if (config.scopeBackground) {
      // Since the multicolor mode with color code < 8 falls through to this case
      if (state.multicolor) rgbPalette = _tools_palettes__WEBPACK_IMPORTED_MODULE_1__.highlightPalettes[0b100];
      else rgbPalette = _tools_palettes__WEBPACK_IMPORTED_MODULE_1__.highlightPalettes[0b000];
    }

    for (let x = 0; x < 8; x++) {

      // I feel we should just paint them all as the foreground color, and make
      // the bgMaskQueue processor take it out.
      const colorCode = (charByte & 0b10000000) ? fgColor : state.backgroundColor;
      
      state.bgRgbQueue      [x] = rgbPalette[colorCode];
      state.bgMaskQueue     [x] = (charByte & 0b10000000);
      state.bgCollisionQueue[x] = (charByte & 0b10000000);

      charByte <<= 1;
    }
  }
}


function get8BackgroundPixels(xc, y, color, mask, collision) {
  
  const aboveTop = (
    ((state.raster - state.yscroll) >> 3) < 
    (BORDER_OFF_LINE_25_ROWS >> 3)
  );

  const belowBottom = (
    ((state.raster - state.yscroll) >> 3) > 
    (BORDER_ON_LINE_24_ROWS >> 3)
  );

  if (aboveTop || belowBottom) {

    // TODO: the real VIC serves char data from $3fff here
    for (let i = 0; i < 8; i++) {

      // TODO: We're mapping scope to palettes in too many different places.
      // This needs a more elegant solution.
      const rgbPalette = (
        config.scopeSprites    ||
        config.scopeBackground ||
        config.scopeCollision  ||
        config.scopeColorRam
      )
        ? _tools_palettes__WEBPACK_IMPORTED_MODULE_1__.grayscalePalette
        : _tools_palettes__WEBPACK_IMPORTED_MODULE_1__.systemPalette
      ;

      color[i]     = rgbPalette[state.backgroundColor];
      mask [i]     = false;
      collision[i] = false;
    }
  }
  else {
    const ret = [];

    for (let x = 0; x < 8; x++) {

      // This loads the dot queue for the next character needed, but
      // - TODO - we need to wipe it before the first one.
      if (x === state.xscroll) {
        loadBgQueues();
      }

      color    [x] =         state.bgRgbQueue      [state.bgQueuePos];
      mask     [x] = Boolean(state.bgMaskQueue     [state.bgQueuePos]);
      collision[x] = Boolean(state.bgCollisionQueue[state.bgQueuePos]);

      // Visualizing debug aid
      // color[x] = mask[x] ? 0xff0000 : 0x000000;

      if (config.scopeCollision) {
        // Sadly we've lost the original color code by this point
        if (collision[x]) color[x] = _tools_palettes__WEBPACK_IMPORTED_MODULE_1__.highlightPalettes[3][15];
      }

      state.bgQueuePos++;
    }
  }
}


function reconsiderVicIrq() {
  state.irq = Boolean(state.interruptStatus & state.interruptControl);
  setVicIrq(state.irq);
}


function sprSprCollision(a, b) {
  if (config.ignoreSprSprCollisions) return;

  // Sprite #a collided with sprite #b

  // TODO: questions:
  // 1) if sprite-to-sprite collision interrupts aren't requested, does this
  //    register still get updated? (assuming yes)
  // 2) once a collision has happened to raise an interrupt, do they continue
  //    to stack up as more sprites collide? (assuming yes).

  const emptyOnEntry = state.sprSprCol;

  state.sprSprCol = state.sprSprCol
    | (1 << a)
    | (1 << b)
  ;

  // More interrupts don't fire if the register hasn't been read
  if (!emptyOnEntry) return;

  // Set the and 'spr-spr collision' flag
  state.interruptStatus |= 0b100;

  reconsiderVicIrq();
}

function sprBgCollision(spriteNum) {
  if (config.ignoreSprBgCollisions) return;

  const emptyOnEntry = state.sprBgCol;

  state.sprBgCol |= 1 << spriteNum;

  // More interrupts don't fire if the register hasn't been read
  if (!emptyOnEntry) return;

  // Set the 'spr-bg collision' flag
  state.interruptStatus |= 0b10;

  reconsiderVicIrq();
}

// Kinda want a better name for this function. The point is the raster line has
// reached the number that triggers an IRQ, though if raster IRQ's aren't
// enabled, there'll be no IRQ.
function rasterMightIrq() {

  // So this is what I think I learned recently... that the bit gets written 
  // to $d019 regardless of whether the interrupts are enabled.

  state.interruptStatus |= 1;
  reconsiderVicIrq();
}

function get8Pixels(xc, y) {
  const defaultPalette = (
    (
      config.scopeSprites    ||
      config.scopeBackground ||
      config.scopeCollision  ||
      config.scopeColorRam
    )
    ? _tools_palettes__WEBPACK_IMPORTED_MODULE_1__.grayscalePalette
    : _tools_palettes__WEBPACK_IMPORTED_MODULE_1__.systemPalette
  );

  // Display off?
  if (!state.displayEnable) return new Array(8).fill(defaultPalette[state.borderColor]);

  // If we're on the top/bottom border, output the border color
  if (state.dflag) {
    return new Array(8).fill(defaultPalette[state.borderColor]);
  }

  // TODO: we should probably avoid reallocating these each time
  let color     = new Array(8);
  let mask      = new Array(8);
  let collision = new Array(8);

  // Some nasty magic numbers that haven't been thought through and are just a
  // band-aid optimization.
  if ((state.cycleOfLine >= 16) && (state.cycleOfLine <= 57)) {
    get8BackgroundPixels(xc, y, color, mask, collision);
  }

  // If we're on the left/right border, output the border color, now that we've
  // done the background pixel fetch at least.
  // (Had we not, the character tiles wouldn't have loaded correctly)
  if (state.vflag) {

    // oh this won't work. The right border gets brought in 9 pixels in 38-column mode.
    return new Array(8).fill(defaultPalette[state.borderColor]);
  }

  for (let pixel = 0; pixel < 8; pixel++) {

    // Just for the collision scope
    let isAnySprColPix = false;

    let x = (xc * 8) + pixel;

    let dominantSprite;   // Sprite number of dominant sprite
    let spriteCol;        // Color code for dominant sprite
    let collidedSprite;

    // Iterate backwards through the sprites, as sprite 0 gets drawn above all
    // the others.
    for (let spriteNum = 7; spriteNum >= 0; spriteNum--) {

      const sprObj = state.sprites[spriteNum];

      if (sprObj.xStart === undefined) continue;

      if ((x >= sprObj.xStart) && (x < sprObj.xEnd)) {

        const sx = x - sprObj.xStart;

        if (sprObj.maskQueue[sx]) {

          // Overwrite the previous, which, as a higher numbered sprite,
          // would have a lower priority
          spriteCol = sprObj.colorQueue[sx];
          dominantSprite = spriteNum;
        }

        // Might be expensive to do it this way
        if (sprObj.collisionQueue[sx]) {

          isAnySprColPix = true;

          // Look for sprite-background collisions
          if (collision[pixel]) sprBgCollision(spriteNum);

          // Look for sprite-sprite collisions
          if (collidedSprite !== undefined) {
            sprSprCollision(collidedSprite, spriteNum);
          }
          collidedSprite = spriteNum;
        }        
      }
    }

    // We've now gone through all the sprites to see which, if any, is on top.
    // If there was a sprite on top, and the priority of that sprite is above
    // the background, paint it.

    if (dominantSprite !== undefined) {
      if (!state.sprites[dominantSprite].behind || !mask[pixel]) {

        if (config.scopeSprites) {
          color[pixel] = _tools_palettes__WEBPACK_IMPORTED_MODULE_1__.highlightPalettes[dominantSprite][spriteCol];
        }
        else if (config.scopeCollision && isAnySprColPix) {
          color[pixel] = _tools_palettes__WEBPACK_IMPORTED_MODULE_1__.highlightPalettes[0][spriteCol];
        }
        else {
          color[pixel] = defaultPalette[spriteCol];
        }

      }
    }
  }

  return color;
}

function fetchNextRowOfCharMatrix() {
  // start pulling in the char buffer for the next line
  if (
    (state.cycleOfLine >= CHAR_FETCH_CYCLE) &&
    (state.cycleOfLine <= (CHAR_FETCH_CYCLE + 40))
  ) {

    // Set the pointer up with the x...
    let ptr = state.cycleOfLine - CHAR_FETCH_CYCLE;

    // add the y...
    ptr += ((state.raster >> 3) - 6) * 40;

    // Don't read memory out of bounds
    if ((ptr >= 0) && (ptr < 1000)) {

      // Which character of this row of text are we loading
      const bufferIndex = state.cycleOfLine - CHAR_FETCH_CYCLE;

      let screenBase = (state.memorySetup >> 4) * 0x400;

      state.charBuffer[bufferIndex] = vicRead(screenBase + ptr);
      state.colorBuffer[bufferIndex] = state.color[ptr];
    }
  }
}

function fetchSpriteSequencesForLine() {

  // What's not accurate about this is when it does the fetching

  const screenBase = (state.memorySetup >> 4) * 0x400;
  const sprPtrsAddr = screenBase + (1024 - 8);

  // Work through the sprites backwards, as 0 has priority
  for (let spriteNum = 7; spriteNum >= 0; spriteNum--) {

    const sprObj = state.sprites[spriteNum];

    sprObj.xStart = undefined;

    if (!sprObj.enabled) continue;

    const doubleWidth = sprObj.x2w;

    let x = sprObj.x;
    let y = sprObj.y;

    // to be at this raster, what would the sprite's y have needed to be?
    let lineOfSprite = state.lineOfRaster - y;

    if (sprObj.x2h) {
      lineOfSprite = Math.floor(lineOfSprite / 2);
    }

    if (lineOfSprite  < 0) continue;
    if (lineOfSprite >= 21) continue;

    const spritePtr = sprPtrsAddr + spriteNum;

    let spriteDataPtr = vicRead(spritePtr);
    
    spriteDataPtr *= 64;
    spriteDataPtr += (lineOfSprite * 3);

    const byte0 = vicRead(spriteDataPtr + 0);
    const byte1 = vicRead(spriteDataPtr + 1);
    const byte2 = vicRead(spriteDataPtr + 2);

    // No need to clear out the old structures; we'll just write over them
    let     spriteColorQueue = sprObj.    colorQueue;
    let      spriteMaskQueue = sprObj.     maskQueue;
    let spriteCollisionQueue = sprObj.collisionQueue;

    const spriteColor = sprObj.color;

    let sprite24bits = (byte0 << 16) | (byte1 << 8) | (byte2 << 0);

    if (sprObj.mcm) {

      const colorCodes = [
        0,                               // irrelevant; masked out
        state.spriteMulticolorColor0,
        spriteColor,
        state.spriteMulticolorColor1,
      ];

      let qPos = 0;

      for (let i = 0; i < 12; i++) {
        let index = (sprite24bits & (0b11 << 22)) >> 22;
        
        for (let j = 0; j < (doubleWidth ? 4 : 2); j++) {
               spriteMaskQueue[qPos] = index !== 0;
              spriteColorQueue[qPos] = colorCodes[index];
          spriteCollisionQueue[qPos] = index > 1;

          qPos++;
        }

        sprite24bits <<= 2;
      }
    }
    else {

      let qPos = 0;

      for (let i = 0; i < 24; i++) {
        for (let j = 0; j < (doubleWidth ? 2 : 1); j++) {

          let isOn = (sprite24bits & (1 << 23)) ? true : false;

               spriteMaskQueue[qPos] = isOn;
              spriteColorQueue[qPos] = spriteColor;
          spriteCollisionQueue[qPos] = isOn;

          qPos++;
        }

        sprite24bits <<= 1;
      }
    }

    sprObj.xStart = sprObj.x + 112;
    sprObj.xEnd   = sprObj.xStart + (doubleWidth ? 48 : 24);
  }
}

function tick() {

  {
    const xc = state.cycleOfLine++;
    const y = state.lineOfRaster;

    const sequence = get8Pixels(xc, y);

    for (let i = 0; i < sequence.length; i++) {
      
      let rgb = sequence[i];

      if (state.static) {
        const rand = Math.random();
        if      (rand < 0.6) rgb = 0x000000;
        else if (rand < 0.7) rgb = 0x444444;
        else if (rand < 0.8) rgb = 0x888888;
        else if (rand < 0.9) rgb = 0xcccccc;
        else                 rgb = 0xffffff;
      }

      const x = (xc * 8) + i;
      
      setPixel(
        x,
        y,
        ((rgb & 0xff0000) >> 16),
        ((rgb & 0x00ff00) >>  8),
        ((rgb & 0x0000ff) >>  0),
      );
    }

    // Line up logic for next cycle

    if (state.badline) fetchNextRowOfCharMatrix();

    // Load black where we don't have anything else to load. This is bad.
    // Set it to white (0x11111111) and you'll see it bleed through in Wizball.
    if (state.cycleOfLine === 16) {
      state.bgQueuePos = 0;
      state.bgRgbQueue .fill(0); // color code 0 = black
      state.bgMaskQueue.fill(0);
    }

    else if ((state.cycleOfLine >= 17) && (state.cycleOfLine < 57)) {
      loadNextBgByte();
    }

    if (state.cycleOfLine === 17) {
      if (state.fortyColumns) state.vflag = 0;
    }

    else if (state.cycleOfLine === 18) {
      if (!state.fortyColumns) state.vflag = 0;
    }

    else if (state.cycleOfLine === 56) {
      if (!state.fortyColumns) state.vflag = 1;
    }

    else if (state.cycleOfLine === 57) {
      if (state.fortyColumns) state.vflag = 1;
    }

    else if (state.cycleOfLine >= 63) {

      fetchSpriteSequencesForLine();

      state.cycleOfLine = 0;
      state.lineOfRaster++;
      onNewLine();
    }
  }

  if (!state.cyclesUntilRasterInc--) {

    // We're on a new raster line. Update our count, and maybe trigger an interrupt

    if (++state.raster >= 312) {
      state.raster = 0;
    }

    if (state.raster === state.rasterIrq) {
      rasterMightIrq();
    }

    state.cyclesUntilRasterInc = 62;
  }
}

function makeRead() {

  const fns = {};

  // One-byte-per-sprite registers
  for (let sprite = 0; sprite < 8; sprite++) {

    // X co-ord bits 0-7 ($d000, $d002, $d004, ...)
    fns[(sprite * 2) + 0] = () => state.sprites[sprite].x & 0xff;

    // Y co-ord ($d001, $d003, $d005, ...)
    fns[(sprite * 2) + 1] = () => state.sprites[sprite].y;

    // Color ($d027, $d028, $d029, ...)
    fns[(sprite * 1) + 0x27] = () => state.sprites[sprite].color;
  }

  // One-bit-per-sprite registers
  const oneBitPerSprite = (fn) => () => {
    let ret = 0;
    for (let spriteNum = 0; spriteNum < 8; spriteNum++) {
      ret |= (fn(state.sprites[spriteNum]) ? (1 << spriteNum) : 0);
    }
    return ret;
  };

  // $d010 - bit 8 of X co-ords
  fns[0x10] = oneBitPerSprite((sprite) => sprite.x & 0x100);

  // $d015 - enable
  fns[0x15] = oneBitPerSprite((sprite) => sprite.enabled);

  // $d017 - double height
  fns[0x17] = oneBitPerSprite((sprite) => sprite.x2h);

  // $d01b - priotiy
  fns[0x1b] = oneBitPerSprite((sprite) => sprite.behind);

  // $d01c - multicolor mode
  fns[0x1c] = oneBitPerSprite((sprite) => sprite.mcm);

  // $d01d - double width
  fns[0x1d] = oneBitPerSprite((sprite) => sprite.x2w);

  // $d01e - sprite-sprite collision
  fns[0x1e] = () => {
    // †1 says:
    //
    //    "The registers $d01e and $d01f cannot be written and are automatically
    //    cleared on reading"
    //
    // †2 says:
    //
    //    "Write: Enable further detection of sprite-sprite collisions."
    //
    // I'm going with †1
    const ret = state.sprSprCol;
    state.sprSprCol = 0;
    return ret;
  }

  // $d01f - sprite-background collision
  fns[0x1f] = () => {
    const ret = state.sprBgCol;
    state.sprBgCol = 0;
    return ret;
  }

  // $d020: Border color
  fns[0x20] = () => 0xf0 | state.borderColor;

  // $d021: Background color
  fns[0x21] = () => 0xf0 | state.backgroundColor;

  // $d022: Extra background color 1
  fns[0x22] = () => 0xf0 | state.extraBgColor1;

  // $d023: Extra background color 2
  fns[0x23] = () => 0xf0 | state.extraBgColor2;

  // $d024: Extra background color 3
  fns[0x24] = () => 0xf0 | state.extraBgColor3;

  // $d025: Sprite multicolor color 0
  fns[0x25] = () => state.spriteMulticolorColor0;

  // $d026: Sprite extra color 2
  fns[0x26] = () => state.spriteMulticolorColor1;


  // $d018: Memory setup
  fns[0x18] = () => state.memorySetup;

  // $d019: Interrupt status
  // TODO: does real hardware set unused bits high?
  fns[0x19] = () => state.interruptStatus | (state.irq ? 0b10000000 : 0);

  // $d01a: Interrupt control
  // TODO: does real hardware set unused bits high?
  fns[0x1a] = () => state.interruptControl | 0xf0;


  // $d013: (Read-only) light pen X
  fns[0x13] = () => {
    // With nothing connected, real hardware just seems to emit noise for the
    // light pen registers. Previously, we'd sound a warning about
    // unimplemented functionality on accesses, but lots of software seems to
    // touch them for no apparent reason, so here we're just returning one of
    // many values that I've seen appear on real hardware.
    return 213;
  }

  // $d014: (Read-only) light pen Y
  fns[0x14] = () => {
    // As above
    return 120;
  }

  // $d011: current raster line bit 8
  fns[0x11] = () => (
    // bit 7: bit 8 of the raster line number
    ((state.raster & 0x100) ? 0x80 : 0x00) |

    // bit 6: extended background mode
    (state.extendedBg ? (1 << 6) : 0) |

    // bit 5: bitmap mode
    (state.bitmap ? (1 << 5) : 0) |

    // bit 4: display enable
    (state.displayEnable ? (1 << 4) : 0) |

    // bit 3: 25-row mode
    (state.twentyFiveRows ? (1 << 3) : 0) |

    // bits 0-2: vertical raster scroll
    state.yscroll

    // TODO: and there's more
  );

  // $d012, current raster line bits 0-7
  fns[0x12] = () => state.raster & 0xff;

  // $d016, Screen control register #2
  fns[0x16] = () => (
    state.xscroll |
    (state.multicolor   ? 0x10 : 0x00) |
    (state.fortyColumns ? 0x08 : 0x00) |

    // TODO: †2 says default is %11001000. But bit 5 doesn't seem to be
    // anything. Is that correct? Check on real hardware
    0b11100000
  );

  // $d02f - $d03f: unmapped
  for (let reg = 0x2f; reg <= 0x3f; reg++) {
    // TODO: pretty sure, but double-check it's 0xff.
    fns[reg] = () => 0xff;
  }

  // Regs are from $d000-$d03f, with degenerate copies through $d3ff
  return (addr) => fns[addr & 0x3f]();
}

function makeWrite() {
  const fns = {};

  // One-byte-per-sprite registers
  for (let sprite = 0; sprite < 8; sprite++) {

    // X co-ord bits 0-7 ($d000, $d002, $d004, ...)
    fns[(sprite * 2) + 0] = (byte) => state.sprites[sprite].x = (state.sprites[sprite].x & 0x100) | byte;

    // Y co-ord ($d001, $d003, $d005, ...)
    fns[(sprite * 2) + 1] = (byte) => state.sprites[sprite].y = byte;

    // Color ($d027, $d028, $d029, ...)
    fns[(sprite * 1) + 0x27] = (byte) => state.sprites[sprite].color = byte & 0xf;
  }

  // One-bit-per-sprite registers
  const oneBitPerSprite = (fn) => (byte) => {
    let ret = 0;
    for (let spriteNum = 0; spriteNum < 8; spriteNum++) {
      fn(state.sprites[spriteNum], Boolean(byte & (1 << spriteNum)));
    }
    return ret;
  };

  // $d010 - bit 8 of X co-ords
  fns[0x10] = oneBitPerSprite((sprite, bit) => sprite.x = bit ? (sprite.x | 0x100) : (sprite.x & 0xff));
  fns[0x15] = oneBitPerSprite((sprite, bit) => sprite.enabled = bit);  // $d015 - enable
  fns[0x17] = oneBitPerSprite((sprite, bit) => sprite.x2h     = bit);  // $d017 - double height
  fns[0x1b] = oneBitPerSprite((sprite, bit) => sprite.behind  = bit);  // $d01b - priority
  fns[0x1c] = oneBitPerSprite((sprite, bit) => sprite.mcm     = bit);  // $d01c - multicolor mode
  fns[0x1d] = oneBitPerSprite((sprite, bit) => sprite.x2w     = bit);  // $d01d - double width


  // $d01e - sprite-sprite collision
  fns[0x1e] = (byte) => state.sprSprCol = byte;

  // $d01f - sprite-background collision
  fns[0x1f] = (byte) => state.sprBgCol = byte;


  // $d011, screen control register 1, current raster line bit 8
  fns[0x11] = (byte) => {
    // update our view of raster IRQ line setting,
    // and fall through to update the rest of the register
    const rasterBit8 = (byte & 0x80) << 1;

    state.rasterIrq &= 0xff;
    state.rasterIrq |= rasterBit8;

    state.yscroll        =         byte & 0b00000111;
    state.twentyFiveRows = Boolean(byte & 0b00001000);
    state.displayEnable  = Boolean(byte & 0b00010000);
    state.bitmap         = Boolean(byte & 0b00100000);
    state.extendedBg     = Boolean(byte & 0b01000000);
  };

  // $d012, current raster line bits 0-7
  fns[0x12] = (byte) => {
    const rasterBit8 = state.rasterIrq & 0x100;
    state.rasterIrq = byte | rasterBit8;
  };

  // $d013, Light pen X-coordinate (read-only)
  // $d014, Light pen Y-coordinate (read-only)
  fns[0x13] = () => {};
  fns[0x14] = () => {};

  // $d016, Screen control register #2
  fns[0x16] = (byte) => {    
    state.xscroll      = byte & 0x7;
    state.multicolor   = Boolean(byte & 0x10);
    state.fortyColumns = Boolean(byte & 0x08);
    // TODO: and there's other bits
  };

  // $d018, Memory setup
  fns[0x18] = (byte) => state.memorySetup = byte;
  
  // $d019: Interrupt acknowledge
  fns[0x19] = (byte) => {

    // clear the bits that the writer's asking us to
    state.interruptStatus &= ~byte;
    state.interruptStatus &= 0x0f;

    reconsiderVicIrq();
  };

  // $d01a, Interrupt control register
  fns[0x1a] = (byte) => {    
    state.interruptControl = byte & 0xf;

    if (byte & 0x8) (0,_debug__WEBPACK_IMPORTED_MODULE_0__.unimplementedWarning)("light pen interrupts");

    // TODO: if an interrupt isn't enabled now, but was responsible for pulling
    // the IRQ line low, I guess that means it'll no longer be pulling the IRQ
    // line low? Is this how real hardware operates?

    reconsiderVicIrq();
  };

  fns[0x20] = (byte) => state.borderColor            = byte & 0xf;  // $d020, Border color
  fns[0x21] = (byte) => state.backgroundColor        = byte & 0xf;  // $d021, Background color
  fns[0x22] = (byte) => state.extraBgColor1          = byte & 0xf;  // $d022, Extra background color 1
  fns[0x23] = (byte) => state.extraBgColor2          = byte & 0xf;  // $d023, Extra background color 2
  fns[0x24] = (byte) => state.extraBgColor3          = byte & 0xf;  // $d024, Extra background color 3
  fns[0x25] = (byte) => state.spriteMulticolorColor0 = byte & 0xf;  // $d025: Sprite multicolor color 0
  fns[0x26] = (byte) => state.spriteMulticolorColor1 = byte & 0xf;  // $d026: Sprite extra color 2

  // $d02f - $d03f: unmapped
  for (let reg = 0x2f; reg <= 0x3f; reg++) {
    fns[reg] = () => {};
  }

  // regs are from $d000-$d03f, with degenerate copies through $d3ff
  return (addr, byte) => fns[addr & 0x3f](byte);
};

const read_d000_d3ff = makeRead();

function read_d800_dbff(addr) {
  return state.color[addr - 0xd800] | 0xf0;
}

const write_d000_d3ff = makeWrite();

function write_d800_dbff(addr, byte) {
  state.color[addr - 0xd800] = byte & 0xf;
}

function showStatic() {
  state.static = true;
}

function setIgnoreSprBgCol(ignore) {
  config.ignoreSprBgCollisions = ignore;
}

function setIgnoreSprSprCol(ignore) {
  config.ignoreSprSprCollisions = ignore;
}

function setScope(key) {
  // Not the most elegant...
  for (let i in config) {
    if (/^scope/.test(i)) {
      config[i] = false;
    }
  }
  
  if (key) config[key] = true;
}

function serialize() {
  // Transfer the special arrays to regular arrays
  // (Otherwise they'll get serialized as { 0:..., 1:..., 2:..., ...})
  const stateCopy = {...state};

  for (let [key, type, size] of specialStateValues) {
    stateCopy[key] = [];

    for (let i in state[key]) {
      // Should warn if we see unexpected keys
      stateCopy[key][i] = state[key][i];
    }
  }

  return JSON.stringify(stateCopy);
}

function deserialize(json) {
  state = JSON.parse(json);

  // Transfer the arrays to special arrays
  for (let [key, type, size] of specialStateValues) {
    const arr = new type(size);

    // Should warn if sizes don't match!
    for (let i = 0; i < state[key].length; i++) {
      arr[i] = state[key][i];
    }

    state[key] = arr;
  }
}


/***/ }),

/***/ "./src/target/wires.js":
/*!*****************************!*\
  !*** ./src/target/wires.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attach: () => (/* binding */ attach)
/* harmony export */ });
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../debug */ "./src/debug.js");
/* harmony import */ var _tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tools/serializerSupport */ "./src/tools/serializerSupport.js");
/*
   wires: provides a system for interconnecting the hardware devices

   wires is the one part of the system that the bringup process guarantees is
   in place when the hardware devices attach, and those devices generally
   should use wires as a means to talk to each other, rather than accessing
   other devices' entries in the c64 structure directly.

   Wires simulates literal wires, like the IRQ and NMI lines, which can be
   driven from multiple sources, but arrive at the CPU as a wired-OR single
   value. It provides bus accesses, simulating the memory-mapping PLA that's
   driven by the processor port, and connecting the Vic to RAM or character
   ROM using the Vic bank output from CIA2 port A. It also simulates the
   processor port, which is really part of the CPU, but it was convenient to
   move it here since it's accessed through MMIO like the hardware devices.

   Contrary to what the name implies, wires does maintain state: it needs this
   for the processor port, but it also caches values that could be derived from
   other sources, like the interrupt lines and Vic bank.
*/

// References:
// Super helpful memory map: https://sta.c64.org/cbm64mem.html




// Configured by attach
let c64;
let basic, character, kernal;
let readRam, writeRam, vicReadRam;

let state;

function attach(nascentC64) {
  c64 = nascentC64;

  basic      = c64.rom.basic;
  kernal     = c64.rom.kernal;
  character  = c64.rom.character;
  readRam    = c64.ram.readRam;
  writeRam   = c64.ram.writeRam;
  vicReadRam = c64.ram.vicReadRam;

  (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__.addToSerializerRegistry)({
    readRam,
    writeRam,
  });

  reset();

  c64.wires = {
    // Control
    reset,
    serialize,
    deserialize,
    // State
    state,
    // Wires
    cpuRead,
    cpuWrite,
    vicRead,
    getIrq,
    getNmi,
    setVicIrq,
    setCia1Irq,
    setCia2Nmi,
    setVicBank,
    raiseTapeInterrupt,
  };
}

function reset() {
  state = {
    // Interrupt inputs
    // (use setVicIrq, setCia1Irq, setCia2Nmi to set them)
    irq_vic:  false,
    irq_cia1: false,
    nmi_cia2: false,

    // Interrupt outputs
    irq: false,
    nmi: false,

    // Processor port
    port:          0x37,
    portLastWrite: 0x37,
    portDirection: 0x2f,

    // CPU memory map
    // (as determined by the processor port)
    readAxxx: readAxxxBasic,
    readDxxx: readDxxxIo,
    readExxx: readExxxKernal,

    writeAxxx: writeRam,
    writeDxxx: writeDxxxIo,
    writeExxx: writeRam,

    // VIC memory map
    // (from CIA2, translated to a pointer. Use setVicBank to set)
    vicBankBase: 0x0000,

    // Tape
    lastTapeMotor: false,
  };

  mapMemoryFromPortOutput();
}

function readAxxxBasic     (addr) { return     basic[addr - 0xa000]; }
function readDxxxCharacter (addr) { return character[addr - 0xd000]; }
function readExxxKernal    (addr) { return    kernal[addr - 0xe000]; }

function reevaluateIrq() {
  state.irq = state.irq_vic || state.irq_cia1;
}

function reevaluateNmi() {
  // TODO: there are other sources. RESTORE key is one. Any others?
  state.nmi = state.nmi_cia2;
}

function getIrq() { return state.irq; }
function getNmi() { return state.nmi; }

function setVicIrq(status)  { state.irq_vic  = status; reevaluateIrq(); }
function setCia1Irq(status) { state.irq_cia1 = status; reevaluateIrq(); }
function setCia2Nmi(status) { state.nmi_cia2 = status; reevaluateNmi(); }

function setVicBank(bankNumber) {
  state.vicBankBase = bankNumber * 0x4000;
}

function vicRead(addr) {
  const { vicBankBase } = state;

  // We're translating to get character RAM here. I'm guessing that
  // all VIC reads to those addresses within its bank get the character
  // ROM, not just character reads.

  if ((vicBankBase === 0x0000) || (vicBankBase === 0x8000)) {
    if ((addr >= 0x1000) && (addr < 0x2000)) {
      return character[addr - 0x1000];
    }
  }

  return vicReadRam(vicBankBase + addr);
}

function cpuRead(addr) {
  (0,_debug__WEBPACK_IMPORTED_MODULE_0__.vetAddress)(addr);

  function realRead() {

    if ((addr === 0))                         return readPortDirection();
    if ((addr === 1))                         return readPort();

    if ((addr >= 0xa000) && (addr <= 0xbfff)) return state.readAxxx(addr);
    if ((addr >= 0xd000) && (addr <= 0xdfff)) return state.readDxxx(addr);
    if ((addr >= 0xe000) && (addr <= 0xffff)) return state.readExxx(addr);

    return readRam(addr);
  }

  const ret = realRead();

  if (!((ret >= 0) && (ret <= 255))) {
    debugger;
    throw new Error("Bus read got bad value for addr = " + addr);
  }

  return ret;
}

function readPortDirection() {
  return state.portDirection;
}

function readPort() {
  // TODO: what happens if a port input line is set to read/
  // write? If we read its value do we now get the last bit we tried to write
  // to it? I guess the CPU output would be fighting the external device
  // driving it.
 
  return state.port;
}

function getFloatingValue() {
  // datasette buttons: port shows 1 if nothing pressed
  const t = c64.tape.isAnyButtonPressed() ? 0 : 1;

  return (
    (0 << 7) |    // Not part of port. TODO: check value on real hardware
    (0 << 6) |    // Not part of port. TODO: check value on real hardware
    (1 << 5) |    // Datasette motor off
    (t << 4) |    // Datasette buttons (0 = something's pressed)
    (0 << 3) |    // Datasette output
    (1 << 2) |    // Memory config.
    (1 << 1) |    // Memory config.
    (1 << 0)      // Memory config.
  );
}

function writePortDirection(byte) {
  state.portDirection = byte;

  // Port lines that were read/write and are now read will now float to
  // wherever they're tied.

  state.port = (
    (state.portLastWrite & state.portDirection) |
    (getFloatingValue() & ~state.portDirection)
  );

  mapMemoryFromPortOutput();
}

function writePort(byte) {
  state.portLastWrite = byte;

  // Which lines are tied low/high. TODO: research this. The bank lines seem
  // to be tied high (or Buggy Boy and Hero of the Golden Talisman fail),

  // a 1 in a bit of portDirection means that bit can be written to
  state.port = (
    (byte               &  state.portDirection) |
    (getFloatingValue() & ~state.portDirection)
  );

  const tapeMotor = !(state.port & 0b00100000);
  if (tapeMotor !== state.lastTapeMotor) {
    state.lastTapeMotor = tapeMotor;
    c64.tape.setTapeMotor(tapeMotor);
  }

  mapMemoryFromPortOutput();
}

function mapMemoryFromPortOutput() {
  // The outgoing port value having changed, reconfigure the mappings accordingly

  const bank = state.port & 0b111;

  // TODO: I'm not _at all_ confident about these.
  // from https://sta.c64.org/cbm64mem.html
  ({
    0b000: () => {  state .readAxxx = readRam;
                    state .readDxxx = readRam;
                    state .readExxx = readRam;
                    state.writeAxxx = writeRam;
                    state.writeDxxx = writeRam;
                    state.writeExxx = writeRam;
    },
    0b001: () => {  state .readAxxx = readRam;
                    state .readDxxx = readDxxxCharacter;
                    state .readExxx = readRam;
                    state.writeAxxx = writeRam;
                    state.writeDxxx = writeRam;
                    state.writeExxx = writeRam;
    },
    0b010: () => {  state .readAxxx = readRam;
                    state .readDxxx = readDxxxCharacter;
                    state .readExxx = readExxxKernal;
                    state.writeAxxx = writeRam;
                    state.writeDxxx = writeRam;
                    state.writeExxx = writeRam;
    },
    0b011: () => {  state .readAxxx = readAxxxBasic;
                    state .readDxxx = readDxxxCharacter;
                    state .readExxx = readExxxKernal;
                    state.writeAxxx = writeRam;
                    state.writeDxxx = writeRam;
                    state.writeExxx = writeRam;
    },
    0b100: () => {  state .readAxxx = readRam;
                    state .readDxxx = readRam;
                    state .readExxx = readRam;
                    state.writeAxxx = writeRam;
                    state.writeDxxx = writeRam;
                    state.writeExxx = writeRam;
    },
    0b101: () => {  state .readAxxx = readRam;
                    state .readDxxx = readDxxxIo;
                    state .readExxx = readRam;
                    state.writeAxxx = writeRam;
                    state.writeDxxx = writeDxxxIo;
                    state.writeExxx = writeRam;
    },
    0b110: () => {  state .readAxxx = readRam;
                    state .readDxxx = readDxxxIo;
                    state .readExxx = readExxxKernal;
                    state.writeAxxx = writeRam;
                    state.writeDxxx = writeDxxxIo;
                    state.writeExxx = writeRam;
    },
    0b111: () => {  state .readAxxx = readAxxxBasic;
                    state .readDxxx = readDxxxIo;
                    state .readExxx = readExxxKernal;
                    state.writeAxxx = writeRam;
                    state.writeDxxx = writeDxxxIo;
                    state.writeExxx = writeRam;
    },
  })[bank]();
}

function cpuWrite(addr, byte) {
  (0,_debug__WEBPACK_IMPORTED_MODULE_0__.vetAddress)(addr);

  if ((addr === 0))                         return writePortDirection(byte);
  if ((addr === 1))                         return writePort(byte);

  if ((addr >= 0xa000) && (addr <= 0xbfff)) return state.writeAxxx(addr, byte);
  if ((addr >= 0xd000) && (addr <= 0xdfff)) return state.writeDxxx(addr, byte);
  if ((addr >= 0xe000) && (addr <= 0xffff)) return state.writeExxx(addr, byte);

                                            return writeRam(addr, byte);
}

function readDxxxIo(addr) {

  // VIC registers
  if ((addr >= 0xd000) && (addr <= 0xd3ff)) return c64.vic.read_d000_d3ff(addr);
  // SID
  if ((addr >= 0xd400) && (addr <= 0xd7ff)) return c64.sid.read_d400_d7ff(addr);
  // Color RAM
  if ((addr >= 0xd800) && (addr <= 0xdbff)) return c64.vic.read_d800_dbff(addr);
  // CIA1
  if ((addr >= 0xdc00) && (addr <= 0xdcff)) return c64.cias.read_dc00_dcff(addr);
  // CIA2
  if ((addr >= 0xdd00) && (addr <= 0xddff)) return c64.cias.read_dd00_ddff(addr);

  // $de00 - $dfff are for memory-mapped IO of any other devices you've plugged
  // into the bus. Consider them unmapped; a vanilla C64 just shows noise here.
  return 0xff;
}

function writeDxxxIo(addr, byte) {

  // VIC registers
  if ((addr >= 0xd000) && (addr <= 0xd3ff)) return c64.vic.write_d000_d3ff(addr, byte);
  // SID
  if ((addr >= 0xd400) && (addr <= 0xd7ff)) return c64.sid.write_d400_d7ff(addr, byte);
  // Color RAM
  if ((addr >= 0xd800) && (addr <= 0xdbff)) return c64.vic.write_d800_dbff(addr, byte);
  // CIA1
  if ((addr >= 0xdc00) && (addr <= 0xdcff)) return c64.cias.write_dc00_dcff(addr, byte);
  // CIA2
  if ((addr >= 0xdd00) && (addr <= 0xddff)) return c64.cias.write_dd00_ddff(addr, byte);

  // $de00 - $dfff are for memory-mapped IO of any other devices you've plugged
  // into the bus. Consider them unmapped.
  return;
}

function serialize() {
  return JSON.stringify({
    ...state,
    readAxxx:  (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__.functionToReference)(state.readAxxx),
    readDxxx:  (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__.functionToReference)(state.readDxxx),
    readExxx:  (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__.functionToReference)(state.readExxx),
    writeAxxx: (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__.functionToReference)(state.writeAxxx),
    writeDxxx: (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__.functionToReference)(state.writeDxxx),
    writeExxx: (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__.functionToReference)(state.writeExxx),
  });
}

function deserialize(json) {
  state = JSON.parse(json);

  state.readAxxx  = (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__.referenceToFunction)(state.readAxxx);
  state.readDxxx  = (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__.referenceToFunction)(state.readDxxx);
  state.readExxx  = (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__.referenceToFunction)(state.readExxx);
  state.writeAxxx = (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__.referenceToFunction)(state.writeAxxx);
  state.writeDxxx = (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__.referenceToFunction)(state.writeDxxx);
  state.writeExxx = (0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__.referenceToFunction)(state.writeExxx);
}

function raiseTapeInterrupt() {
  c64.cias.raiseTapeInterrupt();
}

(0,_tools_serializerSupport__WEBPACK_IMPORTED_MODULE_1__.addToSerializerRegistry)({
  readAxxxBasic,
  readDxxxCharacter,
  readExxxKernal,
  readDxxxIo,
  writeDxxxIo,
});


/***/ }),

/***/ "./src/tools/assembler.js":
/*!********************************!*\
  !*** ./src/tools/assembler.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assemble: () => (/* binding */ assemble)
/* harmony export */ });
/*
  This is a half-assembler. Rather than taking a text file as input, it
  converts 6502-esque JavaScript functions into object code, and links it,
  returning a byte array.

  Use like this:

  |   const bin = assemble(
  |     0x4000,                   // target address
  |     ({
  |       NOP, LDA, LDX, LDY, STA, STX, STY, CLC, CLD, CLI, CLV, SEC, SED, SEI,
  |       TAX, TAY, TSX, TXA, TXS, TYA, CMP, CPX, CPY, BCS, BCC, BEQ, BNE, BMI,
  |       BPL, BVS, BVC, BIT, JSR, RTS, RTI, BRK, JMP, INC, DEC, DEX, DEY, INX,
  |       INY, ADC, SBC, AND, EOR, ORA, ASL, ROL, LSR, ROR, PHA, PHP, PLA, PLP,
  |       _
  |     }) => {
  |
  |       LDX.imm (7);
  |       STX.abs (0xd020);       // set border color
  |
  |     _`loop`;
  |       STX.abs (0xd021);       // set background color
  |       DEX.imp ();
  |       BNE.rel `loop`;
  |
  |       RTS.imp ();
  |   });


  The format of the opcodes looks like this:

  |       Addressing mode   Assembler      JavaScript
  |       ---------------   ---------      ----------
  |       Implicit          RTI            RTI.imp ()
  |       Immediate         LDA #$10       LDA.imm (0x10)
  |       Accumulator       LSR A          LSR.acc ()
  |       Absolute          JMP $1000      JMP.abs (0x1000)
  |       Absolute,X        STA $3000,X    STA.abx (0x3000)
  |       Absolute,Y        AND $4000,Y    AND.aby (0x4000)
  |       Indirect          JMP ($FFFC)    JMP.ind (0xfffc)
  |       Indirect,X        LDA ($40,X)    LDA.inx (0x40)
  |       Indirect,Y        LDA ($40),Y    LDA.iny (0x40)
  |       Zero Page         LDA $20        LDA.zpg (0x20)
  |       Zero Page,X       STY $10,X      STY.zpx (0x10)
  |       Zero Page,Y       STX $10,Y      STX.zpy (0x10)
  |       Relative          BNE label      BNE.rel `label`


  Labels can be defined as:

  |       _`loop`;

  Or, for locations external to the program:

  |       _.label(0xd020, "extcol");

  ...and can then be referenced like:

  |       BNE.rel `label`;                    // label as branch target
  |       LDX.imm _.l`label`;                 // low byte of label
  |       LDY.imm _.h`label`;                 // high byte of label
  |       STA.abs (({label}) => label + 1);   // perform math on label

  In that last case, the function that's passed to that STA instruction is
  called during the linking phase, once all the labels have been assigned
  locations. It's passed in an object whose keys are all the labels' names, and
  whose values are the locations of those labels. The value it returns will
  become the operand to the STA instruction, converted automatically into
  lowbyte/highbyte.


  Arbitrary bytes can be injected into the code like this:

  |       _.bytes(0x4c, 0x16, 0x08, 0x00, 0x97, 0x32);


  The half-assembler also contains a Basic half-tokenizer, which provides
  only just enough commands to bootstrap a machine language routine. Call it
  like this:

  |       _.basic(
  |         ({REM, POKE, SYS}) => ({
  |           10: REM ("SIMPLE BASIC BOOTSTRAP"),
  |           20: POKE (53281, 0),
  |           30: SYS ("start"),
  |         })
  |       );
  |
  |       _`start`;
  |         // (6502 assembly starts here)

*/

// TODO: the quasi-ops aren't here yet, even though the rest of the emulator
// now supports them.
const opcodes = {
  ADC: { abs: 0x6d, abx: 0x7d, aby: 0x79, inx: 0x61, iny: 0x71, imm: 0x69, zpg: 0x65, zpx: 0x75 },
  AND: { abs: 0x2d, abx: 0x3d, aby: 0x39, inx: 0x21, iny: 0x31, imm: 0x29, zpg: 0x25, zpx: 0x35 },
  ASL: { abs: 0x0e, abx: 0x1e, acc: 0x0a, zpg: 0x06, zpx: 0x16 },
  BCC: { rel: 0x90 },
  BCS: { rel: 0xb0 },
  BEQ: { rel: 0xf0 },
  BIT: { abs: 0x2c, zpg: 0x24 },
  BMI: { rel: 0x30 },
  BNE: { rel: 0xd0 },
  BPL: { rel: 0x10 },
  BRK: { imp: 0x00 },
  BVC: { rel: 0x50 },
  BVS: { rel: 0x70 },
  CLC: { imp: 0x18 },
  CLD: { imp: 0xd8 },
  CLI: { imp: 0x58 },
  CLV: { imp: 0xb8 },
  CMP: { abs: 0xcd, abx: 0xdd, aby: 0xd9, inx: 0xc1, iny: 0xd1, imm: 0xc9, zpg: 0xc5, zpx: 0xd5 },
  CPX: { abs: 0xec, imm: 0xe0, zpg: 0xe4 },
  CPY: { abs: 0xcc, imm: 0xc0, zpg: 0xc4 },
  DEC: { abs: 0xce, abx: 0xde, zpg: 0xc6, zpx: 0xd6 },
  DEX: { imp: 0xca },
  DEY: { imp: 0x88 },
  EOR: { abs: 0x4d, abx: 0x5d, aby: 0x59, inx: 0x41, iny: 0x51, imm: 0x49, zpg: 0x45, zpx: 0x55 },
  INC: { abs: 0xee, abx: 0xfe, zpg: 0xe6, zpx: 0xf6 },
  INX: { imp: 0xe8 },
  INY: { imp: 0xc8 },
  JMP: { abs: 0x4c, ind: 0x6c },
  JSR: { abs: 0x20 },
  LDA: { abs: 0xad, abx: 0xbd, aby: 0xb9, inx: 0xa1, iny: 0xb1, imm: 0xa9, zpg: 0xa5, zpx: 0xb5 },
  LDX: { abs: 0xae, aby: 0xbe, imm: 0xa2, zpg: 0xa6, zpy: 0xb6 },
  LDY: { abs: 0xac, abx: 0xbc, imm: 0xa0, zpg: 0xa4, zpx: 0xb4 },
  LSR: { abs: 0x4e, abx: 0x5e, acc: 0x4a, zpg: 0x46, zpx: 0x56 },
  NOP: { imp: 0xea },
  ORA: { abs: 0x0d, abx: 0x1d, aby: 0x19, inx: 0x01, iny: 0x11, imm: 0x09, zpg: 0x05, zpx: 0x15 },
  PHA: { imp: 0x48 },
  PHP: { imp: 0x08 },
  PLA: { imp: 0x68 },
  PLP: { imp: 0x28 },
  ROL: { abs: 0x2e, abx: 0x3e, acc: 0x2a, zpg: 0x26, zpx: 0x36 },
  ROR: { abs: 0x6e, abx: 0x7e, acc: 0x6a, zpg: 0x66, zpx: 0x76 },
  RTI: { imp: 0x40 },
  RTS: { imp: 0x60 },
  SBC: { abs: 0xed, abx: 0xfd, aby: 0xf9, inx: 0xe1, iny: 0xf1, imm: 0xe9, zpg: 0xe5, zpx: 0xf5 },
  SEC: { imp: 0x38 },
  SED: { imp: 0xf8 },
  SEI: { imp: 0x78 },
  STA: { abs: 0x8d, abx: 0x9d, aby: 0x99, inx: 0x81, iny: 0x91, zpg: 0x85, zpx: 0x95 },
  STX: { abs: 0x8e, zpg: 0x86, zpy: 0x96 },
  STY: { abs: 0x8c, zpg: 0x84, zpx: 0x94 },
  TAX: { imp: 0xaa },
  TAY: { imp: 0xa8 },
  TSX: { imp: 0xba },
  TXA: { imp: 0x8a },
  TXS: { imp: 0x9a },
  TYA: { imp: 0x98 },
};

const basicTokens = {
  REM:  0x8f,
  POKE: 0x97,
  SYS:  0x9e,
}


function validateByte(byte) {
  if (typeof byte !== "number") throw new Error("Not a number");
  if (byte % 1)                 throw new Error("Not an integer");
  if (byte < 0)                 throw new Error("Can't be negative");
  if (byte > 0xff)              throw new Error("Too big");
}

function validateAddr(addr) {
  if (typeof addr !== "number") throw new Error("Not a number");
  if (addr % 1)                 throw new Error("Not an integer");
  if (addr < 0)                 throw new Error("Can't be negative");
  if (addr > 0xffff)            throw new Error("Too big");
}

// Operand handlers

function byteOperand(chunk, linkerTasks, arg) {
  let byte = "XX";

  if (typeof arg === "object") {
    // it's a reference, left by, say, a _.l``
    // (So shouldn't have called it a byte)
    linkerTasks.push({
      ...arg,
      at: chunk.length,
    });
  }

  else if (typeof arg === "string") {
    linkerTasks.push({
      at: chunk.length,
      format: "lo",
      label: arg,
    });
  }

  else {
    validateByte(arg);
    byte = arg;
  }

  chunk.push(byte);
}

function addrOperand(chunk, linkerTasks, arg) {
  if (typeof arg === "function") {

    linkerTasks.push({
      at: chunk.length,
      format: "lohiFn",
      fn: arg,
    });

    chunk.push("XX");
    return;
  }

  if (typeof arg === "number") {
    validateAddr(arg);
    chunk.push(arg & 0xff);
    chunk.push(arg >> 8);
    return;
  }

  else if (typeof arg === "string") {
    linkerTasks.push({
      at: chunk.length,
      format: "lo",
      label: arg,
    });

    chunk.push("XX");

    linkerTasks.push({
      at: chunk.length,
      format: "hi",
      label: arg,
    });

    chunk.push("XX");
  }

  else if (Array.isArray(arg)) {
     
    // Was called as, eg. "LDA `label`"

    linkerTasks.push({
      at: chunk.length,
      format: "lo",
      label: arg[0],
    });

    chunk.push("XX");

    linkerTasks.push({
      at: chunk.length,
      format: "hi",
      label: arg[0],
    });

    chunk.push("XX");
  }
}

function noOperand(chunk, linkerTasks, arg) {
}

function relOperand(chunk, linkerTasks, arg) {

  // TODO we should allow rel with a function arg
  if (typeof arg === "number") {

    // back when we pushed the relative arg
    // chunk.push(arg);

    linkerTasks.push({
      at: chunk.length,
      format: "relFromAbsolute",
      target: arg,
    });

    chunk.push("XX");
    return;
  }

  let label;

  if (Array.isArray(arg)) {
    label = arg[0];
  }
  else if (typeof arg === "string") {
    label = arg;
  }

  else throw new Error("Unexpected type for relative mode:" + arg);

  linkerTasks.push({
    at: chunk.length,
    format: "relFromLabel",
    label,
  });

  chunk.push("XX");
}

const operandHandler = {
  imm: byteOperand,
  acc:   noOperand,
  abs: addrOperand,
  abx: addrOperand,
  aby: addrOperand,
  imp:   noOperand,
  ind: addrOperand,
  inx: byteOperand,
  iny: byteOperand,
  rel:  relOperand,
  zpg: byteOperand,
  zpx: byteOperand,
  zpy: byteOperand,
};

function link(chunk, org, linkerTasks, labels) {

  const getLabel = label => {
    const addr = labels[label];
    if (addr === undefined) {
      throw new Error("Undefined label: " + label);
    }
    return addr;
  };

  linkerTasks.forEach(
    ({ at, format, label, fn, digits, target }) => {

      switch (format) {

        case "lohiFn":
        {
          // A function should be called, and its return value considered
          // an address, which we need to store in lowbyte/highbyte form.
          const addr = fn(labels);

          validateAddr(addr);

          chunk[at + 0] = addr & 0xff;
          chunk[at + 1] = addr >> 8;
          break;
        }

        case "petsciiFn":
        {
          // A function should be called, and its return value considered
          // an address, which we need to store in Petscii characters in
          // `digits` number of digits.
          const addr = fn(labels);

          validateAddr(addr);

          const addrAsString = String(addr);

          if (addrAsString.length > digits) {
            throw new Error("Can't fit address into requested number of digits");
          }

          const addrAsPaddedString = String(addr).padStart(digits, "0");

          Array.from(addrAsPaddedString).forEach(
            (letter, index) => {
              chunk[at + index] = letter.charCodeAt(0);
            }
          )

          break;
        }

        case "lo":
          chunk[at] = getLabel(label) & 0xff;
          break;

        case "hi":
          chunk[at] = getLabel(label) >> 8;
          break;

        case "relFromAbsolute":
        {
          // -1 instead of -2 because the 'at' in this case is the operand,
          // not the opcode
          const val = target - (at + org) - 1;

          if ((val > 127) || (val < -128)) 
            throw new Error(`branch target ${label} too far (${val}) at offset ${at}`);

          chunk[at] = val & 0xff;
          break;
        }

        case "relFromLabel":
        {
          const addr = getLabel(label);
          const val = addr - (at + org) - 1;

          if ((val > 127) || (val < -128)) 
            throw new Error(`branch target ${label} too far (${val})`);

          chunk[at] = val & 0xff;
          break;
        }
      }
    }
  );
}

function stringToPetsciiCodes(num) {
  return Array.from(num).map(char => char.charCodeAt(0));
}

function numberToPetsciiCodes(num) {
  return Array.from(String(num)).map(char => char.charCodeAt(0));
}

function basic(fn, chunk, org, linkerTasks) {

  const commands = {

    REM: (str) => () => {
      chunk.push(basicTokens.REM);
      chunk.push(...stringToPetsciiCodes(" "));
      chunk.push(...stringToPetsciiCodes(str));
    },

    POKE: (addr, byte) => () => {
      // The address, and the byte to store at that address, must both be
      // simple numbers. (Would be nice to change this in future).
      chunk.push(basicTokens.POKE);
      chunk.push(...stringToPetsciiCodes(" "));
      chunk.push(...numberToPetsciiCodes(addr));
      chunk.push(...stringToPetsciiCodes(","));
      chunk.push(...numberToPetsciiCodes(byte));
    },

    SYS: (addr, digits=5) => () => {
      // The address can be a number, a string (the name of a label), or a
      // function (which, given all the labels, returns a number)
      chunk.push(basicTokens.SYS);
      chunk.push(...stringToPetsciiCodes(" "));

      if (typeof addr === "string") {
        const label = addr;
        addr = (labels) => labels[label];
        // ...and fall through to function
      }

      if (typeof addr === "function") {
        linkerTasks.push({
          at: chunk.length,
          format: "petsciiFn",
          fn: addr,
          digits
        });

        for (let i = 0; i < digits; i++) {
          chunk.push("XX");
        }
      }

      else {
        chunk.push(...numberToPetsciiCodes(addr));
      }
    },
  };

  // Call the user-supplied function, which will return an object that maps
  // line numbers to functions which, when called, place the tokenized Basic
  // commands into the chunk.
  const numbersToLines = fn(commands);

  Object
    // Convert the object into a list of [line number, command] entries
    .entries(numbersToLines)

    // Sort the line numbers numerically
    .sort(
      ([numberA, commandA], [numberB, commandB]) => (
        Number(numberA) > Number(numberB) ? 1 : -1
      )
    )

    // Lay down each one
    .forEach(
      ([lineNum, lineFn]) => {

        // Add a placeholder for the address for the next line, while we're still
        // figuring out the length of this one.
        const posOfNextLinePtr = chunk.length;
        chunk.push("XX", "XX");

        // Declare the line number, in lowbyte/highbyte form.
        // It came from a object key, which is a string
        lineNum = Number(lineNum);
        chunk.push(lineNum & 0xff);
        chunk.push(lineNum >> 8);

        // Lay down the line (which may contain placeholders and generate
        // linker tasks)
        lineFn();

        // Null-terminate the Basic line
        chunk.push(0);

        // Now go back and set the 'next line address' of the current line to
        // the address that the next line is about to use.
        const addrOfNextLine = org + chunk.length;

        chunk[posOfNextLinePtr + 0] = addrOfNextLine & 0xff;
        chunk[posOfNextLinePtr + 1] = addrOfNextLine >> 8;
      }
    )
  ;

  // Two zero bytes instead of an address signifies the end of the Basic program
  chunk.push(0, 0);
}

function assemble(org, fn) {

  let chunk = [];
  const linkerTasks = [];
  const labels = {};

  // --- label tools ---

  const tools = {};

  tools._ = (arg) => {
    if (!Array.isArray(arg)) {
      throw new Error("_ should be called as _``");
    }
    const name = arg[0];
    labels[name] = org + chunk.length;
  }

  tools._.basic = (program) => basic(program, chunk, org, linkerTasks);

  tools._.bytes = (...bytes) => {
    bytes.forEach(
      byte => {
        validateByte(byte);
        chunk.push(byte);
      }
    );
  };

  tools._.l = (arg) => (
    {
      // Calling function will add the `at`
      format: "lo",
      label: arg[0],
    }
  );

  tools._.h = (arg) => (
    {
      // Calling function will add the `at`
      format: "hi",
      label: arg[0],
    }
  );

  tools._.label = (addr, name) => {
    labels[name] = addr;
  };

  // --- ops ---

  for (let insn in opcodes) {
    tools[insn] = {};

    for (let mode in opcodes[insn]) {
      const opcode = opcodes[insn][mode];

      tools[insn][mode] = (arg) => {
        chunk.push(opcode);
        operandHandler[mode](chunk, linkerTasks, arg);
      };
    }
  }

  // "Assemble"
  fn(tools);

  // Link
  link(chunk, org, linkerTasks, labels);

  return chunk;
}


/***/ }),

/***/ "./src/tools/base64.js":
/*!*****************************!*\
  !*** ./src/tools/base64.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   base64Decode: () => (/* binding */ base64Decode),
/* harmony export */   base64Encode: () => (/* binding */ base64Encode)
/* harmony export */ });
/*
  Simple, basic Base64 encoding/decoding
*/

const tokens =
  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef" + 
  "ghijklmnopqrstuvwxyz0123456789+/";

function base64Encode(q) {
  let out = "";

  while (q.length) {

    let               w  = q[0] << 16;
    if (q.length > 1) w |= q[1] << 8;
    if (q.length > 2) w |= q[2] << 0;

    //                <--q0--><--q1--><--q2-->
    const o0 = (w & 0b111111000000000000000000) >> 18;
    const o1 = (w & 0b000000111111000000000000) >> 12;
    const o2 = (w & 0b000000000000111111000000) >> 6;
    const o3 = (w & 0b000000000000000000111111) >> 0;

    out +=                  tokens[o0]      ;
    out +=                  tokens[o1]      ;
    out += (q.length > 1) ? tokens[o2] : "=";
    out += (q.length > 2) ? tokens[o3] : "=";

    q = q.slice(3, q.length);
  }

  return out;
}

function base64Decode(q) {
  let out = [];

  while (q.length) {

    const i0 =                tokens.indexOf(q[0])    ;
    const i1 =                tokens.indexOf(q[1])    ;
    const i2 = q[2] !== "=" ? tokens.indexOf(q[2]) : 0;
    const i3 = q[3] !== "=" ? tokens.indexOf(q[3]) : 0;

    const w = (i0 << 18) | (i1 << 12) | (i2 << 6) | (i3 << 0);

                      out.push((w >> 16) & 0xff);
    if (q[2] !== "=") out.push((w >>  8) & 0xff);
    if (q[3] !== "=") out.push((w >>  0) & 0xff);

    q = q.substr(4);
  }

  return out;
}


/***/ }),

/***/ "./src/tools/c64FontCodePoints.js":
/*!****************************************!*\
  !*** ./src/tools/c64FontCodePoints.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c64FontCodePointToChar: () => (/* binding */ c64FontCodePointToChar),
/* harmony export */   charToC64FontCodePoint: () => (/* binding */ charToC64FontCodePoint),
/* harmony export */   hexDigitToC64FontCodePoint: () => (/* binding */ hexDigitToC64FontCodePoint),
/* harmony export */   petsciiToFontCodePoint: () => (/* binding */ petsciiToFontCodePoint)
/* harmony export */ });
/*
   Tools for translating in and out of C64 font codepoints.

   Note that C64 font codepoints aren't PETSCII. They're how PETSCII is
   delivered, but take a different layout. A-Z, for instance, are 65-90 in
   PETSCII (and ASCII for that matter), but occupy positions 1-26 of the font.

   Reference: https://style64.org/petscii/
*/

const ANSI_SGR_REVERSE_ON  = "\x1b[7m";
const ANSI_SGR_REVERSE_OFF = "\x1b[27m";

// The right pair is the 'wide' version, comprising 'full-width' characters,
// and pairs of regular characters. On my text editor, the two don't quite
// match in length, but on my terminal (macOS Terminal) they do. It's a
// pretty tenuous mode.
const CLOSEST_UNICODES = [
  // unshifted   unshifted
  //     shifted      shifted
  [["@", "@"], ["＠", "＠"]], // 0x00 (0)
  [["A", "a"], ["Ａ", "ａ"]], // 0x01 (1)
  [["B", "b"], ["Ｂ", "ｂ"]], // 0x02 (2)
  [["C", "c"], ["Ｃ", "ｃ"]], // 0x03 (3)
  [["D", "d"], ["Ｄ", "ｄ"]], // 0x04 (4)
  [["E", "e"], ["Ｅ", "ｅ"]], // 0x05 (5)
  [["F", "f"], ["Ｆ", "ｆ"]], // 0x06 (6)
  [["G", "g"], ["Ｇ", "ｇ"]], // 0x07 (7)
  [["H", "h"], ["Ｈ", "ｈ"]], // 0x08 (8)
  [["I", "i"], ["Ｉ", "ｉ"]], // 0x09 (9)
  [["J", "j"], ["Ｊ", "ｊ"]], // 0x0a (10)
  [["K", "k"], ["Ｋ", "ｋ"]], // 0x0b (11)
  [["L", "l"], ["Ｌ", "ｌ"]], // 0x0c (12)
  [["M", "m"], ["Ｍ", "ｍ"]], // 0x0d (13)
  [["N", "n"], ["Ｎ", "ｎ"]], // 0x0e (14)
  [["O", "o"], ["Ｏ", "ｏ"]], // 0x0f (15)
  [["P", "p"], ["Ｐ", "ｐ"]], // 0x10 (16)
  [["Q", "q"], ["Ｑ", "ｑ"]], // 0x11 (17)
  [["R", "r"], ["Ｒ", "ｒ"]], // 0x12 (18)
  [["S", "s"], ["Ｓ", "ｓ"]], // 0x13 (19)
  [["T", "t"], ["Ｔ", "ｔ"]], // 0x14 (20)
  [["U", "u"], ["Ｕ", "ｕ"]], // 0x15 (21)
  [["V", "v"], ["Ｖ", "ｖ"]], // 0x16 (22)
  [["W", "w"], ["Ｗ", "ｗ"]], // 0x17 (23)
  [["X", "x"], ["Ｘ", "ｘ"]], // 0x18 (24)
  [["Y", "y"], ["Ｙ", "ｙ"]], // 0x19 (25)
  [["Z", "z"], ["Ｚ", "ｚ"]], // 0x1a (26)
  [["[", "["], ["［", "［"]], // 0x1b (27)
  [["£", "£"], ["￡", "￡"]], // 0x1c (28)
  [["]", "]"], ["］", "］"]], // 0x1d (29)
  [["↑", "↑"], [" ↑", " ↑"]], // 0x1e (30)
  [["←", "←"], [" ←", " ←"]], // 0x1f (31)
  [[" ", " "], ["　", "　"]], // 0x20 (32)
  [["!", "!"], ["！", "！"]], // 0x21 (33)
  [['"', '"'], ["＂", '＂']], // 0x22 (34)
  [["#", "#"], ["＃", "＃"]], // 0x23 (35)
  [["$", "$"], ["＄", "＄"]], // 0x24 (36)
  [["%", "%"], ["％", "％"]], // 0x25 (37)
  [["&", "&"], ["＆", "＆"]], // 0x26 (38)
  [["'", "'"], ["＇", "＇"]], // 0x27 (39)
  [["(", "("], ["（", "（"]], // 0x28 (40)
  [[")", ")"], ["）", "）"]], // 0x29 (41)
  [["*", "*"], ["＊", "＊"]], // 0x2a (42)
  [["+", "+"], ["＋", "＋"]], // 0x2b (43)
  [[",", ","], ["，", "，"]], // 0x2c (44)
  [["-", "-"], ["－", "－"]], // 0x2d (45)
  [[".", "."], ["．", "．"]], // 0x2e (46)
  [["/", "/"], ["／", "／"]], // 0x2f (47)
  [["0", "0"], ["０", "０"]], // 0x30 (48)
  [["1", "1"], ["１", "１"]], // 0x31 (49)
  [["2", "2"], ["２", "２"]], // 0x32 (50)
  [["3", "3"], ["３", "３"]], // 0x33 (51)
  [["4", "4"], ["４", "４"]], // 0x34 (52)
  [["5", "5"], ["５", "５"]], // 0x35 (53)
  [["6", "6"], ["６", "６"]], // 0x36 (54)
  [["7", "7"], ["７", "７"]], // 0x37 (55)
  [["8", "8"], ["８", "８"]], // 0x38 (56)
  [["9", "9"], ["９", "９"]], // 0x39 (57)
  [[":", ":"], ["：", "："]], // 0x3a (58)
  [[";", ";"], ["；", "；"]], // 0x3b (59)
  [["<", "<"], ["＜", "＜"]], // 0x3c (60)
  [["=", "="], ["＝", "＝"]], // 0x3d (61)
  [[">", ">"], ["＞", "＞"]], // 0x3e (62)
  [["?", "?"], ["？", "？"]], // 0x3f (63)
  [["─", "─"], ["－", "──"]], // 0x40 (64)
  [["♠", "A"], [" ♠", "Ａ"]], // 0x41 (65)
  [["│", "B"], ["｜", "Ｂ"]], // 0x42 (66)
  [["─", "C"], ["──", "Ｃ"]], // 0x43 (67)
  [["─", "D"], ["──", "Ｄ"]], // 0x44 (68)
  [["▔", "E"], ["￣", "Ｅ"]], // 0x45 (69)
  [["─", "F"], ["──", "Ｆ"]], // 0x46 (70)
  [["│", "G"], ["｜", "Ｇ"]], // 0x47 (71)
  [["│", "H"], ["｜", "Ｈ"]], // 0x48 (72)
  [["╮", "I"], ["─╮", "Ｉ"]], // 0x49 (73)
  [["╰", "J"], [" ╰", "Ｊ"]], // 0x4a (74)
  [["╯", "K"], ["─╯", "Ｋ"]], // 0x4b (75)
  [["⌞", "L"], [" ⌞", "Ｌ"]], // 0x4c (76)
  [["╲", "M"], [" ╲", "Ｍ"]], // 0x4d (77)
  [["╱", "N"], [" ╱", "Ｎ"]], // 0x4e (78)
  [["⌜", "O"], [" ⌜", "Ｏ"]], // 0x4f (79)
  [["⌝", "P"], ["▔⌝", "Ｐ"]], // 0x50 (80)
  [["●", "Q"], [" ●", "Ｑ"]], // 0x51 (81)
  [["_", "R"], ["＿", "Ｒ"]], // 0x52 (82)
  [["♥", "S"], [" ♥", "Ｓ"]], // 0x53 (83)
  [["▎", "T"], ["│ ", "Ｔ"]], // 0x54 (84)
  [["╭", "U"], [" ╭", "Ｕ"]], // 0x55 (85)
  [["╳", "V"], ["><", "Ｖ"]], // 0x56 (86)
  [["○", "W"], [" ○", "Ｗ"]], // 0x57 (87)
  [["♣", "X"], [" ♣", "Ｘ"]], // 0x58 (88)
  [["▕", "Y"], [" ▕", "Ｙ"]], // 0x59 (89)
  [["♦", "Z"], [" ♦", "Ｚ"]], // 0x5a (90)
  [["┼", "┼"], ["─┼", "─┼"]], // 0x5b (91)
  [["▒", "▒"], ["▒ ", "▒ "]], // 0x5c (92)
  [["│", "│"], [" │", " │"]], // 0x5d (93)
  [["π", "▒"], [" π", "▒▒"]], // 0x5e (94)
  [["◥", "▒"], [" ◥", "▒▒"]], // 0x5f (95)
  [[" ", " "], ["  ", "  "]], // 0x60 (96)
  [["▌", "▌"], ["▌ ", "▌ "]], // 0x61 (97)
  [["▄", "▄"], ["▄▄", "▄▄"]], // 0x62 (98)
  [["▔", "▔"], ["▔▔", "▔▔"]], // 0x63 (99)
  [["▁", "▁"], ["▁▁", "▁▁"]], // 0x64 (100)
  [["▎", "▎"], ["▎ ", "▎ "]], // 0x65 (101)
  [["▒", "▒"], ["▒▒", "▒▒"]], // 0x66 (102)
  [["▕", "▕"], [" ▕", " ▕"]], // 0x67 (103)
  [["▒", "▒"], ["▒▒", "▒▒"]], // 0x68 (104)
  [["◤", "▒"], [" ◤", "▒▒"]], // 0x69 (105)
  [["▕", "▕"], [" ▕", " ▕"]], // 0x6a (106)
  [["├", "├"], [" ├", " ├"]], // 0x6b (107)
  [["▗", "▗"], [" ▄", " ▄"]], // 0x6c (108)
  [["└", "└"], [" └", " └"]], // 0x6d (109)
  [["┐", "┐"], ["─┐", "─┐"]], // 0x6e (110)
  [["▂", "▂"], ["▂▂", "▂▂"]], // 0x6f (111)
  [["┌", "┌"], [" ┌", " ┌"]], // 0x70 (112)
  [["┴", "┴"], ["─┴", "─┴"]], // 0x71 (113)
  [["┬", "┬"], ["─┬", "─┬"]], // 0x72 (114)
  [["┤", "┤"], ["─┤", "─┤"]], // 0x73 (115)
  [["▎", "▎"], ["▎ ", "▎ "]], // 0x74 (116)
  [["▍", "▍"], ["▍ ", "▍ "]], // 0x75 (117)
  [["▕", "▕"], [" ▕", "▕ "]], // 0x76 (118)
  [["▔", "▔"], ["▔▔", "▔▔"]], // 0x77 (119)
  [["▔", "▔"], ["▔▔", "▔▔"]], // 0x78 (120)
  [["▃", "▃"], ["▃▃", "▃▃"]], // 0x79 (121)
  [["⌟", "✓"], ["▁⌟", " ✓"]], // 0x7a (122)
  [["▖", "▖"], ["▃ ", "▃ "]], // 0x7b (123)
  [["▝", "▝"], [" ▝", " ▝"]], // 0x7c (124)
  [["┘", "┘"], ["─┘", "─┘"]], // 0x7d (125)
  [["▘", "▘"], ["▘ ", "▘ "]], // 0x7e (126)
  [["▚", "▚"], ["▚▄", "▚▄"]], // 0x7f (127)
];

function c64FontCodePointToChar(byte, shifted, wide) {
  if (byte >= 0x80) {
    return (
      ANSI_SGR_REVERSE_ON +
      c64FontCodePointToChar(byte & 0x7f, shifted, wide) +
      ANSI_SGR_REVERSE_OFF
    );
  };

  return CLOSEST_UNICODES[byte][wide ? 1 : 0][shifted ? 1 : 0];
}

function charToC64FontCodePoint(char, shifted) {
  if (!shifted) {
    // Quick cases
    if ((char >= "0") && (char <= "9")) return char.charCodeAt(0);
    if ((char >= "A") && (char <= "Z")) return char.charCodeAt(0) - 0x40;
    if ((char >= "a") && (char <= "z")) return char.charCodeAt(0) - 0x60;
    if (char === " ")                   return 0x20;
  }

  for (let i = 0; i < 128; i++) {
    if (CLOSEST_UNICODES[i][0][shifted ? 1 : 0] === char) return i; 
  }

  return 0x20;
}

const hexDigitToC64FontCodePoint = [
  0x30, 0x31, 0x32, 0x33,
  0x34, 0x35, 0x36, 0x37,
  0x38, 0x39, 0x01, 0x02,
  0x03, 0x04, 0x05, 0x06,
];

function petsciiToFontCodePoint(num) {
  // See Kernal around $e737
  if (num <  0x20) return 0x20;
  if (num >= 0x60) return num & 0xdf;
  else             return num & 0x3f;
}


/***/ }),

/***/ "./src/tools/disasm.js":
/*!*****************************!*\
  !*** ./src/tools/disasm.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   disasm: () => (/* binding */ disasm)
/* harmony export */ });
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../debug */ "./src/debug.js");
/*
   A disassembler for live memory
*/



// Adapted from https://www.masswerk.at/6502/6502_instruction_set.html
// TODO: This doesn't include the quasi-ops
const opcodes = [
/*       x0           x1           x2       x3     x4           x5           x6           x7     x8          x9           xA          xB     xC           xD           xE           xF  */
/* 0x */ "BRK impl",  "ORA X,ind", "---",   "---", "---",       "ORA zpg",   "ASL zpg",   "---", "PHP impl", "ORA #",     "ASL A",    "---", "---",       "ORA abs",   "ASL abs",   "---",
/* 1x */ "BPL rel",   "ORA ind,Y", "---",   "---", "---",       "ORA zpg,X", "ASL zpg,X", "---", "CLC impl", "ORA abs,Y", "---",      "---", "---",       "ORA abs,X", "ASL abs,X", "---",
/* 2x */ "JSR abs",   "AND X,ind", "---",   "---", "BIT zpg",   "AND zpg",   "ROL zpg",   "---", "PLP impl", "AND #",     "ROL A",    "---", "BIT abs",   "AND abs",   "ROL abs",   "---",
/* 3x */ "BMI rel",   "AND ind,Y", "---",   "---", "---",       "AND zpg,X", "ROL zpg,X", "---", "SEC impl", "AND abs,Y", "---",      "---", "---",       "AND abs,X", "ROL abs,X", "---",
/* 4x */ "RTI impl",  "EOR X,ind", "---",   "---", "---",       "EOR zpg",   "LSR zpg",   "---", "PHA impl", "EOR #",     "LSR A",    "---", "JMP abs",   "EOR abs",   "LSR abs",   "---",
/* 5x */ "BVC rel",   "EOR ind,Y", "---",   "---", "---",       "EOR zpg,X", "LSR zpg,X", "---", "CLI impl", "EOR abs,Y", "---",      "---", "---",       "EOR abs,X", "LSR abs,X", "---",
/* 6x */ "RTS impl",  "ADC X,ind", "---",   "---", "---",       "ADC zpg",   "ROR zpg",   "---", "PLA impl", "ADC #",     "ROR A",    "---", "JMP ind",   "ADC abs",   "ROR abs",   "---",
/* 7x */ "BVS rel",   "ADC ind,Y", "---",   "---", "---",       "ADC zpg,X", "ROR zpg,X", "---", "SEI impl", "ADC abs,Y", "---",      "---", "---",       "ADC abs,X", "ROR abs,X", "---",
/* 8x */ "---",       "STA X,ind", "---",   "---", "STY zpg",   "STA zpg",   "STX zpg",   "---", "DEY impl", "---",       "TXA impl", "---", "STY abs",   "STA abs",   "STX abs",   "---",
/* 9x */ "BCC rel",   "STA ind,Y", "---",   "---", "STY zpg,X", "STA zpg,X", "STX zpg,Y", "---", "TYA impl", "STA abs,Y", "TXS impl", "---", "---",       "STA abs,X", "---",       "---",
/* Ax */ "LDY #",     "LDA X,ind", "LDX #", "---", "LDY zpg",   "LDA zpg",   "LDX zpg",   "---", "TAY impl", "LDA #",     "TAX impl", "---", "LDY abs",   "LDA abs",   "LDX abs",   "---",
/* Bx */ "BCS rel",   "LDA ind,Y", "---",   "---", "LDY zpg,X", "LDA zpg,X", "LDX zpg,Y", "---", "CLV impl", "LDA abs,Y", "TSX impl", "---", "LDY abs,X", "LDA abs,X", "LDX abs,Y", "---",
/* Cx */ "CPY #",     "CMP X,ind", "---",   "---", "CPY zpg",   "CMP zpg",   "DEC zpg",   "---", "INY impl", "CMP #",     "DEX impl", "---", "CPY abs",   "CMP abs",   "DEC abs",   "---",
/* Dx */ "BNE rel",   "CMP ind,Y", "---",   "---", "---",       "CMP zpg,X", "DEC zpg,X", "---", "CLD impl", "CMP abs,Y", "---",      "---", "---",       "CMP abs,X", "DEC abs,X", "---",
/* Ex */ "CPX #",     "SBC X,ind", "---",   "---", "CPX zpg",   "SBC zpg",   "INC zpg",   "---", "INX impl", "SBC #",     "NOP impl", "---", "CPX abs",   "SBC abs",   "INC abs",   "---",
/* Fx */ "BEQ rel",   "SBC ind,Y", "---",   "---", "---",       "SBC zpg,X", "INC zpg,X", "---", "SED impl", "SBC abs,Y", "---",      "---", "---",       "SBC abs,X", "INC abs,X", "---",
];

// Number of bytes that need to be read for opcodes of each addressing mode,
// including the opcode itself
const bytesForOpcode = opcodes.map(
  opcode => ({
      "abs":   3,
      "abs,X": 3,
      "abs,Y": 3,
      "ind":   3,
      "zpg":   2,
      "zpg,X": 2,
      "zpg,Y": 2,
      "rel":   2,
      "X,ind": 2,
      "ind,Y": 2,
      "#":     2,
      "A":     1,
      "impl":  1,
      "":      1
    })[opcode.substring(4)]
);

function uint8ToNum(b) {
  return b < 0x80 ? b : -(256 - b);
}

function disasm(cpuRead, addr, to) {

  const lines = [];

  while (addr < to) {

    // Display the address
    let line = `${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.$xxxx)(addr)}: `;

    // Display the instruction's raw bytes, however many there might be
    const b0 = cpuRead((addr + 0) & 0xffff);
    const b1 = cpuRead((addr + 1) & 0xffff);
    const b2 = cpuRead((addr + 2) & 0xffff);

    const length = bytesForOpcode[b0];

    line += (               (0,_debug__WEBPACK_IMPORTED_MODULE_0__.xx)(b0)       ) + " ";
    line += ((length > 1) ? (0,_debug__WEBPACK_IMPORTED_MODULE_0__.xx)(b1) : "  ") + " ";
    line += ((length > 2) ? (0,_debug__WEBPACK_IMPORTED_MODULE_0__.xx)(b2) : "  ") + " ";
    line += "  ";

    // Display the opcode
    const op   = opcodes[b0].substring(0, 3);
    const mode = opcodes[b0].substring(4);
    line += op;

    // Display the parameters
    const table = {
      "A":     () => ``,
      "impl":  () => ``,
      "zpg":   () => ` ${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.$xx)(b1)}`,
      "zpg,X": () => ` ${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.$xx)(b1)},X`,
      "zpg,Y": () => ` ${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.$xx)(b1)},Y`,
      "abs":   () => ` ${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.$xx)(b2, 2)}${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.xx)(b1, 2)}`,
      "abs,X": () => ` ${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.$xx)(b2, 2)}${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.xx)(b1, 2)},X`,
      "abs,Y": () => ` ${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.$xx)(b2, 2)}${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.xx)(b1, 2)},Y`,
      "ind":   () => ` (${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.$xx)(b2, 2)}${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.xx)(b1, 2)})`,
      "X,ind": () => ` (${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.$xx)(b1)},X)`,
      "ind,Y": () => ` (${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.$xx)(b1, 2)}),Y`,
      "#":     () => ` #${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.$xx)(b1, 2)}`,
      "rel":   () => ` ${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.$xxxx)(addr + uint8ToNum(b1) + 2)}`,
      "":      () => ``,
    };

    line += table[mode]();
    addr += length;

    lines.push(line);
  }

  return lines.join("\n");
}


/***/ }),

/***/ "./src/tools/loadPrg.js":
/*!******************************!*\
  !*** ./src/tools/loadPrg.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loadPrg: () => (/* binding */ loadPrg)
/* harmony export */ });
/* harmony import */ var _tools_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tools/parser */ "./src/tools/parser.js");
/*
   A tool for injecting PRG files (C64 programs) into memory.

   The file format is super-simple: it's just the load address (in lowbyte/
   highbyte form) followed by an arbitrary sequence of bytes to store there.
   But there's a little more manipulation required than just blasting them in.
   (TODO: ...that's based on guesswork, looking at obvious pointers in the
   memory map and seeing what works. I should stufy the Kernal's file loader at
   some point to see if there's anything else.)
*/



const parsePrg = (0,_tools_parser__WEBPACK_IMPORTED_MODULE_0__.makeParser)((_) => ({
  org:     _.word_le(),
  program: _.remainder(),
}));

function loadPrg(c64, bytes) {
  const {wires: {cpuRead, cpuWrite}} = c64;

  const { org, program } = parsePrg(bytes);

  if (org !== 0x0801) {
    console.warn("Expecting PRGs to be loaded to $0801");
  }

  // Make a record of the current memory map configuation
  const dir  = cpuRead(0);
  const port = cpuRead(1);

  // Set the memory map to all-RAM. In other words, page out the MMIO, in case
  // the PRG's really big.
  cpuWrite(0, 0b111);
  cpuWrite(1, 0);

  // Perform the main write
  for (let i = 0; i < program.length; i++) cpuWrite(org + i, program[i]);

  // Having loaded the program into memory, we need to move the pointers to
  // Basic's variable regions to right after the program. Normally the Kernal's
  // loader would do this (and maybe we should be relying on that to load in
  // PRGs instead). If it's not done, Basic programs won't work, as the space
  // they'll allocate for the variables will overwrite the start of the program
  // itself.
  const endOfBasicPrg = 0x0801 + program.length;

  const hi = endOfBasicPrg >> 8;
  const lo = endOfBasicPrg & 0xff;

  cpuWrite(0x2d, lo); // pointer to beginning of variable area, low-byte
  cpuWrite(0x2e, hi); // pointer to beginning of variable area, high-byte

  cpuWrite(0x2f, lo); // pointer to beginning of array variable area, low-byte
  cpuWrite(0x30, hi); // pointer to beginning of array variable area, high-byte

  cpuWrite(0x31, lo); // pointer to end of array variable area, low-byte
  cpuWrite(0x32, hi); // pointer to end of array variable area, high-byte

  // Restore the CPU port, to return the memory mapping to what it was
  cpuWrite(0, dir);
  cpuWrite(1, port);
}


/***/ }),

/***/ "./src/tools/palettes.js":
/*!*******************************!*\
  !*** ./src/tools/palettes.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   colorColorPalettes: () => (/* binding */ colorColorPalettes),
/* harmony export */   grayscalePalette: () => (/* binding */ grayscalePalette),
/* harmony export */   highlightPalettes: () => (/* binding */ highlightPalettes),
/* harmony export */   systemPalette: () => (/* binding */ systemPalette)
/* harmony export */ });
const systemPalette = [
  0x000000,  // black
  0xffffff,  // white
  0x994444,  // red
  0x88cccc,  // cyan
  0x9955bb,  // purple
  0x77bb44,  // green
  0x4433aa,  // blue
  0xdddd77,  // yellow
  0x996622,  // orange
  0x664400,  // brown
  0xcc8888,  // pink
  0x666666,  // dark gray
  0x888888,  // mid gray
  0xbbee99,  // light green
  0x8877dd,  // light blue
  0xbbbbbb,  // light gray
];

// A reassignment of luminance values to the default palette for when it's
// reduced to grayscale. Many colors would map to the same values under the
// usual HSL formula; this distributes them enough that they're all
// distinguishable against each other.
const adjustedL = [
    0,       // black
  100,       // white
   40,       // red
   64,       // cyan
   46,       // purple
   52,       // green
   34,       // blue
   82,       // yellow
   22,       // orange
   16,       // brown
   70,       // pink
   28,       // dark gray
   58,       // mid gray
   94,       // light green
   76,       // light blue
   88,       // light gray
];

const grayscalePalette = systemPalette.map(
  (rgb, index) => {

    const r = (rgb & 0xff0000) >> 16;
    const g = (rgb & 0x00ff00) >>  8;
    const b = (rgb & 0x0000ff) >>  0;

    // Convert to HSL
    const [h, s, l] = rgbToHsl(r, g, b);

    // ...and then back to RGB, with no saturation, and scaled, nudged luminance
    {
      const [r, g, b] = hslToRgb(
        h,
        0,
        lerp(adjustedL[index], 0, 100, 20, 60)
      );

      return rgbToInt(r, g, b);
    }
  }
);


// highlightPalettes: an array of 8 palettes.
// highlightPalettes[0][colorCode] would give a red-ish highlight for colorCode.
// highlightPalettes[1][colorCode] would be more orange, etc.
const highlightPalettes = [];

for (let i = 0; i < 8; i++) {

  highlightPalettes[i] = new Array(16);

  for (let cc = 0; cc < 16; cc++) {

    const [r, g, b] = hslToRgb(
      // Make each index 45° around the color wheel
      i * (360 / 8),
      // ...with a fixed saturation that's not excessive
      50,
      // ...and a luminance that's proportional to the (nudged) original,
      // scaled to avoid it being over-bright, or too dark to clearly see the
      // hue.
      lerp(adjustedL[cc], 0, 100, 45, 70)
    );

    highlightPalettes[i][cc] = rgbToInt(r, g, b);
  }
}


// colorColorPalettes: an array of 16 palettes.
// colorColorPalettes[2][3] would give color code 2 (red), with a hint of the
// (nudged) grayscale brightness of color code 3 (cyan)
const colorColorPalettes = [];

for (let i = 0; i < 16; i++) {

  colorColorPalettes[i] = new Array(16);
  const [h, s, l] = rgbToHsl(...intToRgb(systemPalette[i]));

  for (let j = 0; j < 16; j++) {

    const modulatedL = lerp(
      l + (((adjustedL[j] - 50) / 100) * 10),
      -5,
      105,
      0,
      100
    );

    const [r, g, b] = hslToRgb(h, s, modulatedL);

    colorColorPalettes[i][j] = rgbToInt(r, g, b);
  }
}


function lerp(val, srcMin, srcMax, destMin, destMax) {
  return destMin + (((val - srcMin) / (srcMax - srcMin)) * (destMax - destMin));
}

function rgbToHsl(r,g,b) {
  // Source: https://css-tricks.com/converting-color-spaces-in-javascript/

  // Make r, g, and b fractions of 1
  r /= 255;
  g /= 255;
  b /= 255;

  // Find greatest and smallest channel values
  let cmin = Math.min(r,g,b);
  let cmax = Math.max(r,g,b);
  let delta = cmax - cmin;
  let h = 0;
  let s = 0;
  let l = 0;

  // Calculate hue
  // No difference
  if      (delta === 0) h = 0;
  else if (cmax === r)  h = ((g - b) / delta) % 6;
  else if (cmax === g)  h =  (b - r) / delta + 2;
  else                  h =  (r - g) / delta + 4;

  h = Math.round(h * 60);
    
  // Make negative hues positive behind 360°
  if (h < 0) h += 360;

   // Calculate lightness
  l = (cmax + cmin) / 2;

  // Calculate saturation
  s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));
    
  // Multiply l and s by 100
  s = +(s * 100).toFixed(1);
  l = +(l * 100).toFixed(1);

  return [h, s, l];
}

function hslToRgb(h,s,l) {
  // Source: https://css-tricks.com/converting-color-spaces-in-javascript/

  // Must be fractions of 1
  s /= 100;
  l /= 100;

  let c = (1 - Math.abs(2 * l - 1)) * s;
  let x = c * (1 - Math.abs((h / 60) % 2 - 1));
  let m = l - c/2;
  let r = 0;
  let g = 0;
  let b = 0;

  if      (  0 <= h && h < 60 ) { r = c; g = x; b = 0; }
  else if ( 60 <= h && h < 120) { r = x; g = c; b = 0; }
  else if (120 <= h && h < 180) { r = 0; g = c; b = x; }
  else if (180 <= h && h < 240) { r = 0; g = x; b = c; }
  else if (240 <= h && h < 300) { r = x; g = 0; b = c; }
  else if (300 <= h && h < 360) { r = c; g = 0; b = x; }
  
  r = Math.round((r + m) * 255);
  g = Math.round((g + m) * 255);
  b = Math.round((b + m) * 255);

  return [r, g, b];
}

function intToRgb(i) {
  return [
    (i >> 16) & 0xff,
    (i >>  8) & 0xff,
    (i >>  0) & 0xff,
  ];
}

function rgbToInt(r, g, b) {
  return (
    (Math.floor(r) << 16) |
    (Math.floor(g) <<  8) |
    (Math.floor(b) <<  0)
  );
}


/***/ }),

/***/ "./src/tools/parser.js":
/*!*****************************!*\
  !*** ./src/tools/parser.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   makeParser: () => (/* binding */ makeParser)
/* harmony export */ });
/*
  makeParser turns schema functions into parsers that can turn byte arrays to
  structures.

  ...meaning that you can create a parser with:

            const myParser = makeParser((_) => ({
              desc:    _.string(32),
              version: _.byte(),
              _:       _.skip(2),
              start:   _.word_le(),
              length:  _.long_le(),
            };

  ...then call it with:

            const myStruct = myParser([.., .., ..]);

  ...to get:

            {
              desc:    "...",
              version: 4,
              start:   12,
              length:  1048576,
            }

  ...or an exception if data overflows.

  Note that you'll have to be explicit about the byte ordering of words
  (16-bit) and longs (32-bit): use suffix _be for big endian and _le for
  little-endian.
*/

function makeParser(fn) {
  return (bytes) => {

    let offset = 0;
    function nextByte() {
      if (offset >= bytes.length) {
        throw new Error("Reading past the end of data");
      }
      return bytes[offset++];
    } 

    function remainder() {
      const ret = bytes.slice(offset);
      offset = bytes.length - 1;
      return ret;
    }

    return fn({
      byte:      () => byte(nextByte),
      word_be:   () => word_be(nextByte),
      word_le:   () => word_le(nextByte),
      long_be:   () => long_be(nextByte),
      long_le:   () => long_le(nextByte),
      skip:      (length) => skip(nextByte, length),
      string:    (length) => string(nextByte, length),
      remainder,
    });
  };
}

function byte(nextByte) {
  return nextByte();
}

function word_le(nextByte) {
  return nextByte() | (nextByte() << 8);
}

function word_be(nextByte) {
  return (nextByte() << 8) | nextByte();
}

function long_le(nextByte) {
  return (
    (nextByte() << 0)  ||
    (nextByte() << 8)  ||
    (nextByte() << 16) ||
    (nextByte() << 24)
  );
}

function long_be(nextByte) {
  return (
    (nextByte() << 24)  ||
    (nextByte() << 16)  ||
    (nextByte() << 8)   ||
    (nextByte() << 0)
  );
}

function skip(nextByte, length) {
  for (let i = 0; i < length; i++) nextByte();
}

function string(nextByte, length) {
  let ret = "";
  let ended = false;

  for (let offset = 0; offset < length; offset++) {
    const byte = nextByte();
    if (ended) continue;
    if (!byte) ended = true;
    else ret += String.fromCharCode(byte);
  }

  return ret.trim();
}


/***/ }),

/***/ "./src/tools/romLocations.js":
/*!***********************************!*\
  !*** ./src/tools/romLocations.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AWAIT_KEYBOARD_PC: () => (/* binding */ AWAIT_KEYBOARD_PC),
/* harmony export */   CLEAR_SCREEN_PC: () => (/* binding */ CLEAR_SCREEN_PC),
/* harmony export */   CURSOR_COL_ADDR: () => (/* binding */ CURSOR_COL_ADDR),
/* harmony export */   KEYBOARD_BUFFER_ADDR: () => (/* binding */ KEYBOARD_BUFFER_ADDR),
/* harmony export */   KEYBOARD_BUFFER_INDEX: () => (/* binding */ KEYBOARD_BUFFER_INDEX),
/* harmony export */   KEYBOARD_BUFFER_LENGTH: () => (/* binding */ KEYBOARD_BUFFER_LENGTH),
/* harmony export */   READY_PC: () => (/* binding */ READY_PC)
/* harmony export */ });
// Addresses of notable routines and buffers in Basic or Kernal. 
// Handy for use as breakpoints when controlling the runloop from a script.

// Warm start (prints the READY. prompt)
const READY_PC = 0xa474;

// A loop that waits for a key to be typed
const AWAIT_KEYBOARD_PC = 0xe5cd;

// Clear screen
const CLEAR_SCREEN_PC = 0xe544;


// Below are address that aren't ROM locations, but magic numbers hardcoded
// into the ROM routines.

// Cursor color code
const CURSOR_COL_ADDR = 0x0286;

// The keyboard buffer
const KEYBOARD_BUFFER_ADDR   = 0x0277; // 'keyd'
const KEYBOARD_BUFFER_INDEX  = 0x00c6; // 'ndx'
const KEYBOARD_BUFFER_LENGTH = 10;


/***/ }),

/***/ "./src/tools/serializerSupport.js":
/*!****************************************!*\
  !*** ./src/tools/serializerSupport.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addToSerializerRegistry: () => (/* binding */ addToSerializerRegistry),
/* harmony export */   functionToReference: () => (/* binding */ functionToReference),
/* harmony export */   referenceToFunction: () => (/* binding */ referenceToFunction)
/* harmony export */ });
const registry = {};

function addToSerializerRegistry(obj) {
  for (let fnName in obj) {

    if (registry[fnName] !== undefined) {
      throw new Error(`Multiple functions named ${name} added to serializer registry`);
    }

    registry[fnName] = obj[fnName];
  }
}

function functionToReference(fn) {
  if (fn === null) return null;

  // This could alternatively be done with a Map where the keys are functions,
  // but it's such an infrequently-called helper, why spend the extra memory?
  for (let i in registry) {
    if (registry[i] === fn) return i;
  }

  console.error("Serializer registry has no entry for function:", fn);
  throw new Error(`Serializer registry has no entry for function`);
}

function referenceToFunction(name) {
  if (name === null) return null;

  if (registry[name] === undefined) {
    throw new Error(`Serializer registry has no entry for a function named ${name}`);
  }

  return registry[name];
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!******************************!*\
  !*** ./src/entry/web-dev.js ***!
  \******************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _host_video_canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../host/video-canvas */ "./src/host/video-canvas.js");
/* harmony import */ var _host_audio_OscillatorNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../host/audio-OscillatorNode */ "./src/host/audio-OscillatorNode.js");
/* harmony import */ var _host_joystick_KeyboardEvent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../host/joystick-KeyboardEvent */ "./src/host/joystick-KeyboardEvent.js");
/* harmony import */ var _host_keyboard_KeyboardEvent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../host/keyboard-KeyboardEvent */ "./src/host/keyboard-KeyboardEvent.js");
/* harmony import */ var _target_wires__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../target/wires */ "./src/target/wires.js");
/* harmony import */ var _target_ram__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../target/ram */ "./src/target/ram.js");
/* harmony import */ var _target_vic__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../target/vic */ "./src/target/vic.js");
/* harmony import */ var _target_sid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../target/sid */ "./src/target/sid.js");
/* harmony import */ var _target_cias__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../target/cias */ "./src/target/cias.js");
/* harmony import */ var _target_cpu__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../target/cpu */ "./src/target/cpu.js");
/* harmony import */ var _target_tape__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../target/tape */ "./src/target/tape.js");
/* harmony import */ var _target_rom_basic__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../target/rom/basic */ "./src/target/rom/basic.js");
/* harmony import */ var _target_rom_skipRamTest__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../target/rom/skipRamTest */ "./src/target/rom/skipRamTest.js");
/* harmony import */ var _target_rom_character__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../target/rom/character */ "./src/target/rom/character.js");
/* harmony import */ var _target_bringup__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../target/bringup */ "./src/target/bringup.js");
/* harmony import */ var _monitor__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../monitor */ "./src/monitor.js");
/* harmony import */ var _host_webFrontEnd__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../host/webFrontEnd */ "./src/host/webFrontEnd/index.js");
/* harmony import */ var _host_dragAndDrop__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../host/dragAndDrop */ "./src/host/dragAndDrop.js");
// Host interfaces





// Target devices








// ROMs




// Bringup


// Everything else





const c64 = (0,_target_bringup__WEBPACK_IMPORTED_MODULE_14__.bringup)({
  host:   { audio: _host_audio_OscillatorNode__WEBPACK_IMPORTED_MODULE_1__.attach, video: _host_video_canvas__WEBPACK_IMPORTED_MODULE_0__.attach, keyboard: _host_keyboard_KeyboardEvent__WEBPACK_IMPORTED_MODULE_3__.attach, joystick: _host_joystick_KeyboardEvent__WEBPACK_IMPORTED_MODULE_2__.attach },
  target: { wires: _target_wires__WEBPACK_IMPORTED_MODULE_4__.attach, ram: _target_ram__WEBPACK_IMPORTED_MODULE_5__.attach, vic: _target_vic__WEBPACK_IMPORTED_MODULE_6__.attach, sid: _target_sid__WEBPACK_IMPORTED_MODULE_7__.attach, cpu: _target_cpu__WEBPACK_IMPORTED_MODULE_9__.attach, cias: _target_cias__WEBPACK_IMPORTED_MODULE_8__.attach, tape: _target_tape__WEBPACK_IMPORTED_MODULE_10__.attach, basic: _target_rom_basic__WEBPACK_IMPORTED_MODULE_11__["default"], kernal: _target_rom_skipRamTest__WEBPACK_IMPORTED_MODULE_12__["default"], character: _target_rom_character__WEBPACK_IMPORTED_MODULE_13__["default"] },
  attachments: [
    _monitor__WEBPACK_IMPORTED_MODULE_15__.attach,
    _host_dragAndDrop__WEBPACK_IMPORTED_MODULE_17__.attach,
    _host_webFrontEnd__WEBPACK_IMPORTED_MODULE_16__.attach,
  ],
});

c64.runloop.run();


// To run a test program on load, uncomment the below:
/*
import { ingest } from "../host/ingest";
import prg from "../tests/tod-prg.js";

ingest(c64, ".prg", prg);
*/

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,